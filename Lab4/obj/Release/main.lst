                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Wed Nov 09 17:52:42 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _handleInput
                             14 	.globl _ShowMenu
                             15 	.globl __sdcc_external_startup
                             16 	.globl _P5_7
                             17 	.globl _P5_6
                             18 	.globl _P5_5
                             19 	.globl _P5_4
                             20 	.globl _P5_3
                             21 	.globl _P5_2
                             22 	.globl _P5_1
                             23 	.globl _P5_0
                             24 	.globl _P4_7
                             25 	.globl _P4_6
                             26 	.globl _P4_5
                             27 	.globl _P4_4
                             28 	.globl _P4_3
                             29 	.globl _P4_2
                             30 	.globl _P4_1
                             31 	.globl _P4_0
                             32 	.globl _PX0L
                             33 	.globl _PT0L
                             34 	.globl _PX1L
                             35 	.globl _PT1L
                             36 	.globl _PLS
                             37 	.globl _PT2L
                             38 	.globl _PPCL
                             39 	.globl _EC
                             40 	.globl _CCF0
                             41 	.globl _CCF1
                             42 	.globl _CCF2
                             43 	.globl _CCF3
                             44 	.globl _CCF4
                             45 	.globl _CR
                             46 	.globl _CF
                             47 	.globl _TF2
                             48 	.globl _EXF2
                             49 	.globl _RCLK
                             50 	.globl _TCLK
                             51 	.globl _EXEN2
                             52 	.globl _TR2
                             53 	.globl _C_T2
                             54 	.globl _CP_RL2
                             55 	.globl _T2CON_7
                             56 	.globl _T2CON_6
                             57 	.globl _T2CON_5
                             58 	.globl _T2CON_4
                             59 	.globl _T2CON_3
                             60 	.globl _T2CON_2
                             61 	.globl _T2CON_1
                             62 	.globl _T2CON_0
                             63 	.globl _PT2
                             64 	.globl _ET2
                             65 	.globl _CY
                             66 	.globl _AC
                             67 	.globl _F0
                             68 	.globl _RS1
                             69 	.globl _RS0
                             70 	.globl _OV
                             71 	.globl _F1
                             72 	.globl _P
                             73 	.globl _PS
                             74 	.globl _PT1
                             75 	.globl _PX1
                             76 	.globl _PT0
                             77 	.globl _PX0
                             78 	.globl _RD
                             79 	.globl _WR
                             80 	.globl _T1
                             81 	.globl _T0
                             82 	.globl _INT1
                             83 	.globl _INT0
                             84 	.globl _TXD
                             85 	.globl _RXD
                             86 	.globl _P3_7
                             87 	.globl _P3_6
                             88 	.globl _P3_5
                             89 	.globl _P3_4
                             90 	.globl _P3_3
                             91 	.globl _P3_2
                             92 	.globl _P3_1
                             93 	.globl _P3_0
                             94 	.globl _EA
                             95 	.globl _ES
                             96 	.globl _ET1
                             97 	.globl _EX1
                             98 	.globl _ET0
                             99 	.globl _EX0
                            100 	.globl _P2_7
                            101 	.globl _P2_6
                            102 	.globl _P2_5
                            103 	.globl _P2_4
                            104 	.globl _P2_3
                            105 	.globl _P2_2
                            106 	.globl _P2_1
                            107 	.globl _P2_0
                            108 	.globl _SM0
                            109 	.globl _SM1
                            110 	.globl _SM2
                            111 	.globl _REN
                            112 	.globl _TB8
                            113 	.globl _RB8
                            114 	.globl _TI
                            115 	.globl _RI
                            116 	.globl _P1_7
                            117 	.globl _P1_6
                            118 	.globl _P1_5
                            119 	.globl _P1_4
                            120 	.globl _P1_3
                            121 	.globl _P1_2
                            122 	.globl _P1_1
                            123 	.globl _P1_0
                            124 	.globl _TF1
                            125 	.globl _TR1
                            126 	.globl _TF0
                            127 	.globl _TR0
                            128 	.globl _IE1
                            129 	.globl _IT1
                            130 	.globl _IE0
                            131 	.globl _IT0
                            132 	.globl _P0_7
                            133 	.globl _P0_6
                            134 	.globl _P0_5
                            135 	.globl _P0_4
                            136 	.globl _P0_3
                            137 	.globl _P0_2
                            138 	.globl _P0_1
                            139 	.globl _P0_0
                            140 	.globl _EECON
                            141 	.globl _KBF
                            142 	.globl _KBE
                            143 	.globl _KBLS
                            144 	.globl _BRL
                            145 	.globl _BDRCON
                            146 	.globl _T2MOD
                            147 	.globl _SPDAT
                            148 	.globl _SPSTA
                            149 	.globl _SPCON
                            150 	.globl _SADEN
                            151 	.globl _SADDR
                            152 	.globl _WDTPRG
                            153 	.globl _WDTRST
                            154 	.globl _P5
                            155 	.globl _P4
                            156 	.globl _IPH1
                            157 	.globl _IPL1
                            158 	.globl _IPH0
                            159 	.globl _IPL0
                            160 	.globl _IEN1
                            161 	.globl _IEN0
                            162 	.globl _CMOD
                            163 	.globl _CL
                            164 	.globl _CH
                            165 	.globl _CCON
                            166 	.globl _CCAPM4
                            167 	.globl _CCAPM3
                            168 	.globl _CCAPM2
                            169 	.globl _CCAPM1
                            170 	.globl _CCAPM0
                            171 	.globl _CCAP4L
                            172 	.globl _CCAP3L
                            173 	.globl _CCAP2L
                            174 	.globl _CCAP1L
                            175 	.globl _CCAP0L
                            176 	.globl _CCAP4H
                            177 	.globl _CCAP3H
                            178 	.globl _CCAP2H
                            179 	.globl _CCAP1H
                            180 	.globl _CCAP0H
                            181 	.globl _CKCKON1
                            182 	.globl _CKCKON0
                            183 	.globl _CKRL
                            184 	.globl _AUXR1
                            185 	.globl _AUXR
                            186 	.globl _TH2
                            187 	.globl _TL2
                            188 	.globl _RCAP2H
                            189 	.globl _RCAP2L
                            190 	.globl _T2CON
                            191 	.globl _B
                            192 	.globl _ACC
                            193 	.globl _PSW
                            194 	.globl _IP
                            195 	.globl _P3
                            196 	.globl _IE
                            197 	.globl _P2
                            198 	.globl _SBUF
                            199 	.globl _SCON
                            200 	.globl _P1
                            201 	.globl _TH1
                            202 	.globl _TH0
                            203 	.globl _TL1
                            204 	.globl _TL0
                            205 	.globl _TMOD
                            206 	.globl _TCON
                            207 	.globl _PCON
                            208 	.globl _DPH
                            209 	.globl _DPL
                            210 	.globl _SP
                            211 	.globl _P0
                            212 ;--------------------------------------------------------
                            213 ; special function registers
                            214 ;--------------------------------------------------------
                            215 	.area RSEG    (DATA)
                    0080    216 _P0	=	0x0080
                    0081    217 _SP	=	0x0081
                    0082    218 _DPL	=	0x0082
                    0083    219 _DPH	=	0x0083
                    0087    220 _PCON	=	0x0087
                    0088    221 _TCON	=	0x0088
                    0089    222 _TMOD	=	0x0089
                    008A    223 _TL0	=	0x008a
                    008B    224 _TL1	=	0x008b
                    008C    225 _TH0	=	0x008c
                    008D    226 _TH1	=	0x008d
                    0090    227 _P1	=	0x0090
                    0098    228 _SCON	=	0x0098
                    0099    229 _SBUF	=	0x0099
                    00A0    230 _P2	=	0x00a0
                    00A8    231 _IE	=	0x00a8
                    00B0    232 _P3	=	0x00b0
                    00B8    233 _IP	=	0x00b8
                    00D0    234 _PSW	=	0x00d0
                    00E0    235 _ACC	=	0x00e0
                    00F0    236 _B	=	0x00f0
                    00C8    237 _T2CON	=	0x00c8
                    00CA    238 _RCAP2L	=	0x00ca
                    00CB    239 _RCAP2H	=	0x00cb
                    00CC    240 _TL2	=	0x00cc
                    00CD    241 _TH2	=	0x00cd
                    008E    242 _AUXR	=	0x008e
                    00A2    243 _AUXR1	=	0x00a2
                    0097    244 _CKRL	=	0x0097
                    008F    245 _CKCKON0	=	0x008f
                    008F    246 _CKCKON1	=	0x008f
                    00FA    247 _CCAP0H	=	0x00fa
                    00FB    248 _CCAP1H	=	0x00fb
                    00FC    249 _CCAP2H	=	0x00fc
                    00FD    250 _CCAP3H	=	0x00fd
                    00FE    251 _CCAP4H	=	0x00fe
                    00EA    252 _CCAP0L	=	0x00ea
                    00EB    253 _CCAP1L	=	0x00eb
                    00EC    254 _CCAP2L	=	0x00ec
                    00ED    255 _CCAP3L	=	0x00ed
                    00EE    256 _CCAP4L	=	0x00ee
                    00DA    257 _CCAPM0	=	0x00da
                    00DB    258 _CCAPM1	=	0x00db
                    00DC    259 _CCAPM2	=	0x00dc
                    00DD    260 _CCAPM3	=	0x00dd
                    00DE    261 _CCAPM4	=	0x00de
                    00D8    262 _CCON	=	0x00d8
                    00F9    263 _CH	=	0x00f9
                    00E9    264 _CL	=	0x00e9
                    00D9    265 _CMOD	=	0x00d9
                    00A8    266 _IEN0	=	0x00a8
                    00B1    267 _IEN1	=	0x00b1
                    00B8    268 _IPL0	=	0x00b8
                    00B7    269 _IPH0	=	0x00b7
                    00B2    270 _IPL1	=	0x00b2
                    00B3    271 _IPH1	=	0x00b3
                    00C0    272 _P4	=	0x00c0
                    00D8    273 _P5	=	0x00d8
                    00A6    274 _WDTRST	=	0x00a6
                    00A7    275 _WDTPRG	=	0x00a7
                    00A9    276 _SADDR	=	0x00a9
                    00B9    277 _SADEN	=	0x00b9
                    00C3    278 _SPCON	=	0x00c3
                    00C4    279 _SPSTA	=	0x00c4
                    00C5    280 _SPDAT	=	0x00c5
                    00C9    281 _T2MOD	=	0x00c9
                    009B    282 _BDRCON	=	0x009b
                    009A    283 _BRL	=	0x009a
                    009C    284 _KBLS	=	0x009c
                    009D    285 _KBE	=	0x009d
                    009E    286 _KBF	=	0x009e
                    00D2    287 _EECON	=	0x00d2
                            288 ;--------------------------------------------------------
                            289 ; special function bits
                            290 ;--------------------------------------------------------
                            291 	.area RSEG    (DATA)
                    0080    292 _P0_0	=	0x0080
                    0081    293 _P0_1	=	0x0081
                    0082    294 _P0_2	=	0x0082
                    0083    295 _P0_3	=	0x0083
                    0084    296 _P0_4	=	0x0084
                    0085    297 _P0_5	=	0x0085
                    0086    298 _P0_6	=	0x0086
                    0087    299 _P0_7	=	0x0087
                    0088    300 _IT0	=	0x0088
                    0089    301 _IE0	=	0x0089
                    008A    302 _IT1	=	0x008a
                    008B    303 _IE1	=	0x008b
                    008C    304 _TR0	=	0x008c
                    008D    305 _TF0	=	0x008d
                    008E    306 _TR1	=	0x008e
                    008F    307 _TF1	=	0x008f
                    0090    308 _P1_0	=	0x0090
                    0091    309 _P1_1	=	0x0091
                    0092    310 _P1_2	=	0x0092
                    0093    311 _P1_3	=	0x0093
                    0094    312 _P1_4	=	0x0094
                    0095    313 _P1_5	=	0x0095
                    0096    314 _P1_6	=	0x0096
                    0097    315 _P1_7	=	0x0097
                    0098    316 _RI	=	0x0098
                    0099    317 _TI	=	0x0099
                    009A    318 _RB8	=	0x009a
                    009B    319 _TB8	=	0x009b
                    009C    320 _REN	=	0x009c
                    009D    321 _SM2	=	0x009d
                    009E    322 _SM1	=	0x009e
                    009F    323 _SM0	=	0x009f
                    00A0    324 _P2_0	=	0x00a0
                    00A1    325 _P2_1	=	0x00a1
                    00A2    326 _P2_2	=	0x00a2
                    00A3    327 _P2_3	=	0x00a3
                    00A4    328 _P2_4	=	0x00a4
                    00A5    329 _P2_5	=	0x00a5
                    00A6    330 _P2_6	=	0x00a6
                    00A7    331 _P2_7	=	0x00a7
                    00A8    332 _EX0	=	0x00a8
                    00A9    333 _ET0	=	0x00a9
                    00AA    334 _EX1	=	0x00aa
                    00AB    335 _ET1	=	0x00ab
                    00AC    336 _ES	=	0x00ac
                    00AF    337 _EA	=	0x00af
                    00B0    338 _P3_0	=	0x00b0
                    00B1    339 _P3_1	=	0x00b1
                    00B2    340 _P3_2	=	0x00b2
                    00B3    341 _P3_3	=	0x00b3
                    00B4    342 _P3_4	=	0x00b4
                    00B5    343 _P3_5	=	0x00b5
                    00B6    344 _P3_6	=	0x00b6
                    00B7    345 _P3_7	=	0x00b7
                    00B0    346 _RXD	=	0x00b0
                    00B1    347 _TXD	=	0x00b1
                    00B2    348 _INT0	=	0x00b2
                    00B3    349 _INT1	=	0x00b3
                    00B4    350 _T0	=	0x00b4
                    00B5    351 _T1	=	0x00b5
                    00B6    352 _WR	=	0x00b6
                    00B7    353 _RD	=	0x00b7
                    00B8    354 _PX0	=	0x00b8
                    00B9    355 _PT0	=	0x00b9
                    00BA    356 _PX1	=	0x00ba
                    00BB    357 _PT1	=	0x00bb
                    00BC    358 _PS	=	0x00bc
                    00D0    359 _P	=	0x00d0
                    00D1    360 _F1	=	0x00d1
                    00D2    361 _OV	=	0x00d2
                    00D3    362 _RS0	=	0x00d3
                    00D4    363 _RS1	=	0x00d4
                    00D5    364 _F0	=	0x00d5
                    00D6    365 _AC	=	0x00d6
                    00D7    366 _CY	=	0x00d7
                    00AD    367 _ET2	=	0x00ad
                    00BD    368 _PT2	=	0x00bd
                    00C8    369 _T2CON_0	=	0x00c8
                    00C9    370 _T2CON_1	=	0x00c9
                    00CA    371 _T2CON_2	=	0x00ca
                    00CB    372 _T2CON_3	=	0x00cb
                    00CC    373 _T2CON_4	=	0x00cc
                    00CD    374 _T2CON_5	=	0x00cd
                    00CE    375 _T2CON_6	=	0x00ce
                    00CF    376 _T2CON_7	=	0x00cf
                    00C8    377 _CP_RL2	=	0x00c8
                    00C9    378 _C_T2	=	0x00c9
                    00CA    379 _TR2	=	0x00ca
                    00CB    380 _EXEN2	=	0x00cb
                    00CC    381 _TCLK	=	0x00cc
                    00CD    382 _RCLK	=	0x00cd
                    00CE    383 _EXF2	=	0x00ce
                    00CF    384 _TF2	=	0x00cf
                    00DF    385 _CF	=	0x00df
                    00DE    386 _CR	=	0x00de
                    00DC    387 _CCF4	=	0x00dc
                    00DB    388 _CCF3	=	0x00db
                    00DA    389 _CCF2	=	0x00da
                    00D9    390 _CCF1	=	0x00d9
                    00D8    391 _CCF0	=	0x00d8
                    00AE    392 _EC	=	0x00ae
                    00BE    393 _PPCL	=	0x00be
                    00BD    394 _PT2L	=	0x00bd
                    00BC    395 _PLS	=	0x00bc
                    00BB    396 _PT1L	=	0x00bb
                    00BA    397 _PX1L	=	0x00ba
                    00B9    398 _PT0L	=	0x00b9
                    00B8    399 _PX0L	=	0x00b8
                    00C0    400 _P4_0	=	0x00c0
                    00C1    401 _P4_1	=	0x00c1
                    00C2    402 _P4_2	=	0x00c2
                    00C3    403 _P4_3	=	0x00c3
                    00C4    404 _P4_4	=	0x00c4
                    00C5    405 _P4_5	=	0x00c5
                    00C6    406 _P4_6	=	0x00c6
                    00C7    407 _P4_7	=	0x00c7
                    00D8    408 _P5_0	=	0x00d8
                    00D9    409 _P5_1	=	0x00d9
                    00DA    410 _P5_2	=	0x00da
                    00DB    411 _P5_3	=	0x00db
                    00DC    412 _P5_4	=	0x00dc
                    00DD    413 _P5_5	=	0x00dd
                    00DE    414 _P5_6	=	0x00de
                    00DF    415 _P5_7	=	0x00df
                            416 ;--------------------------------------------------------
                            417 ; overlayable register banks
                            418 ;--------------------------------------------------------
                            419 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     420 	.ds 8
                            421 ;--------------------------------------------------------
                            422 ; internal ram data
                            423 ;--------------------------------------------------------
                            424 	.area DSEG    (DATA)
                            425 ;--------------------------------------------------------
                            426 ; overlayable items in internal ram 
                            427 ;--------------------------------------------------------
                            428 	.area OSEG    (OVR,DATA)
                            429 ;--------------------------------------------------------
                            430 ; Stack segment in internal ram 
                            431 ;--------------------------------------------------------
                            432 	.area	SSEG	(DATA)
   0000                     433 __start__stack:
   0000                     434 	.ds	1
                            435 
                            436 ;--------------------------------------------------------
                            437 ; indirectly addressable internal ram data
                            438 ;--------------------------------------------------------
                            439 	.area ISEG    (DATA)
                            440 ;--------------------------------------------------------
                            441 ; bit data
                            442 ;--------------------------------------------------------
                            443 	.area BSEG    (BIT)
                            444 ;--------------------------------------------------------
                            445 ; paged external ram data
                            446 ;--------------------------------------------------------
                            447 	.area PSEG    (PAG,XDATA)
                            448 ;--------------------------------------------------------
                            449 ; external ram data
                            450 ;--------------------------------------------------------
                            451 	.area XSEG    (XDATA)
   0000                     452 _handleInput_c_1_1:
   0000                     453 	.ds 1
   0001                     454 _handleInput_row_1_1:
   0001                     455 	.ds 2
   0003                     456 _handleInput_col_1_1:
   0003                     457 	.ds 2
   0005                     458 _handleInput_str_1_1:
   0005                     459 	.ds 100
                            460 ;--------------------------------------------------------
                            461 ; external initialized ram data
                            462 ;--------------------------------------------------------
                            463 	.area XISEG   (XDATA)
                            464 	.area HOME    (CODE)
                            465 	.area GSINIT0 (CODE)
                            466 	.area GSINIT1 (CODE)
                            467 	.area GSINIT2 (CODE)
                            468 	.area GSINIT3 (CODE)
                            469 	.area GSINIT4 (CODE)
                            470 	.area GSINIT5 (CODE)
                            471 	.area GSINIT  (CODE)
                            472 	.area GSFINAL (CODE)
                            473 	.area CSEG    (CODE)
                            474 ;--------------------------------------------------------
                            475 ; interrupt vector 
                            476 ;--------------------------------------------------------
                            477 	.area HOME    (CODE)
   0000                     478 __interrupt_vect:
   0000 02s00r00            479 	ljmp	__sdcc_gsinit_startup
                            480 ;--------------------------------------------------------
                            481 ; global & static initialisations
                            482 ;--------------------------------------------------------
                            483 	.area HOME    (CODE)
                            484 	.area GSINIT  (CODE)
                            485 	.area GSFINAL (CODE)
                            486 	.area GSINIT  (CODE)
                            487 	.globl __sdcc_gsinit_startup
                            488 	.globl __sdcc_program_startup
                            489 	.globl __start__stack
                            490 	.globl __mcs51_genXINIT
                            491 	.globl __mcs51_genXRAMCLEAR
                            492 	.globl __mcs51_genRAMCLEAR
                            493 	.area GSFINAL (CODE)
   0000 02s00r00            494 	ljmp	__sdcc_program_startup
                            495 ;--------------------------------------------------------
                            496 ; Home
                            497 ;--------------------------------------------------------
                            498 	.area HOME    (CODE)
                            499 	.area CSEG    (CODE)
   0000                     500 __sdcc_program_startup:
   0000 12s02rE7            501 	lcall	_main
                            502 ;	return from main will lock up
   0003 80 FE               503 	sjmp .
                            504 ;--------------------------------------------------------
                            505 ; code
                            506 ;--------------------------------------------------------
                            507 	.area CSEG    (CODE)
                            508 ;------------------------------------------------------------
                            509 ;Allocation info for local variables in function '_sdcc_external_startup'
                            510 ;------------------------------------------------------------
                            511 ;------------------------------------------------------------
                            512 ;	main.c:18: _sdcc_external_startup(){
                            513 ;	-----------------------------------------
                            514 ;	 function _sdcc_external_startup
                            515 ;	-----------------------------------------
   0005                     516 __sdcc_external_startup:
                    0002    517 	ar2 = 0x02
                    0003    518 	ar3 = 0x03
                    0004    519 	ar4 = 0x04
                    0005    520 	ar5 = 0x05
                    0006    521 	ar6 = 0x06
                    0007    522 	ar7 = 0x07
                    0000    523 	ar0 = 0x00
                    0001    524 	ar1 = 0x01
                            525 ;	main.c:20: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            526 ;	genOr
   0005 43 8E 0C            527 	orl	_AUXR,#0x0C
                            528 ;	main.c:21: return 0;
                            529 ;	genRet
                            530 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            531 	mov	dptr,#0x0000
                            532 ;	Peephole 300	removed redundant label 00101$
   000B 22                  533 	ret
                            534 ;------------------------------------------------------------
                            535 ;Allocation info for local variables in function 'ShowMenu'
                            536 ;------------------------------------------------------------
                            537 ;------------------------------------------------------------
                            538 ;	main.c:28: void ShowMenu(void){
                            539 ;	-----------------------------------------
                            540 ;	 function ShowMenu
                            541 ;	-----------------------------------------
   000C                     542 _ShowMenu:
                            543 ;	main.c:29: printf("\r\n***************");
                            544 ;	genIpush
   000C 74r00               545 	mov	a,#__str_0
   000E C0 E0               546 	push	acc
   0010 74s00               547 	mov	a,#(__str_0 >> 8)
   0012 C0 E0               548 	push	acc
   0014 74 80               549 	mov	a,#0x80
   0016 C0 E0               550 	push	acc
                            551 ;	genCall
   0018 12s00r00            552 	lcall	_printf
   001B 15 81               553 	dec	sp
   001D 15 81               554 	dec	sp
   001F 15 81               555 	dec	sp
                            556 ;	main.c:30: printf("\r\n    Menu\r\n");
                            557 ;	genIpush
   0021 74r12               558 	mov	a,#__str_1
   0023 C0 E0               559 	push	acc
   0025 74s00               560 	mov	a,#(__str_1 >> 8)
   0027 C0 E0               561 	push	acc
   0029 74 80               562 	mov	a,#0x80
   002B C0 E0               563 	push	acc
                            564 ;	genCall
   002D 12s00r00            565 	lcall	_printf
   0030 15 81               566 	dec	sp
   0032 15 81               567 	dec	sp
   0034 15 81               568 	dec	sp
                            569 ;	main.c:31: printf("\r\n***************");
                            570 ;	genIpush
   0036 74r00               571 	mov	a,#__str_0
   0038 C0 E0               572 	push	acc
   003A 74s00               573 	mov	a,#(__str_0 >> 8)
   003C C0 E0               574 	push	acc
   003E 74 80               575 	mov	a,#0x80
   0040 C0 E0               576 	push	acc
                            577 ;	genCall
   0042 12s00r00            578 	lcall	_printf
   0045 15 81               579 	dec	sp
   0047 15 81               580 	dec	sp
   0049 15 81               581 	dec	sp
                            582 ;	main.c:32: printf("\r\nPress 'H' to show this menu");
                            583 ;	genIpush
   004B 74r1F               584 	mov	a,#__str_2
   004D C0 E0               585 	push	acc
   004F 74s00               586 	mov	a,#(__str_2 >> 8)
   0051 C0 E0               587 	push	acc
   0053 74 80               588 	mov	a,#0x80
   0055 C0 E0               589 	push	acc
                            590 ;	genCall
   0057 12s00r00            591 	lcall	_printf
   005A 15 81               592 	dec	sp
   005C 15 81               593 	dec	sp
   005E 15 81               594 	dec	sp
                            595 ;	main.c:33: printf("\r\nPress 'I' to Init LCD. Must call this first");
                            596 ;	genIpush
   0060 74r3D               597 	mov	a,#__str_3
   0062 C0 E0               598 	push	acc
   0064 74s00               599 	mov	a,#(__str_3 >> 8)
   0066 C0 E0               600 	push	acc
   0068 74 80               601 	mov	a,#0x80
   006A C0 E0               602 	push	acc
                            603 ;	genCall
   006C 12s00r00            604 	lcall	_printf
   006F 15 81               605 	dec	sp
   0071 15 81               606 	dec	sp
   0073 15 81               607 	dec	sp
                            608 ;	main.c:34: printf("\r\nPress 'g' to show gotoaddr. Will go to address 0x40, which is start of line 2");
                            609 ;	genIpush
   0075 74r6B               610 	mov	a,#__str_4
   0077 C0 E0               611 	push	acc
   0079 74s00               612 	mov	a,#(__str_4 >> 8)
   007B C0 E0               613 	push	acc
   007D 74 80               614 	mov	a,#0x80
   007F C0 E0               615 	push	acc
                            616 ;	genCall
   0081 12s00r00            617 	lcall	_printf
   0084 15 81               618 	dec	sp
   0086 15 81               619 	dec	sp
   0088 15 81               620 	dec	sp
                            621 ;	main.c:35: printf("\r\nPress 'x' to show gotoxy.");
                            622 ;	genIpush
   008A 74rBB               623 	mov	a,#__str_5
   008C C0 E0               624 	push	acc
   008E 74s00               625 	mov	a,#(__str_5 >> 8)
   0090 C0 E0               626 	push	acc
   0092 74 80               627 	mov	a,#0x80
   0094 C0 E0               628 	push	acc
                            629 ;	genCall
   0096 12s00r00            630 	lcall	_printf
   0099 15 81               631 	dec	sp
   009B 15 81               632 	dec	sp
   009D 15 81               633 	dec	sp
                            634 ;	main.c:36: printf("\r\nPress 'c' to show putch. Will draw a character at the start of each line");
                            635 ;	genIpush
   009F 74rD7               636 	mov	a,#__str_6
   00A1 C0 E0               637 	push	acc
   00A3 74s00               638 	mov	a,#(__str_6 >> 8)
   00A5 C0 E0               639 	push	acc
   00A7 74 80               640 	mov	a,#0x80
   00A9 C0 E0               641 	push	acc
                            642 ;	genCall
   00AB 12s00r00            643 	lcall	_printf
   00AE 15 81               644 	dec	sp
   00B0 15 81               645 	dec	sp
   00B2 15 81               646 	dec	sp
                            647 ;	main.c:37: printf("\r\nPress 's' to show putstr. Will fill entire LCD with a string");
                            648 ;	genIpush
   00B4 74r22               649 	mov	a,#__str_7
   00B6 C0 E0               650 	push	acc
   00B8 74s01               651 	mov	a,#(__str_7 >> 8)
   00BA C0 E0               652 	push	acc
   00BC 74 80               653 	mov	a,#0x80
   00BE C0 E0               654 	push	acc
                            655 ;	genCall
   00C0 12s00r00            656 	lcall	_printf
   00C3 15 81               657 	dec	sp
   00C5 15 81               658 	dec	sp
   00C7 15 81               659 	dec	sp
                            660 ;	main.c:38: printf("\r\nPress 'Y' to clear screen\r\n");
                            661 ;	genIpush
   00C9 74r61               662 	mov	a,#__str_8
   00CB C0 E0               663 	push	acc
   00CD 74s01               664 	mov	a,#(__str_8 >> 8)
   00CF C0 E0               665 	push	acc
   00D1 74 80               666 	mov	a,#0x80
   00D3 C0 E0               667 	push	acc
                            668 ;	genCall
   00D5 12s00r00            669 	lcall	_printf
   00D8 15 81               670 	dec	sp
   00DA 15 81               671 	dec	sp
   00DC 15 81               672 	dec	sp
                            673 ;	Peephole 300	removed redundant label 00101$
   00DE 22                  674 	ret
                            675 ;------------------------------------------------------------
                            676 ;Allocation info for local variables in function 'handleInput'
                            677 ;------------------------------------------------------------
                            678 ;c                         Allocated with name '_handleInput_c_1_1'
                            679 ;row                       Allocated with name '_handleInput_row_1_1'
                            680 ;col                       Allocated with name '_handleInput_col_1_1'
                            681 ;address                   Allocated with name '_handleInput_address_1_1'
                            682 ;str                       Allocated with name '_handleInput_str_1_1'
                            683 ;i                         Allocated with name '_handleInput_i_1_1'
                            684 ;------------------------------------------------------------
                            685 ;	main.c:45: void handleInput(char c){
                            686 ;	-----------------------------------------
                            687 ;	 function handleInput
                            688 ;	-----------------------------------------
   00DF                     689 _handleInput:
                            690 ;	genReceive
   00DF E5 82               691 	mov	a,dpl
   00E1 90s00r00            692 	mov	dptr,#_handleInput_c_1_1
   00E4 F0                  693 	movx	@dptr,a
                            694 ;	main.c:51: switch (c){
                            695 ;	genAssign
   00E5 90s00r00            696 	mov	dptr,#_handleInput_c_1_1
   00E8 E0                  697 	movx	a,@dptr
   00E9 FA                  698 	mov	r2,a
                            699 ;	genCmpEq
                            700 ;	gencjneshort
   00EA BA 48 03            701 	cjne	r2,#0x48,00137$
   00ED 02s02rE4            702 	ljmp	00118$
   00F0                     703 00137$:
                            704 ;	genCmpEq
                            705 ;	gencjneshort
   00F0 BA 49 02            706 	cjne	r2,#0x49,00138$
                            707 ;	Peephole 112.b	changed ljmp to sjmp
   00F3 80 1D               708 	sjmp	00101$
   00F5                     709 00138$:
                            710 ;	genCmpEq
                            711 ;	gencjneshort
   00F5 BA 59 03            712 	cjne	r2,#0x59,00139$
   00F8 02s02rE1            713 	ljmp	00117$
   00FB                     714 00139$:
                            715 ;	genCmpEq
                            716 ;	gencjneshort
   00FB BA 63 03            717 	cjne	r2,#0x63,00140$
   00FE 02s02r5B            718 	ljmp	00110$
   0101                     719 00140$:
                            720 ;	genCmpEq
                            721 ;	gencjneshort
   0101 BA 67 02            722 	cjne	r2,#0x67,00141$
                            723 ;	Peephole 112.b	changed ljmp to sjmp
   0104 80 24               724 	sjmp	00102$
   0106                     725 00141$:
                            726 ;	genCmpEq
                            727 ;	gencjneshort
   0106 BA 73 03            728 	cjne	r2,#0x73,00142$
   0109 02s02r78            729 	ljmp	00111$
   010C                     730 00142$:
                            731 ;	genCmpEq
                            732 ;	gencjneshort
   010C BA 78 02            733 	cjne	r2,#0x78,00143$
                            734 ;	Peephole 112.b	changed ljmp to sjmp
   010F 80 36               735 	sjmp	00103$
   0111                     736 00143$:
                            737 ;	Peephole 251.a	replaced ljmp to ret with ret
   0111 22                  738 	ret
                            739 ;	main.c:52: case 'I':
   0112                     740 00101$:
                            741 ;	main.c:53: printf("\r\nInitializing LCD\r\n");
                            742 ;	genIpush
   0112 74r7F               743 	mov	a,#__str_9
   0114 C0 E0               744 	push	acc
   0116 74s01               745 	mov	a,#(__str_9 >> 8)
   0118 C0 E0               746 	push	acc
   011A 74 80               747 	mov	a,#0x80
   011C C0 E0               748 	push	acc
                            749 ;	genCall
   011E 12s00r00            750 	lcall	_printf
   0121 15 81               751 	dec	sp
   0123 15 81               752 	dec	sp
   0125 15 81               753 	dec	sp
                            754 ;	main.c:54: LCD_Init();
                            755 ;	genCall
                            756 ;	main.c:55: break;
                            757 ;	Peephole 251.a	replaced ljmp to ret with ret
                            758 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0127 02s00r00            759 	ljmp	_LCD_Init
                            760 ;	main.c:56: case 'g':
   012A                     761 00102$:
                            762 ;	main.c:57: printf("\r\nEnter a hex address to go to\r\n");
                            763 ;	genIpush
   012A 74r94               764 	mov	a,#__str_10
   012C C0 E0               765 	push	acc
   012E 74s01               766 	mov	a,#(__str_10 >> 8)
   0130 C0 E0               767 	push	acc
   0132 74 80               768 	mov	a,#0x80
   0134 C0 E0               769 	push	acc
                            770 ;	genCall
   0136 12s00r00            771 	lcall	_printf
   0139 15 81               772 	dec	sp
   013B 15 81               773 	dec	sp
   013D 15 81               774 	dec	sp
                            775 ;	main.c:58: address = Serial_GetHex();
                            776 ;	genCall
   013F 12s00r00            777 	lcall	_Serial_GetHex
                            778 ;	main.c:59: LCD_gotoaddr(address);
                            779 ;	genCall
   0142 AA 82               780 	mov  r2,dpl
                            781 ;	Peephole 177.a	removed redundant mov
                            782 ;	main.c:60: break;
                            783 ;	Peephole 251.a	replaced ljmp to ret with ret
                            784 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0144 02s00r00            785 	ljmp	_LCD_gotoaddr
                            786 ;	main.c:61: case 'x':
   0147                     787 00103$:
                            788 ;	main.c:62: printf ("\r\nEnter a row from 0-3:");
                            789 ;	genIpush
   0147 74rB5               790 	mov	a,#__str_11
   0149 C0 E0               791 	push	acc
   014B 74s01               792 	mov	a,#(__str_11 >> 8)
   014D C0 E0               793 	push	acc
   014F 74 80               794 	mov	a,#0x80
   0151 C0 E0               795 	push	acc
                            796 ;	genCall
   0153 12s00r00            797 	lcall	_printf
   0156 15 81               798 	dec	sp
   0158 15 81               799 	dec	sp
   015A 15 81               800 	dec	sp
                            801 ;	main.c:63: row = Serial_GetInteger(3);
                            802 ;	genCall
                            803 ;	Peephole 182.b	used 16 bit load of dptr
   015C 90 00 03            804 	mov	dptr,#0x0003
   015F 12s00r00            805 	lcall	_Serial_GetInteger
   0162 E5 82               806 	mov	a,dpl
   0164 85 83 F0            807 	mov	b,dph
                            808 ;	genAssign
   0167 90s00r01            809 	mov	dptr,#_handleInput_row_1_1
   016A F0                  810 	movx	@dptr,a
   016B A3                  811 	inc	dptr
   016C E5 F0               812 	mov	a,b
   016E F0                  813 	movx	@dptr,a
                            814 ;	main.c:64: while(row > 3){
   016F                     815 00104$:
                            816 ;	genAssign
   016F 90s00r01            817 	mov	dptr,#_handleInput_row_1_1
   0172 E0                  818 	movx	a,@dptr
   0173 FA                  819 	mov	r2,a
   0174 A3                  820 	inc	dptr
   0175 E0                  821 	movx	a,@dptr
   0176 FB                  822 	mov	r3,a
                            823 ;	genCmpGt
                            824 ;	genCmp
   0177 C3                  825 	clr	c
   0178 74 03               826 	mov	a,#0x03
   017A 9A                  827 	subb	a,r2
                            828 ;	Peephole 159	avoided xrl during execution
   017B 74 80               829 	mov	a,#(0x00 ^ 0x80)
   017D 8B F0               830 	mov	b,r3
   017F 63 F0 80            831 	xrl	b,#0x80
   0182 95 F0               832 	subb	a,b
                            833 ;	genIfxJump
                            834 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0184 50 2A               835 	jnc	00106$
                            836 ;	Peephole 300	removed redundant label 00144$
                            837 ;	main.c:65: printf ("\r\nEnter a row from 0-3:");
                            838 ;	genIpush
   0186 74rB5               839 	mov	a,#__str_11
   0188 C0 E0               840 	push	acc
   018A 74s01               841 	mov	a,#(__str_11 >> 8)
   018C C0 E0               842 	push	acc
   018E 74 80               843 	mov	a,#0x80
   0190 C0 E0               844 	push	acc
                            845 ;	genCall
   0192 12s00r00            846 	lcall	_printf
   0195 15 81               847 	dec	sp
   0197 15 81               848 	dec	sp
   0199 15 81               849 	dec	sp
                            850 ;	main.c:66: row = Serial_GetInteger(3);
                            851 ;	genCall
                            852 ;	Peephole 182.b	used 16 bit load of dptr
   019B 90 00 03            853 	mov	dptr,#0x0003
   019E 12s00r00            854 	lcall	_Serial_GetInteger
   01A1 E5 82               855 	mov	a,dpl
   01A3 85 83 F0            856 	mov	b,dph
                            857 ;	genAssign
   01A6 90s00r01            858 	mov	dptr,#_handleInput_row_1_1
   01A9 F0                  859 	movx	@dptr,a
   01AA A3                  860 	inc	dptr
   01AB E5 F0               861 	mov	a,b
   01AD F0                  862 	movx	@dptr,a
                            863 ;	Peephole 112.b	changed ljmp to sjmp
   01AE 80 BF               864 	sjmp	00104$
   01B0                     865 00106$:
                            866 ;	main.c:69: printf ("\r\nEnter a col from 0-15:");
                            867 ;	genIpush
   01B0 74rCD               868 	mov	a,#__str_12
   01B2 C0 E0               869 	push	acc
   01B4 74s01               870 	mov	a,#(__str_12 >> 8)
   01B6 C0 E0               871 	push	acc
   01B8 74 80               872 	mov	a,#0x80
   01BA C0 E0               873 	push	acc
                            874 ;	genCall
   01BC 12s00r00            875 	lcall	_printf
   01BF 15 81               876 	dec	sp
   01C1 15 81               877 	dec	sp
   01C3 15 81               878 	dec	sp
                            879 ;	main.c:70: col = Serial_GetInteger(3) ;
                            880 ;	genCall
                            881 ;	Peephole 182.b	used 16 bit load of dptr
   01C5 90 00 03            882 	mov	dptr,#0x0003
   01C8 12s00r00            883 	lcall	_Serial_GetInteger
   01CB E5 82               884 	mov	a,dpl
   01CD 85 83 F0            885 	mov	b,dph
                            886 ;	genAssign
   01D0 90s00r03            887 	mov	dptr,#_handleInput_col_1_1
   01D3 F0                  888 	movx	@dptr,a
   01D4 A3                  889 	inc	dptr
   01D5 E5 F0               890 	mov	a,b
   01D7 F0                  891 	movx	@dptr,a
                            892 ;	main.c:71: while(col > 15){
   01D8                     893 00107$:
                            894 ;	genAssign
   01D8 90s00r03            895 	mov	dptr,#_handleInput_col_1_1
   01DB E0                  896 	movx	a,@dptr
   01DC FA                  897 	mov	r2,a
   01DD A3                  898 	inc	dptr
   01DE E0                  899 	movx	a,@dptr
   01DF FB                  900 	mov	r3,a
                            901 ;	genCmpGt
                            902 ;	genCmp
   01E0 C3                  903 	clr	c
   01E1 74 0F               904 	mov	a,#0x0F
   01E3 9A                  905 	subb	a,r2
                            906 ;	Peephole 159	avoided xrl during execution
   01E4 74 80               907 	mov	a,#(0x00 ^ 0x80)
   01E6 8B F0               908 	mov	b,r3
   01E8 63 F0 80            909 	xrl	b,#0x80
   01EB 95 F0               910 	subb	a,b
                            911 ;	genIfxJump
                            912 ;	Peephole 108.a	removed ljmp by inverse jump logic
   01ED 50 2A               913 	jnc	00109$
                            914 ;	Peephole 300	removed redundant label 00145$
                            915 ;	main.c:72: printf ("\r\nEnter a col from 0-15:");
                            916 ;	genIpush
   01EF 74rCD               917 	mov	a,#__str_12
   01F1 C0 E0               918 	push	acc
   01F3 74s01               919 	mov	a,#(__str_12 >> 8)
   01F5 C0 E0               920 	push	acc
   01F7 74 80               921 	mov	a,#0x80
   01F9 C0 E0               922 	push	acc
                            923 ;	genCall
   01FB 12s00r00            924 	lcall	_printf
   01FE 15 81               925 	dec	sp
   0200 15 81               926 	dec	sp
   0202 15 81               927 	dec	sp
                            928 ;	main.c:73: col = Serial_GetInteger(3);
                            929 ;	genCall
                            930 ;	Peephole 182.b	used 16 bit load of dptr
   0204 90 00 03            931 	mov	dptr,#0x0003
   0207 12s00r00            932 	lcall	_Serial_GetInteger
   020A E5 82               933 	mov	a,dpl
   020C 85 83 F0            934 	mov	b,dph
                            935 ;	genAssign
   020F 90s00r03            936 	mov	dptr,#_handleInput_col_1_1
   0212 F0                  937 	movx	@dptr,a
   0213 A3                  938 	inc	dptr
   0214 E5 F0               939 	mov	a,b
   0216 F0                  940 	movx	@dptr,a
                            941 ;	Peephole 112.b	changed ljmp to sjmp
   0217 80 BF               942 	sjmp	00107$
   0219                     943 00109$:
                            944 ;	main.c:76: LCD_gotoxy(row, col);
                            945 ;	genAssign
   0219 90s00r01            946 	mov	dptr,#_handleInput_row_1_1
   021C E0                  947 	movx	a,@dptr
   021D FC                  948 	mov	r4,a
   021E A3                  949 	inc	dptr
   021F E0                  950 	movx	a,@dptr
   0220 FD                  951 	mov	r5,a
                            952 ;	genCast
   0221 8C 06               953 	mov	ar6,r4
                            954 ;	genCast
   0223 90s00r00            955 	mov	dptr,#_LCD_gotoxy_PARM_2
   0226 EA                  956 	mov	a,r2
   0227 F0                  957 	movx	@dptr,a
                            958 ;	genCall
   0228 8E 82               959 	mov	dpl,r6
   022A C0 02               960 	push	ar2
   022C C0 03               961 	push	ar3
   022E C0 04               962 	push	ar4
   0230 C0 05               963 	push	ar5
   0232 12s00r00            964 	lcall	_LCD_gotoxy
   0235 D0 05               965 	pop	ar5
   0237 D0 04               966 	pop	ar4
   0239 D0 03               967 	pop	ar3
   023B D0 02               968 	pop	ar2
                            969 ;	main.c:77: printf("\r\nMoved cursor to new location (%d,%d)\r\n", row, col);
                            970 ;	genIpush
   023D C0 02               971 	push	ar2
   023F C0 03               972 	push	ar3
                            973 ;	genIpush
   0241 C0 04               974 	push	ar4
   0243 C0 05               975 	push	ar5
                            976 ;	genIpush
   0245 74rE6               977 	mov	a,#__str_13
   0247 C0 E0               978 	push	acc
   0249 74s01               979 	mov	a,#(__str_13 >> 8)
   024B C0 E0               980 	push	acc
   024D 74 80               981 	mov	a,#0x80
   024F C0 E0               982 	push	acc
                            983 ;	genCall
   0251 12s00r00            984 	lcall	_printf
   0254 E5 81               985 	mov	a,sp
   0256 24 F9               986 	add	a,#0xf9
   0258 F5 81               987 	mov	sp,a
                            988 ;	main.c:78: break;
                            989 ;	Peephole 251.a	replaced ljmp to ret with ret
   025A 22                  990 	ret
                            991 ;	main.c:79: case 'c':
   025B                     992 00110$:
                            993 ;	main.c:80: printf("\r\nEnter a character to put at current address\r\n");
                            994 ;	genIpush
   025B 74r0F               995 	mov	a,#__str_14
   025D C0 E0               996 	push	acc
   025F 74s02               997 	mov	a,#(__str_14 >> 8)
   0261 C0 E0               998 	push	acc
   0263 74 80               999 	mov	a,#0x80
   0265 C0 E0              1000 	push	acc
                           1001 ;	genCall
   0267 12s00r00           1002 	lcall	_printf
   026A 15 81              1003 	dec	sp
   026C 15 81              1004 	dec	sp
   026E 15 81              1005 	dec	sp
                           1006 ;	main.c:82: LCD_Putch(getchar());
                           1007 ;	genCall
   0270 12s00r00           1008 	lcall	_getchar
                           1009 ;	genCall
   0273 AA 82              1010 	mov  r2,dpl
                           1011 ;	Peephole 177.a	removed redundant mov
                           1012 ;	main.c:84: break;
                           1013 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1014 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0275 02s00r00           1015 	ljmp	_LCD_Putch
                           1016 ;	main.c:85: case 's':
   0278                    1017 00111$:
                           1018 ;	main.c:86: printf("\r\Enter a string\r\n");
                           1019 ;	genIpush
   0278 74r3F              1020 	mov	a,#__str_15
   027A C0 E0              1021 	push	acc
   027C 74s02              1022 	mov	a,#(__str_15 >> 8)
   027E C0 E0              1023 	push	acc
   0280 74 80              1024 	mov	a,#0x80
   0282 C0 E0              1025 	push	acc
                           1026 ;	genCall
   0284 12s00r00           1027 	lcall	_printf
   0287 15 81              1028 	dec	sp
   0289 15 81              1029 	dec	sp
   028B 15 81              1030 	dec	sp
                           1031 ;	main.c:88: while(i < 100){
                           1032 ;	genAssign
   028D 7A 00              1033 	mov	r2,#0x00
   028F                    1034 00114$:
                           1035 ;	genCmpLt
                           1036 ;	genCmp
   028F BA 64 00           1037 	cjne	r2,#0x64,00146$
   0292                    1038 00146$:
                           1039 ;	genIfxJump
                           1040 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0292 50 44              1041 	jnc	00116$
                           1042 ;	Peephole 300	removed redundant label 00147$
                           1043 ;	main.c:89: str[i] = getchar();
                           1044 ;	genPlus
                           1045 ;	Peephole 236.g	used r2 instead of ar2
   0294 EA                 1046 	mov	a,r2
   0295 24r05              1047 	add	a,#_handleInput_str_1_1
   0297 FB                 1048 	mov	r3,a
                           1049 ;	Peephole 181	changed mov to clr
   0298 E4                 1050 	clr	a
   0299 34s00              1051 	addc	a,#(_handleInput_str_1_1 >> 8)
   029B FC                 1052 	mov	r4,a
                           1053 ;	genCall
   029C C0 02              1054 	push	ar2
   029E C0 03              1055 	push	ar3
   02A0 C0 04              1056 	push	ar4
   02A2 12s00r00           1057 	lcall	_getchar
   02A5 AD 82              1058 	mov	r5,dpl
   02A7 D0 04              1059 	pop	ar4
   02A9 D0 03              1060 	pop	ar3
   02AB D0 02              1061 	pop	ar2
                           1062 ;	genPointerSet
                           1063 ;     genFarPointerSet
   02AD 8B 82              1064 	mov	dpl,r3
   02AF 8C 83              1065 	mov	dph,r4
   02B1 ED                 1066 	mov	a,r5
   02B2 F0                 1067 	movx	@dptr,a
                           1068 ;	main.c:90: putchar(str[i]);
                           1069 ;	genCall
   02B3 8D 82              1070 	mov	dpl,r5
   02B5 C0 02              1071 	push	ar2
   02B7 C0 03              1072 	push	ar3
   02B9 C0 04              1073 	push	ar4
   02BB 12s00r00           1074 	lcall	_putchar
   02BE D0 04              1075 	pop	ar4
   02C0 D0 03              1076 	pop	ar3
   02C2 D0 02              1077 	pop	ar2
                           1078 ;	main.c:91: if (str[i] == ENTER_KEY){
                           1079 ;	genPointerGet
                           1080 ;	genFarPointerGet
   02C4 8B 82              1081 	mov	dpl,r3
   02C6 8C 83              1082 	mov	dph,r4
   02C8 E0                 1083 	movx	a,@dptr
   02C9 FD                 1084 	mov	r5,a
                           1085 ;	genCmpEq
                           1086 ;	gencjneshort
                           1087 ;	Peephole 112.b	changed ljmp to sjmp
                           1088 ;	Peephole 198.b	optimized misc jump sequence
   02CA BD 0D 08           1089 	cjne	r5,#0x0D,00113$
                           1090 ;	Peephole 200.b	removed redundant sjmp
                           1091 ;	Peephole 300	removed redundant label 00148$
                           1092 ;	Peephole 300	removed redundant label 00149$
                           1093 ;	main.c:92: str[i] = '\0';
                           1094 ;	genPointerSet
                           1095 ;     genFarPointerSet
   02CD 8B 82              1096 	mov	dpl,r3
   02CF 8C 83              1097 	mov	dph,r4
                           1098 ;	Peephole 181	changed mov to clr
   02D1 E4                 1099 	clr	a
   02D2 F0                 1100 	movx	@dptr,a
                           1101 ;	main.c:93: break;
                           1102 ;	Peephole 112.b	changed ljmp to sjmp
   02D3 80 03              1103 	sjmp	00116$
   02D5                    1104 00113$:
                           1105 ;	main.c:95: i++;
                           1106 ;	genPlus
                           1107 ;     genPlusIncr
   02D5 0A                 1108 	inc	r2
                           1109 ;	Peephole 112.b	changed ljmp to sjmp
   02D6 80 B7              1110 	sjmp	00114$
   02D8                    1111 00116$:
                           1112 ;	main.c:99: LCD_Putstr(str);
                           1113 ;	genCall
                           1114 ;	Peephole 182.a	used 16 bit load of DPTR
   02D8 90s00r05           1115 	mov	dptr,#_handleInput_str_1_1
   02DB 75 F0 00           1116 	mov	b,#0x00
                           1117 ;	main.c:100: break;
                           1118 ;	main.c:101: case 'Y':
                           1119 ;	Peephole 112.b	changed ljmp to sjmp
                           1120 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1121 ;	Peephole 253.a	replaced lcall/ret with ljmp
   02DE 02s00r00           1122 	ljmp	_LCD_Putstr
   02E1                    1123 00117$:
                           1124 ;	main.c:102: LCD_ClearScreen();
                           1125 ;	genCall
                           1126 ;	main.c:103: break;
                           1127 ;	main.c:104: case 'H':
                           1128 ;	Peephole 112.b	changed ljmp to sjmp
                           1129 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1130 ;	Peephole 253.a	replaced lcall/ret with ljmp
   02E1 02s00r00           1131 	ljmp	_LCD_ClearScreen
   02E4                    1132 00118$:
                           1133 ;	main.c:105: ShowMenu();
                           1134 ;	genCall
                           1135 ;	main.c:109: }
                           1136 ;	Peephole 253.b	replaced lcall/ret with ljmp
   02E4 02s00r0C           1137 	ljmp	_ShowMenu
                           1138 ;
                           1139 ;------------------------------------------------------------
                           1140 ;Allocation info for local variables in function 'main'
                           1141 ;------------------------------------------------------------
                           1142 ;c                         Allocated with name '_main_c_2_2'
                           1143 ;------------------------------------------------------------
                           1144 ;	main.c:115: void main(void)
                           1145 ;	-----------------------------------------
                           1146 ;	 function main
                           1147 ;	-----------------------------------------
   02E7                    1148 _main:
                           1149 ;	main.c:117: Serial_Init();
                           1150 ;	genCall
   02E7 12s00r00           1151 	lcall	_Serial_Init
                           1152 ;	main.c:118: P1_3 = 1;
                           1153 ;	genAssign
   02EA D2 93              1154 	setb	_P1_3
                           1155 ;	main.c:120: ShowMenu();
                           1156 ;	genCall
   02EC 12s00r0C           1157 	lcall	_ShowMenu
                           1158 ;	main.c:121: while(1){
   02EF                    1159 00104$:
                           1160 ;	main.c:123: c = getchar ();
                           1161 ;	genCall
   02EF 12s00r00           1162 	lcall	_getchar
   02F2 AA 82              1163 	mov	r2,dpl
                           1164 ;	main.c:124: if (c == ENTER_KEY){
                           1165 ;	genCmpEq
                           1166 ;	gencjneshort
                           1167 ;	Peephole 112.b	changed ljmp to sjmp
                           1168 ;	Peephole 198.b	optimized misc jump sequence
   02F4 BA 0D 0A           1169 	cjne	r2,#0x0D,00102$
                           1170 ;	Peephole 200.b	removed redundant sjmp
                           1171 ;	Peephole 300	removed redundant label 00110$
                           1172 ;	Peephole 300	removed redundant label 00111$
                           1173 ;	main.c:125: putchar('\n');
                           1174 ;	genCall
   02F7 75 82 0A           1175 	mov	dpl,#0x0A
   02FA C0 02              1176 	push	ar2
   02FC 12s00r00           1177 	lcall	_putchar
   02FF D0 02              1178 	pop	ar2
   0301                    1179 00102$:
                           1180 ;	main.c:127: putchar(c);
                           1181 ;	genCall
   0301 8A 82              1182 	mov	dpl,r2
   0303 C0 02              1183 	push	ar2
   0305 12s00r00           1184 	lcall	_putchar
   0308 D0 02              1185 	pop	ar2
                           1186 ;	main.c:128: handleInput(c);
                           1187 ;	genCall
   030A 8A 82              1188 	mov	dpl,r2
   030C 12s00rDF           1189 	lcall	_handleInput
                           1190 ;	Peephole 112.b	changed ljmp to sjmp
   030F 80 DE              1191 	sjmp	00104$
                           1192 ;	Peephole 259.a	removed redundant label 00106$ and ret
                           1193 ;
                           1194 	.area CSEG    (CODE)
                           1195 	.area CONST   (CODE)
   0000                    1196 __str_0:
   0000 0D                 1197 	.db 0x0D
   0001 0A                 1198 	.db 0x0A
   0002 2A 2A 2A 2A 2A 2A  1199 	.ascii "***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0011 00                 1200 	.db 0x00
   0012                    1201 __str_1:
   0012 0D                 1202 	.db 0x0D
   0013 0A                 1203 	.db 0x0A
   0014 20 20 20 20 4D 65  1204 	.ascii "    Menu"
        6E 75
   001C 0D                 1205 	.db 0x0D
   001D 0A                 1206 	.db 0x0A
   001E 00                 1207 	.db 0x00
   001F                    1208 __str_2:
   001F 0D                 1209 	.db 0x0D
   0020 0A                 1210 	.db 0x0A
   0021 50 72 65 73 73 20  1211 	.ascii "Press 'H' to show this menu"
        27 48 27 20 74 6F
        20 73 68 6F 77 20
        74 68 69 73 20 6D
        65 6E 75
   003C 00                 1212 	.db 0x00
   003D                    1213 __str_3:
   003D 0D                 1214 	.db 0x0D
   003E 0A                 1215 	.db 0x0A
   003F 50 72 65 73 73 20  1216 	.ascii "Press 'I' to Init LCD. Must call this first"
        27 49 27 20 74 6F
        20 49 6E 69 74 20
        4C 43 44 2E 20 4D
        75 73 74 20 63 61
        6C 6C 20 74 68 69
        73 20 66 69 72 73
        74
   006A 00                 1217 	.db 0x00
   006B                    1218 __str_4:
   006B 0D                 1219 	.db 0x0D
   006C 0A                 1220 	.db 0x0A
   006D 50 72 65 73 73 20  1221 	.ascii "Press 'g' to show gotoaddr. Will go to address 0x40, which"
        27 67 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 61 64
        64 72 2E 20 57 69
        6C 6C 20 67 6F 20
        74 6F 20 61 64 64
        72 65 73 73 20 30
        78 34 30 2C 20 77
        68 69 63 68
   00A7 20 69 73 20 73 74  1222 	.ascii " is start of line 2"
        61 72 74 20 6F 66
        20 6C 69 6E 65 20
        32
   00BA 00                 1223 	.db 0x00
   00BB                    1224 __str_5:
   00BB 0D                 1225 	.db 0x0D
   00BC 0A                 1226 	.db 0x0A
   00BD 50 72 65 73 73 20  1227 	.ascii "Press 'x' to show gotoxy."
        27 78 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 78 79
        2E
   00D6 00                 1228 	.db 0x00
   00D7                    1229 __str_6:
   00D7 0D                 1230 	.db 0x0D
   00D8 0A                 1231 	.db 0x0A
   00D9 50 72 65 73 73 20  1232 	.ascii "Press 'c' to show putch. Will draw a character at the star"
        27 63 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 63 68 2E
        20 57 69 6C 6C 20
        64 72 61 77 20 61
        20 63 68 61 72 61
        63 74 65 72 20 61
        74 20 74 68 65 20
        73 74 61 72
   0113 74 20 6F 66 20 65  1233 	.ascii "t of each line"
        61 63 68 20 6C 69
        6E 65
   0121 00                 1234 	.db 0x00
   0122                    1235 __str_7:
   0122 0D                 1236 	.db 0x0D
   0123 0A                 1237 	.db 0x0A
   0124 50 72 65 73 73 20  1238 	.ascii "Press 's' to show putstr. Will fill entire LCD with a stri"
        27 73 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 73 74 72
        2E 20 57 69 6C 6C
        20 66 69 6C 6C 20
        65 6E 74 69 72 65
        20 4C 43 44 20 77
        69 74 68 20 61 20
        73 74 72 69
   015E 6E 67              1239 	.ascii "ng"
   0160 00                 1240 	.db 0x00
   0161                    1241 __str_8:
   0161 0D                 1242 	.db 0x0D
   0162 0A                 1243 	.db 0x0A
   0163 50 72 65 73 73 20  1244 	.ascii "Press 'Y' to clear screen"
        27 59 27 20 74 6F
        20 63 6C 65 61 72
        20 73 63 72 65 65
        6E
   017C 0D                 1245 	.db 0x0D
   017D 0A                 1246 	.db 0x0A
   017E 00                 1247 	.db 0x00
   017F                    1248 __str_9:
   017F 0D                 1249 	.db 0x0D
   0180 0A                 1250 	.db 0x0A
   0181 49 6E 69 74 69 61  1251 	.ascii "Initializing LCD"
        6C 69 7A 69 6E 67
        20 4C 43 44
   0191 0D                 1252 	.db 0x0D
   0192 0A                 1253 	.db 0x0A
   0193 00                 1254 	.db 0x00
   0194                    1255 __str_10:
   0194 0D                 1256 	.db 0x0D
   0195 0A                 1257 	.db 0x0A
   0196 45 6E 74 65 72 20  1258 	.ascii "Enter a hex address to go to"
        61 20 68 65 78 20
        61 64 64 72 65 73
        73 20 74 6F 20 67
        6F 20 74 6F
   01B2 0D                 1259 	.db 0x0D
   01B3 0A                 1260 	.db 0x0A
   01B4 00                 1261 	.db 0x00
   01B5                    1262 __str_11:
   01B5 0D                 1263 	.db 0x0D
   01B6 0A                 1264 	.db 0x0A
   01B7 45 6E 74 65 72 20  1265 	.ascii "Enter a row from 0-3:"
        61 20 72 6F 77 20
        66 72 6F 6D 20 30
        2D 33 3A
   01CC 00                 1266 	.db 0x00
   01CD                    1267 __str_12:
   01CD 0D                 1268 	.db 0x0D
   01CE 0A                 1269 	.db 0x0A
   01CF 45 6E 74 65 72 20  1270 	.ascii "Enter a col from 0-15:"
        61 20 63 6F 6C 20
        66 72 6F 6D 20 30
        2D 31 35 3A
   01E5 00                 1271 	.db 0x00
   01E6                    1272 __str_13:
   01E6 0D                 1273 	.db 0x0D
   01E7 0A                 1274 	.db 0x0A
   01E8 4D 6F 76 65 64 20  1275 	.ascii "Moved cursor to new location (%d,%d)"
        63 75 72 73 6F 72
        20 74 6F 20 6E 65
        77 20 6C 6F 63 61
        74 69 6F 6E 20 28
        25 64 2C 25 64 29
   020C 0D                 1276 	.db 0x0D
   020D 0A                 1277 	.db 0x0A
   020E 00                 1278 	.db 0x00
   020F                    1279 __str_14:
   020F 0D                 1280 	.db 0x0D
   0210 0A                 1281 	.db 0x0A
   0211 45 6E 74 65 72 20  1282 	.ascii "Enter a character to put at current address"
        61 20 63 68 61 72
        61 63 74 65 72 20
        74 6F 20 70 75 74
        20 61 74 20 63 75
        72 72 65 6E 74 20
        61 64 64 72 65 73
        73
   023C 0D                 1283 	.db 0x0D
   023D 0A                 1284 	.db 0x0A
   023E 00                 1285 	.db 0x00
   023F                    1286 __str_15:
   023F 0D                 1287 	.db 0x0D
   0240 45 6E 74 65 72 20  1288 	.ascii "Enter a string"
        61 20 73 74 72 69
        6E 67
   024E 0D                 1289 	.db 0x0D
   024F 0A                 1290 	.db 0x0A
   0250 00                 1291 	.db 0x00
                           1292 	.area XINIT   (CODE)
