                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sun Nov 06 16:02:04 2016
                              5 ;--------------------------------------------------------
                              6 	.module serial
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _getstring
                             13 	.globl _P5_7
                             14 	.globl _P5_6
                             15 	.globl _P5_5
                             16 	.globl _P5_4
                             17 	.globl _P5_3
                             18 	.globl _P5_2
                             19 	.globl _P5_1
                             20 	.globl _P5_0
                             21 	.globl _P4_7
                             22 	.globl _P4_6
                             23 	.globl _P4_5
                             24 	.globl _P4_4
                             25 	.globl _P4_3
                             26 	.globl _P4_2
                             27 	.globl _P4_1
                             28 	.globl _P4_0
                             29 	.globl _PX0L
                             30 	.globl _PT0L
                             31 	.globl _PX1L
                             32 	.globl _PT1L
                             33 	.globl _PLS
                             34 	.globl _PT2L
                             35 	.globl _PPCL
                             36 	.globl _EC
                             37 	.globl _CCF0
                             38 	.globl _CCF1
                             39 	.globl _CCF2
                             40 	.globl _CCF3
                             41 	.globl _CCF4
                             42 	.globl _CR
                             43 	.globl _CF
                             44 	.globl _TF2
                             45 	.globl _EXF2
                             46 	.globl _RCLK
                             47 	.globl _TCLK
                             48 	.globl _EXEN2
                             49 	.globl _TR2
                             50 	.globl _C_T2
                             51 	.globl _CP_RL2
                             52 	.globl _T2CON_7
                             53 	.globl _T2CON_6
                             54 	.globl _T2CON_5
                             55 	.globl _T2CON_4
                             56 	.globl _T2CON_3
                             57 	.globl _T2CON_2
                             58 	.globl _T2CON_1
                             59 	.globl _T2CON_0
                             60 	.globl _PT2
                             61 	.globl _ET2
                             62 	.globl _CY
                             63 	.globl _AC
                             64 	.globl _F0
                             65 	.globl _RS1
                             66 	.globl _RS0
                             67 	.globl _OV
                             68 	.globl _F1
                             69 	.globl _P
                             70 	.globl _PS
                             71 	.globl _PT1
                             72 	.globl _PX1
                             73 	.globl _PT0
                             74 	.globl _PX0
                             75 	.globl _RD
                             76 	.globl _WR
                             77 	.globl _T1
                             78 	.globl _T0
                             79 	.globl _INT1
                             80 	.globl _INT0
                             81 	.globl _TXD
                             82 	.globl _RXD
                             83 	.globl _P3_7
                             84 	.globl _P3_6
                             85 	.globl _P3_5
                             86 	.globl _P3_4
                             87 	.globl _P3_3
                             88 	.globl _P3_2
                             89 	.globl _P3_1
                             90 	.globl _P3_0
                             91 	.globl _EA
                             92 	.globl _ES
                             93 	.globl _ET1
                             94 	.globl _EX1
                             95 	.globl _ET0
                             96 	.globl _EX0
                             97 	.globl _P2_7
                             98 	.globl _P2_6
                             99 	.globl _P2_5
                            100 	.globl _P2_4
                            101 	.globl _P2_3
                            102 	.globl _P2_2
                            103 	.globl _P2_1
                            104 	.globl _P2_0
                            105 	.globl _SM0
                            106 	.globl _SM1
                            107 	.globl _SM2
                            108 	.globl _REN
                            109 	.globl _TB8
                            110 	.globl _RB8
                            111 	.globl _TI
                            112 	.globl _RI
                            113 	.globl _P1_7
                            114 	.globl _P1_6
                            115 	.globl _P1_5
                            116 	.globl _P1_4
                            117 	.globl _P1_3
                            118 	.globl _P1_2
                            119 	.globl _P1_1
                            120 	.globl _P1_0
                            121 	.globl _TF1
                            122 	.globl _TR1
                            123 	.globl _TF0
                            124 	.globl _TR0
                            125 	.globl _IE1
                            126 	.globl _IT1
                            127 	.globl _IE0
                            128 	.globl _IT0
                            129 	.globl _P0_7
                            130 	.globl _P0_6
                            131 	.globl _P0_5
                            132 	.globl _P0_4
                            133 	.globl _P0_3
                            134 	.globl _P0_2
                            135 	.globl _P0_1
                            136 	.globl _P0_0
                            137 	.globl _EECON
                            138 	.globl _KBF
                            139 	.globl _KBE
                            140 	.globl _KBLS
                            141 	.globl _BRL
                            142 	.globl _BDRCON
                            143 	.globl _T2MOD
                            144 	.globl _SPDAT
                            145 	.globl _SPSTA
                            146 	.globl _SPCON
                            147 	.globl _SADEN
                            148 	.globl _SADDR
                            149 	.globl _WDTPRG
                            150 	.globl _WDTRST
                            151 	.globl _P5
                            152 	.globl _P4
                            153 	.globl _IPH1
                            154 	.globl _IPL1
                            155 	.globl _IPH0
                            156 	.globl _IPL0
                            157 	.globl _IEN1
                            158 	.globl _IEN0
                            159 	.globl _CMOD
                            160 	.globl _CL
                            161 	.globl _CH
                            162 	.globl _CCON
                            163 	.globl _CCAPM4
                            164 	.globl _CCAPM3
                            165 	.globl _CCAPM2
                            166 	.globl _CCAPM1
                            167 	.globl _CCAPM0
                            168 	.globl _CCAP4L
                            169 	.globl _CCAP3L
                            170 	.globl _CCAP2L
                            171 	.globl _CCAP1L
                            172 	.globl _CCAP0L
                            173 	.globl _CCAP4H
                            174 	.globl _CCAP3H
                            175 	.globl _CCAP2H
                            176 	.globl _CCAP1H
                            177 	.globl _CCAP0H
                            178 	.globl _CKCKON1
                            179 	.globl _CKCKON0
                            180 	.globl _CKRL
                            181 	.globl _AUXR1
                            182 	.globl _AUXR
                            183 	.globl _TH2
                            184 	.globl _TL2
                            185 	.globl _RCAP2H
                            186 	.globl _RCAP2L
                            187 	.globl _T2CON
                            188 	.globl _B
                            189 	.globl _ACC
                            190 	.globl _PSW
                            191 	.globl _IP
                            192 	.globl _P3
                            193 	.globl _IE
                            194 	.globl _P2
                            195 	.globl _SBUF
                            196 	.globl _SCON
                            197 	.globl _P1
                            198 	.globl _TH1
                            199 	.globl _TH0
                            200 	.globl _TL1
                            201 	.globl _TL0
                            202 	.globl _TMOD
                            203 	.globl _TCON
                            204 	.globl _PCON
                            205 	.globl _DPH
                            206 	.globl _DPL
                            207 	.globl _SP
                            208 	.globl _P0
                            209 	.globl _getstring_PARM_2
                            210 	.globl _putchar
                            211 	.globl _getchar
                            212 	.globl _Serial_GetInteger
                            213 	.globl _Serial_GetHex
                            214 	.globl _Serial_Init
                            215 ;--------------------------------------------------------
                            216 ; special function registers
                            217 ;--------------------------------------------------------
                            218 	.area RSEG    (DATA)
                    0080    219 _P0	=	0x0080
                    0081    220 _SP	=	0x0081
                    0082    221 _DPL	=	0x0082
                    0083    222 _DPH	=	0x0083
                    0087    223 _PCON	=	0x0087
                    0088    224 _TCON	=	0x0088
                    0089    225 _TMOD	=	0x0089
                    008A    226 _TL0	=	0x008a
                    008B    227 _TL1	=	0x008b
                    008C    228 _TH0	=	0x008c
                    008D    229 _TH1	=	0x008d
                    0090    230 _P1	=	0x0090
                    0098    231 _SCON	=	0x0098
                    0099    232 _SBUF	=	0x0099
                    00A0    233 _P2	=	0x00a0
                    00A8    234 _IE	=	0x00a8
                    00B0    235 _P3	=	0x00b0
                    00B8    236 _IP	=	0x00b8
                    00D0    237 _PSW	=	0x00d0
                    00E0    238 _ACC	=	0x00e0
                    00F0    239 _B	=	0x00f0
                    00C8    240 _T2CON	=	0x00c8
                    00CA    241 _RCAP2L	=	0x00ca
                    00CB    242 _RCAP2H	=	0x00cb
                    00CC    243 _TL2	=	0x00cc
                    00CD    244 _TH2	=	0x00cd
                    008E    245 _AUXR	=	0x008e
                    00A2    246 _AUXR1	=	0x00a2
                    0097    247 _CKRL	=	0x0097
                    008F    248 _CKCKON0	=	0x008f
                    008F    249 _CKCKON1	=	0x008f
                    00FA    250 _CCAP0H	=	0x00fa
                    00FB    251 _CCAP1H	=	0x00fb
                    00FC    252 _CCAP2H	=	0x00fc
                    00FD    253 _CCAP3H	=	0x00fd
                    00FE    254 _CCAP4H	=	0x00fe
                    00EA    255 _CCAP0L	=	0x00ea
                    00EB    256 _CCAP1L	=	0x00eb
                    00EC    257 _CCAP2L	=	0x00ec
                    00ED    258 _CCAP3L	=	0x00ed
                    00EE    259 _CCAP4L	=	0x00ee
                    00DA    260 _CCAPM0	=	0x00da
                    00DB    261 _CCAPM1	=	0x00db
                    00DC    262 _CCAPM2	=	0x00dc
                    00DD    263 _CCAPM3	=	0x00dd
                    00DE    264 _CCAPM4	=	0x00de
                    00D8    265 _CCON	=	0x00d8
                    00F9    266 _CH	=	0x00f9
                    00E9    267 _CL	=	0x00e9
                    00D9    268 _CMOD	=	0x00d9
                    00A8    269 _IEN0	=	0x00a8
                    00B1    270 _IEN1	=	0x00b1
                    00B8    271 _IPL0	=	0x00b8
                    00B7    272 _IPH0	=	0x00b7
                    00B2    273 _IPL1	=	0x00b2
                    00B3    274 _IPH1	=	0x00b3
                    00C0    275 _P4	=	0x00c0
                    00D8    276 _P5	=	0x00d8
                    00A6    277 _WDTRST	=	0x00a6
                    00A7    278 _WDTPRG	=	0x00a7
                    00A9    279 _SADDR	=	0x00a9
                    00B9    280 _SADEN	=	0x00b9
                    00C3    281 _SPCON	=	0x00c3
                    00C4    282 _SPSTA	=	0x00c4
                    00C5    283 _SPDAT	=	0x00c5
                    00C9    284 _T2MOD	=	0x00c9
                    009B    285 _BDRCON	=	0x009b
                    009A    286 _BRL	=	0x009a
                    009C    287 _KBLS	=	0x009c
                    009D    288 _KBE	=	0x009d
                    009E    289 _KBF	=	0x009e
                    00D2    290 _EECON	=	0x00d2
                            291 ;--------------------------------------------------------
                            292 ; special function bits
                            293 ;--------------------------------------------------------
                            294 	.area RSEG    (DATA)
                    0080    295 _P0_0	=	0x0080
                    0081    296 _P0_1	=	0x0081
                    0082    297 _P0_2	=	0x0082
                    0083    298 _P0_3	=	0x0083
                    0084    299 _P0_4	=	0x0084
                    0085    300 _P0_5	=	0x0085
                    0086    301 _P0_6	=	0x0086
                    0087    302 _P0_7	=	0x0087
                    0088    303 _IT0	=	0x0088
                    0089    304 _IE0	=	0x0089
                    008A    305 _IT1	=	0x008a
                    008B    306 _IE1	=	0x008b
                    008C    307 _TR0	=	0x008c
                    008D    308 _TF0	=	0x008d
                    008E    309 _TR1	=	0x008e
                    008F    310 _TF1	=	0x008f
                    0090    311 _P1_0	=	0x0090
                    0091    312 _P1_1	=	0x0091
                    0092    313 _P1_2	=	0x0092
                    0093    314 _P1_3	=	0x0093
                    0094    315 _P1_4	=	0x0094
                    0095    316 _P1_5	=	0x0095
                    0096    317 _P1_6	=	0x0096
                    0097    318 _P1_7	=	0x0097
                    0098    319 _RI	=	0x0098
                    0099    320 _TI	=	0x0099
                    009A    321 _RB8	=	0x009a
                    009B    322 _TB8	=	0x009b
                    009C    323 _REN	=	0x009c
                    009D    324 _SM2	=	0x009d
                    009E    325 _SM1	=	0x009e
                    009F    326 _SM0	=	0x009f
                    00A0    327 _P2_0	=	0x00a0
                    00A1    328 _P2_1	=	0x00a1
                    00A2    329 _P2_2	=	0x00a2
                    00A3    330 _P2_3	=	0x00a3
                    00A4    331 _P2_4	=	0x00a4
                    00A5    332 _P2_5	=	0x00a5
                    00A6    333 _P2_6	=	0x00a6
                    00A7    334 _P2_7	=	0x00a7
                    00A8    335 _EX0	=	0x00a8
                    00A9    336 _ET0	=	0x00a9
                    00AA    337 _EX1	=	0x00aa
                    00AB    338 _ET1	=	0x00ab
                    00AC    339 _ES	=	0x00ac
                    00AF    340 _EA	=	0x00af
                    00B0    341 _P3_0	=	0x00b0
                    00B1    342 _P3_1	=	0x00b1
                    00B2    343 _P3_2	=	0x00b2
                    00B3    344 _P3_3	=	0x00b3
                    00B4    345 _P3_4	=	0x00b4
                    00B5    346 _P3_5	=	0x00b5
                    00B6    347 _P3_6	=	0x00b6
                    00B7    348 _P3_7	=	0x00b7
                    00B0    349 _RXD	=	0x00b0
                    00B1    350 _TXD	=	0x00b1
                    00B2    351 _INT0	=	0x00b2
                    00B3    352 _INT1	=	0x00b3
                    00B4    353 _T0	=	0x00b4
                    00B5    354 _T1	=	0x00b5
                    00B6    355 _WR	=	0x00b6
                    00B7    356 _RD	=	0x00b7
                    00B8    357 _PX0	=	0x00b8
                    00B9    358 _PT0	=	0x00b9
                    00BA    359 _PX1	=	0x00ba
                    00BB    360 _PT1	=	0x00bb
                    00BC    361 _PS	=	0x00bc
                    00D0    362 _P	=	0x00d0
                    00D1    363 _F1	=	0x00d1
                    00D2    364 _OV	=	0x00d2
                    00D3    365 _RS0	=	0x00d3
                    00D4    366 _RS1	=	0x00d4
                    00D5    367 _F0	=	0x00d5
                    00D6    368 _AC	=	0x00d6
                    00D7    369 _CY	=	0x00d7
                    00AD    370 _ET2	=	0x00ad
                    00BD    371 _PT2	=	0x00bd
                    00C8    372 _T2CON_0	=	0x00c8
                    00C9    373 _T2CON_1	=	0x00c9
                    00CA    374 _T2CON_2	=	0x00ca
                    00CB    375 _T2CON_3	=	0x00cb
                    00CC    376 _T2CON_4	=	0x00cc
                    00CD    377 _T2CON_5	=	0x00cd
                    00CE    378 _T2CON_6	=	0x00ce
                    00CF    379 _T2CON_7	=	0x00cf
                    00C8    380 _CP_RL2	=	0x00c8
                    00C9    381 _C_T2	=	0x00c9
                    00CA    382 _TR2	=	0x00ca
                    00CB    383 _EXEN2	=	0x00cb
                    00CC    384 _TCLK	=	0x00cc
                    00CD    385 _RCLK	=	0x00cd
                    00CE    386 _EXF2	=	0x00ce
                    00CF    387 _TF2	=	0x00cf
                    00DF    388 _CF	=	0x00df
                    00DE    389 _CR	=	0x00de
                    00DC    390 _CCF4	=	0x00dc
                    00DB    391 _CCF3	=	0x00db
                    00DA    392 _CCF2	=	0x00da
                    00D9    393 _CCF1	=	0x00d9
                    00D8    394 _CCF0	=	0x00d8
                    00AE    395 _EC	=	0x00ae
                    00BE    396 _PPCL	=	0x00be
                    00BD    397 _PT2L	=	0x00bd
                    00BC    398 _PLS	=	0x00bc
                    00BB    399 _PT1L	=	0x00bb
                    00BA    400 _PX1L	=	0x00ba
                    00B9    401 _PT0L	=	0x00b9
                    00B8    402 _PX0L	=	0x00b8
                    00C0    403 _P4_0	=	0x00c0
                    00C1    404 _P4_1	=	0x00c1
                    00C2    405 _P4_2	=	0x00c2
                    00C3    406 _P4_3	=	0x00c3
                    00C4    407 _P4_4	=	0x00c4
                    00C5    408 _P4_5	=	0x00c5
                    00C6    409 _P4_6	=	0x00c6
                    00C7    410 _P4_7	=	0x00c7
                    00D8    411 _P5_0	=	0x00d8
                    00D9    412 _P5_1	=	0x00d9
                    00DA    413 _P5_2	=	0x00da
                    00DB    414 _P5_3	=	0x00db
                    00DC    415 _P5_4	=	0x00dc
                    00DD    416 _P5_5	=	0x00dd
                    00DE    417 _P5_6	=	0x00de
                    00DF    418 _P5_7	=	0x00df
                            419 ;--------------------------------------------------------
                            420 ; overlayable register banks
                            421 ;--------------------------------------------------------
                            422 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     423 	.ds 8
                            424 ;--------------------------------------------------------
                            425 ; internal ram data
                            426 ;--------------------------------------------------------
                            427 	.area DSEG    (DATA)
   0000                     428 _getstring_sloc0_1_0:
   0000                     429 	.ds 3
                            430 ;--------------------------------------------------------
                            431 ; overlayable items in internal ram 
                            432 ;--------------------------------------------------------
                            433 	.area OSEG    (OVR,DATA)
                            434 ;--------------------------------------------------------
                            435 ; indirectly addressable internal ram data
                            436 ;--------------------------------------------------------
                            437 	.area ISEG    (DATA)
                            438 ;--------------------------------------------------------
                            439 ; bit data
                            440 ;--------------------------------------------------------
                            441 	.area BSEG    (BIT)
                            442 ;--------------------------------------------------------
                            443 ; paged external ram data
                            444 ;--------------------------------------------------------
                            445 	.area PSEG    (PAG,XDATA)
                            446 ;--------------------------------------------------------
                            447 ; external ram data
                            448 ;--------------------------------------------------------
                            449 	.area XSEG    (XDATA)
   0000                     450 _putchar_c_1_1:
   0000                     451 	.ds 1
   0001                     452 _Serial_GetInteger_max_length_1_1:
   0001                     453 	.ds 2
   0003                     454 _Serial_GetInteger_buf_1_1:
   0003                     455 	.ds 11
   000E                     456 _Serial_GetInteger_index_1_1:
   000E                     457 	.ds 2
   0010                     458 _Serial_GetHex_c_1_1:
   0010                     459 	.ds 1
   0011                     460 _Serial_GetHex_buf_1_1:
   0011                     461 	.ds 2
   0013                     462 _Serial_GetHex_index_1_1:
   0013                     463 	.ds 2
   0015                     464 _Serial_GetHex_result_1_1:
   0015                     465 	.ds 1
   0016                     466 _Serial_GetHex_num_1_1:
   0016                     467 	.ds 1
   0017                     468 _getstring_PARM_2:
   0017                     469 	.ds 2
   0019                     470 _getstring_buf_1_1:
   0019                     471 	.ds 3
   001C                     472 _getstring_c_1_1:
   001C                     473 	.ds 1
                            474 ;--------------------------------------------------------
                            475 ; external initialized ram data
                            476 ;--------------------------------------------------------
                            477 	.area XISEG   (XDATA)
                            478 	.area HOME    (CODE)
                            479 	.area GSINIT0 (CODE)
                            480 	.area GSINIT1 (CODE)
                            481 	.area GSINIT2 (CODE)
                            482 	.area GSINIT3 (CODE)
                            483 	.area GSINIT4 (CODE)
                            484 	.area GSINIT5 (CODE)
                            485 	.area GSINIT  (CODE)
                            486 	.area GSFINAL (CODE)
                            487 	.area CSEG    (CODE)
                            488 ;--------------------------------------------------------
                            489 ; global & static initialisations
                            490 ;--------------------------------------------------------
                            491 	.area HOME    (CODE)
                            492 	.area GSINIT  (CODE)
                            493 	.area GSFINAL (CODE)
                            494 	.area GSINIT  (CODE)
                            495 ;--------------------------------------------------------
                            496 ; Home
                            497 ;--------------------------------------------------------
                            498 	.area HOME    (CODE)
                            499 	.area CSEG    (CODE)
                            500 ;--------------------------------------------------------
                            501 ; code
                            502 ;--------------------------------------------------------
                            503 	.area CSEG    (CODE)
                            504 ;------------------------------------------------------------
                            505 ;Allocation info for local variables in function 'putchar'
                            506 ;------------------------------------------------------------
                            507 ;c                         Allocated with name '_putchar_c_1_1'
                            508 ;------------------------------------------------------------
                            509 ;	serial.c:24: void putchar (char c){
                            510 ;	-----------------------------------------
                            511 ;	 function putchar
                            512 ;	-----------------------------------------
   0000                     513 _putchar:
                    0002    514 	ar2 = 0x02
                    0003    515 	ar3 = 0x03
                    0004    516 	ar4 = 0x04
                    0005    517 	ar5 = 0x05
                    0006    518 	ar6 = 0x06
                    0007    519 	ar7 = 0x07
                    0000    520 	ar0 = 0x00
                    0001    521 	ar1 = 0x01
                            522 ;	genReceive
   0000 E5 82               523 	mov	a,dpl
   0002 90s00r00            524 	mov	dptr,#_putchar_c_1_1
   0005 F0                  525 	movx	@dptr,a
                            526 ;	serial.c:25: while (TI == 0);
   0006                     527 00101$:
                            528 ;	genIfx
                            529 ;	genIfxJump
                            530 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0006 30 99 FD            531 	jnb	_TI,00101$
                            532 ;	Peephole 300	removed redundant label 00108$
                            533 ;	serial.c:26: SBUF = c; // load serial port with transmit value
                            534 ;	genAssign
   0009 90s00r00            535 	mov	dptr,#_putchar_c_1_1
   000C E0                  536 	movx	a,@dptr
   000D F5 99               537 	mov	_SBUF,a
                            538 ;	serial.c:27: TI = 0; // clear TI flag
                            539 ;	genAssign
   000F C2 99               540 	clr	_TI
                            541 ;	Peephole 300	removed redundant label 00104$
   0011 22                  542 	ret
                            543 ;------------------------------------------------------------
                            544 ;Allocation info for local variables in function 'getchar'
                            545 ;------------------------------------------------------------
                            546 ;------------------------------------------------------------
                            547 ;	serial.c:30: char getchar (){
                            548 ;	-----------------------------------------
                            549 ;	 function getchar
                            550 ;	-----------------------------------------
   0012                     551 _getchar:
                            552 ;	serial.c:32: while (RI == 0);
   0012                     553 00101$:
                            554 ;	genIfx
                            555 ;	genIfxJump
                            556 ;	Peephole 108.d	removed ljmp by inverse jump logic
                            557 ;	serial.c:33: RI = 0; // clear RI flag
                            558 ;	genAssign
                            559 ;	Peephole 250.a	using atomic test and clear
   0012 10 98 02            560 	jbc	_RI,00108$
   0015 80 FB               561 	sjmp	00101$
   0017                     562 00108$:
                            563 ;	serial.c:34: return SBUF; // return character from SBUF
                            564 ;	genAssign
   0017 AA 99               565 	mov	r2,_SBUF
                            566 ;	genRet
   0019 8A 82               567 	mov	dpl,r2
                            568 ;	Peephole 300	removed redundant label 00104$
   001B 22                  569 	ret
                            570 ;------------------------------------------------------------
                            571 ;Allocation info for local variables in function 'Serial_GetInteger'
                            572 ;------------------------------------------------------------
                            573 ;max_length                Allocated with name '_Serial_GetInteger_max_length_1_1'
                            574 ;c                         Allocated with name '_Serial_GetInteger_c_1_1'
                            575 ;buf                       Allocated with name '_Serial_GetInteger_buf_1_1'
                            576 ;index                     Allocated with name '_Serial_GetInteger_index_1_1'
                            577 ;------------------------------------------------------------
                            578 ;	serial.c:43: int Serial_GetInteger(int max_length){
                            579 ;	-----------------------------------------
                            580 ;	 function Serial_GetInteger
                            581 ;	-----------------------------------------
   001C                     582 _Serial_GetInteger:
                            583 ;	genReceive
   001C AA 83               584 	mov	r2,dph
   001E E5 82               585 	mov	a,dpl
   0020 90s00r01            586 	mov	dptr,#_Serial_GetInteger_max_length_1_1
   0023 F0                  587 	movx	@dptr,a
   0024 A3                  588 	inc	dptr
   0025 EA                  589 	mov	a,r2
   0026 F0                  590 	movx	@dptr,a
                            591 ;	serial.c:46: int index = 0;
                            592 ;	genAssign
   0027 90s00r0E            593 	mov	dptr,#_Serial_GetInteger_index_1_1
   002A E4                  594 	clr	a
   002B F0                  595 	movx	@dptr,a
   002C A3                  596 	inc	dptr
   002D F0                  597 	movx	@dptr,a
                            598 ;	serial.c:48: if (max_length > 10){
                            599 ;	genAssign
   002E 90s00r01            600 	mov	dptr,#_Serial_GetInteger_max_length_1_1
   0031 E0                  601 	movx	a,@dptr
   0032 FA                  602 	mov	r2,a
   0033 A3                  603 	inc	dptr
   0034 E0                  604 	movx	a,@dptr
   0035 FB                  605 	mov	r3,a
                            606 ;	genCmpGt
                            607 ;	genCmp
   0036 C3                  608 	clr	c
   0037 74 0A               609 	mov	a,#0x0A
   0039 9A                  610 	subb	a,r2
                            611 ;	Peephole 159	avoided xrl during execution
   003A 74 80               612 	mov	a,#(0x00 ^ 0x80)
   003C 8B F0               613 	mov	b,r3
   003E 63 F0 80            614 	xrl	b,#0x80
   0041 95 F0               615 	subb	a,b
                            616 ;	genIfxJump
                            617 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0043 50 19               618 	jnc	00125$
                            619 ;	Peephole 300	removed redundant label 00128$
                            620 ;	serial.c:49: printf("Serial_getInteger(): Error. Max_Length too large.");
                            621 ;	genIpush
   0045 74r00               622 	mov	a,#__str_0
   0047 C0 E0               623 	push	acc
   0049 74s00               624 	mov	a,#(__str_0 >> 8)
   004B C0 E0               625 	push	acc
   004D 74 80               626 	mov	a,#0x80
   004F C0 E0               627 	push	acc
                            628 ;	genCall
   0051 12s00r00            629 	lcall	_printf
   0054 15 81               630 	dec	sp
   0056 15 81               631 	dec	sp
   0058 15 81               632 	dec	sp
                            633 ;	serial.c:50: return -1;
                            634 ;	genRet
                            635 ;	Peephole 182.b	used 16 bit load of dptr
   005A 90 FF FF            636 	mov	dptr,#0xFFFF
                            637 ;	Peephole 251.a	replaced ljmp to ret with ret
   005D 22                  638 	ret
                            639 ;	serial.c:53: while (index < max_length ){
   005E                     640 00125$:
                            641 ;	genAssign
   005E                     642 00116$:
                            643 ;	genAssign
   005E 90s00r0E            644 	mov	dptr,#_Serial_GetInteger_index_1_1
   0061 E0                  645 	movx	a,@dptr
   0062 FC                  646 	mov	r4,a
   0063 A3                  647 	inc	dptr
   0064 E0                  648 	movx	a,@dptr
   0065 FD                  649 	mov	r5,a
                            650 ;	genCmpLt
                            651 ;	genCmp
   0066 C3                  652 	clr	c
   0067 EC                  653 	mov	a,r4
   0068 9A                  654 	subb	a,r2
   0069 ED                  655 	mov	a,r5
   006A 64 80               656 	xrl	a,#0x80
   006C 8B F0               657 	mov	b,r3
   006E 63 F0 80            658 	xrl	b,#0x80
   0071 95 F0               659 	subb	a,b
                            660 ;	genIfxJump
   0073 40 03               661 	jc	00129$
   0075 02s01r24            662 	ljmp	00118$
   0078                     663 00129$:
                            664 ;	serial.c:54: c = getchar();
                            665 ;	genCall
   0078 C0 02               666 	push	ar2
   007A C0 03               667 	push	ar3
   007C C0 04               668 	push	ar4
   007E C0 05               669 	push	ar5
   0080 12s00r12            670 	lcall	_getchar
   0083 AE 82               671 	mov	r6,dpl
   0085 D0 05               672 	pop	ar5
   0087 D0 04               673 	pop	ar4
   0089 D0 03               674 	pop	ar3
   008B D0 02               675 	pop	ar2
                            676 ;	serial.c:55: putchar(c);
                            677 ;	genCall
   008D 8E 82               678 	mov	dpl,r6
   008F C0 02               679 	push	ar2
   0091 C0 03               680 	push	ar3
   0093 C0 04               681 	push	ar4
   0095 C0 05               682 	push	ar5
   0097 C0 06               683 	push	ar6
   0099 12s00r00            684 	lcall	_putchar
   009C D0 06               685 	pop	ar6
   009E D0 05               686 	pop	ar5
   00A0 D0 04               687 	pop	ar4
   00A2 D0 03               688 	pop	ar3
   00A4 D0 02               689 	pop	ar2
                            690 ;	serial.c:56: if (c == ENTER_KEY)
                            691 ;	genCmpEq
                            692 ;	gencjneshort
   00A6 BE 0D 03            693 	cjne	r6,#0x0D,00130$
   00A9 02s01r24            694 	ljmp	00118$
   00AC                     695 00130$:
                            696 ;	serial.c:58: else if (c == BACKSPACE_KEY)
                            697 ;	genCmpEq
                            698 ;	gencjneshort
                            699 ;	Peephole 112.b	changed ljmp to sjmp
                            700 ;	Peephole 198.b	optimized misc jump sequence
   00AC BE 08 12            701 	cjne	r6,#0x08,00111$
                            702 ;	Peephole 200.b	removed redundant sjmp
                            703 ;	Peephole 300	removed redundant label 00131$
                            704 ;	Peephole 300	removed redundant label 00132$
                            705 ;	serial.c:59: --index;
                            706 ;	genMinus
                            707 ;	genMinusDec
   00AF EC                  708 	mov	a,r4
   00B0 24 FF               709 	add	a,#0xff
   00B2 FF                  710 	mov	r7,a
   00B3 ED                  711 	mov	a,r5
   00B4 34 FF               712 	addc	a,#0xff
   00B6 F8                  713 	mov	r0,a
                            714 ;	genAssign
   00B7 90s00r0E            715 	mov	dptr,#_Serial_GetInteger_index_1_1
   00BA EF                  716 	mov	a,r7
   00BB F0                  717 	movx	@dptr,a
   00BC A3                  718 	inc	dptr
   00BD E8                  719 	mov	a,r0
   00BE F0                  720 	movx	@dptr,a
                            721 ;	Peephole 112.b	changed ljmp to sjmp
   00BF 80 9D               722 	sjmp	00116$
   00C1                     723 00111$:
                            724 ;	serial.c:60: else if (c == 'q' || c == 'Q'){
                            725 ;	genCmpEq
                            726 ;	gencjneshort
   00C1 BE 71 02            727 	cjne	r6,#0x71,00133$
                            728 ;	Peephole 112.b	changed ljmp to sjmp
   00C4 80 03               729 	sjmp	00106$
   00C6                     730 00133$:
                            731 ;	genCmpEq
                            732 ;	gencjneshort
                            733 ;	Peephole 112.b	changed ljmp to sjmp
                            734 ;	Peephole 198.b	optimized misc jump sequence
   00C6 BE 51 04            735 	cjne	r6,#0x51,00107$
                            736 ;	Peephole 200.b	removed redundant sjmp
                            737 ;	Peephole 300	removed redundant label 00134$
                            738 ;	Peephole 300	removed redundant label 00135$
   00C9                     739 00106$:
                            740 ;	serial.c:61: return -2;
                            741 ;	genRet
                            742 ;	Peephole 182.b	used 16 bit load of dptr
   00C9 90 FF FE            743 	mov	dptr,#0xFFFE
                            744 ;	Peephole 251.a	replaced ljmp to ret with ret
   00CC 22                  745 	ret
   00CD                     746 00107$:
                            747 ;	serial.c:63: else if ( isdigit(c) ){
                            748 ;	genCall
   00CD 8E 82               749 	mov	dpl,r6
   00CF C0 02               750 	push	ar2
   00D1 C0 03               751 	push	ar3
   00D3 C0 04               752 	push	ar4
   00D5 C0 05               753 	push	ar5
   00D7 C0 06               754 	push	ar6
   00D9 12s00r00            755 	lcall	_isdigit
   00DC E5 82               756 	mov	a,dpl
   00DE D0 06               757 	pop	ar6
   00E0 D0 05               758 	pop	ar5
   00E2 D0 04               759 	pop	ar4
   00E4 D0 03               760 	pop	ar3
   00E6 D0 02               761 	pop	ar2
                            762 ;	genIfx
                            763 ;	genIfxJump
                            764 ;	Peephole 108.c	removed ljmp by inverse jump logic
   00E8 60 1A               765 	jz	00104$
                            766 ;	Peephole 300	removed redundant label 00136$
                            767 ;	serial.c:64: buf[index] = c;
                            768 ;	genPlus
                            769 ;	Peephole 236.g	used r4 instead of ar4
   00EA EC                  770 	mov	a,r4
   00EB 24r03               771 	add	a,#_Serial_GetInteger_buf_1_1
   00ED F5 82               772 	mov	dpl,a
                            773 ;	Peephole 236.g	used r5 instead of ar5
   00EF ED                  774 	mov	a,r5
   00F0 34s00               775 	addc	a,#(_Serial_GetInteger_buf_1_1 >> 8)
   00F2 F5 83               776 	mov	dph,a
                            777 ;	genPointerSet
                            778 ;     genFarPointerSet
   00F4 EE                  779 	mov	a,r6
   00F5 F0                  780 	movx	@dptr,a
                            781 ;	serial.c:65: ++index;
                            782 ;	genPlus
   00F6 90s00r0E            783 	mov	dptr,#_Serial_GetInteger_index_1_1
                            784 ;     genPlusIncr
   00F9 74 01               785 	mov	a,#0x01
                            786 ;	Peephole 236.a	used r4 instead of ar4
   00FB 2C                  787 	add	a,r4
   00FC F0                  788 	movx	@dptr,a
                            789 ;	Peephole 181	changed mov to clr
   00FD E4                  790 	clr	a
                            791 ;	Peephole 236.b	used r5 instead of ar5
   00FE 3D                  792 	addc	a,r5
   00FF A3                  793 	inc	dptr
   0100 F0                  794 	movx	@dptr,a
   0101 02s00r5E            795 	ljmp	00116$
   0104                     796 00104$:
                            797 ;	serial.c:68: printf("\r\nInvalid character. Enter only digits.\r\n");
                            798 ;	genIpush
   0104 C0 02               799 	push	ar2
   0106 C0 03               800 	push	ar3
   0108 74r32               801 	mov	a,#__str_1
   010A C0 E0               802 	push	acc
   010C 74s00               803 	mov	a,#(__str_1 >> 8)
   010E C0 E0               804 	push	acc
   0110 74 80               805 	mov	a,#0x80
   0112 C0 E0               806 	push	acc
                            807 ;	genCall
   0114 12s00r00            808 	lcall	_printf
   0117 15 81               809 	dec	sp
   0119 15 81               810 	dec	sp
   011B 15 81               811 	dec	sp
   011D D0 03               812 	pop	ar3
   011F D0 02               813 	pop	ar2
   0121 02s00r5E            814 	ljmp	00116$
   0124                     815 00118$:
                            816 ;	serial.c:71: buf[index] = '\0';  //Null terminate the string
                            817 ;	genAssign
   0124 90s00r0E            818 	mov	dptr,#_Serial_GetInteger_index_1_1
   0127 E0                  819 	movx	a,@dptr
   0128 FA                  820 	mov	r2,a
   0129 A3                  821 	inc	dptr
   012A E0                  822 	movx	a,@dptr
   012B FB                  823 	mov	r3,a
                            824 ;	genPlus
                            825 ;	Peephole 236.g	used r2 instead of ar2
   012C EA                  826 	mov	a,r2
   012D 24r03               827 	add	a,#_Serial_GetInteger_buf_1_1
   012F F5 82               828 	mov	dpl,a
                            829 ;	Peephole 236.g	used r3 instead of ar3
   0131 EB                  830 	mov	a,r3
   0132 34s00               831 	addc	a,#(_Serial_GetInteger_buf_1_1 >> 8)
   0134 F5 83               832 	mov	dph,a
                            833 ;	genPointerSet
                            834 ;     genFarPointerSet
                            835 ;	Peephole 181	changed mov to clr
   0136 E4                  836 	clr	a
   0137 F0                  837 	movx	@dptr,a
                            838 ;	serial.c:72: return atoi(buf);
                            839 ;	genCall
                            840 ;	Peephole 182.a	used 16 bit load of DPTR
   0138 90s00r03            841 	mov	dptr,#_Serial_GetInteger_buf_1_1
   013B 75 F0 00            842 	mov	b,#0x00
                            843 ;	genRet
                            844 ;	Peephole 150.b	removed misc moves via dph, dpl before return
                            845 ;	Peephole 253.b	replaced lcall/ret with ljmp
   013E 02s00r00            846 	ljmp	_atoi
                            847 ;
                            848 ;------------------------------------------------------------
                            849 ;Allocation info for local variables in function 'Serial_GetHex'
                            850 ;------------------------------------------------------------
                            851 ;c                         Allocated with name '_Serial_GetHex_c_1_1'
                            852 ;buf                       Allocated with name '_Serial_GetHex_buf_1_1'
                            853 ;max_length                Allocated with name '_Serial_GetHex_max_length_1_1'
                            854 ;index                     Allocated with name '_Serial_GetHex_index_1_1'
                            855 ;result                    Allocated with name '_Serial_GetHex_result_1_1'
                            856 ;num                       Allocated with name '_Serial_GetHex_num_1_1'
                            857 ;------------------------------------------------------------
                            858 ;	serial.c:79: uint8_t Serial_GetHex(void){
                            859 ;	-----------------------------------------
                            860 ;	 function Serial_GetHex
                            861 ;	-----------------------------------------
   0141                     862 _Serial_GetHex:
                            863 ;	serial.c:83: int index = 0;
                            864 ;	genAssign
   0141 90s00r13            865 	mov	dptr,#_Serial_GetHex_index_1_1
   0144 E4                  866 	clr	a
   0145 F0                  867 	movx	@dptr,a
   0146 A3                  868 	inc	dptr
   0147 F0                  869 	movx	@dptr,a
                            870 ;	serial.c:85: char num =0;
                            871 ;	genAssign
   0148 90s00r16            872 	mov	dptr,#_Serial_GetHex_num_1_1
                            873 ;	Peephole 181	changed mov to clr
   014B E4                  874 	clr	a
   014C F0                  875 	movx	@dptr,a
                            876 ;	serial.c:87: while (index < max_length ){
   014D                     877 00123$:
                            878 ;	genAssign
   014D 90s00r13            879 	mov	dptr,#_Serial_GetHex_index_1_1
   0150 E0                  880 	movx	a,@dptr
   0151 FA                  881 	mov	r2,a
   0152 A3                  882 	inc	dptr
   0153 E0                  883 	movx	a,@dptr
   0154 FB                  884 	mov	r3,a
                            885 ;	genCmpLt
                            886 ;	genCmp
   0155 C3                  887 	clr	c
   0156 EA                  888 	mov	a,r2
   0157 94 02               889 	subb	a,#0x02
   0159 EB                  890 	mov	a,r3
   015A 64 80               891 	xrl	a,#0x80
   015C 94 80               892 	subb	a,#0x80
                            893 ;	genIfxJump
   015E 40 03               894 	jc	00162$
   0160 02s02r8F            895 	ljmp	00125$
   0163                     896 00162$:
                            897 ;	serial.c:88: c = getchar();
                            898 ;	genCall
   0163 C0 02               899 	push	ar2
   0165 C0 03               900 	push	ar3
   0167 12s00r12            901 	lcall	_getchar
   016A AC 82               902 	mov	r4,dpl
   016C D0 03               903 	pop	ar3
   016E D0 02               904 	pop	ar2
                            905 ;	serial.c:89: putchar(c);
                            906 ;	genCall
   0170 8C 82               907 	mov	dpl,r4
   0172 C0 02               908 	push	ar2
   0174 C0 03               909 	push	ar3
   0176 C0 04               910 	push	ar4
   0178 12s00r00            911 	lcall	_putchar
   017B D0 04               912 	pop	ar4
   017D D0 03               913 	pop	ar3
   017F D0 02               914 	pop	ar2
                            915 ;	serial.c:90: if (c == ENTER_KEY){
                            916 ;	genCmpEq
                            917 ;	gencjneshort
                            918 ;	Peephole 112.b	changed ljmp to sjmp
                            919 ;	Peephole 198.b	optimized misc jump sequence
   0181 BC 0D 2C            920 	cjne	r4,#0x0D,00121$
                            921 ;	Peephole 200.b	removed redundant sjmp
                            922 ;	Peephole 300	removed redundant label 00163$
                            923 ;	Peephole 300	removed redundant label 00164$
                            924 ;	serial.c:91: if (index == 0){
                            925 ;	genIfx
   0184 EA                  926 	mov	a,r2
   0185 4B                  927 	orl	a,r3
                            928 ;	genIfxJump
                            929 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0186 70 0C               930 	jnz	00104$
                            931 ;	Peephole 300	removed redundant label 00165$
                            932 ;	serial.c:92: buf[0] = 0;
                            933 ;	genPointerSet
                            934 ;     genFarPointerSet
   0188 90s00r11            935 	mov	dptr,#_Serial_GetHex_buf_1_1
                            936 ;	Peephole 181	changed mov to clr
                            937 ;	serial.c:93: buf[1] = 0;
                            938 ;	genPointerSet
                            939 ;     genFarPointerSet
                            940 ;	Peephole 181	changed mov to clr
                            941 ;	Peephole 219.a	removed redundant clear
   018B E4                  942 	clr	a
   018C F0                  943 	movx	@dptr,a
   018D 90s00r12            944 	mov	dptr,#(_Serial_GetHex_buf_1_1 + 0x0001)
   0190 F0                  945 	movx	@dptr,a
   0191 02s02r8F            946 	ljmp	00125$
   0194                     947 00104$:
                            948 ;	serial.c:95: else if(index == 1){
                            949 ;	genCmpEq
                            950 ;	gencjneshort
   0194 BA 01 05            951 	cjne	r2,#0x01,00166$
   0197 BB 00 02            952 	cjne	r3,#0x00,00166$
   019A 80 03               953 	sjmp	00167$
   019C                     954 00166$:
   019C 02s02r8F            955 	ljmp	00125$
   019F                     956 00167$:
                            957 ;	serial.c:96: buf[1] = buf[0];
                            958 ;	genPointerGet
                            959 ;	genFarPointerGet
   019F 90s00r11            960 	mov	dptr,#_Serial_GetHex_buf_1_1
   01A2 E0                  961 	movx	a,@dptr
                            962 ;	genPointerSet
                            963 ;     genFarPointerSet
   01A3 FD                  964 	mov	r5,a
   01A4 90s00r12            965 	mov	dptr,#(_Serial_GetHex_buf_1_1 + 0x0001)
                            966 ;	Peephole 100	removed redundant mov
   01A7 F0                  967 	movx	@dptr,a
                            968 ;	serial.c:97: buf[0] = 0;
                            969 ;	genPointerSet
                            970 ;     genFarPointerSet
   01A8 90s00r11            971 	mov	dptr,#_Serial_GetHex_buf_1_1
                            972 ;	Peephole 181	changed mov to clr
   01AB E4                  973 	clr	a
   01AC F0                  974 	movx	@dptr,a
                            975 ;	serial.c:99: break;
   01AD 02s02r8F            976 	ljmp	00125$
   01B0                     977 00121$:
                            978 ;	serial.c:101: else if (c == BACKSPACE_KEY)
                            979 ;	genCmpEq
                            980 ;	gencjneshort
                            981 ;	Peephole 112.b	changed ljmp to sjmp
                            982 ;	Peephole 198.b	optimized misc jump sequence
   01B0 BC 08 13            983 	cjne	r4,#0x08,00118$
                            984 ;	Peephole 200.b	removed redundant sjmp
                            985 ;	Peephole 300	removed redundant label 00168$
                            986 ;	Peephole 300	removed redundant label 00169$
                            987 ;	serial.c:102: --index;
                            988 ;	genMinus
                            989 ;	genMinusDec
   01B3 EA                  990 	mov	a,r2
   01B4 24 FF               991 	add	a,#0xff
   01B6 FD                  992 	mov	r5,a
   01B7 EB                  993 	mov	a,r3
   01B8 34 FF               994 	addc	a,#0xff
   01BA FE                  995 	mov	r6,a
                            996 ;	genAssign
   01BB 90s00r13            997 	mov	dptr,#_Serial_GetHex_index_1_1
   01BE ED                  998 	mov	a,r5
   01BF F0                  999 	movx	@dptr,a
   01C0 A3                 1000 	inc	dptr
   01C1 EE                 1001 	mov	a,r6
   01C2 F0                 1002 	movx	@dptr,a
   01C3 02s01r4D           1003 	ljmp	00123$
   01C6                    1004 00118$:
                           1005 ;	serial.c:103: else if ( isdigit(c) ){
                           1006 ;	genCall
   01C6 8C 82              1007 	mov	dpl,r4
   01C8 C0 02              1008 	push	ar2
   01CA C0 03              1009 	push	ar3
   01CC C0 04              1010 	push	ar4
   01CE 12s00r00           1011 	lcall	_isdigit
   01D1 E5 82              1012 	mov	a,dpl
   01D3 D0 04              1013 	pop	ar4
   01D5 D0 03              1014 	pop	ar3
   01D7 D0 02              1015 	pop	ar2
                           1016 ;	genIfx
                           1017 ;	genIfxJump
                           1018 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01D9 60 1A              1019 	jz	00115$
                           1020 ;	Peephole 300	removed redundant label 00170$
                           1021 ;	serial.c:104: buf[index] = c;
                           1022 ;	genPlus
                           1023 ;	Peephole 236.g	used r2 instead of ar2
   01DB EA                 1024 	mov	a,r2
   01DC 24r11              1025 	add	a,#_Serial_GetHex_buf_1_1
   01DE F5 82              1026 	mov	dpl,a
                           1027 ;	Peephole 236.g	used r3 instead of ar3
   01E0 EB                 1028 	mov	a,r3
   01E1 34s00              1029 	addc	a,#(_Serial_GetHex_buf_1_1 >> 8)
   01E3 F5 83              1030 	mov	dph,a
                           1031 ;	genPointerSet
                           1032 ;     genFarPointerSet
   01E5 EC                 1033 	mov	a,r4
   01E6 F0                 1034 	movx	@dptr,a
                           1035 ;	serial.c:105: ++index;
                           1036 ;	genPlus
   01E7 90s00r13           1037 	mov	dptr,#_Serial_GetHex_index_1_1
                           1038 ;     genPlusIncr
   01EA 74 01              1039 	mov	a,#0x01
                           1040 ;	Peephole 236.a	used r2 instead of ar2
   01EC 2A                 1041 	add	a,r2
   01ED F0                 1042 	movx	@dptr,a
                           1043 ;	Peephole 181	changed mov to clr
   01EE E4                 1044 	clr	a
                           1045 ;	Peephole 236.b	used r3 instead of ar3
   01EF 3B                 1046 	addc	a,r3
   01F0 A3                 1047 	inc	dptr
   01F1 F0                 1048 	movx	@dptr,a
   01F2 02s01r4D           1049 	ljmp	00123$
   01F5                    1050 00115$:
                           1051 ;	serial.c:107: else if ( isalpha(c) && ((c >= 'A'  && c <= 'F') || (c >= 'a' && c <= 'f') )){
                           1052 ;	genCall
   01F5 8C 82              1053 	mov	dpl,r4
   01F7 C0 04              1054 	push	ar4
   01F9 12s00r00           1055 	lcall	_isupper
   01FC E5 82              1056 	mov	a,dpl
   01FE D0 04              1057 	pop	ar4
                           1058 ;	genIfx
                           1059 ;	genIfxJump
                           1060 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0200 70 0D              1061 	jnz	00113$
                           1062 ;	Peephole 300	removed redundant label 00171$
                           1063 ;	genCall
   0202 8C 82              1064 	mov	dpl,r4
   0204 C0 04              1065 	push	ar4
   0206 12s00r00           1066 	lcall	_islower
   0209 E5 82              1067 	mov	a,dpl
   020B D0 04              1068 	pop	ar4
                           1069 ;	genIfx
                           1070 ;	genIfxJump
                           1071 ;	Peephole 112.b	changed ljmp to sjmp
                           1072 ;	Peephole 160.c	removed sjmp by inverse jump logic
   020D 60 68              1073 	jz	00107$
                           1074 ;	Peephole 300	removed redundant label 00172$
   020F                    1075 00113$:
                           1076 ;	genCmpLt
                           1077 ;	genCmp
   020F C3                 1078 	clr	c
   0210 EC                 1079 	mov	a,r4
   0211 64 80              1080 	xrl	a,#0x80
   0213 94 C1              1081 	subb	a,#0xc1
                           1082 ;	genIfxJump
                           1083 ;	Peephole 112.b	changed ljmp to sjmp
                           1084 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1085 ;	genCmpGt
                           1086 ;	genCmp
   0215 40 0B              1087 	jc	00112$
                           1088 ;	Peephole 300	removed redundant label 00173$
                           1089 ;	Peephole 256.a	removed redundant clr c
                           1090 ;	Peephole 159	avoided xrl during execution
   0217 74 C6              1091 	mov	a,#(0x46 ^ 0x80)
   0219 8C F0              1092 	mov	b,r4
   021B 63 F0 80           1093 	xrl	b,#0x80
   021E 95 F0              1094 	subb	a,b
                           1095 ;	genIfxJump
                           1096 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0220 50 13              1097 	jnc	00106$
                           1098 ;	Peephole 300	removed redundant label 00174$
   0222                    1099 00112$:
                           1100 ;	genCmpLt
                           1101 ;	genCmp
   0222 C3                 1102 	clr	c
   0223 EC                 1103 	mov	a,r4
   0224 64 80              1104 	xrl	a,#0x80
   0226 94 E1              1105 	subb	a,#0xe1
                           1106 ;	genIfxJump
                           1107 ;	Peephole 112.b	changed ljmp to sjmp
                           1108 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1109 ;	genCmpGt
                           1110 ;	genCmp
   0228 40 4D              1111 	jc	00107$
                           1112 ;	Peephole 300	removed redundant label 00175$
                           1113 ;	Peephole 256.a	removed redundant clr c
                           1114 ;	Peephole 159	avoided xrl during execution
   022A 74 E6              1115 	mov	a,#(0x66 ^ 0x80)
   022C 8C F0              1116 	mov	b,r4
   022E 63 F0 80           1117 	xrl	b,#0x80
   0231 95 F0              1118 	subb	a,b
                           1119 ;	genIfxJump
                           1120 ;	Peephole 112.b	changed ljmp to sjmp
                           1121 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0233 40 42              1122 	jc	00107$
                           1123 ;	Peephole 300	removed redundant label 00176$
   0235                    1124 00106$:
                           1125 ;	serial.c:108: buf[index] = toupper(c);
                           1126 ;	genAssign
   0235 90s00r13           1127 	mov	dptr,#_Serial_GetHex_index_1_1
   0238 E0                 1128 	movx	a,@dptr
   0239 FA                 1129 	mov	r2,a
   023A A3                 1130 	inc	dptr
   023B E0                 1131 	movx	a,@dptr
   023C FB                 1132 	mov	r3,a
                           1133 ;	genPlus
                           1134 ;	Peephole 236.g	used r2 instead of ar2
   023D EA                 1135 	mov	a,r2
   023E 24r11              1136 	add	a,#_Serial_GetHex_buf_1_1
   0240 FA                 1137 	mov	r2,a
                           1138 ;	Peephole 236.g	used r3 instead of ar3
   0241 EB                 1139 	mov	a,r3
   0242 34s00              1140 	addc	a,#(_Serial_GetHex_buf_1_1 >> 8)
   0244 FB                 1141 	mov	r3,a
                           1142 ;	genCall
   0245 8C 82              1143 	mov	dpl,r4
   0247 C0 02              1144 	push	ar2
   0249 C0 03              1145 	push	ar3
   024B C0 04              1146 	push	ar4
   024D 12s00r00           1147 	lcall	_islower
   0250 E5 82              1148 	mov	a,dpl
   0252 D0 04              1149 	pop	ar4
   0254 D0 03              1150 	pop	ar3
   0256 D0 02              1151 	pop	ar2
                           1152 ;	genIfx
                           1153 ;	genIfxJump
                           1154 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0258 60 06              1155 	jz	00141$
                           1156 ;	Peephole 300	removed redundant label 00177$
                           1157 ;	genAnd
   025A 74 DF              1158 	mov	a,#0xDF
   025C 5C                 1159 	anl	a,r4
   025D FD                 1160 	mov	r5,a
                           1161 ;	Peephole 112.b	changed ljmp to sjmp
   025E 80 02              1162 	sjmp	00142$
   0260                    1163 00141$:
                           1164 ;	genAssign
   0260 8C 05              1165 	mov	ar5,r4
   0262                    1166 00142$:
                           1167 ;	genPointerSet
                           1168 ;     genFarPointerSet
   0262 8A 82              1169 	mov	dpl,r2
   0264 8B 83              1170 	mov	dph,r3
   0266 ED                 1171 	mov	a,r5
   0267 F0                 1172 	movx	@dptr,a
                           1173 ;	serial.c:109: ++index;
                           1174 ;	genPlus
   0268 90s00r13           1175 	mov	dptr,#_Serial_GetHex_index_1_1
   026B E0                 1176 	movx	a,@dptr
   026C 24 01              1177 	add	a,#0x01
   026E F0                 1178 	movx	@dptr,a
   026F A3                 1179 	inc	dptr
   0270 E0                 1180 	movx	a,@dptr
   0271 34 00              1181 	addc	a,#0x00
   0273 F0                 1182 	movx	@dptr,a
   0274 02s01r4D           1183 	ljmp	00123$
   0277                    1184 00107$:
                           1185 ;	serial.c:112: printf("\r\nInvalid character. Enter only hex characters.\r\n");
                           1186 ;	genIpush
   0277 74r5C              1187 	mov	a,#__str_2
   0279 C0 E0              1188 	push	acc
   027B 74s00              1189 	mov	a,#(__str_2 >> 8)
   027D C0 E0              1190 	push	acc
   027F 74 80              1191 	mov	a,#0x80
   0281 C0 E0              1192 	push	acc
                           1193 ;	genCall
   0283 12s00r00           1194 	lcall	_printf
   0286 15 81              1195 	dec	sp
   0288 15 81              1196 	dec	sp
   028A 15 81              1197 	dec	sp
   028C 02s01r4D           1198 	ljmp	00123$
   028F                    1199 00125$:
                           1200 ;	serial.c:116: result = 0;
                           1201 ;	genAssign
   028F 90s00r15           1202 	mov	dptr,#_Serial_GetHex_result_1_1
                           1203 ;	Peephole 181	changed mov to clr
   0292 E4                 1204 	clr	a
   0293 F0                 1205 	movx	@dptr,a
                           1206 ;	serial.c:117: while (index < max_length ){
                           1207 ;	genAssign
   0294 7A 00              1208 	mov	r2,#0x00
   0296 7B 00              1209 	mov	r3,#0x00
   0298                    1210 00136$:
                           1211 ;	genCmpLt
                           1212 ;	genCmp
   0298 C3                 1213 	clr	c
   0299 EA                 1214 	mov	a,r2
   029A 94 02              1215 	subb	a,#0x02
   029C EB                 1216 	mov	a,r3
   029D 64 80              1217 	xrl	a,#0x80
   029F 94 80              1218 	subb	a,#0x80
                           1219 ;	genIfxJump
   02A1 40 03              1220 	jc	00178$
   02A3 02s03r53           1221 	ljmp	00138$
   02A6                    1222 00178$:
                           1223 ;	serial.c:118: c = buf[index];
                           1224 ;	genPlus
                           1225 ;	Peephole 236.g	used r2 instead of ar2
   02A6 EA                 1226 	mov	a,r2
   02A7 24r11              1227 	add	a,#_Serial_GetHex_buf_1_1
   02A9 F5 82              1228 	mov	dpl,a
                           1229 ;	Peephole 236.g	used r3 instead of ar3
   02AB EB                 1230 	mov	a,r3
   02AC 34s00              1231 	addc	a,#(_Serial_GetHex_buf_1_1 >> 8)
   02AE F5 83              1232 	mov	dph,a
                           1233 ;	genPointerGet
                           1234 ;	genFarPointerGet
   02B0 E0                 1235 	movx	a,@dptr
                           1236 ;	genAssign
   02B1 FC                 1237 	mov	r4,a
   02B2 90s00r10           1238 	mov	dptr,#_Serial_GetHex_c_1_1
                           1239 ;	Peephole 100	removed redundant mov
   02B5 F0                 1240 	movx	@dptr,a
                           1241 ;	serial.c:119: if(isdigit(c))
                           1242 ;	genCall
   02B6 8C 82              1243 	mov	dpl,r4
   02B8 C0 02              1244 	push	ar2
   02BA C0 03              1245 	push	ar3
   02BC C0 04              1246 	push	ar4
   02BE 12s00r00           1247 	lcall	_isdigit
   02C1 E5 82              1248 	mov	a,dpl
   02C3 D0 04              1249 	pop	ar4
   02C5 D0 03              1250 	pop	ar3
   02C7 D0 02              1251 	pop	ar2
                           1252 ;	genIfx
                           1253 ;	genIfxJump
                           1254 ;	Peephole 108.c	removed ljmp by inverse jump logic
   02C9 60 09              1255 	jz	00134$
                           1256 ;	Peephole 300	removed redundant label 00179$
                           1257 ;	serial.c:120: num = c -'0';
                           1258 ;	genMinus
   02CB EC                 1259 	mov	a,r4
   02CC 24 D0              1260 	add	a,#0xd0
                           1261 ;	genAssign
   02CE 90s00r16           1262 	mov	dptr,#_Serial_GetHex_num_1_1
   02D1 F0                 1263 	movx	@dptr,a
                           1264 ;	Peephole 112.b	changed ljmp to sjmp
   02D2 80 3A              1265 	sjmp	00135$
   02D4                    1266 00134$:
                           1267 ;	serial.c:121: else if(c>='a' && c<='f')
                           1268 ;	genCmpLt
                           1269 ;	genCmp
   02D4 C3                 1270 	clr	c
   02D5 EC                 1271 	mov	a,r4
   02D6 64 80              1272 	xrl	a,#0x80
   02D8 94 E1              1273 	subb	a,#0xe1
                           1274 ;	genIfxJump
                           1275 ;	Peephole 112.b	changed ljmp to sjmp
                           1276 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1277 ;	genCmpGt
                           1278 ;	genCmp
   02DA 40 14              1279 	jc	00130$
                           1280 ;	Peephole 300	removed redundant label 00180$
                           1281 ;	Peephole 256.a	removed redundant clr c
                           1282 ;	Peephole 159	avoided xrl during execution
   02DC 74 E6              1283 	mov	a,#(0x66 ^ 0x80)
   02DE 8C F0              1284 	mov	b,r4
   02E0 63 F0 80           1285 	xrl	b,#0x80
   02E3 95 F0              1286 	subb	a,b
                           1287 ;	genIfxJump
                           1288 ;	Peephole 112.b	changed ljmp to sjmp
                           1289 ;	Peephole 160.a	removed sjmp by inverse jump logic
   02E5 40 09              1290 	jc	00130$
                           1291 ;	Peephole 300	removed redundant label 00181$
                           1292 ;	serial.c:122: num = 10 + c - 'a';
                           1293 ;	genPlus
   02E7 90s00r16           1294 	mov	dptr,#_Serial_GetHex_num_1_1
                           1295 ;     genPlusIncr
   02EA 74 A9              1296 	mov	a,#0xA9
                           1297 ;	Peephole 236.a	used r4 instead of ar4
   02EC 2C                 1298 	add	a,r4
   02ED F0                 1299 	movx	@dptr,a
                           1300 ;	Peephole 112.b	changed ljmp to sjmp
   02EE 80 1E              1301 	sjmp	00135$
   02F0                    1302 00130$:
                           1303 ;	serial.c:123: else if(c>='A' && c<='F')
                           1304 ;	genAssign
   02F0 90s00r10           1305 	mov	dptr,#_Serial_GetHex_c_1_1
   02F3 E0                 1306 	movx	a,@dptr
                           1307 ;	genCmpLt
                           1308 ;	genCmp
   02F4 FC                 1309 	mov	r4,a
   02F5 C3                 1310 	clr	c
                           1311 ;	Peephole 106	removed redundant mov
   02F6 64 80              1312 	xrl	a,#0x80
   02F8 94 C1              1313 	subb	a,#0xc1
                           1314 ;	genIfxJump
                           1315 ;	Peephole 112.b	changed ljmp to sjmp
                           1316 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1317 ;	genCmpGt
                           1318 ;	genCmp
   02FA 40 12              1319 	jc	00135$
                           1320 ;	Peephole 300	removed redundant label 00182$
                           1321 ;	Peephole 256.a	removed redundant clr c
                           1322 ;	Peephole 159	avoided xrl during execution
   02FC 74 C6              1323 	mov	a,#(0x46 ^ 0x80)
   02FE 8C F0              1324 	mov	b,r4
   0300 63 F0 80           1325 	xrl	b,#0x80
   0303 95 F0              1326 	subb	a,b
                           1327 ;	genIfxJump
                           1328 ;	Peephole 112.b	changed ljmp to sjmp
                           1329 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0305 40 07              1330 	jc	00135$
                           1331 ;	Peephole 300	removed redundant label 00183$
                           1332 ;	serial.c:124: num = 10 + c - 'A';
                           1333 ;	genPlus
   0307 90s00r16           1334 	mov	dptr,#_Serial_GetHex_num_1_1
                           1335 ;     genPlusIncr
   030A 74 C9              1336 	mov	a,#0xC9
                           1337 ;	Peephole 236.a	used r4 instead of ar4
   030C 2C                 1338 	add	a,r4
   030D F0                 1339 	movx	@dptr,a
   030E                    1340 00135$:
                           1341 ;	serial.c:125: result += num << (4*(1-index));
                           1342 ;	genMinus
   030E 74 01              1343 	mov	a,#0x01
   0310 C3                 1344 	clr	c
                           1345 ;	Peephole 236.l	used r2 instead of ar2
   0311 9A                 1346 	subb	a,r2
   0312 FC                 1347 	mov	r4,a
                           1348 ;	Peephole 181	changed mov to clr
   0313 E4                 1349 	clr	a
                           1350 ;	Peephole 236.l	used r3 instead of ar3
   0314 9B                 1351 	subb	a,r3
                           1352 ;	genLeftShift
                           1353 ;	genLeftShiftLiteral
                           1354 ;	genlshTwo
   0315 FD                 1355 	mov	r5,a
                           1356 ;	Peephole 105	removed redundant mov
   0316 CC                 1357 	xch	a,r4
   0317 25 E0              1358 	add	a,acc
   0319 CC                 1359 	xch	a,r4
   031A 33                 1360 	rlc	a
   031B CC                 1361 	xch	a,r4
   031C 25 E0              1362 	add	a,acc
   031E CC                 1363 	xch	a,r4
   031F 33                 1364 	rlc	a
   0320 FD                 1365 	mov	r5,a
                           1366 ;	genAssign
   0321 90s00r16           1367 	mov	dptr,#_Serial_GetHex_num_1_1
   0324 E0                 1368 	movx	a,@dptr
   0325 FE                 1369 	mov	r6,a
                           1370 ;	genLeftShift
   0326 8C F0              1371 	mov	b,r4
   0328 05 F0              1372 	inc	b
   032A AC 06              1373 	mov	r4,ar6
   032C 7D 00              1374 	mov	r5,#0x00
   032E 80 06              1375 	sjmp	00185$
   0330                    1376 00184$:
   0330 EC                 1377 	mov	a,r4
                           1378 ;	Peephole 254	optimized left shift
   0331 2C                 1379 	add	a,r4
   0332 FC                 1380 	mov	r4,a
   0333 ED                 1381 	mov	a,r5
   0334 33                 1382 	rlc	a
   0335 FD                 1383 	mov	r5,a
   0336                    1384 00185$:
   0336 D5 F0 F7           1385 	djnz	b,00184$
                           1386 ;	genAssign
   0339 90s00r15           1387 	mov	dptr,#_Serial_GetHex_result_1_1
   033C E0                 1388 	movx	a,@dptr
   033D FE                 1389 	mov	r6,a
                           1390 ;	genCast
   033E 7F 00              1391 	mov	r7,#0x00
                           1392 ;	genPlus
                           1393 ;	Peephole 236.g	used r4 instead of ar4
   0340 EC                 1394 	mov	a,r4
                           1395 ;	Peephole 236.a	used r6 instead of ar6
   0341 2E                 1396 	add	a,r6
   0342 FC                 1397 	mov	r4,a
                           1398 ;	Peephole 236.g	used r5 instead of ar5
   0343 ED                 1399 	mov	a,r5
                           1400 ;	Peephole 236.b	used r7 instead of ar7
   0344 3F                 1401 	addc	a,r7
   0345 FD                 1402 	mov	r5,a
                           1403 ;	genCast
   0346 90s00r15           1404 	mov	dptr,#_Serial_GetHex_result_1_1
   0349 EC                 1405 	mov	a,r4
   034A F0                 1406 	movx	@dptr,a
                           1407 ;	serial.c:126: ++index;
                           1408 ;	genPlus
                           1409 ;     genPlusIncr
   034B 0A                 1410 	inc	r2
   034C BA 00 01           1411 	cjne	r2,#0x00,00186$
   034F 0B                 1412 	inc	r3
   0350                    1413 00186$:
   0350 02s02r98           1414 	ljmp	00136$
   0353                    1415 00138$:
                           1416 ;	serial.c:128: return result;
                           1417 ;	genAssign
   0353 90s00r15           1418 	mov	dptr,#_Serial_GetHex_result_1_1
   0356 E0                 1419 	movx	a,@dptr
                           1420 ;	genRet
                           1421 ;	Peephole 234.a	loading dpl directly from a(ccumulator), r2 not set
   0357 F5 82              1422 	mov	dpl,a
                           1423 ;	Peephole 300	removed redundant label 00139$
   0359 22                 1424 	ret
                           1425 ;------------------------------------------------------------
                           1426 ;Allocation info for local variables in function 'getstring'
                           1427 ;------------------------------------------------------------
                           1428 ;sloc0                     Allocated with name '_getstring_sloc0_1_0'
                           1429 ;length                    Allocated with name '_getstring_PARM_2'
                           1430 ;buf                       Allocated with name '_getstring_buf_1_1'
                           1431 ;c                         Allocated with name '_getstring_c_1_1'
                           1432 ;offset                    Allocated with name '_getstring_offset_1_1'
                           1433 ;------------------------------------------------------------
                           1434 ;	serial.c:133: void getstring(unsigned char *buf, int length){
                           1435 ;	-----------------------------------------
                           1436 ;	 function getstring
                           1437 ;	-----------------------------------------
   035A                    1438 _getstring:
                           1439 ;	genReceive
   035A AA F0              1440 	mov	r2,b
   035C AB 83              1441 	mov	r3,dph
   035E E5 82              1442 	mov	a,dpl
   0360 90s00r19           1443 	mov	dptr,#_getstring_buf_1_1
   0363 F0                 1444 	movx	@dptr,a
   0364 A3                 1445 	inc	dptr
   0365 EB                 1446 	mov	a,r3
   0366 F0                 1447 	movx	@dptr,a
   0367 A3                 1448 	inc	dptr
   0368 EA                 1449 	mov	a,r2
   0369 F0                 1450 	movx	@dptr,a
                           1451 ;	serial.c:136: c = getchar();
                           1452 ;	genCall
   036A 12s00r12           1453 	lcall	_getchar
   036D AA 82              1454 	mov	r2,dpl
                           1455 ;	genAssign
   036F 90s00r1C           1456 	mov	dptr,#_getstring_c_1_1
   0372 EA                 1457 	mov	a,r2
   0373 F0                 1458 	movx	@dptr,a
                           1459 ;	serial.c:137: putchar(c);
                           1460 ;	genCall
   0374 8A 82              1461 	mov	dpl,r2
   0376 12s00r00           1462 	lcall	_putchar
                           1463 ;	serial.c:138: while(c != ENTER_KEY && offset < length){
                           1464 ;	genAssign
   0379 90s00r17           1465 	mov	dptr,#_getstring_PARM_2
   037C E0                 1466 	movx	a,@dptr
   037D FA                 1467 	mov	r2,a
   037E A3                 1468 	inc	dptr
   037F E0                 1469 	movx	a,@dptr
   0380 FB                 1470 	mov	r3,a
                           1471 ;	genAssign
   0381 90s00r19           1472 	mov	dptr,#_getstring_buf_1_1
   0384 E0                 1473 	movx	a,@dptr
   0385 F5*00              1474 	mov	_getstring_sloc0_1_0,a
   0387 A3                 1475 	inc	dptr
   0388 E0                 1476 	movx	a,@dptr
   0389 F5*01              1477 	mov	(_getstring_sloc0_1_0 + 1),a
   038B A3                 1478 	inc	dptr
   038C E0                 1479 	movx	a,@dptr
   038D F5*02              1480 	mov	(_getstring_sloc0_1_0 + 2),a
                           1481 ;	genAssign
   038F 7F 00              1482 	mov	r7,#0x00
   0391 78 00              1483 	mov	r0,#0x00
   0393                    1484 00102$:
                           1485 ;	genAssign
   0393 90s00r1C           1486 	mov	dptr,#_getstring_c_1_1
   0396 E0                 1487 	movx	a,@dptr
   0397 F9                 1488 	mov	r1,a
                           1489 ;	genCmpEq
                           1490 ;	gencjneshort
   0398 B9 0D 02           1491 	cjne	r1,#0x0D,00111$
                           1492 ;	Peephole 112.b	changed ljmp to sjmp
   039B 80 5D              1493 	sjmp	00104$
   039D                    1494 00111$:
                           1495 ;	genCmpLt
                           1496 ;	genCmp
   039D C3                 1497 	clr	c
   039E EF                 1498 	mov	a,r7
   039F 9A                 1499 	subb	a,r2
   03A0 E8                 1500 	mov	a,r0
   03A1 64 80              1501 	xrl	a,#0x80
   03A3 8B F0              1502 	mov	b,r3
   03A5 63 F0 80           1503 	xrl	b,#0x80
   03A8 95 F0              1504 	subb	a,b
                           1505 ;	genIfxJump
                           1506 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03AA 50 4E              1507 	jnc	00104$
                           1508 ;	Peephole 300	removed redundant label 00112$
                           1509 ;	serial.c:139: buf[offset] = c;
                           1510 ;	genIpush
   03AC C0 02              1511 	push	ar2
   03AE C0 03              1512 	push	ar3
                           1513 ;	genPlus
                           1514 ;	Peephole 236.g	used r7 instead of ar7
   03B0 EF                 1515 	mov	a,r7
   03B1 25*00              1516 	add	a,_getstring_sloc0_1_0
   03B3 FA                 1517 	mov	r2,a
                           1518 ;	Peephole 236.g	used r0 instead of ar0
   03B4 E8                 1519 	mov	a,r0
   03B5 35*01              1520 	addc	a,(_getstring_sloc0_1_0 + 1)
   03B7 FB                 1521 	mov	r3,a
   03B8 AC*02              1522 	mov	r4,(_getstring_sloc0_1_0 + 2)
                           1523 ;	genPointerSet
                           1524 ;	genGenPointerSet
   03BA 8A 82              1525 	mov	dpl,r2
   03BC 8B 83              1526 	mov	dph,r3
   03BE 8C F0              1527 	mov	b,r4
   03C0 E9                 1528 	mov	a,r1
   03C1 12s00r00           1529 	lcall	__gptrput
                           1530 ;	serial.c:140: c = getchar();
                           1531 ;	genCall
   03C4 C0 03              1532 	push	ar3
   03C6 C0 07              1533 	push	ar7
   03C8 C0 00              1534 	push	ar0
   03CA 12s00r12           1535 	lcall	_getchar
   03CD AA 82              1536 	mov	r2,dpl
   03CF D0 00              1537 	pop	ar0
   03D1 D0 07              1538 	pop	ar7
   03D3 D0 03              1539 	pop	ar3
                           1540 ;	genAssign
   03D5 90s00r1C           1541 	mov	dptr,#_getstring_c_1_1
   03D8 EA                 1542 	mov	a,r2
   03D9 F0                 1543 	movx	@dptr,a
                           1544 ;	serial.c:141: putchar(c);
                           1545 ;	genCall
   03DA 8A 82              1546 	mov	dpl,r2
   03DC C0 02              1547 	push	ar2
   03DE C0 03              1548 	push	ar3
   03E0 C0 07              1549 	push	ar7
   03E2 C0 00              1550 	push	ar0
   03E4 12s00r00           1551 	lcall	_putchar
   03E7 D0 00              1552 	pop	ar0
   03E9 D0 07              1553 	pop	ar7
   03EB D0 03              1554 	pop	ar3
   03ED D0 02              1555 	pop	ar2
                           1556 ;	serial.c:143: ++offset;
                           1557 ;	genPlus
                           1558 ;     genPlusIncr
   03EF 0F                 1559 	inc	r7
   03F0 BF 00 01           1560 	cjne	r7,#0x00,00113$
   03F3 08                 1561 	inc	r0
   03F4                    1562 00113$:
                           1563 ;	genIpop
   03F4 D0 03              1564 	pop	ar3
   03F6 D0 02              1565 	pop	ar2
                           1566 ;	Peephole 112.b	changed ljmp to sjmp
   03F8 80 99              1567 	sjmp	00102$
   03FA                    1568 00104$:
                           1569 ;	serial.c:147: buf[offset] = '\0';
                           1570 ;	genAssign
   03FA 90s00r19           1571 	mov	dptr,#_getstring_buf_1_1
   03FD E0                 1572 	movx	a,@dptr
   03FE FA                 1573 	mov	r2,a
   03FF A3                 1574 	inc	dptr
   0400 E0                 1575 	movx	a,@dptr
   0401 FB                 1576 	mov	r3,a
   0402 A3                 1577 	inc	dptr
   0403 E0                 1578 	movx	a,@dptr
   0404 FC                 1579 	mov	r4,a
                           1580 ;	genPlus
                           1581 ;	Peephole 236.g	used r7 instead of ar7
   0405 EF                 1582 	mov	a,r7
                           1583 ;	Peephole 236.a	used r2 instead of ar2
   0406 2A                 1584 	add	a,r2
   0407 FF                 1585 	mov	r7,a
                           1586 ;	Peephole 236.g	used r0 instead of ar0
   0408 E8                 1587 	mov	a,r0
                           1588 ;	Peephole 236.b	used r3 instead of ar3
   0409 3B                 1589 	addc	a,r3
   040A F8                 1590 	mov	r0,a
   040B 8C 05              1591 	mov	ar5,r4
                           1592 ;	genPointerSet
                           1593 ;	genGenPointerSet
   040D 8F 82              1594 	mov	dpl,r7
   040F 88 83              1595 	mov	dph,r0
   0411 8D F0              1596 	mov	b,r5
                           1597 ;	Peephole 181	changed mov to clr
   0413 E4                 1598 	clr	a
                           1599 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0414 02s00r00           1600 	ljmp	__gptrput
                           1601 ;
                           1602 ;------------------------------------------------------------
                           1603 ;Allocation info for local variables in function 'Serial_Init'
                           1604 ;------------------------------------------------------------
                           1605 ;------------------------------------------------------------
                           1606 ;	serial.c:153: void Serial_Init(void){
                           1607 ;	-----------------------------------------
                           1608 ;	 function Serial_Init
                           1609 ;	-----------------------------------------
   0417                    1610 _Serial_Init:
                           1611 ;	serial.c:154: SCON = SCON_SERIAL_INIT;    //Init serial port
                           1612 ;	genAssign
   0417 75 98 50           1613 	mov	_SCON,#0x50
                           1614 ;	serial.c:155: TMOD = TIMER1_TMOD_VAL;     // 8 bit auto-reload mode 2
                           1615 ;	genAssign
   041A 75 89 20           1616 	mov	_TMOD,#0x20
                           1617 ;	serial.c:156: TH1 = TIMER1_RELOAD_VAL;
                           1618 ;	genAssign
   041D 75 8D FD           1619 	mov	_TH1,#0xFD
                           1620 ;	serial.c:157: TL1 = TIMER1_RELOAD_VAL;  //Auto-Reload value for timer 1 baud-rate = 9600
                           1621 ;	genAssign
   0420 75 8B FD           1622 	mov	_TL1,#0xFD
                           1623 ;	serial.c:159: TR1 = 1;
                           1624 ;	genAssign
   0423 D2 8E              1625 	setb	_TR1
                           1626 ;	serial.c:160: TI = 1; //Clear to start
                           1627 ;	genAssign
   0425 D2 99              1628 	setb	_TI
                           1629 ;	Peephole 300	removed redundant label 00101$
   0427 22                 1630 	ret
                           1631 	.area CSEG    (CODE)
                           1632 	.area CONST   (CODE)
   0000                    1633 __str_0:
   0000 53 65 72 69 61 6C  1634 	.ascii "Serial_getInteger(): Error. Max_Length too large."
        5F 67 65 74 49 6E
        74 65 67 65 72 28
        29 3A 20 45 72 72
        6F 72 2E 20 4D 61
        78 5F 4C 65 6E 67
        74 68 20 74 6F 6F
        20 6C 61 72 67 65
        2E
   0031 00                 1635 	.db 0x00
   0032                    1636 __str_1:
   0032 0D                 1637 	.db 0x0D
   0033 0A                 1638 	.db 0x0A
   0034 49 6E 76 61 6C 69  1639 	.ascii "Invalid character. Enter only digits."
        64 20 63 68 61 72
        61 63 74 65 72 2E
        20 45 6E 74 65 72
        20 6F 6E 6C 79 20
        64 69 67 69 74 73
        2E
   0059 0D                 1640 	.db 0x0D
   005A 0A                 1641 	.db 0x0A
   005B 00                 1642 	.db 0x00
   005C                    1643 __str_2:
   005C 0D                 1644 	.db 0x0D
   005D 0A                 1645 	.db 0x0A
   005E 49 6E 76 61 6C 69  1646 	.ascii "Invalid character. Enter only hex characters."
        64 20 63 68 61 72
        61 63 74 65 72 2E
        20 45 6E 74 65 72
        20 6F 6E 6C 79 20
        68 65 78 20 63 68
        61 72 61 63 74 65
        72 73 2E
   008B 0D                 1647 	.db 0x0D
   008C 0A                 1648 	.db 0x0A
   008D 00                 1649 	.db 0x00
                           1650 	.area XINIT   (CODE)
