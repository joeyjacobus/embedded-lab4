                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sun Nov 13 11:49:25 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _handleInput
                             14 	.globl _handleCGMode
                             15 	.globl _CG_Menu
                             16 	.globl _getBlockAndAddress
                             17 	.globl __sdcc_external_startup
                             18 	.globl _P5_7
                             19 	.globl _P5_6
                             20 	.globl _P5_5
                             21 	.globl _P5_4
                             22 	.globl _P5_3
                             23 	.globl _P5_2
                             24 	.globl _P5_1
                             25 	.globl _P5_0
                             26 	.globl _P4_7
                             27 	.globl _P4_6
                             28 	.globl _P4_5
                             29 	.globl _P4_4
                             30 	.globl _P4_3
                             31 	.globl _P4_2
                             32 	.globl _P4_1
                             33 	.globl _P4_0
                             34 	.globl _PX0L
                             35 	.globl _PT0L
                             36 	.globl _PX1L
                             37 	.globl _PT1L
                             38 	.globl _PLS
                             39 	.globl _PT2L
                             40 	.globl _PPCL
                             41 	.globl _EC
                             42 	.globl _CCF0
                             43 	.globl _CCF1
                             44 	.globl _CCF2
                             45 	.globl _CCF3
                             46 	.globl _CCF4
                             47 	.globl _CR
                             48 	.globl _CF
                             49 	.globl _TF2
                             50 	.globl _EXF2
                             51 	.globl _RCLK
                             52 	.globl _TCLK
                             53 	.globl _EXEN2
                             54 	.globl _TR2
                             55 	.globl _C_T2
                             56 	.globl _CP_RL2
                             57 	.globl _T2CON_7
                             58 	.globl _T2CON_6
                             59 	.globl _T2CON_5
                             60 	.globl _T2CON_4
                             61 	.globl _T2CON_3
                             62 	.globl _T2CON_2
                             63 	.globl _T2CON_1
                             64 	.globl _T2CON_0
                             65 	.globl _PT2
                             66 	.globl _ET2
                             67 	.globl _CY
                             68 	.globl _AC
                             69 	.globl _F0
                             70 	.globl _RS1
                             71 	.globl _RS0
                             72 	.globl _OV
                             73 	.globl _F1
                             74 	.globl _P
                             75 	.globl _PS
                             76 	.globl _PT1
                             77 	.globl _PX1
                             78 	.globl _PT0
                             79 	.globl _PX0
                             80 	.globl _RD
                             81 	.globl _WR
                             82 	.globl _T1
                             83 	.globl _T0
                             84 	.globl _INT1
                             85 	.globl _INT0
                             86 	.globl _TXD
                             87 	.globl _RXD
                             88 	.globl _P3_7
                             89 	.globl _P3_6
                             90 	.globl _P3_5
                             91 	.globl _P3_4
                             92 	.globl _P3_3
                             93 	.globl _P3_2
                             94 	.globl _P3_1
                             95 	.globl _P3_0
                             96 	.globl _EA
                             97 	.globl _ES
                             98 	.globl _ET1
                             99 	.globl _EX1
                            100 	.globl _ET0
                            101 	.globl _EX0
                            102 	.globl _P2_7
                            103 	.globl _P2_6
                            104 	.globl _P2_5
                            105 	.globl _P2_4
                            106 	.globl _P2_3
                            107 	.globl _P2_2
                            108 	.globl _P2_1
                            109 	.globl _P2_0
                            110 	.globl _SM0
                            111 	.globl _SM1
                            112 	.globl _SM2
                            113 	.globl _REN
                            114 	.globl _TB8
                            115 	.globl _RB8
                            116 	.globl _TI
                            117 	.globl _RI
                            118 	.globl _P1_7
                            119 	.globl _P1_6
                            120 	.globl _P1_5
                            121 	.globl _P1_4
                            122 	.globl _P1_3
                            123 	.globl _P1_2
                            124 	.globl _P1_1
                            125 	.globl _P1_0
                            126 	.globl _TF1
                            127 	.globl _TR1
                            128 	.globl _TF0
                            129 	.globl _TR0
                            130 	.globl _IE1
                            131 	.globl _IT1
                            132 	.globl _IE0
                            133 	.globl _IT0
                            134 	.globl _P0_7
                            135 	.globl _P0_6
                            136 	.globl _P0_5
                            137 	.globl _P0_4
                            138 	.globl _P0_3
                            139 	.globl _P0_2
                            140 	.globl _P0_1
                            141 	.globl _P0_0
                            142 	.globl _EECON
                            143 	.globl _KBF
                            144 	.globl _KBE
                            145 	.globl _KBLS
                            146 	.globl _BRL
                            147 	.globl _BDRCON
                            148 	.globl _T2MOD
                            149 	.globl _SPDAT
                            150 	.globl _SPSTA
                            151 	.globl _SPCON
                            152 	.globl _SADEN
                            153 	.globl _SADDR
                            154 	.globl _WDTPRG
                            155 	.globl _WDTRST
                            156 	.globl _P5
                            157 	.globl _P4
                            158 	.globl _IPH1
                            159 	.globl _IPL1
                            160 	.globl _IPH0
                            161 	.globl _IPL0
                            162 	.globl _IEN1
                            163 	.globl _IEN0
                            164 	.globl _CMOD
                            165 	.globl _CL
                            166 	.globl _CH
                            167 	.globl _CCON
                            168 	.globl _CCAPM4
                            169 	.globl _CCAPM3
                            170 	.globl _CCAPM2
                            171 	.globl _CCAPM1
                            172 	.globl _CCAPM0
                            173 	.globl _CCAP4L
                            174 	.globl _CCAP3L
                            175 	.globl _CCAP2L
                            176 	.globl _CCAP1L
                            177 	.globl _CCAP0L
                            178 	.globl _CCAP4H
                            179 	.globl _CCAP3H
                            180 	.globl _CCAP2H
                            181 	.globl _CCAP1H
                            182 	.globl _CCAP0H
                            183 	.globl _CKCKON1
                            184 	.globl _CKCKON0
                            185 	.globl _CKRL
                            186 	.globl _AUXR1
                            187 	.globl _AUXR
                            188 	.globl _TH2
                            189 	.globl _TL2
                            190 	.globl _RCAP2H
                            191 	.globl _RCAP2L
                            192 	.globl _T2CON
                            193 	.globl _B
                            194 	.globl _ACC
                            195 	.globl _PSW
                            196 	.globl _IP
                            197 	.globl _P3
                            198 	.globl _IE
                            199 	.globl _P2
                            200 	.globl _SBUF
                            201 	.globl _SCON
                            202 	.globl _P1
                            203 	.globl _TH1
                            204 	.globl _TH0
                            205 	.globl _TL1
                            206 	.globl _TL0
                            207 	.globl _TMOD
                            208 	.globl _TCON
                            209 	.globl _PCON
                            210 	.globl _DPH
                            211 	.globl _DPL
                            212 	.globl _SP
                            213 	.globl _P0
                            214 	.globl _ExpiredAlarms
                            215 	.globl _mode
                            216 	.globl _getBlockAndAddress_PARM_2
                            217 	.globl _DisableFlag
                            218 	.globl _LCD_Menu
                            219 	.globl _handleLCDMode
                            220 	.globl _EEPROM_Menu
                            221 	.globl _handleEEPROMMode
                            222 	.globl _CLOCK_Menu
                            223 	.globl _handleCLOCKMode
                            224 	.globl _MainMenu
                            225 	.globl _handleMAINMode
                            226 ;--------------------------------------------------------
                            227 ; special function registers
                            228 ;--------------------------------------------------------
                            229 	.area RSEG    (DATA)
                    0080    230 _P0	=	0x0080
                    0081    231 _SP	=	0x0081
                    0082    232 _DPL	=	0x0082
                    0083    233 _DPH	=	0x0083
                    0087    234 _PCON	=	0x0087
                    0088    235 _TCON	=	0x0088
                    0089    236 _TMOD	=	0x0089
                    008A    237 _TL0	=	0x008a
                    008B    238 _TL1	=	0x008b
                    008C    239 _TH0	=	0x008c
                    008D    240 _TH1	=	0x008d
                    0090    241 _P1	=	0x0090
                    0098    242 _SCON	=	0x0098
                    0099    243 _SBUF	=	0x0099
                    00A0    244 _P2	=	0x00a0
                    00A8    245 _IE	=	0x00a8
                    00B0    246 _P3	=	0x00b0
                    00B8    247 _IP	=	0x00b8
                    00D0    248 _PSW	=	0x00d0
                    00E0    249 _ACC	=	0x00e0
                    00F0    250 _B	=	0x00f0
                    00C8    251 _T2CON	=	0x00c8
                    00CA    252 _RCAP2L	=	0x00ca
                    00CB    253 _RCAP2H	=	0x00cb
                    00CC    254 _TL2	=	0x00cc
                    00CD    255 _TH2	=	0x00cd
                    008E    256 _AUXR	=	0x008e
                    00A2    257 _AUXR1	=	0x00a2
                    0097    258 _CKRL	=	0x0097
                    008F    259 _CKCKON0	=	0x008f
                    008F    260 _CKCKON1	=	0x008f
                    00FA    261 _CCAP0H	=	0x00fa
                    00FB    262 _CCAP1H	=	0x00fb
                    00FC    263 _CCAP2H	=	0x00fc
                    00FD    264 _CCAP3H	=	0x00fd
                    00FE    265 _CCAP4H	=	0x00fe
                    00EA    266 _CCAP0L	=	0x00ea
                    00EB    267 _CCAP1L	=	0x00eb
                    00EC    268 _CCAP2L	=	0x00ec
                    00ED    269 _CCAP3L	=	0x00ed
                    00EE    270 _CCAP4L	=	0x00ee
                    00DA    271 _CCAPM0	=	0x00da
                    00DB    272 _CCAPM1	=	0x00db
                    00DC    273 _CCAPM2	=	0x00dc
                    00DD    274 _CCAPM3	=	0x00dd
                    00DE    275 _CCAPM4	=	0x00de
                    00D8    276 _CCON	=	0x00d8
                    00F9    277 _CH	=	0x00f9
                    00E9    278 _CL	=	0x00e9
                    00D9    279 _CMOD	=	0x00d9
                    00A8    280 _IEN0	=	0x00a8
                    00B1    281 _IEN1	=	0x00b1
                    00B8    282 _IPL0	=	0x00b8
                    00B7    283 _IPH0	=	0x00b7
                    00B2    284 _IPL1	=	0x00b2
                    00B3    285 _IPH1	=	0x00b3
                    00C0    286 _P4	=	0x00c0
                    00D8    287 _P5	=	0x00d8
                    00A6    288 _WDTRST	=	0x00a6
                    00A7    289 _WDTPRG	=	0x00a7
                    00A9    290 _SADDR	=	0x00a9
                    00B9    291 _SADEN	=	0x00b9
                    00C3    292 _SPCON	=	0x00c3
                    00C4    293 _SPSTA	=	0x00c4
                    00C5    294 _SPDAT	=	0x00c5
                    00C9    295 _T2MOD	=	0x00c9
                    009B    296 _BDRCON	=	0x009b
                    009A    297 _BRL	=	0x009a
                    009C    298 _KBLS	=	0x009c
                    009D    299 _KBE	=	0x009d
                    009E    300 _KBF	=	0x009e
                    00D2    301 _EECON	=	0x00d2
                            302 ;--------------------------------------------------------
                            303 ; special function bits
                            304 ;--------------------------------------------------------
                            305 	.area RSEG    (DATA)
                    0080    306 _P0_0	=	0x0080
                    0081    307 _P0_1	=	0x0081
                    0082    308 _P0_2	=	0x0082
                    0083    309 _P0_3	=	0x0083
                    0084    310 _P0_4	=	0x0084
                    0085    311 _P0_5	=	0x0085
                    0086    312 _P0_6	=	0x0086
                    0087    313 _P0_7	=	0x0087
                    0088    314 _IT0	=	0x0088
                    0089    315 _IE0	=	0x0089
                    008A    316 _IT1	=	0x008a
                    008B    317 _IE1	=	0x008b
                    008C    318 _TR0	=	0x008c
                    008D    319 _TF0	=	0x008d
                    008E    320 _TR1	=	0x008e
                    008F    321 _TF1	=	0x008f
                    0090    322 _P1_0	=	0x0090
                    0091    323 _P1_1	=	0x0091
                    0092    324 _P1_2	=	0x0092
                    0093    325 _P1_3	=	0x0093
                    0094    326 _P1_4	=	0x0094
                    0095    327 _P1_5	=	0x0095
                    0096    328 _P1_6	=	0x0096
                    0097    329 _P1_7	=	0x0097
                    0098    330 _RI	=	0x0098
                    0099    331 _TI	=	0x0099
                    009A    332 _RB8	=	0x009a
                    009B    333 _TB8	=	0x009b
                    009C    334 _REN	=	0x009c
                    009D    335 _SM2	=	0x009d
                    009E    336 _SM1	=	0x009e
                    009F    337 _SM0	=	0x009f
                    00A0    338 _P2_0	=	0x00a0
                    00A1    339 _P2_1	=	0x00a1
                    00A2    340 _P2_2	=	0x00a2
                    00A3    341 _P2_3	=	0x00a3
                    00A4    342 _P2_4	=	0x00a4
                    00A5    343 _P2_5	=	0x00a5
                    00A6    344 _P2_6	=	0x00a6
                    00A7    345 _P2_7	=	0x00a7
                    00A8    346 _EX0	=	0x00a8
                    00A9    347 _ET0	=	0x00a9
                    00AA    348 _EX1	=	0x00aa
                    00AB    349 _ET1	=	0x00ab
                    00AC    350 _ES	=	0x00ac
                    00AF    351 _EA	=	0x00af
                    00B0    352 _P3_0	=	0x00b0
                    00B1    353 _P3_1	=	0x00b1
                    00B2    354 _P3_2	=	0x00b2
                    00B3    355 _P3_3	=	0x00b3
                    00B4    356 _P3_4	=	0x00b4
                    00B5    357 _P3_5	=	0x00b5
                    00B6    358 _P3_6	=	0x00b6
                    00B7    359 _P3_7	=	0x00b7
                    00B0    360 _RXD	=	0x00b0
                    00B1    361 _TXD	=	0x00b1
                    00B2    362 _INT0	=	0x00b2
                    00B3    363 _INT1	=	0x00b3
                    00B4    364 _T0	=	0x00b4
                    00B5    365 _T1	=	0x00b5
                    00B6    366 _WR	=	0x00b6
                    00B7    367 _RD	=	0x00b7
                    00B8    368 _PX0	=	0x00b8
                    00B9    369 _PT0	=	0x00b9
                    00BA    370 _PX1	=	0x00ba
                    00BB    371 _PT1	=	0x00bb
                    00BC    372 _PS	=	0x00bc
                    00D0    373 _P	=	0x00d0
                    00D1    374 _F1	=	0x00d1
                    00D2    375 _OV	=	0x00d2
                    00D3    376 _RS0	=	0x00d3
                    00D4    377 _RS1	=	0x00d4
                    00D5    378 _F0	=	0x00d5
                    00D6    379 _AC	=	0x00d6
                    00D7    380 _CY	=	0x00d7
                    00AD    381 _ET2	=	0x00ad
                    00BD    382 _PT2	=	0x00bd
                    00C8    383 _T2CON_0	=	0x00c8
                    00C9    384 _T2CON_1	=	0x00c9
                    00CA    385 _T2CON_2	=	0x00ca
                    00CB    386 _T2CON_3	=	0x00cb
                    00CC    387 _T2CON_4	=	0x00cc
                    00CD    388 _T2CON_5	=	0x00cd
                    00CE    389 _T2CON_6	=	0x00ce
                    00CF    390 _T2CON_7	=	0x00cf
                    00C8    391 _CP_RL2	=	0x00c8
                    00C9    392 _C_T2	=	0x00c9
                    00CA    393 _TR2	=	0x00ca
                    00CB    394 _EXEN2	=	0x00cb
                    00CC    395 _TCLK	=	0x00cc
                    00CD    396 _RCLK	=	0x00cd
                    00CE    397 _EXF2	=	0x00ce
                    00CF    398 _TF2	=	0x00cf
                    00DF    399 _CF	=	0x00df
                    00DE    400 _CR	=	0x00de
                    00DC    401 _CCF4	=	0x00dc
                    00DB    402 _CCF3	=	0x00db
                    00DA    403 _CCF2	=	0x00da
                    00D9    404 _CCF1	=	0x00d9
                    00D8    405 _CCF0	=	0x00d8
                    00AE    406 _EC	=	0x00ae
                    00BE    407 _PPCL	=	0x00be
                    00BD    408 _PT2L	=	0x00bd
                    00BC    409 _PLS	=	0x00bc
                    00BB    410 _PT1L	=	0x00bb
                    00BA    411 _PX1L	=	0x00ba
                    00B9    412 _PT0L	=	0x00b9
                    00B8    413 _PX0L	=	0x00b8
                    00C0    414 _P4_0	=	0x00c0
                    00C1    415 _P4_1	=	0x00c1
                    00C2    416 _P4_2	=	0x00c2
                    00C3    417 _P4_3	=	0x00c3
                    00C4    418 _P4_4	=	0x00c4
                    00C5    419 _P4_5	=	0x00c5
                    00C6    420 _P4_6	=	0x00c6
                    00C7    421 _P4_7	=	0x00c7
                    00D8    422 _P5_0	=	0x00d8
                    00D9    423 _P5_1	=	0x00d9
                    00DA    424 _P5_2	=	0x00da
                    00DB    425 _P5_3	=	0x00db
                    00DC    426 _P5_4	=	0x00dc
                    00DD    427 _P5_5	=	0x00dd
                    00DE    428 _P5_6	=	0x00de
                    00DF    429 _P5_7	=	0x00df
                            430 ;--------------------------------------------------------
                            431 ; overlayable register banks
                            432 ;--------------------------------------------------------
                            433 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     434 	.ds 8
                            435 ;--------------------------------------------------------
                            436 ; internal ram data
                            437 ;--------------------------------------------------------
                            438 	.area DSEG    (DATA)
                            439 ;--------------------------------------------------------
                            440 ; overlayable items in internal ram 
                            441 ;--------------------------------------------------------
                            442 	.area OSEG    (OVR,DATA)
                            443 ;--------------------------------------------------------
                            444 ; Stack segment in internal ram 
                            445 ;--------------------------------------------------------
                            446 	.area	SSEG	(DATA)
   0000                     447 __start__stack:
   0000                     448 	.ds	1
                            449 
                            450 ;--------------------------------------------------------
                            451 ; indirectly addressable internal ram data
                            452 ;--------------------------------------------------------
                            453 	.area ISEG    (DATA)
                            454 ;--------------------------------------------------------
                            455 ; bit data
                            456 ;--------------------------------------------------------
                            457 	.area BSEG    (BIT)
   0000                     458 _DisableFlag::
   0000                     459 	.ds 1
                            460 ;--------------------------------------------------------
                            461 ; paged external ram data
                            462 ;--------------------------------------------------------
                            463 	.area PSEG    (PAG,XDATA)
                            464 ;--------------------------------------------------------
                            465 ; external ram data
                            466 ;--------------------------------------------------------
                            467 	.area XSEG    (XDATA)
   0000                     468 _getBlockAndAddress_PARM_2:
   0000                     469 	.ds 3
   0003                     470 _getBlockAndAddress_address_1_1:
   0003                     471 	.ds 3
   0006                     472 _handleCGMode_c_1_1:
   0006                     473 	.ds 1
   0007                     474 _handleCGMode_addr_1_1:
   0007                     475 	.ds 1
   0008                     476 _handleLCDMode_c_1_1:
   0008                     477 	.ds 1
   0009                     478 _handleLCDMode_row_1_1:
   0009                     479 	.ds 2
   000B                     480 _handleLCDMode_col_1_1:
   000B                     481 	.ds 2
   000D                     482 _handleLCDMode_str_1_1:
   000D                     483 	.ds 100
   0071                     484 _handleLCDMode_start_addr_1_1:
   0071                     485 	.ds 2
   0073                     486 _handleEEPROMMode_c_1_1:
   0073                     487 	.ds 1
   0074                     488 _handleEEPROMMode_block_1_1:
   0074                     489 	.ds 1
   0075                     490 _handleEEPROMMode_end_block_1_1:
   0075                     491 	.ds 1
   0076                     492 _handleEEPROMMode_address_1_1:
   0076                     493 	.ds 1
   0077                     494 _handleEEPROMMode_end_address_1_1:
   0077                     495 	.ds 1
   0078                     496 _handleEEPROMMode_start_addr_1_1:
   0078                     497 	.ds 2
   007A                     498 _handleEEPROMMode_end_addr_1_1:
   007A                     499 	.ds 2
   007C                     500 _handleCLOCKMode_c_1_1:
   007C                     501 	.ds 1
   007D                     502 _handleCLOCKMode_i_1_1:
   007D                     503 	.ds 1
   007E                     504 _handleMAINMode_c_1_1:
   007E                     505 	.ds 1
   007F                     506 _handleInput_c_1_1:
   007F                     507 	.ds 1
   0080                     508 _main_i_2_2:
   0080                     509 	.ds 1
                            510 ;--------------------------------------------------------
                            511 ; external initialized ram data
                            512 ;--------------------------------------------------------
                            513 	.area XISEG   (XDATA)
   0000                     514 _mode::
   0000                     515 	.ds 1
   0001                     516 _ExpiredAlarms::
   0001                     517 	.ds 3
                            518 	.area HOME    (CODE)
                            519 	.area GSINIT0 (CODE)
                            520 	.area GSINIT1 (CODE)
                            521 	.area GSINIT2 (CODE)
                            522 	.area GSINIT3 (CODE)
                            523 	.area GSINIT4 (CODE)
                            524 	.area GSINIT5 (CODE)
                            525 	.area GSINIT  (CODE)
                            526 	.area GSFINAL (CODE)
                            527 	.area CSEG    (CODE)
                            528 ;--------------------------------------------------------
                            529 ; interrupt vector 
                            530 ;--------------------------------------------------------
                            531 	.area HOME    (CODE)
   0000                     532 __interrupt_vect:
   0000 02s00r00            533 	ljmp	__sdcc_gsinit_startup
   0003 32                  534 	reti
   0004                     535 	.ds	7
   000B 02s00r00            536 	ljmp	_timer0
                            537 ;--------------------------------------------------------
                            538 ; global & static initialisations
                            539 ;--------------------------------------------------------
                            540 	.area HOME    (CODE)
                            541 	.area GSINIT  (CODE)
                            542 	.area GSFINAL (CODE)
                            543 	.area GSINIT  (CODE)
                            544 	.globl __sdcc_gsinit_startup
                            545 	.globl __sdcc_program_startup
                            546 	.globl __start__stack
                            547 	.globl __mcs51_genXINIT
                            548 	.globl __mcs51_genXRAMCLEAR
                            549 	.globl __mcs51_genRAMCLEAR
                            550 ;	main.c:36: bool DisableFlag = false;
                            551 ;	genAssign
   0000 C2*00               552 	clr	_DisableFlag
                            553 	.area GSFINAL (CODE)
   0000 02s00r00            554 	ljmp	__sdcc_program_startup
                            555 ;--------------------------------------------------------
                            556 ; Home
                            557 ;--------------------------------------------------------
                            558 	.area HOME    (CODE)
                            559 	.area CSEG    (CODE)
   0000                     560 __sdcc_program_startup:
   0000 12s11r98            561 	lcall	_main
                            562 ;	return from main will lock up
   0003 80 FE               563 	sjmp .
                            564 ;--------------------------------------------------------
                            565 ; code
                            566 ;--------------------------------------------------------
                            567 	.area CSEG    (CODE)
                            568 ;------------------------------------------------------------
                            569 ;Allocation info for local variables in function '_sdcc_external_startup'
                            570 ;------------------------------------------------------------
                            571 ;------------------------------------------------------------
                            572 ;	main.c:51: _sdcc_external_startup(){
                            573 ;	-----------------------------------------
                            574 ;	 function _sdcc_external_startup
                            575 ;	-----------------------------------------
   0005                     576 __sdcc_external_startup:
                    0002    577 	ar2 = 0x02
                    0003    578 	ar3 = 0x03
                    0004    579 	ar4 = 0x04
                    0005    580 	ar5 = 0x05
                    0006    581 	ar6 = 0x06
                    0007    582 	ar7 = 0x07
                    0000    583 	ar0 = 0x00
                    0001    584 	ar1 = 0x01
                            585 ;	main.c:53: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            586 ;	genOr
   0005 43 8E 0C            587 	orl	_AUXR,#0x0C
                            588 ;	main.c:54: return 0;
                            589 ;	genRet
                            590 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            591 	mov	dptr,#0x0000
                            592 ;	Peephole 300	removed redundant label 00101$
   000B 22                  593 	ret
                            594 ;------------------------------------------------------------
                            595 ;Allocation info for local variables in function 'getBlockAndAddress'
                            596 ;------------------------------------------------------------
                            597 ;block                     Allocated with name '_getBlockAndAddress_PARM_2'
                            598 ;address                   Allocated with name '_getBlockAndAddress_address_1_1'
                            599 ;------------------------------------------------------------
                            600 ;	main.c:58: void getBlockAndAddress(uint8_t *address, uint8_t *block){
                            601 ;	-----------------------------------------
                            602 ;	 function getBlockAndAddress
                            603 ;	-----------------------------------------
   000C                     604 _getBlockAndAddress:
                            605 ;	genReceive
   000C AA F0               606 	mov	r2,b
   000E AB 83               607 	mov	r3,dph
   0010 E5 82               608 	mov	a,dpl
   0012 90s00r03            609 	mov	dptr,#_getBlockAndAddress_address_1_1
   0015 F0                  610 	movx	@dptr,a
   0016 A3                  611 	inc	dptr
   0017 EB                  612 	mov	a,r3
   0018 F0                  613 	movx	@dptr,a
   0019 A3                  614 	inc	dptr
   001A EA                  615 	mov	a,r2
   001B F0                  616 	movx	@dptr,a
                            617 ;	main.c:59: printf("\r\nEnter an EEPROM block number from 0-7: ");
                            618 ;	genIpush
   001C 74r00               619 	mov	a,#__str_0
   001E C0 E0               620 	push	acc
   0020 74s00               621 	mov	a,#(__str_0 >> 8)
   0022 C0 E0               622 	push	acc
   0024 74 80               623 	mov	a,#0x80
   0026 C0 E0               624 	push	acc
                            625 ;	genCall
   0028 12s00r00            626 	lcall	_printf
   002B 15 81               627 	dec	sp
   002D 15 81               628 	dec	sp
   002F 15 81               629 	dec	sp
                            630 ;	main.c:60: *block = Serial_GetInteger(1);
                            631 ;	genAssign
   0031 90s00r00            632 	mov	dptr,#_getBlockAndAddress_PARM_2
   0034 E0                  633 	movx	a,@dptr
   0035 FA                  634 	mov	r2,a
   0036 A3                  635 	inc	dptr
   0037 E0                  636 	movx	a,@dptr
   0038 FB                  637 	mov	r3,a
   0039 A3                  638 	inc	dptr
   003A E0                  639 	movx	a,@dptr
   003B FC                  640 	mov	r4,a
                            641 ;	genCall
                            642 ;	Peephole 182.b	used 16 bit load of dptr
   003C 90 00 01            643 	mov	dptr,#0x0001
   003F C0 02               644 	push	ar2
   0041 C0 03               645 	push	ar3
   0043 C0 04               646 	push	ar4
   0045 12s00r00            647 	lcall	_Serial_GetInteger
   0048 AD 82               648 	mov	r5,dpl
   004A AE 83               649 	mov	r6,dph
   004C D0 04               650 	pop	ar4
   004E D0 03               651 	pop	ar3
   0050 D0 02               652 	pop	ar2
                            653 ;	genCast
                            654 ;	genPointerSet
                            655 ;	genGenPointerSet
   0052 8A 82               656 	mov	dpl,r2
   0054 8B 83               657 	mov	dph,r3
   0056 8C F0               658 	mov	b,r4
   0058 ED                  659 	mov	a,r5
   0059 12s00r00            660 	lcall	__gptrput
                            661 ;	main.c:61: while(*block > 7){
   005C                     662 00101$:
                            663 ;	genPointerGet
                            664 ;	genGenPointerGet
   005C 8A 82               665 	mov	dpl,r2
   005E 8B 83               666 	mov	dph,r3
   0060 8C F0               667 	mov	b,r4
   0062 12s00r00            668 	lcall	__gptrget
                            669 ;	genCmpGt
                            670 ;	genCmp
                            671 ;	genIfxJump
                            672 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            673 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0065 FD                  674 	mov  r5,a
                            675 ;	Peephole 177.a	removed redundant mov
   0066 24 F8               676 	add	a,#0xff - 0x07
   0068 50 43               677 	jnc	00103$
                            678 ;	Peephole 300	removed redundant label 00108$
                            679 ;	main.c:62: printf("\r\nINVALID: Enter an EEPROM block number from 0-7: ");
                            680 ;	genIpush
   006A C0 02               681 	push	ar2
   006C C0 03               682 	push	ar3
   006E C0 04               683 	push	ar4
   0070 74r2A               684 	mov	a,#__str_1
   0072 C0 E0               685 	push	acc
   0074 74s00               686 	mov	a,#(__str_1 >> 8)
   0076 C0 E0               687 	push	acc
   0078 74 80               688 	mov	a,#0x80
   007A C0 E0               689 	push	acc
                            690 ;	genCall
   007C 12s00r00            691 	lcall	_printf
   007F 15 81               692 	dec	sp
   0081 15 81               693 	dec	sp
   0083 15 81               694 	dec	sp
   0085 D0 04               695 	pop	ar4
   0087 D0 03               696 	pop	ar3
   0089 D0 02               697 	pop	ar2
                            698 ;	main.c:63: *block = Serial_GetInteger(1);
                            699 ;	genCall
                            700 ;	Peephole 182.b	used 16 bit load of dptr
   008B 90 00 01            701 	mov	dptr,#0x0001
   008E C0 02               702 	push	ar2
   0090 C0 03               703 	push	ar3
   0092 C0 04               704 	push	ar4
   0094 12s00r00            705 	lcall	_Serial_GetInteger
   0097 AD 82               706 	mov	r5,dpl
   0099 AE 83               707 	mov	r6,dph
   009B D0 04               708 	pop	ar4
   009D D0 03               709 	pop	ar3
   009F D0 02               710 	pop	ar2
                            711 ;	genCast
                            712 ;	genPointerSet
                            713 ;	genGenPointerSet
   00A1 8A 82               714 	mov	dpl,r2
   00A3 8B 83               715 	mov	dph,r3
   00A5 8C F0               716 	mov	b,r4
   00A7 ED                  717 	mov	a,r5
   00A8 12s00r00            718 	lcall	__gptrput
                            719 ;	Peephole 112.b	changed ljmp to sjmp
   00AB 80 AF               720 	sjmp	00101$
   00AD                     721 00103$:
                            722 ;	main.c:66: printf("\r\nEnter an EEPROM Word address in hex:");
                            723 ;	genIpush
   00AD 74r5D               724 	mov	a,#__str_2
   00AF C0 E0               725 	push	acc
   00B1 74s00               726 	mov	a,#(__str_2 >> 8)
   00B3 C0 E0               727 	push	acc
   00B5 74 80               728 	mov	a,#0x80
   00B7 C0 E0               729 	push	acc
                            730 ;	genCall
   00B9 12s00r00            731 	lcall	_printf
   00BC 15 81               732 	dec	sp
   00BE 15 81               733 	dec	sp
   00C0 15 81               734 	dec	sp
                            735 ;	main.c:67: *address = Serial_GetHex();
                            736 ;	genAssign
   00C2 90s00r03            737 	mov	dptr,#_getBlockAndAddress_address_1_1
   00C5 E0                  738 	movx	a,@dptr
   00C6 FA                  739 	mov	r2,a
   00C7 A3                  740 	inc	dptr
   00C8 E0                  741 	movx	a,@dptr
   00C9 FB                  742 	mov	r3,a
   00CA A3                  743 	inc	dptr
   00CB E0                  744 	movx	a,@dptr
   00CC FC                  745 	mov	r4,a
                            746 ;	genCall
   00CD C0 02               747 	push	ar2
   00CF C0 03               748 	push	ar3
   00D1 C0 04               749 	push	ar4
   00D3 12s00r00            750 	lcall	_Serial_GetHex
   00D6 AD 82               751 	mov	r5,dpl
   00D8 D0 04               752 	pop	ar4
   00DA D0 03               753 	pop	ar3
   00DC D0 02               754 	pop	ar2
                            755 ;	genPointerSet
                            756 ;	genGenPointerSet
   00DE 8A 82               757 	mov	dpl,r2
   00E0 8B 83               758 	mov	dph,r3
   00E2 8C F0               759 	mov	b,r4
   00E4 ED                  760 	mov	a,r5
                            761 ;	Peephole 253.b	replaced lcall/ret with ljmp
   00E5 02s00r00            762 	ljmp	__gptrput
                            763 ;
                            764 ;------------------------------------------------------------
                            765 ;Allocation info for local variables in function 'CG_Menu'
                            766 ;------------------------------------------------------------
                            767 ;------------------------------------------------------------
                            768 ;	main.c:70: void CG_Menu(void){
                            769 ;	-----------------------------------------
                            770 ;	 function CG_Menu
                            771 ;	-----------------------------------------
   00E8                     772 _CG_Menu:
                            773 ;	main.c:71: printf("\r\nIn Custom Character Mode");
                            774 ;	genIpush
   00E8 74r84               775 	mov	a,#__str_3
   00EA C0 E0               776 	push	acc
   00EC 74s00               777 	mov	a,#(__str_3 >> 8)
   00EE C0 E0               778 	push	acc
   00F0 74 80               779 	mov	a,#0x80
   00F2 C0 E0               780 	push	acc
                            781 ;	genCall
   00F4 12s00r00            782 	lcall	_printf
   00F7 15 81               783 	dec	sp
   00F9 15 81               784 	dec	sp
   00FB 15 81               785 	dec	sp
                            786 ;	main.c:72: printf("\r\nPress 'H' for help");
                            787 ;	genIpush
   00FD 74r9F               788 	mov	a,#__str_4
   00FF C0 E0               789 	push	acc
   0101 74s00               790 	mov	a,#(__str_4 >> 8)
   0103 C0 E0               791 	push	acc
   0105 74 80               792 	mov	a,#0x80
   0107 C0 E0               793 	push	acc
                            794 ;	genCall
   0109 12s00r00            795 	lcall	_printf
   010C 15 81               796 	dec	sp
   010E 15 81               797 	dec	sp
   0110 15 81               798 	dec	sp
                            799 ;	main.c:73: printf("\r\nPress 'T' to test to custom code");
                            800 ;	genIpush
   0112 74rB4               801 	mov	a,#__str_5
   0114 C0 E0               802 	push	acc
   0116 74s00               803 	mov	a,#(__str_5 >> 8)
   0118 C0 E0               804 	push	acc
   011A 74 80               805 	mov	a,#0x80
   011C C0 E0               806 	push	acc
                            807 ;	genCall
   011E 12s00r00            808 	lcall	_printf
   0121 15 81               809 	dec	sp
   0123 15 81               810 	dec	sp
   0125 15 81               811 	dec	sp
                            812 ;	main.c:74: printf("\r\nPress 'N' to add a new character");
                            813 ;	genIpush
   0127 74rD7               814 	mov	a,#__str_6
   0129 C0 E0               815 	push	acc
   012B 74s00               816 	mov	a,#(__str_6 >> 8)
   012D C0 E0               817 	push	acc
   012F 74 80               818 	mov	a,#0x80
   0131 C0 E0               819 	push	acc
                            820 ;	genCall
   0133 12s00r00            821 	lcall	_printf
   0136 15 81               822 	dec	sp
   0138 15 81               823 	dec	sp
   013A 15 81               824 	dec	sp
                            825 ;	main.c:75: printf("\r\nPress 'S' to print a custom character");
                            826 ;	genIpush
   013C 74rFA               827 	mov	a,#__str_7
   013E C0 E0               828 	push	acc
   0140 74s00               829 	mov	a,#(__str_7 >> 8)
   0142 C0 E0               830 	push	acc
   0144 74 80               831 	mov	a,#0x80
   0146 C0 E0               832 	push	acc
                            833 ;	genCall
   0148 12s00r00            834 	lcall	_printf
   014B 15 81               835 	dec	sp
   014D 15 81               836 	dec	sp
   014F 15 81               837 	dec	sp
                            838 ;	main.c:76: printf("\r\nPress 'F' to draw a flag to LCD");
                            839 ;	genIpush
   0151 74r22               840 	mov	a,#__str_8
   0153 C0 E0               841 	push	acc
   0155 74s01               842 	mov	a,#(__str_8 >> 8)
   0157 C0 E0               843 	push	acc
   0159 74 80               844 	mov	a,#0x80
   015B C0 E0               845 	push	acc
                            846 ;	genCall
   015D 12s00r00            847 	lcall	_printf
   0160 15 81               848 	dec	sp
   0162 15 81               849 	dec	sp
   0164 15 81               850 	dec	sp
                            851 ;	main.c:77: printf("\r\nPress 'r' to return to main menu\r\n");
                            852 ;	genIpush
   0166 74r44               853 	mov	a,#__str_9
   0168 C0 E0               854 	push	acc
   016A 74s01               855 	mov	a,#(__str_9 >> 8)
   016C C0 E0               856 	push	acc
   016E 74 80               857 	mov	a,#0x80
   0170 C0 E0               858 	push	acc
                            859 ;	genCall
   0172 12s00r00            860 	lcall	_printf
   0175 15 81               861 	dec	sp
   0177 15 81               862 	dec	sp
   0179 15 81               863 	dec	sp
                            864 ;	Peephole 300	removed redundant label 00101$
   017B 22                  865 	ret
                            866 ;------------------------------------------------------------
                            867 ;Allocation info for local variables in function 'handleCGMode'
                            868 ;------------------------------------------------------------
                            869 ;c                         Allocated with name '_handleCGMode_c_1_1'
                            870 ;addr                      Allocated with name '_handleCGMode_addr_1_1'
                            871 ;------------------------------------------------------------
                            872 ;	main.c:81: void handleCGMode(char c){
                            873 ;	-----------------------------------------
                            874 ;	 function handleCGMode
                            875 ;	-----------------------------------------
   017C                     876 _handleCGMode:
                            877 ;	genReceive
   017C E5 82               878 	mov	a,dpl
   017E 90s00r06            879 	mov	dptr,#_handleCGMode_c_1_1
   0181 F0                  880 	movx	@dptr,a
                            881 ;	main.c:83: switch(c){
                            882 ;	genAssign
   0182 90s00r06            883 	mov	dptr,#_handleCGMode_c_1_1
   0185 E0                  884 	movx	a,@dptr
   0186 FA                  885 	mov	r2,a
                            886 ;	genCmpEq
                            887 ;	gencjneshort
   0187 BA 46 03            888 	cjne	r2,#0x46,00122$
   018A 02s02r2F            889 	ljmp	00107$
   018D                     890 00122$:
                            891 ;	genCmpEq
                            892 ;	gencjneshort
   018D BA 48 03            893 	cjne	r2,#0x48,00123$
   0190 02s02r3A            894 	ljmp	00109$
   0193                     895 00123$:
                            896 ;	genCmpEq
                            897 ;	gencjneshort
   0193 BA 4E 02            898 	cjne	r2,#0x4E,00124$
                            899 ;	Peephole 112.b	changed ljmp to sjmp
   0196 80 26               900 	sjmp	00102$
   0198                     901 00124$:
                            902 ;	genCmpEq
                            903 ;	gencjneshort
   0198 BA 53 02            904 	cjne	r2,#0x53,00125$
                            905 ;	Peephole 112.b	changed ljmp to sjmp
   019B 80 24               906 	sjmp	00103$
   019D                     907 00125$:
                            908 ;	genCmpEq
                            909 ;	gencjneshort
   019D BA 54 02            910 	cjne	r2,#0x54,00126$
                            911 ;	Peephole 112.b	changed ljmp to sjmp
   01A0 80 07               912 	sjmp	00101$
   01A2                     913 00126$:
                            914 ;	genCmpEq
                            915 ;	gencjneshort
   01A2 BA 72 03            916 	cjne	r2,#0x72,00127$
   01A5 02s02r32            917 	ljmp	00108$
   01A8                     918 00127$:
                            919 ;	Peephole 251.a	replaced ljmp to ret with ret
   01A8 22                  920 	ret
                            921 ;	main.c:84: case 'T':
   01A9                     922 00101$:
                            923 ;	main.c:85: TestWrite();
                            924 ;	genCall
   01A9 12s00r00            925 	lcall	_TestWrite
                            926 ;	main.c:86: LCD_gotoxy(0,3);
                            927 ;	genAssign
   01AC 90s00r00            928 	mov	dptr,#_LCD_gotoxy_PARM_2
   01AF 74 03               929 	mov	a,#0x03
   01B1 F0                  930 	movx	@dptr,a
                            931 ;	genCall
   01B2 75 82 00            932 	mov	dpl,#0x00
   01B5 12s00r00            933 	lcall	_LCD_gotoxy
                            934 ;	main.c:87: LCD_Putch(0x00);
                            935 ;	genCall
   01B8 75 82 00            936 	mov	dpl,#0x00
                            937 ;	main.c:88: break;
                            938 ;	Peephole 251.a	replaced ljmp to ret with ret
                            939 ;	Peephole 253.a	replaced lcall/ret with ljmp
   01BB 02s00r00            940 	ljmp	_LCD_Putch
                            941 ;	main.c:89: case 'N':
   01BE                     942 00102$:
                            943 ;	main.c:90: Custom_New();
                            944 ;	genCall
                            945 ;	main.c:91: break;
                            946 ;	Peephole 251.a	replaced ljmp to ret with ret
                            947 ;	Peephole 253.a	replaced lcall/ret with ljmp
   01BE 02s00r00            948 	ljmp	_Custom_New
                            949 ;	main.c:92: case 'S':
   01C1                     950 00103$:
                            951 ;	main.c:93: printf("\r\nEnter an address from 0-7:");
                            952 ;	genIpush
   01C1 74r69               953 	mov	a,#__str_10
   01C3 C0 E0               954 	push	acc
   01C5 74s01               955 	mov	a,#(__str_10 >> 8)
   01C7 C0 E0               956 	push	acc
   01C9 74 80               957 	mov	a,#0x80
   01CB C0 E0               958 	push	acc
                            959 ;	genCall
   01CD 12s00r00            960 	lcall	_printf
   01D0 15 81               961 	dec	sp
   01D2 15 81               962 	dec	sp
   01D4 15 81               963 	dec	sp
                            964 ;	main.c:94: addr = Serial_GetInteger(2);
                            965 ;	genCall
                            966 ;	Peephole 182.b	used 16 bit load of dptr
   01D6 90 00 02            967 	mov	dptr,#0x0002
   01D9 12s00r00            968 	lcall	_Serial_GetInteger
   01DC AA 82               969 	mov	r2,dpl
   01DE AB 83               970 	mov	r3,dph
                            971 ;	genCast
   01E0 90s00r07            972 	mov	dptr,#_handleCGMode_addr_1_1
   01E3 EA                  973 	mov	a,r2
   01E4 F0                  974 	movx	@dptr,a
                            975 ;	main.c:95: while( addr > 7){
   01E5                     976 00104$:
                            977 ;	genAssign
   01E5 90s00r07            978 	mov	dptr,#_handleCGMode_addr_1_1
   01E8 E0                  979 	movx	a,@dptr
                            980 ;	genCmpGt
                            981 ;	genCmp
                            982 ;	genIfxJump
                            983 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            984 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   01E9 FA                  985 	mov  r2,a
                            986 ;	Peephole 177.a	removed redundant mov
   01EA 24 F8               987 	add	a,#0xff - 0x07
   01EC 50 26               988 	jnc	00106$
                            989 ;	Peephole 300	removed redundant label 00128$
                            990 ;	main.c:96: printf("\r\nEnter an address from 0-7:");
                            991 ;	genIpush
   01EE 74r69               992 	mov	a,#__str_10
   01F0 C0 E0               993 	push	acc
   01F2 74s01               994 	mov	a,#(__str_10 >> 8)
   01F4 C0 E0               995 	push	acc
   01F6 74 80               996 	mov	a,#0x80
   01F8 C0 E0               997 	push	acc
                            998 ;	genCall
   01FA 12s00r00            999 	lcall	_printf
   01FD 15 81              1000 	dec	sp
   01FF 15 81              1001 	dec	sp
   0201 15 81              1002 	dec	sp
                           1003 ;	main.c:97: addr = Serial_GetInteger(2);
                           1004 ;	genCall
                           1005 ;	Peephole 182.b	used 16 bit load of dptr
   0203 90 00 02           1006 	mov	dptr,#0x0002
   0206 12s00r00           1007 	lcall	_Serial_GetInteger
   0209 AB 82              1008 	mov	r3,dpl
   020B AC 83              1009 	mov	r4,dph
                           1010 ;	genCast
   020D 90s00r07           1011 	mov	dptr,#_handleCGMode_addr_1_1
   0210 EB                 1012 	mov	a,r3
   0211 F0                 1013 	movx	@dptr,a
                           1014 ;	Peephole 112.b	changed ljmp to sjmp
   0212 80 D1              1015 	sjmp	00104$
   0214                    1016 00106$:
                           1017 ;	main.c:99: Custom_Show(addr);
                           1018 ;	genCall
   0214 8A 82              1019 	mov	dpl,r2
   0216 12s00r00           1020 	lcall	_Custom_Show
                           1021 ;	main.c:100: printf("\r\nWrote custom character to LCD\r\n");
                           1022 ;	genIpush
   0219 74r86              1023 	mov	a,#__str_11
   021B C0 E0              1024 	push	acc
   021D 74s01              1025 	mov	a,#(__str_11 >> 8)
   021F C0 E0              1026 	push	acc
   0221 74 80              1027 	mov	a,#0x80
   0223 C0 E0              1028 	push	acc
                           1029 ;	genCall
   0225 12s00r00           1030 	lcall	_printf
   0228 15 81              1031 	dec	sp
   022A 15 81              1032 	dec	sp
   022C 15 81              1033 	dec	sp
                           1034 ;	main.c:101: break;
                           1035 ;	main.c:102: case 'F':
                           1036 ;	Peephole 112.b	changed ljmp to sjmp
                           1037 ;	Peephole 251.b	replaced sjmp to ret with ret
   022E 22                 1038 	ret
   022F                    1039 00107$:
                           1040 ;	main.c:103: Custom_DrawFlag();
                           1041 ;	genCall
                           1042 ;	main.c:104: break;
                           1043 ;	main.c:105: case 'r':
                           1044 ;	Peephole 112.b	changed ljmp to sjmp
                           1045 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1046 ;	Peephole 253.a	replaced lcall/ret with ljmp
   022F 02s00r00           1047 	ljmp	_Custom_DrawFlag
   0232                    1048 00108$:
                           1049 ;	main.c:106: mode = MAIN_MODE;
                           1050 ;	genAssign
   0232 90s00r00           1051 	mov	dptr,#_mode
                           1052 ;	Peephole 181	changed mov to clr
   0235 E4                 1053 	clr	a
   0236 F0                 1054 	movx	@dptr,a
                           1055 ;	main.c:107: MainMenu();
                           1056 ;	genCall
                           1057 ;	main.c:108: break;
                           1058 ;	main.c:109: case 'H':
                           1059 ;	Peephole 112.b	changed ljmp to sjmp
                           1060 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1061 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0237 02s10r4B           1062 	ljmp	_MainMenu
   023A                    1063 00109$:
                           1064 ;	main.c:110: CG_Menu();
                           1065 ;	genCall
                           1066 ;	main.c:114: }
                           1067 ;	Peephole 253.b	replaced lcall/ret with ljmp
   023A 02s00rE8           1068 	ljmp	_CG_Menu
                           1069 ;
                           1070 ;------------------------------------------------------------
                           1071 ;Allocation info for local variables in function 'LCD_Menu'
                           1072 ;------------------------------------------------------------
                           1073 ;------------------------------------------------------------
                           1074 ;	main.c:119: void LCD_Menu(void){
                           1075 ;	-----------------------------------------
                           1076 ;	 function LCD_Menu
                           1077 ;	-----------------------------------------
   023D                    1078 _LCD_Menu:
                           1079 ;	main.c:120: printf("\r\nIn LCD Mode");
                           1080 ;	genIpush
   023D 74rA8              1081 	mov	a,#__str_12
   023F C0 E0              1082 	push	acc
   0241 74s01              1083 	mov	a,#(__str_12 >> 8)
   0243 C0 E0              1084 	push	acc
   0245 74 80              1085 	mov	a,#0x80
   0247 C0 E0              1086 	push	acc
                           1087 ;	genCall
   0249 12s00r00           1088 	lcall	_printf
   024C 15 81              1089 	dec	sp
   024E 15 81              1090 	dec	sp
   0250 15 81              1091 	dec	sp
                           1092 ;	main.c:121: printf("\r\nPress 'H' for help");
                           1093 ;	genIpush
   0252 74r9F              1094 	mov	a,#__str_4
   0254 C0 E0              1095 	push	acc
   0256 74s00              1096 	mov	a,#(__str_4 >> 8)
   0258 C0 E0              1097 	push	acc
   025A 74 80              1098 	mov	a,#0x80
   025C C0 E0              1099 	push	acc
                           1100 ;	genCall
   025E 12s00r00           1101 	lcall	_printf
   0261 15 81              1102 	dec	sp
   0263 15 81              1103 	dec	sp
   0265 15 81              1104 	dec	sp
                           1105 ;	main.c:122: printf("\r\nPress 'I' to Init LCD. Must call this first");
                           1106 ;	genIpush
   0267 74rB6              1107 	mov	a,#__str_13
   0269 C0 E0              1108 	push	acc
   026B 74s01              1109 	mov	a,#(__str_13 >> 8)
   026D C0 E0              1110 	push	acc
   026F 74 80              1111 	mov	a,#0x80
   0271 C0 E0              1112 	push	acc
                           1113 ;	genCall
   0273 12s00r00           1114 	lcall	_printf
   0276 15 81              1115 	dec	sp
   0278 15 81              1116 	dec	sp
   027A 15 81              1117 	dec	sp
                           1118 ;	main.c:123: printf("\r\nPress 'g' to show gotoaddr ");
                           1119 ;	genIpush
   027C 74rE4              1120 	mov	a,#__str_14
   027E C0 E0              1121 	push	acc
   0280 74s01              1122 	mov	a,#(__str_14 >> 8)
   0282 C0 E0              1123 	push	acc
   0284 74 80              1124 	mov	a,#0x80
   0286 C0 E0              1125 	push	acc
                           1126 ;	genCall
   0288 12s00r00           1127 	lcall	_printf
   028B 15 81              1128 	dec	sp
   028D 15 81              1129 	dec	sp
   028F 15 81              1130 	dec	sp
                           1131 ;	main.c:124: printf("\r\nPress 'x' to show gotoxy");
                           1132 ;	genIpush
   0291 74r02              1133 	mov	a,#__str_15
   0293 C0 E0              1134 	push	acc
   0295 74s02              1135 	mov	a,#(__str_15 >> 8)
   0297 C0 E0              1136 	push	acc
   0299 74 80              1137 	mov	a,#0x80
   029B C0 E0              1138 	push	acc
                           1139 ;	genCall
   029D 12s00r00           1140 	lcall	_printf
   02A0 15 81              1141 	dec	sp
   02A2 15 81              1142 	dec	sp
   02A4 15 81              1143 	dec	sp
                           1144 ;	main.c:125: printf("\r\nPress 'c' to show putch ");
                           1145 ;	genIpush
   02A6 74r1D              1146 	mov	a,#__str_16
   02A8 C0 E0              1147 	push	acc
   02AA 74s02              1148 	mov	a,#(__str_16 >> 8)
   02AC C0 E0              1149 	push	acc
   02AE 74 80              1150 	mov	a,#0x80
   02B0 C0 E0              1151 	push	acc
                           1152 ;	genCall
   02B2 12s00r00           1153 	lcall	_printf
   02B5 15 81              1154 	dec	sp
   02B7 15 81              1155 	dec	sp
   02B9 15 81              1156 	dec	sp
                           1157 ;	main.c:126: printf("\r\nPress 's' to show putstr");
                           1158 ;	genIpush
   02BB 74r38              1159 	mov	a,#__str_17
   02BD C0 E0              1160 	push	acc
   02BF 74s02              1161 	mov	a,#(__str_17 >> 8)
   02C1 C0 E0              1162 	push	acc
   02C3 74 80              1163 	mov	a,#0x80
   02C5 C0 E0              1164 	push	acc
                           1165 ;	genCall
   02C7 12s00r00           1166 	lcall	_printf
   02CA 15 81              1167 	dec	sp
   02CC 15 81              1168 	dec	sp
   02CE 15 81              1169 	dec	sp
                           1170 ;	main.c:127: printf("\r\nPress 'C' to clear the LCD display");
                           1171 ;	genIpush
   02D0 74r53              1172 	mov	a,#__str_18
   02D2 C0 E0              1173 	push	acc
   02D4 74s02              1174 	mov	a,#(__str_18 >> 8)
   02D6 C0 E0              1175 	push	acc
   02D8 74 80              1176 	mov	a,#0x80
   02DA C0 E0              1177 	push	acc
                           1178 ;	genCall
   02DC 12s00r00           1179 	lcall	_printf
   02DF 15 81              1180 	dec	sp
   02E1 15 81              1181 	dec	sp
   02E3 15 81              1182 	dec	sp
                           1183 ;	main.c:128: printf("\r\nPress 'Y' to read the contents of DDRAM");
                           1184 ;	genIpush
   02E5 74r78              1185 	mov	a,#__str_19
   02E7 C0 E0              1186 	push	acc
   02E9 74s02              1187 	mov	a,#(__str_19 >> 8)
   02EB C0 E0              1188 	push	acc
   02ED 74 80              1189 	mov	a,#0x80
   02EF C0 E0              1190 	push	acc
                           1191 ;	genCall
   02F1 12s00r00           1192 	lcall	_printf
   02F4 15 81              1193 	dec	sp
   02F6 15 81              1194 	dec	sp
   02F8 15 81              1195 	dec	sp
                           1196 ;	main.c:129: printf("\r\nPress 'G' to read the contents of CGRAM");
                           1197 ;	genIpush
   02FA 74rA2              1198 	mov	a,#__str_20
   02FC C0 E0              1199 	push	acc
   02FE 74s02              1200 	mov	a,#(__str_20 >> 8)
   0300 C0 E0              1201 	push	acc
   0302 74 80              1202 	mov	a,#0x80
   0304 C0 E0              1203 	push	acc
                           1204 ;	genCall
   0306 12s00r00           1205 	lcall	_printf
   0309 15 81              1206 	dec	sp
   030B 15 81              1207 	dec	sp
   030D 15 81              1208 	dec	sp
                           1209 ;	main.c:130: printf("\r\nPress 'r' to return to main menu\r\n");
                           1210 ;	genIpush
   030F 74r44              1211 	mov	a,#__str_9
   0311 C0 E0              1212 	push	acc
   0313 74s01              1213 	mov	a,#(__str_9 >> 8)
   0315 C0 E0              1214 	push	acc
   0317 74 80              1215 	mov	a,#0x80
   0319 C0 E0              1216 	push	acc
                           1217 ;	genCall
   031B 12s00r00           1218 	lcall	_printf
   031E 15 81              1219 	dec	sp
   0320 15 81              1220 	dec	sp
   0322 15 81              1221 	dec	sp
                           1222 ;	Peephole 300	removed redundant label 00101$
   0324 22                 1223 	ret
                           1224 ;------------------------------------------------------------
                           1225 ;Allocation info for local variables in function 'handleLCDMode'
                           1226 ;------------------------------------------------------------
                           1227 ;c                         Allocated with name '_handleLCDMode_c_1_1'
                           1228 ;row                       Allocated with name '_handleLCDMode_row_1_1'
                           1229 ;col                       Allocated with name '_handleLCDMode_col_1_1'
                           1230 ;address                   Allocated with name '_handleLCDMode_address_1_1'
                           1231 ;str                       Allocated with name '_handleLCDMode_str_1_1'
                           1232 ;i                         Allocated with name '_handleLCDMode_i_1_1'
                           1233 ;lcdData                   Allocated with name '_handleLCDMode_lcdData_1_1'
                           1234 ;start_addr                Allocated with name '_handleLCDMode_start_addr_1_1'
                           1235 ;------------------------------------------------------------
                           1236 ;	main.c:134: void handleLCDMode(char c){
                           1237 ;	-----------------------------------------
                           1238 ;	 function handleLCDMode
                           1239 ;	-----------------------------------------
   0325                    1240 _handleLCDMode:
                           1241 ;	genReceive
   0325 E5 82              1242 	mov	a,dpl
   0327 90s00r08           1243 	mov	dptr,#_handleLCDMode_c_1_1
   032A F0                 1244 	movx	@dptr,a
                           1245 ;	main.c:142: switch(c){
                           1246 ;	genAssign
   032B 90s00r08           1247 	mov	dptr,#_handleLCDMode_c_1_1
   032E E0                 1248 	movx	a,@dptr
   032F FA                 1249 	mov	r2,a
                           1250 ;	genCmpEq
                           1251 ;	gencjneshort
   0330 BA 43 03           1252 	cjne	r2,#0x43,00178$
   0333 02s05r5B           1253 	ljmp	00117$
   0336                    1254 00178$:
                           1255 ;	genCmpEq
                           1256 ;	gencjneshort
   0336 BA 47 03           1257 	cjne	r2,#0x47,00179$
   0339 02s07rBC           1258 	ljmp	00119$
   033C                    1259 00179$:
                           1260 ;	genCmpEq
                           1261 ;	gencjneshort
   033C BA 48 03           1262 	cjne	r2,#0x48,00180$
   033F 02s08rAD           1263 	ljmp	00124$
   0342                    1264 00180$:
                           1265 ;	genCmpEq
                           1266 ;	gencjneshort
   0342 BA 49 02           1267 	cjne	r2,#0x49,00181$
                           1268 ;	Peephole 112.b	changed ljmp to sjmp
   0345 80 23              1269 	sjmp	00101$
   0347                    1270 00181$:
                           1271 ;	genCmpEq
                           1272 ;	gencjneshort
   0347 BA 59 03           1273 	cjne	r2,#0x59,00182$
   034A 02s05r82           1274 	ljmp	00118$
   034D                    1275 00182$:
                           1276 ;	genCmpEq
                           1277 ;	gencjneshort
   034D BA 63 03           1278 	cjne	r2,#0x63,00183$
   0350 02s04rB3           1279 	ljmp	00110$
   0353                    1280 00183$:
                           1281 ;	genCmpEq
                           1282 ;	gencjneshort
   0353 BA 67 02           1283 	cjne	r2,#0x67,00184$
                           1284 ;	Peephole 112.b	changed ljmp to sjmp
   0356 80 2A              1285 	sjmp	00102$
   0358                    1286 00184$:
                           1287 ;	genCmpEq
                           1288 ;	gencjneshort
   0358 BA 72 03           1289 	cjne	r2,#0x72,00185$
   035B 02s08rA5           1290 	ljmp	00123$
   035E                    1291 00185$:
                           1292 ;	genCmpEq
                           1293 ;	gencjneshort
   035E BA 73 03           1294 	cjne	r2,#0x73,00186$
   0361 02s04rE1           1295 	ljmp	00111$
   0364                    1296 00186$:
                           1297 ;	genCmpEq
                           1298 ;	gencjneshort
   0364 BA 78 02           1299 	cjne	r2,#0x78,00187$
                           1300 ;	Peephole 112.b	changed ljmp to sjmp
   0367 80 36              1301 	sjmp	00103$
   0369                    1302 00187$:
                           1303 ;	Peephole 251.a	replaced ljmp to ret with ret
   0369 22                 1304 	ret
                           1305 ;	main.c:143: case 'I':
   036A                    1306 00101$:
                           1307 ;	main.c:144: printf("\r\nInitializing LCD\r\n");
                           1308 ;	genIpush
   036A 74rCC              1309 	mov	a,#__str_21
   036C C0 E0              1310 	push	acc
   036E 74s02              1311 	mov	a,#(__str_21 >> 8)
   0370 C0 E0              1312 	push	acc
   0372 74 80              1313 	mov	a,#0x80
   0374 C0 E0              1314 	push	acc
                           1315 ;	genCall
   0376 12s00r00           1316 	lcall	_printf
   0379 15 81              1317 	dec	sp
   037B 15 81              1318 	dec	sp
   037D 15 81              1319 	dec	sp
                           1320 ;	main.c:145: LCD_Init();
                           1321 ;	genCall
                           1322 ;	main.c:146: break;
                           1323 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1324 ;	Peephole 253.a	replaced lcall/ret with ljmp
   037F 02s00r00           1325 	ljmp	_LCD_Init
                           1326 ;	main.c:147: case 'g':
   0382                    1327 00102$:
                           1328 ;	main.c:148: printf("\r\nEnter a hex address to go to\r\n");
                           1329 ;	genIpush
   0382 74rE1              1330 	mov	a,#__str_22
   0384 C0 E0              1331 	push	acc
   0386 74s02              1332 	mov	a,#(__str_22 >> 8)
   0388 C0 E0              1333 	push	acc
   038A 74 80              1334 	mov	a,#0x80
   038C C0 E0              1335 	push	acc
                           1336 ;	genCall
   038E 12s00r00           1337 	lcall	_printf
   0391 15 81              1338 	dec	sp
   0393 15 81              1339 	dec	sp
   0395 15 81              1340 	dec	sp
                           1341 ;	main.c:149: address = Serial_GetHex();
                           1342 ;	genCall
   0397 12s00r00           1343 	lcall	_Serial_GetHex
                           1344 ;	main.c:150: LCD_gotoaddr(address);
                           1345 ;	genCall
   039A AA 82              1346 	mov  r2,dpl
                           1347 ;	Peephole 177.a	removed redundant mov
                           1348 ;	main.c:151: break;
                           1349 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1350 ;	Peephole 253.a	replaced lcall/ret with ljmp
   039C 02s00r00           1351 	ljmp	_LCD_gotoaddr
                           1352 ;	main.c:152: case 'x':
   039F                    1353 00103$:
                           1354 ;	main.c:153: printf ("\r\nEnter a row from 0-3:");
                           1355 ;	genIpush
   039F 74r02              1356 	mov	a,#__str_23
   03A1 C0 E0              1357 	push	acc
   03A3 74s03              1358 	mov	a,#(__str_23 >> 8)
   03A5 C0 E0              1359 	push	acc
   03A7 74 80              1360 	mov	a,#0x80
   03A9 C0 E0              1361 	push	acc
                           1362 ;	genCall
   03AB 12s00r00           1363 	lcall	_printf
   03AE 15 81              1364 	dec	sp
   03B0 15 81              1365 	dec	sp
   03B2 15 81              1366 	dec	sp
                           1367 ;	main.c:154: row = Serial_GetInteger(3);
                           1368 ;	genCall
                           1369 ;	Peephole 182.b	used 16 bit load of dptr
   03B4 90 00 03           1370 	mov	dptr,#0x0003
   03B7 12s00r00           1371 	lcall	_Serial_GetInteger
   03BA E5 82              1372 	mov	a,dpl
   03BC 85 83 F0           1373 	mov	b,dph
                           1374 ;	genAssign
   03BF 90s00r09           1375 	mov	dptr,#_handleLCDMode_row_1_1
   03C2 F0                 1376 	movx	@dptr,a
   03C3 A3                 1377 	inc	dptr
   03C4 E5 F0              1378 	mov	a,b
   03C6 F0                 1379 	movx	@dptr,a
                           1380 ;	main.c:155: while(row > 3){
   03C7                    1381 00104$:
                           1382 ;	genAssign
   03C7 90s00r09           1383 	mov	dptr,#_handleLCDMode_row_1_1
   03CA E0                 1384 	movx	a,@dptr
   03CB FA                 1385 	mov	r2,a
   03CC A3                 1386 	inc	dptr
   03CD E0                 1387 	movx	a,@dptr
   03CE FB                 1388 	mov	r3,a
                           1389 ;	genCmpGt
                           1390 ;	genCmp
   03CF C3                 1391 	clr	c
   03D0 74 03              1392 	mov	a,#0x03
   03D2 9A                 1393 	subb	a,r2
                           1394 ;	Peephole 159	avoided xrl during execution
   03D3 74 80              1395 	mov	a,#(0x00 ^ 0x80)
   03D5 8B F0              1396 	mov	b,r3
   03D7 63 F0 80           1397 	xrl	b,#0x80
   03DA 95 F0              1398 	subb	a,b
                           1399 ;	genIfxJump
                           1400 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03DC 50 2A              1401 	jnc	00106$
                           1402 ;	Peephole 300	removed redundant label 00188$
                           1403 ;	main.c:156: printf ("\r\nEnter a row from 0-3:");
                           1404 ;	genIpush
   03DE 74r02              1405 	mov	a,#__str_23
   03E0 C0 E0              1406 	push	acc
   03E2 74s03              1407 	mov	a,#(__str_23 >> 8)
   03E4 C0 E0              1408 	push	acc
   03E6 74 80              1409 	mov	a,#0x80
   03E8 C0 E0              1410 	push	acc
                           1411 ;	genCall
   03EA 12s00r00           1412 	lcall	_printf
   03ED 15 81              1413 	dec	sp
   03EF 15 81              1414 	dec	sp
   03F1 15 81              1415 	dec	sp
                           1416 ;	main.c:157: row = Serial_GetInteger(3);
                           1417 ;	genCall
                           1418 ;	Peephole 182.b	used 16 bit load of dptr
   03F3 90 00 03           1419 	mov	dptr,#0x0003
   03F6 12s00r00           1420 	lcall	_Serial_GetInteger
   03F9 E5 82              1421 	mov	a,dpl
   03FB 85 83 F0           1422 	mov	b,dph
                           1423 ;	genAssign
   03FE 90s00r09           1424 	mov	dptr,#_handleLCDMode_row_1_1
   0401 F0                 1425 	movx	@dptr,a
   0402 A3                 1426 	inc	dptr
   0403 E5 F0              1427 	mov	a,b
   0405 F0                 1428 	movx	@dptr,a
                           1429 ;	Peephole 112.b	changed ljmp to sjmp
   0406 80 BF              1430 	sjmp	00104$
   0408                    1431 00106$:
                           1432 ;	main.c:160: printf ("\r\nEnter a col from 0-15:");
                           1433 ;	genIpush
   0408 74r1A              1434 	mov	a,#__str_24
   040A C0 E0              1435 	push	acc
   040C 74s03              1436 	mov	a,#(__str_24 >> 8)
   040E C0 E0              1437 	push	acc
   0410 74 80              1438 	mov	a,#0x80
   0412 C0 E0              1439 	push	acc
                           1440 ;	genCall
   0414 12s00r00           1441 	lcall	_printf
   0417 15 81              1442 	dec	sp
   0419 15 81              1443 	dec	sp
   041B 15 81              1444 	dec	sp
                           1445 ;	main.c:161: col = Serial_GetInteger(3) ;
                           1446 ;	genCall
                           1447 ;	Peephole 182.b	used 16 bit load of dptr
   041D 90 00 03           1448 	mov	dptr,#0x0003
   0420 12s00r00           1449 	lcall	_Serial_GetInteger
   0423 E5 82              1450 	mov	a,dpl
   0425 85 83 F0           1451 	mov	b,dph
                           1452 ;	genAssign
   0428 90s00r0B           1453 	mov	dptr,#_handleLCDMode_col_1_1
   042B F0                 1454 	movx	@dptr,a
   042C A3                 1455 	inc	dptr
   042D E5 F0              1456 	mov	a,b
   042F F0                 1457 	movx	@dptr,a
                           1458 ;	main.c:162: while(col > 15){
   0430                    1459 00107$:
                           1460 ;	genAssign
   0430 90s00r0B           1461 	mov	dptr,#_handleLCDMode_col_1_1
   0433 E0                 1462 	movx	a,@dptr
   0434 FA                 1463 	mov	r2,a
   0435 A3                 1464 	inc	dptr
   0436 E0                 1465 	movx	a,@dptr
   0437 FB                 1466 	mov	r3,a
                           1467 ;	genCmpGt
                           1468 ;	genCmp
   0438 C3                 1469 	clr	c
   0439 74 0F              1470 	mov	a,#0x0F
   043B 9A                 1471 	subb	a,r2
                           1472 ;	Peephole 159	avoided xrl during execution
   043C 74 80              1473 	mov	a,#(0x00 ^ 0x80)
   043E 8B F0              1474 	mov	b,r3
   0440 63 F0 80           1475 	xrl	b,#0x80
   0443 95 F0              1476 	subb	a,b
                           1477 ;	genIfxJump
                           1478 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0445 50 2A              1479 	jnc	00109$
                           1480 ;	Peephole 300	removed redundant label 00189$
                           1481 ;	main.c:163: printf ("\r\nEnter a col from 0-15:");
                           1482 ;	genIpush
   0447 74r1A              1483 	mov	a,#__str_24
   0449 C0 E0              1484 	push	acc
   044B 74s03              1485 	mov	a,#(__str_24 >> 8)
   044D C0 E0              1486 	push	acc
   044F 74 80              1487 	mov	a,#0x80
   0451 C0 E0              1488 	push	acc
                           1489 ;	genCall
   0453 12s00r00           1490 	lcall	_printf
   0456 15 81              1491 	dec	sp
   0458 15 81              1492 	dec	sp
   045A 15 81              1493 	dec	sp
                           1494 ;	main.c:164: col = Serial_GetInteger(3);
                           1495 ;	genCall
                           1496 ;	Peephole 182.b	used 16 bit load of dptr
   045C 90 00 03           1497 	mov	dptr,#0x0003
   045F 12s00r00           1498 	lcall	_Serial_GetInteger
   0462 E5 82              1499 	mov	a,dpl
   0464 85 83 F0           1500 	mov	b,dph
                           1501 ;	genAssign
   0467 90s00r0B           1502 	mov	dptr,#_handleLCDMode_col_1_1
   046A F0                 1503 	movx	@dptr,a
   046B A3                 1504 	inc	dptr
   046C E5 F0              1505 	mov	a,b
   046E F0                 1506 	movx	@dptr,a
                           1507 ;	Peephole 112.b	changed ljmp to sjmp
   046F 80 BF              1508 	sjmp	00107$
   0471                    1509 00109$:
                           1510 ;	main.c:167: LCD_gotoxy(row, col);
                           1511 ;	genAssign
   0471 90s00r09           1512 	mov	dptr,#_handleLCDMode_row_1_1
   0474 E0                 1513 	movx	a,@dptr
   0475 FC                 1514 	mov	r4,a
   0476 A3                 1515 	inc	dptr
   0477 E0                 1516 	movx	a,@dptr
   0478 FD                 1517 	mov	r5,a
                           1518 ;	genCast
   0479 8C 06              1519 	mov	ar6,r4
                           1520 ;	genCast
   047B 90s00r00           1521 	mov	dptr,#_LCD_gotoxy_PARM_2
   047E EA                 1522 	mov	a,r2
   047F F0                 1523 	movx	@dptr,a
                           1524 ;	genCall
   0480 8E 82              1525 	mov	dpl,r6
   0482 C0 02              1526 	push	ar2
   0484 C0 03              1527 	push	ar3
   0486 C0 04              1528 	push	ar4
   0488 C0 05              1529 	push	ar5
   048A 12s00r00           1530 	lcall	_LCD_gotoxy
   048D D0 05              1531 	pop	ar5
   048F D0 04              1532 	pop	ar4
   0491 D0 03              1533 	pop	ar3
   0493 D0 02              1534 	pop	ar2
                           1535 ;	main.c:168: printf("\r\nMoved cursor to new location (%d,%d)\r\n", row, col);
                           1536 ;	genIpush
   0495 C0 02              1537 	push	ar2
   0497 C0 03              1538 	push	ar3
                           1539 ;	genIpush
   0499 C0 04              1540 	push	ar4
   049B C0 05              1541 	push	ar5
                           1542 ;	genIpush
   049D 74r33              1543 	mov	a,#__str_25
   049F C0 E0              1544 	push	acc
   04A1 74s03              1545 	mov	a,#(__str_25 >> 8)
   04A3 C0 E0              1546 	push	acc
   04A5 74 80              1547 	mov	a,#0x80
   04A7 C0 E0              1548 	push	acc
                           1549 ;	genCall
   04A9 12s00r00           1550 	lcall	_printf
   04AC E5 81              1551 	mov	a,sp
   04AE 24 F9              1552 	add	a,#0xf9
   04B0 F5 81              1553 	mov	sp,a
                           1554 ;	main.c:169: break;
                           1555 ;	Peephole 251.a	replaced ljmp to ret with ret
   04B2 22                 1556 	ret
                           1557 ;	main.c:170: case 'c':
   04B3                    1558 00110$:
                           1559 ;	main.c:171: printf("\r\nEnter a character to put at current address\r\n");
                           1560 ;	genIpush
   04B3 74r5C              1561 	mov	a,#__str_26
   04B5 C0 E0              1562 	push	acc
   04B7 74s03              1563 	mov	a,#(__str_26 >> 8)
   04B9 C0 E0              1564 	push	acc
   04BB 74 80              1565 	mov	a,#0x80
   04BD C0 E0              1566 	push	acc
                           1567 ;	genCall
   04BF 12s00r00           1568 	lcall	_printf
   04C2 15 81              1569 	dec	sp
   04C4 15 81              1570 	dec	sp
   04C6 15 81              1571 	dec	sp
                           1572 ;	main.c:173: LCD_Putch(getchar());
                           1573 ;	genCall
   04C8 12s00r00           1574 	lcall	_getchar
                           1575 ;	genCall
   04CB AA 82              1576 	mov  r2,dpl
                           1577 ;	Peephole 177.a	removed redundant mov
   04CD 12s00r00           1578 	lcall	_LCD_Putch
                           1579 ;	main.c:174: address = LCD_ReadAddr();
                           1580 ;	genCall
   04D0 12s00r00           1581 	lcall	_LCD_ReadAddr
   04D3 AA 82              1582 	mov	r2,dpl
                           1583 ;	main.c:175: TimerRedraw();
                           1584 ;	genCall
   04D5 C0 02              1585 	push	ar2
   04D7 12s00r00           1586 	lcall	_TimerRedraw
   04DA D0 02              1587 	pop	ar2
                           1588 ;	main.c:176: LCD_gotoaddr(address);
                           1589 ;	genCall
   04DC 8A 82              1590 	mov	dpl,r2
                           1591 ;	main.c:178: break;
                           1592 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1593 ;	Peephole 253.a	replaced lcall/ret with ljmp
   04DE 02s00r00           1594 	ljmp	_LCD_gotoaddr
                           1595 ;	main.c:179: case 's':
   04E1                    1596 00111$:
                           1597 ;	main.c:180: printf("\r\Enter a string\r\n");
                           1598 ;	genIpush
   04E1 74r8C              1599 	mov	a,#__str_27
   04E3 C0 E0              1600 	push	acc
   04E5 74s03              1601 	mov	a,#(__str_27 >> 8)
   04E7 C0 E0              1602 	push	acc
   04E9 74 80              1603 	mov	a,#0x80
   04EB C0 E0              1604 	push	acc
                           1605 ;	genCall
   04ED 12s00r00           1606 	lcall	_printf
   04F0 15 81              1607 	dec	sp
   04F2 15 81              1608 	dec	sp
   04F4 15 81              1609 	dec	sp
                           1610 ;	main.c:182: while(i < 100){
                           1611 ;	genAssign
   04F6 7A 00              1612 	mov	r2,#0x00
   04F8                    1613 00114$:
                           1614 ;	genCmpLt
                           1615 ;	genCmp
   04F8 BA 64 00           1616 	cjne	r2,#0x64,00190$
   04FB                    1617 00190$:
                           1618 ;	genIfxJump
                           1619 ;	Peephole 108.a	removed ljmp by inverse jump logic
   04FB 50 44              1620 	jnc	00116$
                           1621 ;	Peephole 300	removed redundant label 00191$
                           1622 ;	main.c:183: str[i] = getchar();
                           1623 ;	genPlus
                           1624 ;	Peephole 236.g	used r2 instead of ar2
   04FD EA                 1625 	mov	a,r2
   04FE 24r0D              1626 	add	a,#_handleLCDMode_str_1_1
   0500 FB                 1627 	mov	r3,a
                           1628 ;	Peephole 181	changed mov to clr
   0501 E4                 1629 	clr	a
   0502 34s00              1630 	addc	a,#(_handleLCDMode_str_1_1 >> 8)
   0504 FC                 1631 	mov	r4,a
                           1632 ;	genCall
   0505 C0 02              1633 	push	ar2
   0507 C0 03              1634 	push	ar3
   0509 C0 04              1635 	push	ar4
   050B 12s00r00           1636 	lcall	_getchar
   050E AD 82              1637 	mov	r5,dpl
   0510 D0 04              1638 	pop	ar4
   0512 D0 03              1639 	pop	ar3
   0514 D0 02              1640 	pop	ar2
                           1641 ;	genPointerSet
                           1642 ;     genFarPointerSet
   0516 8B 82              1643 	mov	dpl,r3
   0518 8C 83              1644 	mov	dph,r4
   051A ED                 1645 	mov	a,r5
   051B F0                 1646 	movx	@dptr,a
                           1647 ;	main.c:184: putchar(str[i]);
                           1648 ;	genCall
   051C 8D 82              1649 	mov	dpl,r5
   051E C0 02              1650 	push	ar2
   0520 C0 03              1651 	push	ar3
   0522 C0 04              1652 	push	ar4
   0524 12s00r00           1653 	lcall	_putchar
   0527 D0 04              1654 	pop	ar4
   0529 D0 03              1655 	pop	ar3
   052B D0 02              1656 	pop	ar2
                           1657 ;	main.c:185: if (str[i] == ENTER_KEY){
                           1658 ;	genPointerGet
                           1659 ;	genFarPointerGet
   052D 8B 82              1660 	mov	dpl,r3
   052F 8C 83              1661 	mov	dph,r4
   0531 E0                 1662 	movx	a,@dptr
   0532 FD                 1663 	mov	r5,a
                           1664 ;	genCmpEq
                           1665 ;	gencjneshort
                           1666 ;	Peephole 112.b	changed ljmp to sjmp
                           1667 ;	Peephole 198.b	optimized misc jump sequence
   0533 BD 0D 08           1668 	cjne	r5,#0x0D,00113$
                           1669 ;	Peephole 200.b	removed redundant sjmp
                           1670 ;	Peephole 300	removed redundant label 00192$
                           1671 ;	Peephole 300	removed redundant label 00193$
                           1672 ;	main.c:186: str[i] = '\0';
                           1673 ;	genPointerSet
                           1674 ;     genFarPointerSet
   0536 8B 82              1675 	mov	dpl,r3
   0538 8C 83              1676 	mov	dph,r4
                           1677 ;	Peephole 181	changed mov to clr
   053A E4                 1678 	clr	a
   053B F0                 1679 	movx	@dptr,a
                           1680 ;	main.c:187: break;
                           1681 ;	Peephole 112.b	changed ljmp to sjmp
   053C 80 03              1682 	sjmp	00116$
   053E                    1683 00113$:
                           1684 ;	main.c:189: i++;
                           1685 ;	genPlus
                           1686 ;     genPlusIncr
   053E 0A                 1687 	inc	r2
                           1688 ;	Peephole 112.b	changed ljmp to sjmp
   053F 80 B7              1689 	sjmp	00114$
   0541                    1690 00116$:
                           1691 ;	main.c:191: LCD_Putstr(str);
                           1692 ;	genCall
                           1693 ;	Peephole 182.a	used 16 bit load of DPTR
   0541 90s00r0D           1694 	mov	dptr,#_handleLCDMode_str_1_1
   0544 75 F0 00           1695 	mov	b,#0x00
   0547 12s00r00           1696 	lcall	_LCD_Putstr
                           1697 ;	main.c:192: address = LCD_ReadAddr();
                           1698 ;	genCall
   054A 12s00r00           1699 	lcall	_LCD_ReadAddr
   054D AA 82              1700 	mov	r2,dpl
                           1701 ;	main.c:193: TimerRedraw();
                           1702 ;	genCall
   054F C0 02              1703 	push	ar2
   0551 12s00r00           1704 	lcall	_TimerRedraw
   0554 D0 02              1705 	pop	ar2
                           1706 ;	main.c:194: LCD_gotoaddr(address);
                           1707 ;	genCall
   0556 8A 82              1708 	mov	dpl,r2
                           1709 ;	main.c:195: break;
                           1710 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1711 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0558 02s00r00           1712 	ljmp	_LCD_gotoaddr
                           1713 ;	main.c:196: case 'C':
   055B                    1714 00117$:
                           1715 ;	main.c:197: LCD_ClearScreen();
                           1716 ;	genCall
   055B 12s00r00           1717 	lcall	_LCD_ClearScreen
                           1718 ;	main.c:198: TimerRedraw();
                           1719 ;	genCall
   055E 12s00r00           1720 	lcall	_TimerRedraw
                           1721 ;	main.c:199: LCD_gotoxy(0,0);    //Start at 0,0
                           1722 ;	genAssign
   0561 90s00r00           1723 	mov	dptr,#_LCD_gotoxy_PARM_2
                           1724 ;	Peephole 181	changed mov to clr
   0564 E4                 1725 	clr	a
   0565 F0                 1726 	movx	@dptr,a
                           1727 ;	genCall
   0566 75 82 00           1728 	mov	dpl,#0x00
   0569 12s00r00           1729 	lcall	_LCD_gotoxy
                           1730 ;	main.c:200: printf("\r\nLCD Display Cleared!\r\n");
                           1731 ;	genIpush
   056C 74r9E              1732 	mov	a,#__str_28
   056E C0 E0              1733 	push	acc
   0570 74s03              1734 	mov	a,#(__str_28 >> 8)
   0572 C0 E0              1735 	push	acc
   0574 74 80              1736 	mov	a,#0x80
   0576 C0 E0              1737 	push	acc
                           1738 ;	genCall
   0578 12s00r00           1739 	lcall	_printf
   057B 15 81              1740 	dec	sp
   057D 15 81              1741 	dec	sp
   057F 15 81              1742 	dec	sp
                           1743 ;	main.c:201: break;
                           1744 ;	Peephole 251.a	replaced ljmp to ret with ret
   0581 22                 1745 	ret
                           1746 ;	main.c:202: case 'Y':
   0582                    1747 00118$:
                           1748 ;	main.c:203: printf("\r\n");
                           1749 ;	genIpush
   0582 74rB7              1750 	mov	a,#__str_29
   0584 C0 E0              1751 	push	acc
   0586 74s03              1752 	mov	a,#(__str_29 >> 8)
   0588 C0 E0              1753 	push	acc
   058A 74 80              1754 	mov	a,#0x80
   058C C0 E0              1755 	push	acc
                           1756 ;	genCall
   058E 12s00r00           1757 	lcall	_printf
   0591 15 81              1758 	dec	sp
   0593 15 81              1759 	dec	sp
   0595 15 81              1760 	dec	sp
                           1761 ;	main.c:206: printf("%x: ", start_addr);
                           1762 ;	genIpush
   0597 74 80              1763 	mov	a,#0x80
   0599 C0 E0              1764 	push	acc
                           1765 ;	Peephole 181	changed mov to clr
   059B E4                 1766 	clr	a
   059C C0 E0              1767 	push	acc
                           1768 ;	genIpush
   059E 74rBA              1769 	mov	a,#__str_30
   05A0 C0 E0              1770 	push	acc
   05A2 74s03              1771 	mov	a,#(__str_30 >> 8)
   05A4 C0 E0              1772 	push	acc
   05A6 74 80              1773 	mov	a,#0x80
   05A8 C0 E0              1774 	push	acc
                           1775 ;	genCall
   05AA 12s00r00           1776 	lcall	_printf
   05AD E5 81              1777 	mov	a,sp
   05AF 24 FB              1778 	add	a,#0xfb
   05B1 F5 81              1779 	mov	sp,a
                           1780 ;	main.c:207: for (i = 0; i < 16; ++i){
                           1781 ;	genAssign
   05B3 7A 80              1782 	mov	r2,#0x80
   05B5 7B 00              1783 	mov	r3,#0x00
                           1784 ;	genAssign
   05B7 7C 10              1785 	mov	r4,#0x10
   05B9                    1786 00129$:
                           1787 ;	main.c:208: LCD_SetDDRAMAddress(start_addr);
                           1788 ;	genCast
   05B9 8A 05              1789 	mov	ar5,r2
                           1790 ;	genCall
   05BB 8D 82              1791 	mov	dpl,r5
   05BD C0 02              1792 	push	ar2
   05BF C0 03              1793 	push	ar3
   05C1 C0 04              1794 	push	ar4
   05C3 12s00r00           1795 	lcall	_LCD_SetDDRAMAddress
   05C6 D0 04              1796 	pop	ar4
   05C8 D0 03              1797 	pop	ar3
   05CA D0 02              1798 	pop	ar2
                           1799 ;	main.c:209: lcdData = LCD_ReadRAM();
                           1800 ;	genCall
   05CC C0 02              1801 	push	ar2
   05CE C0 03              1802 	push	ar3
   05D0 C0 04              1803 	push	ar4
   05D2 12s00r00           1804 	lcall	_LCD_ReadRAM
   05D5 AD 82              1805 	mov	r5,dpl
   05D7 D0 04              1806 	pop	ar4
   05D9 D0 03              1807 	pop	ar3
   05DB D0 02              1808 	pop	ar2
                           1809 ;	main.c:210: printf("%x ", lcdData);
                           1810 ;	genCast
   05DD 7E 00              1811 	mov	r6,#0x00
                           1812 ;	genIpush
   05DF C0 02              1813 	push	ar2
   05E1 C0 03              1814 	push	ar3
   05E3 C0 04              1815 	push	ar4
   05E5 C0 05              1816 	push	ar5
   05E7 C0 06              1817 	push	ar6
                           1818 ;	genIpush
   05E9 74rBF              1819 	mov	a,#__str_31
   05EB C0 E0              1820 	push	acc
   05ED 74s03              1821 	mov	a,#(__str_31 >> 8)
   05EF C0 E0              1822 	push	acc
   05F1 74 80              1823 	mov	a,#0x80
   05F3 C0 E0              1824 	push	acc
                           1825 ;	genCall
   05F5 12s00r00           1826 	lcall	_printf
   05F8 E5 81              1827 	mov	a,sp
   05FA 24 FB              1828 	add	a,#0xfb
   05FC F5 81              1829 	mov	sp,a
   05FE D0 04              1830 	pop	ar4
   0600 D0 03              1831 	pop	ar3
   0602 D0 02              1832 	pop	ar2
                           1833 ;	main.c:211: start_addr++;
                           1834 ;	genPlus
                           1835 ;     genPlusIncr
   0604 0A                 1836 	inc	r2
   0605 BA 00 01           1837 	cjne	r2,#0x00,00194$
   0608 0B                 1838 	inc	r3
   0609                    1839 00194$:
                           1840 ;	genDjnz
                           1841 ;	Peephole 112.b	changed ljmp to sjmp
                           1842 ;	Peephole 205	optimized misc jump sequence
   0609 DC AE              1843 	djnz	r4,00129$
                           1844 ;	Peephole 300	removed redundant label 00195$
                           1845 ;	Peephole 300	removed redundant label 00196$
                           1846 ;	main.c:207: for (i = 0; i < 16; ++i){
                           1847 ;	main.c:213: printf("\r\n");
                           1848 ;	genIpush
   060B 74rB7              1849 	mov	a,#__str_29
   060D C0 E0              1850 	push	acc
   060F 74s03              1851 	mov	a,#(__str_29 >> 8)
   0611 C0 E0              1852 	push	acc
   0613 74 80              1853 	mov	a,#0x80
   0615 C0 E0              1854 	push	acc
                           1855 ;	genCall
   0617 12s00r00           1856 	lcall	_printf
   061A 15 81              1857 	dec	sp
   061C 15 81              1858 	dec	sp
   061E 15 81              1859 	dec	sp
                           1860 ;	main.c:216: printf("%x: ", start_addr);
                           1861 ;	genIpush
   0620 74 C0              1862 	mov	a,#0xC0
   0622 C0 E0              1863 	push	acc
                           1864 ;	Peephole 181	changed mov to clr
   0624 E4                 1865 	clr	a
   0625 C0 E0              1866 	push	acc
                           1867 ;	genIpush
   0627 74rBA              1868 	mov	a,#__str_30
   0629 C0 E0              1869 	push	acc
   062B 74s03              1870 	mov	a,#(__str_30 >> 8)
   062D C0 E0              1871 	push	acc
   062F 74 80              1872 	mov	a,#0x80
   0631 C0 E0              1873 	push	acc
                           1874 ;	genCall
   0633 12s00r00           1875 	lcall	_printf
   0636 E5 81              1876 	mov	a,sp
   0638 24 FB              1877 	add	a,#0xfb
   063A F5 81              1878 	mov	sp,a
                           1879 ;	main.c:217: for (i = 0; i < 16; ++i){
                           1880 ;	genAssign
   063C 7A C0              1881 	mov	r2,#0xC0
   063E 7B 00              1882 	mov	r3,#0x00
                           1883 ;	genAssign
   0640 7C 10              1884 	mov	r4,#0x10
   0642                    1885 00132$:
                           1886 ;	main.c:218: LCD_SetDDRAMAddress(start_addr);
                           1887 ;	genCast
   0642 8A 05              1888 	mov	ar5,r2
                           1889 ;	genCall
   0644 8D 82              1890 	mov	dpl,r5
   0646 C0 02              1891 	push	ar2
   0648 C0 03              1892 	push	ar3
   064A C0 04              1893 	push	ar4
   064C 12s00r00           1894 	lcall	_LCD_SetDDRAMAddress
   064F D0 04              1895 	pop	ar4
   0651 D0 03              1896 	pop	ar3
   0653 D0 02              1897 	pop	ar2
                           1898 ;	main.c:219: lcdData = LCD_ReadRAM();
                           1899 ;	genCall
   0655 C0 02              1900 	push	ar2
   0657 C0 03              1901 	push	ar3
   0659 C0 04              1902 	push	ar4
   065B 12s00r00           1903 	lcall	_LCD_ReadRAM
   065E AD 82              1904 	mov	r5,dpl
   0660 D0 04              1905 	pop	ar4
   0662 D0 03              1906 	pop	ar3
   0664 D0 02              1907 	pop	ar2
                           1908 ;	main.c:220: printf("%x ", lcdData);
                           1909 ;	genCast
   0666 7E 00              1910 	mov	r6,#0x00
                           1911 ;	genIpush
   0668 C0 02              1912 	push	ar2
   066A C0 03              1913 	push	ar3
   066C C0 04              1914 	push	ar4
   066E C0 05              1915 	push	ar5
   0670 C0 06              1916 	push	ar6
                           1917 ;	genIpush
   0672 74rBF              1918 	mov	a,#__str_31
   0674 C0 E0              1919 	push	acc
   0676 74s03              1920 	mov	a,#(__str_31 >> 8)
   0678 C0 E0              1921 	push	acc
   067A 74 80              1922 	mov	a,#0x80
   067C C0 E0              1923 	push	acc
                           1924 ;	genCall
   067E 12s00r00           1925 	lcall	_printf
   0681 E5 81              1926 	mov	a,sp
   0683 24 FB              1927 	add	a,#0xfb
   0685 F5 81              1928 	mov	sp,a
   0687 D0 04              1929 	pop	ar4
   0689 D0 03              1930 	pop	ar3
   068B D0 02              1931 	pop	ar2
                           1932 ;	main.c:221: start_addr++;
                           1933 ;	genPlus
                           1934 ;     genPlusIncr
   068D 0A                 1935 	inc	r2
   068E BA 00 01           1936 	cjne	r2,#0x00,00197$
   0691 0B                 1937 	inc	r3
   0692                    1938 00197$:
                           1939 ;	genDjnz
                           1940 ;	Peephole 112.b	changed ljmp to sjmp
                           1941 ;	Peephole 205	optimized misc jump sequence
   0692 DC AE              1942 	djnz	r4,00132$
                           1943 ;	Peephole 300	removed redundant label 00198$
                           1944 ;	Peephole 300	removed redundant label 00199$
                           1945 ;	main.c:217: for (i = 0; i < 16; ++i){
                           1946 ;	main.c:223: printf("\r\n");
                           1947 ;	genIpush
   0694 74rB7              1948 	mov	a,#__str_29
   0696 C0 E0              1949 	push	acc
   0698 74s03              1950 	mov	a,#(__str_29 >> 8)
   069A C0 E0              1951 	push	acc
   069C 74 80              1952 	mov	a,#0x80
   069E C0 E0              1953 	push	acc
                           1954 ;	genCall
   06A0 12s00r00           1955 	lcall	_printf
   06A3 15 81              1956 	dec	sp
   06A5 15 81              1957 	dec	sp
   06A7 15 81              1958 	dec	sp
                           1959 ;	main.c:226: printf("%x: ", start_addr);
                           1960 ;	genIpush
   06A9 74 90              1961 	mov	a,#0x90
   06AB C0 E0              1962 	push	acc
                           1963 ;	Peephole 181	changed mov to clr
   06AD E4                 1964 	clr	a
   06AE C0 E0              1965 	push	acc
                           1966 ;	genIpush
   06B0 74rBA              1967 	mov	a,#__str_30
   06B2 C0 E0              1968 	push	acc
   06B4 74s03              1969 	mov	a,#(__str_30 >> 8)
   06B6 C0 E0              1970 	push	acc
   06B8 74 80              1971 	mov	a,#0x80
   06BA C0 E0              1972 	push	acc
                           1973 ;	genCall
   06BC 12s00r00           1974 	lcall	_printf
   06BF E5 81              1975 	mov	a,sp
   06C1 24 FB              1976 	add	a,#0xfb
   06C3 F5 81              1977 	mov	sp,a
                           1978 ;	main.c:227: for (i = 0; i < 16; ++i){
                           1979 ;	genAssign
   06C5 7A 90              1980 	mov	r2,#0x90
   06C7 7B 00              1981 	mov	r3,#0x00
                           1982 ;	genAssign
   06C9 7C 10              1983 	mov	r4,#0x10
   06CB                    1984 00135$:
                           1985 ;	main.c:228: LCD_SetDDRAMAddress(start_addr);
                           1986 ;	genCast
   06CB 8A 05              1987 	mov	ar5,r2
                           1988 ;	genCall
   06CD 8D 82              1989 	mov	dpl,r5
   06CF C0 02              1990 	push	ar2
   06D1 C0 03              1991 	push	ar3
   06D3 C0 04              1992 	push	ar4
   06D5 12s00r00           1993 	lcall	_LCD_SetDDRAMAddress
   06D8 D0 04              1994 	pop	ar4
   06DA D0 03              1995 	pop	ar3
   06DC D0 02              1996 	pop	ar2
                           1997 ;	main.c:229: lcdData = LCD_ReadRAM();
                           1998 ;	genCall
   06DE C0 02              1999 	push	ar2
   06E0 C0 03              2000 	push	ar3
   06E2 C0 04              2001 	push	ar4
   06E4 12s00r00           2002 	lcall	_LCD_ReadRAM
   06E7 AD 82              2003 	mov	r5,dpl
   06E9 D0 04              2004 	pop	ar4
   06EB D0 03              2005 	pop	ar3
   06ED D0 02              2006 	pop	ar2
                           2007 ;	main.c:230: printf("%x ", lcdData);
                           2008 ;	genCast
   06EF 7E 00              2009 	mov	r6,#0x00
                           2010 ;	genIpush
   06F1 C0 02              2011 	push	ar2
   06F3 C0 03              2012 	push	ar3
   06F5 C0 04              2013 	push	ar4
   06F7 C0 05              2014 	push	ar5
   06F9 C0 06              2015 	push	ar6
                           2016 ;	genIpush
   06FB 74rBF              2017 	mov	a,#__str_31
   06FD C0 E0              2018 	push	acc
   06FF 74s03              2019 	mov	a,#(__str_31 >> 8)
   0701 C0 E0              2020 	push	acc
   0703 74 80              2021 	mov	a,#0x80
   0705 C0 E0              2022 	push	acc
                           2023 ;	genCall
   0707 12s00r00           2024 	lcall	_printf
   070A E5 81              2025 	mov	a,sp
   070C 24 FB              2026 	add	a,#0xfb
   070E F5 81              2027 	mov	sp,a
   0710 D0 04              2028 	pop	ar4
   0712 D0 03              2029 	pop	ar3
   0714 D0 02              2030 	pop	ar2
                           2031 ;	main.c:231: start_addr++;
                           2032 ;	genPlus
                           2033 ;     genPlusIncr
   0716 0A                 2034 	inc	r2
   0717 BA 00 01           2035 	cjne	r2,#0x00,00200$
   071A 0B                 2036 	inc	r3
   071B                    2037 00200$:
                           2038 ;	genDjnz
                           2039 ;	Peephole 112.b	changed ljmp to sjmp
                           2040 ;	Peephole 205	optimized misc jump sequence
   071B DC AE              2041 	djnz	r4,00135$
                           2042 ;	Peephole 300	removed redundant label 00201$
                           2043 ;	Peephole 300	removed redundant label 00202$
                           2044 ;	main.c:227: for (i = 0; i < 16; ++i){
                           2045 ;	main.c:233: printf("\r\n");
                           2046 ;	genIpush
   071D 74rB7              2047 	mov	a,#__str_29
   071F C0 E0              2048 	push	acc
   0721 74s03              2049 	mov	a,#(__str_29 >> 8)
   0723 C0 E0              2050 	push	acc
   0725 74 80              2051 	mov	a,#0x80
   0727 C0 E0              2052 	push	acc
                           2053 ;	genCall
   0729 12s00r00           2054 	lcall	_printf
   072C 15 81              2055 	dec	sp
   072E 15 81              2056 	dec	sp
   0730 15 81              2057 	dec	sp
                           2058 ;	main.c:236: printf("%x: ", start_addr);
                           2059 ;	genIpush
   0732 74 D0              2060 	mov	a,#0xD0
   0734 C0 E0              2061 	push	acc
                           2062 ;	Peephole 181	changed mov to clr
   0736 E4                 2063 	clr	a
   0737 C0 E0              2064 	push	acc
                           2065 ;	genIpush
   0739 74rBA              2066 	mov	a,#__str_30
   073B C0 E0              2067 	push	acc
   073D 74s03              2068 	mov	a,#(__str_30 >> 8)
   073F C0 E0              2069 	push	acc
   0741 74 80              2070 	mov	a,#0x80
   0743 C0 E0              2071 	push	acc
                           2072 ;	genCall
   0745 12s00r00           2073 	lcall	_printf
   0748 E5 81              2074 	mov	a,sp
   074A 24 FB              2075 	add	a,#0xfb
   074C F5 81              2076 	mov	sp,a
                           2077 ;	main.c:237: for (i = 0; i < 16; ++i){
                           2078 ;	genAssign
   074E 7A D0              2079 	mov	r2,#0xD0
   0750 7B 00              2080 	mov	r3,#0x00
                           2081 ;	genAssign
   0752 7C 10              2082 	mov	r4,#0x10
   0754                    2083 00138$:
                           2084 ;	main.c:238: LCD_SetDDRAMAddress(start_addr);
                           2085 ;	genCast
   0754 8A 05              2086 	mov	ar5,r2
                           2087 ;	genCall
   0756 8D 82              2088 	mov	dpl,r5
   0758 C0 02              2089 	push	ar2
   075A C0 03              2090 	push	ar3
   075C C0 04              2091 	push	ar4
   075E 12s00r00           2092 	lcall	_LCD_SetDDRAMAddress
   0761 D0 04              2093 	pop	ar4
   0763 D0 03              2094 	pop	ar3
   0765 D0 02              2095 	pop	ar2
                           2096 ;	main.c:239: lcdData = LCD_ReadRAM();
                           2097 ;	genCall
   0767 C0 02              2098 	push	ar2
   0769 C0 03              2099 	push	ar3
   076B C0 04              2100 	push	ar4
   076D 12s00r00           2101 	lcall	_LCD_ReadRAM
   0770 AD 82              2102 	mov	r5,dpl
   0772 D0 04              2103 	pop	ar4
   0774 D0 03              2104 	pop	ar3
   0776 D0 02              2105 	pop	ar2
                           2106 ;	main.c:240: printf("%x ", lcdData);
                           2107 ;	genCast
   0778 7E 00              2108 	mov	r6,#0x00
                           2109 ;	genIpush
   077A C0 02              2110 	push	ar2
   077C C0 03              2111 	push	ar3
   077E C0 04              2112 	push	ar4
   0780 C0 05              2113 	push	ar5
   0782 C0 06              2114 	push	ar6
                           2115 ;	genIpush
   0784 74rBF              2116 	mov	a,#__str_31
   0786 C0 E0              2117 	push	acc
   0788 74s03              2118 	mov	a,#(__str_31 >> 8)
   078A C0 E0              2119 	push	acc
   078C 74 80              2120 	mov	a,#0x80
   078E C0 E0              2121 	push	acc
                           2122 ;	genCall
   0790 12s00r00           2123 	lcall	_printf
   0793 E5 81              2124 	mov	a,sp
   0795 24 FB              2125 	add	a,#0xfb
   0797 F5 81              2126 	mov	sp,a
   0799 D0 04              2127 	pop	ar4
   079B D0 03              2128 	pop	ar3
   079D D0 02              2129 	pop	ar2
                           2130 ;	main.c:241: start_addr++;
                           2131 ;	genPlus
                           2132 ;     genPlusIncr
   079F 0A                 2133 	inc	r2
   07A0 BA 00 01           2134 	cjne	r2,#0x00,00203$
   07A3 0B                 2135 	inc	r3
   07A4                    2136 00203$:
                           2137 ;	genDjnz
                           2138 ;	Peephole 112.b	changed ljmp to sjmp
                           2139 ;	Peephole 205	optimized misc jump sequence
   07A4 DC AE              2140 	djnz	r4,00138$
                           2141 ;	Peephole 300	removed redundant label 00204$
                           2142 ;	Peephole 300	removed redundant label 00205$
                           2143 ;	main.c:237: for (i = 0; i < 16; ++i){
                           2144 ;	main.c:243: printf("\r\n");
                           2145 ;	genIpush
   07A6 74rB7              2146 	mov	a,#__str_29
   07A8 C0 E0              2147 	push	acc
   07AA 74s03              2148 	mov	a,#(__str_29 >> 8)
   07AC C0 E0              2149 	push	acc
   07AE 74 80              2150 	mov	a,#0x80
   07B0 C0 E0              2151 	push	acc
                           2152 ;	genCall
   07B2 12s00r00           2153 	lcall	_printf
   07B5 15 81              2154 	dec	sp
   07B7 15 81              2155 	dec	sp
   07B9 15 81              2156 	dec	sp
                           2157 ;	main.c:246: break;
                           2158 ;	Peephole 251.a	replaced ljmp to ret with ret
   07BB 22                 2159 	ret
                           2160 ;	main.c:247: case 'G':
   07BC                    2161 00119$:
                           2162 ;	main.c:248: printf("\r\n");
                           2163 ;	genIpush
   07BC 74rB7              2164 	mov	a,#__str_29
   07BE C0 E0              2165 	push	acc
   07C0 74s03              2166 	mov	a,#(__str_29 >> 8)
   07C2 C0 E0              2167 	push	acc
   07C4 74 80              2168 	mov	a,#0x80
   07C6 C0 E0              2169 	push	acc
                           2170 ;	genCall
   07C8 12s00r00           2171 	lcall	_printf
   07CB 15 81              2172 	dec	sp
   07CD 15 81              2173 	dec	sp
   07CF 15 81              2174 	dec	sp
                           2175 ;	main.c:250: EA = 0;     //Disable interrupts temporarily. Shared globals
                           2176 ;	genAssign
   07D1 C2 AF              2177 	clr	_EA
                           2178 ;	main.c:251: Saved_Address = LCD_ReadAddr();
                           2179 ;	genCall
   07D3 12s00r00           2180 	lcall	_LCD_ReadAddr
   07D6 E5 82              2181 	mov	a,dpl
                           2182 ;	genAssign
   07D8 90s00r00           2183 	mov	dptr,#_Saved_Address
   07DB F0                 2184 	movx	@dptr,a
                           2185 ;	main.c:252: CG_Accessed = true;
                           2186 ;	genAssign
   07DC D2*00              2187 	setb	_CG_Accessed
                           2188 ;	main.c:253: EA = 1;
                           2189 ;	genAssign
   07DE D2 AF              2190 	setb	_EA
                           2191 ;	main.c:256: start_addr = 0x40;
                           2192 ;	genAssign
   07E0 90s00r71           2193 	mov	dptr,#_handleLCDMode_start_addr_1_1
   07E3 74 40              2194 	mov	a,#0x40
   07E5 F0                 2195 	movx	@dptr,a
   07E6 E4                 2196 	clr	a
   07E7 A3                 2197 	inc	dptr
   07E8 F0                 2198 	movx	@dptr,a
                           2199 ;	main.c:258: while (start_addr < 0x80){
   07E9                    2200 00120$:
                           2201 ;	genAssign
   07E9 90s00r71           2202 	mov	dptr,#_handleLCDMode_start_addr_1_1
   07EC E0                 2203 	movx	a,@dptr
   07ED FA                 2204 	mov	r2,a
   07EE A3                 2205 	inc	dptr
   07EF E0                 2206 	movx	a,@dptr
   07F0 FB                 2207 	mov	r3,a
                           2208 ;	genCmpLt
                           2209 ;	genCmp
   07F1 C3                 2210 	clr	c
   07F2 EA                 2211 	mov	a,r2
   07F3 94 80              2212 	subb	a,#0x80
   07F5 EB                 2213 	mov	a,r3
   07F6 94 00              2214 	subb	a,#0x00
                           2215 ;	genIfxJump
   07F8 40 03              2216 	jc	00206$
   07FA 02s08r92           2217 	ljmp	00122$
   07FD                    2218 00206$:
                           2219 ;	main.c:259: printf("%x: ", start_addr);
                           2220 ;	genIpush
   07FD C0 02              2221 	push	ar2
   07FF C0 03              2222 	push	ar3
   0801 C0 02              2223 	push	ar2
   0803 C0 03              2224 	push	ar3
                           2225 ;	genIpush
   0805 74rBA              2226 	mov	a,#__str_30
   0807 C0 E0              2227 	push	acc
   0809 74s03              2228 	mov	a,#(__str_30 >> 8)
   080B C0 E0              2229 	push	acc
   080D 74 80              2230 	mov	a,#0x80
   080F C0 E0              2231 	push	acc
                           2232 ;	genCall
   0811 12s00r00           2233 	lcall	_printf
   0814 E5 81              2234 	mov	a,sp
   0816 24 FB              2235 	add	a,#0xfb
   0818 F5 81              2236 	mov	sp,a
   081A D0 03              2237 	pop	ar3
   081C D0 02              2238 	pop	ar2
                           2239 ;	main.c:261: for (i = 0; i < 16; ++i){
                           2240 ;	genAssign
                           2241 ;	genAssign
   081E 7C 10              2242 	mov	r4,#0x10
   0820                    2243 00141$:
                           2244 ;	main.c:262: LCD_SetCGRAMAddress(start_addr);
                           2245 ;	genCast
   0820 8A 05              2246 	mov	ar5,r2
                           2247 ;	genCall
   0822 8D 82              2248 	mov	dpl,r5
   0824 C0 02              2249 	push	ar2
   0826 C0 03              2250 	push	ar3
   0828 C0 04              2251 	push	ar4
   082A 12s00r00           2252 	lcall	_LCD_SetCGRAMAddress
   082D D0 04              2253 	pop	ar4
   082F D0 03              2254 	pop	ar3
   0831 D0 02              2255 	pop	ar2
                           2256 ;	main.c:263: lcdData = LCD_ReadRAM();
                           2257 ;	genCall
   0833 C0 02              2258 	push	ar2
   0835 C0 03              2259 	push	ar3
   0837 C0 04              2260 	push	ar4
   0839 12s00r00           2261 	lcall	_LCD_ReadRAM
   083C AD 82              2262 	mov	r5,dpl
   083E D0 04              2263 	pop	ar4
   0840 D0 03              2264 	pop	ar3
   0842 D0 02              2265 	pop	ar2
                           2266 ;	main.c:264: printf("%x ", lcdData);
                           2267 ;	genCast
   0844 7E 00              2268 	mov	r6,#0x00
                           2269 ;	genIpush
   0846 C0 02              2270 	push	ar2
   0848 C0 03              2271 	push	ar3
   084A C0 04              2272 	push	ar4
   084C C0 05              2273 	push	ar5
   084E C0 06              2274 	push	ar6
                           2275 ;	genIpush
   0850 74rBF              2276 	mov	a,#__str_31
   0852 C0 E0              2277 	push	acc
   0854 74s03              2278 	mov	a,#(__str_31 >> 8)
   0856 C0 E0              2279 	push	acc
   0858 74 80              2280 	mov	a,#0x80
   085A C0 E0              2281 	push	acc
                           2282 ;	genCall
   085C 12s00r00           2283 	lcall	_printf
   085F E5 81              2284 	mov	a,sp
   0861 24 FB              2285 	add	a,#0xfb
   0863 F5 81              2286 	mov	sp,a
   0865 D0 04              2287 	pop	ar4
   0867 D0 03              2288 	pop	ar3
   0869 D0 02              2289 	pop	ar2
                           2290 ;	main.c:265: start_addr++;
                           2291 ;	genPlus
                           2292 ;     genPlusIncr
   086B 0A                 2293 	inc	r2
   086C BA 00 01           2294 	cjne	r2,#0x00,00207$
   086F 0B                 2295 	inc	r3
   0870                    2296 00207$:
                           2297 ;	genDjnz
                           2298 ;	Peephole 112.b	changed ljmp to sjmp
                           2299 ;	Peephole 205	optimized misc jump sequence
   0870 DC AE              2300 	djnz	r4,00141$
                           2301 ;	Peephole 300	removed redundant label 00208$
                           2302 ;	Peephole 300	removed redundant label 00209$
                           2303 ;	main.c:261: for (i = 0; i < 16; ++i){
                           2304 ;	main.c:267: printf("\r\n");
                           2305 ;	genAssign
   0872 90s00r71           2306 	mov	dptr,#_handleLCDMode_start_addr_1_1
   0875 EA                 2307 	mov	a,r2
   0876 F0                 2308 	movx	@dptr,a
   0877 A3                 2309 	inc	dptr
   0878 EB                 2310 	mov	a,r3
   0879 F0                 2311 	movx	@dptr,a
                           2312 ;	genIpush
   087A 74rB7              2313 	mov	a,#__str_29
   087C C0 E0              2314 	push	acc
   087E 74s03              2315 	mov	a,#(__str_29 >> 8)
   0880 C0 E0              2316 	push	acc
   0882 74 80              2317 	mov	a,#0x80
   0884 C0 E0              2318 	push	acc
                           2319 ;	genCall
   0886 12s00r00           2320 	lcall	_printf
   0889 15 81              2321 	dec	sp
   088B 15 81              2322 	dec	sp
   088D 15 81              2323 	dec	sp
   088F 02s07rE9           2324 	ljmp	00120$
   0892                    2325 00122$:
                           2326 ;	main.c:270: LCD_SetDDRAMAddress(Saved_Address);
                           2327 ;	genAssign
   0892 90s00r00           2328 	mov	dptr,#_Saved_Address
   0895 E0                 2329 	movx	a,@dptr
                           2330 ;	genCall
   0896 FA                 2331 	mov	r2,a
                           2332 ;	Peephole 244.c	loading dpl from a instead of r2
   0897 F5 82              2333 	mov	dpl,a
   0899 12s00r00           2334 	lcall	_LCD_SetDDRAMAddress
                           2335 ;	main.c:271: EA = 0;
                           2336 ;	genAssign
   089C C2 AF              2337 	clr	_EA
                           2338 ;	main.c:272: CG_Accessed = false;
                           2339 ;	genAssign
   089E C2*00              2340 	clr	_CG_Accessed
                           2341 ;	main.c:273: EA = 1;
                           2342 ;	genAssign
   08A0 D2 AF              2343 	setb	_EA
                           2344 ;	main.c:274: TimerRedraw();
                           2345 ;	genCall
                           2346 ;	main.c:275: break;
                           2347 ;	main.c:276: case 'r':
                           2348 ;	Peephole 112.b	changed ljmp to sjmp
                           2349 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2350 ;	Peephole 253.a	replaced lcall/ret with ljmp
   08A2 02s00r00           2351 	ljmp	_TimerRedraw
   08A5                    2352 00123$:
                           2353 ;	main.c:277: mode = MAIN_MODE;
                           2354 ;	genAssign
   08A5 90s00r00           2355 	mov	dptr,#_mode
                           2356 ;	Peephole 181	changed mov to clr
   08A8 E4                 2357 	clr	a
   08A9 F0                 2358 	movx	@dptr,a
                           2359 ;	main.c:278: MainMenu();
                           2360 ;	genCall
                           2361 ;	main.c:279: break;
                           2362 ;	main.c:280: case 'H':
                           2363 ;	Peephole 112.b	changed ljmp to sjmp
                           2364 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2365 ;	Peephole 253.a	replaced lcall/ret with ljmp
   08AA 02s10r4B           2366 	ljmp	_MainMenu
   08AD                    2367 00124$:
                           2368 ;	main.c:281: LCD_Menu();
                           2369 ;	genCall
                           2370 ;	main.c:285: }
                           2371 ;	Peephole 253.b	replaced lcall/ret with ljmp
   08AD 02s02r3D           2372 	ljmp	_LCD_Menu
                           2373 ;
                           2374 ;------------------------------------------------------------
                           2375 ;Allocation info for local variables in function 'EEPROM_Menu'
                           2376 ;------------------------------------------------------------
                           2377 ;------------------------------------------------------------
                           2378 ;	main.c:288: void EEPROM_Menu(void){
                           2379 ;	-----------------------------------------
                           2380 ;	 function EEPROM_Menu
                           2381 ;	-----------------------------------------
   08B0                    2382 _EEPROM_Menu:
                           2383 ;	main.c:289: printf("\r\nIn EEPROM Mode");
                           2384 ;	genIpush
   08B0 74rC3              2385 	mov	a,#__str_32
   08B2 C0 E0              2386 	push	acc
   08B4 74s03              2387 	mov	a,#(__str_32 >> 8)
   08B6 C0 E0              2388 	push	acc
   08B8 74 80              2389 	mov	a,#0x80
   08BA C0 E0              2390 	push	acc
                           2391 ;	genCall
   08BC 12s00r00           2392 	lcall	_printf
   08BF 15 81              2393 	dec	sp
   08C1 15 81              2394 	dec	sp
   08C3 15 81              2395 	dec	sp
                           2396 ;	main.c:290: printf("\r\nPress 'H' for help");
                           2397 ;	genIpush
   08C5 74r9F              2398 	mov	a,#__str_4
   08C7 C0 E0              2399 	push	acc
   08C9 74s00              2400 	mov	a,#(__str_4 >> 8)
   08CB C0 E0              2401 	push	acc
   08CD 74 80              2402 	mov	a,#0x80
   08CF C0 E0              2403 	push	acc
                           2404 ;	genCall
   08D1 12s00r00           2405 	lcall	_printf
   08D4 15 81              2406 	dec	sp
   08D6 15 81              2407 	dec	sp
   08D8 15 81              2408 	dec	sp
                           2409 ;	main.c:291: printf("\r\nPress 'W' to write a byte to EEPROM");
                           2410 ;	genIpush
   08DA 74rD4              2411 	mov	a,#__str_33
   08DC C0 E0              2412 	push	acc
   08DE 74s03              2413 	mov	a,#(__str_33 >> 8)
   08E0 C0 E0              2414 	push	acc
   08E2 74 80              2415 	mov	a,#0x80
   08E4 C0 E0              2416 	push	acc
                           2417 ;	genCall
   08E6 12s00r00           2418 	lcall	_printf
   08E9 15 81              2419 	dec	sp
   08EB 15 81              2420 	dec	sp
   08ED 15 81              2421 	dec	sp
                           2422 ;	main.c:292: printf("\r\nPress 'R' to read a byte from EEPROM");
                           2423 ;	genIpush
   08EF 74rFA              2424 	mov	a,#__str_34
   08F1 C0 E0              2425 	push	acc
   08F3 74s03              2426 	mov	a,#(__str_34 >> 8)
   08F5 C0 E0              2427 	push	acc
   08F7 74 80              2428 	mov	a,#0x80
   08F9 C0 E0              2429 	push	acc
                           2430 ;	genCall
   08FB 12s00r00           2431 	lcall	_printf
   08FE 15 81              2432 	dec	sp
   0900 15 81              2433 	dec	sp
   0902 15 81              2434 	dec	sp
                           2435 ;	main.c:293: printf("\r\nPress 'L' to display EEPROM data on LCD");
                           2436 ;	genIpush
   0904 74r21              2437 	mov	a,#__str_35
   0906 C0 E0              2438 	push	acc
   0908 74s04              2439 	mov	a,#(__str_35 >> 8)
   090A C0 E0              2440 	push	acc
   090C 74 80              2441 	mov	a,#0x80
   090E C0 E0              2442 	push	acc
                           2443 ;	genCall
   0910 12s00r00           2444 	lcall	_printf
   0913 15 81              2445 	dec	sp
   0915 15 81              2446 	dec	sp
   0917 15 81              2447 	dec	sp
                           2448 ;	main.c:294: printf("\r\nPress 'D' to do a Hex Dump of EEPROM");
                           2449 ;	genIpush
   0919 74r4B              2450 	mov	a,#__str_36
   091B C0 E0              2451 	push	acc
   091D 74s04              2452 	mov	a,#(__str_36 >> 8)
   091F C0 E0              2453 	push	acc
   0921 74 80              2454 	mov	a,#0x80
   0923 C0 E0              2455 	push	acc
                           2456 ;	genCall
   0925 12s00r00           2457 	lcall	_printf
   0928 15 81              2458 	dec	sp
   092A 15 81              2459 	dec	sp
   092C 15 81              2460 	dec	sp
                           2461 ;	main.c:295: printf("\r\nPress 'r' to return to main menu\r\n");
                           2462 ;	genIpush
   092E 74r44              2463 	mov	a,#__str_9
   0930 C0 E0              2464 	push	acc
   0932 74s01              2465 	mov	a,#(__str_9 >> 8)
   0934 C0 E0              2466 	push	acc
   0936 74 80              2467 	mov	a,#0x80
   0938 C0 E0              2468 	push	acc
                           2469 ;	genCall
   093A 12s00r00           2470 	lcall	_printf
   093D 15 81              2471 	dec	sp
   093F 15 81              2472 	dec	sp
   0941 15 81              2473 	dec	sp
                           2474 ;	Peephole 300	removed redundant label 00101$
   0943 22                 2475 	ret
                           2476 ;------------------------------------------------------------
                           2477 ;Allocation info for local variables in function 'handleEEPROMMode'
                           2478 ;------------------------------------------------------------
                           2479 ;c                         Allocated with name '_handleEEPROMMode_c_1_1'
                           2480 ;block                     Allocated with name '_handleEEPROMMode_block_1_1'
                           2481 ;end_block                 Allocated with name '_handleEEPROMMode_end_block_1_1'
                           2482 ;address                   Allocated with name '_handleEEPROMMode_address_1_1'
                           2483 ;end_address               Allocated with name '_handleEEPROMMode_end_address_1_1'
                           2484 ;i                         Allocated with name '_handleEEPROMMode_i_1_1'
                           2485 ;lcdData                   Allocated with name '_handleEEPROMMode_lcdData_1_1'
                           2486 ;Lcd_row                   Allocated with name '_handleEEPROMMode_Lcd_row_1_1'
                           2487 ;start_addr                Allocated with name '_handleEEPROMMode_start_addr_1_1'
                           2488 ;end_addr                  Allocated with name '_handleEEPROMMode_end_addr_1_1'
                           2489 ;------------------------------------------------------------
                           2490 ;	main.c:298: void handleEEPROMMode(char c){
                           2491 ;	-----------------------------------------
                           2492 ;	 function handleEEPROMMode
                           2493 ;	-----------------------------------------
   0944                    2494 _handleEEPROMMode:
                           2495 ;	genReceive
   0944 E5 82              2496 	mov	a,dpl
   0946 90s00r73           2497 	mov	dptr,#_handleEEPROMMode_c_1_1
   0949 F0                 2498 	movx	@dptr,a
                           2499 ;	main.c:308: switch(c){
                           2500 ;	genAssign
   094A 90s00r73           2501 	mov	dptr,#_handleEEPROMMode_c_1_1
   094D E0                 2502 	movx	a,@dptr
   094E FA                 2503 	mov	r2,a
                           2504 ;	genCmpEq
                           2505 ;	gencjneshort
   094F BA 44 03           2506 	cjne	r2,#0x44,00135$
   0952 02s0Br22           2507 	ljmp	00104$
   0955                    2508 00135$:
                           2509 ;	genCmpEq
                           2510 ;	gencjneshort
   0955 BA 48 03           2511 	cjne	r2,#0x48,00136$
   0958 02s0CrFD           2512 	ljmp	00117$
   095B                    2513 00136$:
                           2514 ;	genCmpEq
                           2515 ;	gencjneshort
   095B BA 4C 03           2516 	cjne	r2,#0x4C,00137$
   095E 02s0Ar7B           2517 	ljmp	00103$
   0961                    2518 00137$:
                           2519 ;	genCmpEq
                           2520 ;	gencjneshort
   0961 BA 52 03           2521 	cjne	r2,#0x52,00138$
   0964 02s0Ar08           2522 	ljmp	00102$
   0967                    2523 00138$:
                           2524 ;	genCmpEq
                           2525 ;	gencjneshort
   0967 BA 57 02           2526 	cjne	r2,#0x57,00139$
                           2527 ;	Peephole 112.b	changed ljmp to sjmp
   096A 80 07              2528 	sjmp	00101$
   096C                    2529 00139$:
                           2530 ;	genCmpEq
                           2531 ;	gencjneshort
   096C BA 72 03           2532 	cjne	r2,#0x72,00140$
   096F 02s0CrF5           2533 	ljmp	00116$
   0972                    2534 00140$:
                           2535 ;	Peephole 251.a	replaced ljmp to ret with ret
   0972 22                 2536 	ret
                           2537 ;	main.c:309: case 'W':
   0973                    2538 00101$:
                           2539 ;	main.c:310: printf("\r\nWriting to EEPROM...");
                           2540 ;	genIpush
   0973 74r72              2541 	mov	a,#__str_37
   0975 C0 E0              2542 	push	acc
   0977 74s04              2543 	mov	a,#(__str_37 >> 8)
   0979 C0 E0              2544 	push	acc
   097B 74 80              2545 	mov	a,#0x80
   097D C0 E0              2546 	push	acc
                           2547 ;	genCall
   097F 12s00r00           2548 	lcall	_printf
   0982 15 81              2549 	dec	sp
   0984 15 81              2550 	dec	sp
   0986 15 81              2551 	dec	sp
                           2552 ;	main.c:311: getBlockAndAddress(&address, &block);
                           2553 ;	genCast
   0988 90s00r00           2554 	mov	dptr,#_getBlockAndAddress_PARM_2
   098B 74r74              2555 	mov	a,#_handleEEPROMMode_block_1_1
   098D F0                 2556 	movx	@dptr,a
   098E A3                 2557 	inc	dptr
   098F 74s00              2558 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0991 F0                 2559 	movx	@dptr,a
   0992 A3                 2560 	inc	dptr
   0993 74 00              2561 	mov	a,#0x0
   0995 F0                 2562 	movx	@dptr,a
                           2563 ;	genCall
                           2564 ;	Peephole 182.a	used 16 bit load of DPTR
   0996 90s00r76           2565 	mov	dptr,#_handleEEPROMMode_address_1_1
   0999 75 F0 00           2566 	mov	b,#0x00
   099C 12s00r0C           2567 	lcall	_getBlockAndAddress
                           2568 ;	main.c:312: printf("\r\nEnter a byte of data to write to EEPROM:");
                           2569 ;	genIpush
   099F 74r89              2570 	mov	a,#__str_38
   09A1 C0 E0              2571 	push	acc
   09A3 74s04              2572 	mov	a,#(__str_38 >> 8)
   09A5 C0 E0              2573 	push	acc
   09A7 74 80              2574 	mov	a,#0x80
   09A9 C0 E0              2575 	push	acc
                           2576 ;	genCall
   09AB 12s00r00           2577 	lcall	_printf
   09AE 15 81              2578 	dec	sp
   09B0 15 81              2579 	dec	sp
   09B2 15 81              2580 	dec	sp
                           2581 ;	main.c:313: lcdData = Serial_GetHex();
                           2582 ;	genCall
   09B4 12s00r00           2583 	lcall	_Serial_GetHex
   09B7 AA 82              2584 	mov	r2,dpl
                           2585 ;	main.c:314: EPROM_ByteWrite(lcdData, address, block);
                           2586 ;	genAssign
   09B9 90s00r76           2587 	mov	dptr,#_handleEEPROMMode_address_1_1
   09BC E0                 2588 	movx	a,@dptr
   09BD FB                 2589 	mov	r3,a
                           2590 ;	genAssign
   09BE 90s00r74           2591 	mov	dptr,#_handleEEPROMMode_block_1_1
   09C1 E0                 2592 	movx	a,@dptr
   09C2 FC                 2593 	mov	r4,a
                           2594 ;	genAssign
   09C3 90s00r00           2595 	mov	dptr,#_EPROM_ByteWrite_PARM_2
   09C6 EB                 2596 	mov	a,r3
   09C7 F0                 2597 	movx	@dptr,a
                           2598 ;	genAssign
   09C8 90s00r00           2599 	mov	dptr,#_EPROM_ByteWrite_PARM_3
   09CB EC                 2600 	mov	a,r4
   09CC F0                 2601 	movx	@dptr,a
                           2602 ;	genCall
   09CD 8A 82              2603 	mov	dpl,r2
   09CF C0 02              2604 	push	ar2
   09D1 12s00r00           2605 	lcall	_EPROM_ByteWrite
   09D4 D0 02              2606 	pop	ar2
                           2607 ;	main.c:315: printf("\r\nWrote %X to block %d address 0x%X in EEPROM!\r\n", lcdData, block, address);
                           2608 ;	genAssign
   09D6 90s00r76           2609 	mov	dptr,#_handleEEPROMMode_address_1_1
   09D9 E0                 2610 	movx	a,@dptr
   09DA FB                 2611 	mov	r3,a
                           2612 ;	genCast
   09DB 7C 00              2613 	mov	r4,#0x00
                           2614 ;	genAssign
   09DD 90s00r74           2615 	mov	dptr,#_handleEEPROMMode_block_1_1
   09E0 E0                 2616 	movx	a,@dptr
   09E1 FD                 2617 	mov	r5,a
                           2618 ;	genCast
   09E2 7E 00              2619 	mov	r6,#0x00
                           2620 ;	genCast
   09E4 7F 00              2621 	mov	r7,#0x00
                           2622 ;	genIpush
   09E6 C0 03              2623 	push	ar3
   09E8 C0 04              2624 	push	ar4
                           2625 ;	genIpush
   09EA C0 05              2626 	push	ar5
   09EC C0 06              2627 	push	ar6
                           2628 ;	genIpush
   09EE C0 02              2629 	push	ar2
   09F0 C0 07              2630 	push	ar7
                           2631 ;	genIpush
   09F2 74rB4              2632 	mov	a,#__str_39
   09F4 C0 E0              2633 	push	acc
   09F6 74s04              2634 	mov	a,#(__str_39 >> 8)
   09F8 C0 E0              2635 	push	acc
   09FA 74 80              2636 	mov	a,#0x80
   09FC C0 E0              2637 	push	acc
                           2638 ;	genCall
   09FE 12s00r00           2639 	lcall	_printf
   0A01 E5 81              2640 	mov	a,sp
   0A03 24 F7              2641 	add	a,#0xf7
   0A05 F5 81              2642 	mov	sp,a
                           2643 ;	main.c:316: break;
                           2644 ;	Peephole 251.a	replaced ljmp to ret with ret
   0A07 22                 2645 	ret
                           2646 ;	main.c:317: case 'R':
   0A08                    2647 00102$:
                           2648 ;	main.c:318: printf("\r\nReading from EEPROM...");
                           2649 ;	genIpush
   0A08 74rE5              2650 	mov	a,#__str_40
   0A0A C0 E0              2651 	push	acc
   0A0C 74s04              2652 	mov	a,#(__str_40 >> 8)
   0A0E C0 E0              2653 	push	acc
   0A10 74 80              2654 	mov	a,#0x80
   0A12 C0 E0              2655 	push	acc
                           2656 ;	genCall
   0A14 12s00r00           2657 	lcall	_printf
   0A17 15 81              2658 	dec	sp
   0A19 15 81              2659 	dec	sp
   0A1B 15 81              2660 	dec	sp
                           2661 ;	main.c:319: getBlockAndAddress(&address, &block);
                           2662 ;	genCast
   0A1D 90s00r00           2663 	mov	dptr,#_getBlockAndAddress_PARM_2
   0A20 74r74              2664 	mov	a,#_handleEEPROMMode_block_1_1
   0A22 F0                 2665 	movx	@dptr,a
   0A23 A3                 2666 	inc	dptr
   0A24 74s00              2667 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0A26 F0                 2668 	movx	@dptr,a
   0A27 A3                 2669 	inc	dptr
   0A28 74 00              2670 	mov	a,#0x0
   0A2A F0                 2671 	movx	@dptr,a
                           2672 ;	genCall
                           2673 ;	Peephole 182.a	used 16 bit load of DPTR
   0A2B 90s00r76           2674 	mov	dptr,#_handleEEPROMMode_address_1_1
   0A2E 75 F0 00           2675 	mov	b,#0x00
   0A31 12s00r0C           2676 	lcall	_getBlockAndAddress
                           2677 ;	main.c:321: lcdData = EPROM_ByteRead(address, block);
                           2678 ;	genAssign
   0A34 90s00r76           2679 	mov	dptr,#_handleEEPROMMode_address_1_1
   0A37 E0                 2680 	movx	a,@dptr
   0A38 FA                 2681 	mov	r2,a
                           2682 ;	genAssign
   0A39 90s00r74           2683 	mov	dptr,#_handleEEPROMMode_block_1_1
   0A3C E0                 2684 	movx	a,@dptr
                           2685 ;	genAssign
   0A3D FB                 2686 	mov	r3,a
   0A3E 90s00r00           2687 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           2688 ;	Peephole 100	removed redundant mov
   0A41 F0                 2689 	movx	@dptr,a
                           2690 ;	genCall
   0A42 8A 82              2691 	mov	dpl,r2
   0A44 12s00r00           2692 	lcall	_EPROM_ByteRead
   0A47 AA 82              2693 	mov	r2,dpl
                           2694 ;	main.c:322: printf("\r\nRead %X from block %d address 0x%X\r\n", lcdData, block, address);
                           2695 ;	genAssign
   0A49 90s00r76           2696 	mov	dptr,#_handleEEPROMMode_address_1_1
   0A4C E0                 2697 	movx	a,@dptr
   0A4D FB                 2698 	mov	r3,a
                           2699 ;	genCast
   0A4E 7C 00              2700 	mov	r4,#0x00
                           2701 ;	genAssign
   0A50 90s00r74           2702 	mov	dptr,#_handleEEPROMMode_block_1_1
   0A53 E0                 2703 	movx	a,@dptr
   0A54 FD                 2704 	mov	r5,a
                           2705 ;	genCast
   0A55 7E 00              2706 	mov	r6,#0x00
                           2707 ;	genCast
   0A57 7F 00              2708 	mov	r7,#0x00
                           2709 ;	genIpush
   0A59 C0 03              2710 	push	ar3
   0A5B C0 04              2711 	push	ar4
                           2712 ;	genIpush
   0A5D C0 05              2713 	push	ar5
   0A5F C0 06              2714 	push	ar6
                           2715 ;	genIpush
   0A61 C0 02              2716 	push	ar2
   0A63 C0 07              2717 	push	ar7
                           2718 ;	genIpush
   0A65 74rFE              2719 	mov	a,#__str_41
   0A67 C0 E0              2720 	push	acc
   0A69 74s04              2721 	mov	a,#(__str_41 >> 8)
   0A6B C0 E0              2722 	push	acc
   0A6D 74 80              2723 	mov	a,#0x80
   0A6F C0 E0              2724 	push	acc
                           2725 ;	genCall
   0A71 12s00r00           2726 	lcall	_printf
   0A74 E5 81              2727 	mov	a,sp
   0A76 24 F7              2728 	add	a,#0xf7
   0A78 F5 81              2729 	mov	sp,a
                           2730 ;	main.c:323: break;
                           2731 ;	Peephole 251.a	replaced ljmp to ret with ret
   0A7A 22                 2732 	ret
                           2733 ;	main.c:324: case 'L':
   0A7B                    2734 00103$:
                           2735 ;	main.c:325: getBlockAndAddress(&address, &block);
                           2736 ;	genCast
   0A7B 90s00r00           2737 	mov	dptr,#_getBlockAndAddress_PARM_2
   0A7E 74r74              2738 	mov	a,#_handleEEPROMMode_block_1_1
   0A80 F0                 2739 	movx	@dptr,a
   0A81 A3                 2740 	inc	dptr
   0A82 74s00              2741 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0A84 F0                 2742 	movx	@dptr,a
   0A85 A3                 2743 	inc	dptr
   0A86 74 00              2744 	mov	a,#0x0
   0A88 F0                 2745 	movx	@dptr,a
                           2746 ;	genCall
                           2747 ;	Peephole 182.a	used 16 bit load of DPTR
   0A89 90s00r76           2748 	mov	dptr,#_handleEEPROMMode_address_1_1
   0A8C 75 F0 00           2749 	mov	b,#0x00
   0A8F 12s00r0C           2750 	lcall	_getBlockAndAddress
                           2751 ;	main.c:327: lcdData = EPROM_ByteRead(address, block);
                           2752 ;	genAssign
   0A92 90s00r76           2753 	mov	dptr,#_handleEEPROMMode_address_1_1
   0A95 E0                 2754 	movx	a,@dptr
   0A96 FA                 2755 	mov	r2,a
                           2756 ;	genAssign
   0A97 90s00r74           2757 	mov	dptr,#_handleEEPROMMode_block_1_1
   0A9A E0                 2758 	movx	a,@dptr
                           2759 ;	genAssign
   0A9B FB                 2760 	mov	r3,a
   0A9C 90s00r00           2761 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           2762 ;	Peephole 100	removed redundant mov
   0A9F F0                 2763 	movx	@dptr,a
                           2764 ;	genCall
   0AA0 8A 82              2765 	mov	dpl,r2
   0AA2 12s00r00           2766 	lcall	_EPROM_ByteRead
   0AA5 AA 82              2767 	mov	r2,dpl
                           2768 ;	main.c:329: printf("\r\nEnter LCD row from 0-3:");
                           2769 ;	genIpush
   0AA7 C0 02              2770 	push	ar2
   0AA9 74r25              2771 	mov	a,#__str_42
   0AAB C0 E0              2772 	push	acc
   0AAD 74s05              2773 	mov	a,#(__str_42 >> 8)
   0AAF C0 E0              2774 	push	acc
   0AB1 74 80              2775 	mov	a,#0x80
   0AB3 C0 E0              2776 	push	acc
                           2777 ;	genCall
   0AB5 12s00r00           2778 	lcall	_printf
   0AB8 15 81              2779 	dec	sp
   0ABA 15 81              2780 	dec	sp
   0ABC 15 81              2781 	dec	sp
   0ABE D0 02              2782 	pop	ar2
                           2783 ;	main.c:330: Lcd_row = Serial_GetInteger(1);
                           2784 ;	genCall
                           2785 ;	Peephole 182.b	used 16 bit load of dptr
   0AC0 90 00 01           2786 	mov	dptr,#0x0001
   0AC3 C0 02              2787 	push	ar2
   0AC5 12s00r00           2788 	lcall	_Serial_GetInteger
   0AC8 AB 82              2789 	mov	r3,dpl
   0ACA AC 83              2790 	mov	r4,dph
   0ACC D0 02              2791 	pop	ar2
                           2792 ;	genCast
                           2793 ;	main.c:332: LCD_gotoxy(Lcd_row, 0);
                           2794 ;	genAssign
   0ACE 90s00r00           2795 	mov	dptr,#_LCD_gotoxy_PARM_2
                           2796 ;	Peephole 181	changed mov to clr
   0AD1 E4                 2797 	clr	a
   0AD2 F0                 2798 	movx	@dptr,a
                           2799 ;	genCall
   0AD3 8B 82              2800 	mov	dpl,r3
   0AD5 C0 02              2801 	push	ar2
   0AD7 12s00r00           2802 	lcall	_LCD_gotoxy
   0ADA D0 02              2803 	pop	ar2
                           2804 ;	main.c:333: LCD_Putch(block + '0');
                           2805 ;	genAssign
   0ADC 90s00r74           2806 	mov	dptr,#_handleEEPROMMode_block_1_1
   0ADF E0                 2807 	movx	a,@dptr
                           2808 ;	genPlus
                           2809 ;     genPlusIncr
                           2810 ;	Peephole 236.a	used r3 instead of ar3
                           2811 ;	Peephole 214	reduced some extra moves
                           2812 ;	genCall
                           2813 ;	Peephole 215	removed some moves
   0AE0 24 30              2814 	add	a,#0x30
   0AE2 FB                 2815 	mov	r3,a
                           2816 ;	Peephole 244.c	loading dpl from a instead of r3
   0AE3 F5 82              2817 	mov	dpl,a
   0AE5 C0 02              2818 	push	ar2
   0AE7 12s00r00           2819 	lcall	_LCD_Putch
   0AEA D0 02              2820 	pop	ar2
                           2821 ;	main.c:334: LCD_Puthex(address);
                           2822 ;	genAssign
   0AEC 90s00r76           2823 	mov	dptr,#_handleEEPROMMode_address_1_1
   0AEF E0                 2824 	movx	a,@dptr
                           2825 ;	genCall
   0AF0 FB                 2826 	mov	r3,a
                           2827 ;	Peephole 244.c	loading dpl from a instead of r3
   0AF1 F5 82              2828 	mov	dpl,a
   0AF3 C0 02              2829 	push	ar2
   0AF5 12s00r00           2830 	lcall	_LCD_Puthex
   0AF8 D0 02              2831 	pop	ar2
                           2832 ;	main.c:335: LCD_Putstr(": ");
                           2833 ;	genCall
                           2834 ;	Peephole 182.a	used 16 bit load of DPTR
   0AFA 90s05r3F           2835 	mov	dptr,#__str_43
   0AFD 75 F0 80           2836 	mov	b,#0x80
   0B00 C0 02              2837 	push	ar2
   0B02 12s00r00           2838 	lcall	_LCD_Putstr
   0B05 D0 02              2839 	pop	ar2
                           2840 ;	main.c:336: LCD_Puthex(lcdData);
                           2841 ;	genCall
   0B07 8A 82              2842 	mov	dpl,r2
   0B09 12s00r00           2843 	lcall	_LCD_Puthex
                           2844 ;	main.c:338: printf("\r\nWrote to LCD!\r\n");
                           2845 ;	genIpush
   0B0C 74r42              2846 	mov	a,#__str_44
   0B0E C0 E0              2847 	push	acc
   0B10 74s05              2848 	mov	a,#(__str_44 >> 8)
   0B12 C0 E0              2849 	push	acc
   0B14 74 80              2850 	mov	a,#0x80
   0B16 C0 E0              2851 	push	acc
                           2852 ;	genCall
   0B18 12s00r00           2853 	lcall	_printf
   0B1B 15 81              2854 	dec	sp
   0B1D 15 81              2855 	dec	sp
   0B1F 15 81              2856 	dec	sp
                           2857 ;	main.c:339: break;
                           2858 ;	Peephole 251.a	replaced ljmp to ret with ret
   0B21 22                 2859 	ret
                           2860 ;	main.c:341: case 'D':
   0B22                    2861 00104$:
                           2862 ;	main.c:342: printf("\r\nPerforming an EEPROM data dump\r\n");
                           2863 ;	genIpush
   0B22 74r54              2864 	mov	a,#__str_45
   0B24 C0 E0              2865 	push	acc
   0B26 74s05              2866 	mov	a,#(__str_45 >> 8)
   0B28 C0 E0              2867 	push	acc
   0B2A 74 80              2868 	mov	a,#0x80
   0B2C C0 E0              2869 	push	acc
                           2870 ;	genCall
   0B2E 12s00r00           2871 	lcall	_printf
   0B31 15 81              2872 	dec	sp
   0B33 15 81              2873 	dec	sp
   0B35 15 81              2874 	dec	sp
                           2875 ;	main.c:343: printf("\r\nEnter the starting block and address");
                           2876 ;	genIpush
   0B37 74r77              2877 	mov	a,#__str_46
   0B39 C0 E0              2878 	push	acc
   0B3B 74s05              2879 	mov	a,#(__str_46 >> 8)
   0B3D C0 E0              2880 	push	acc
   0B3F 74 80              2881 	mov	a,#0x80
   0B41 C0 E0              2882 	push	acc
                           2883 ;	genCall
   0B43 12s00r00           2884 	lcall	_printf
   0B46 15 81              2885 	dec	sp
   0B48 15 81              2886 	dec	sp
   0B4A 15 81              2887 	dec	sp
                           2888 ;	main.c:344: getBlockAndAddress(&address, &block);
                           2889 ;	genCast
   0B4C 90s00r00           2890 	mov	dptr,#_getBlockAndAddress_PARM_2
   0B4F 74r74              2891 	mov	a,#_handleEEPROMMode_block_1_1
   0B51 F0                 2892 	movx	@dptr,a
   0B52 A3                 2893 	inc	dptr
   0B53 74s00              2894 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0B55 F0                 2895 	movx	@dptr,a
   0B56 A3                 2896 	inc	dptr
   0B57 74 00              2897 	mov	a,#0x0
   0B59 F0                 2898 	movx	@dptr,a
                           2899 ;	genCall
                           2900 ;	Peephole 182.a	used 16 bit load of DPTR
   0B5A 90s00r76           2901 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B5D 75 F0 00           2902 	mov	b,#0x00
   0B60 12s00r0C           2903 	lcall	_getBlockAndAddress
                           2904 ;	main.c:345: printf("\r\nEnter the ending block and address");
                           2905 ;	genIpush
   0B63 74r9E              2906 	mov	a,#__str_47
   0B65 C0 E0              2907 	push	acc
   0B67 74s05              2908 	mov	a,#(__str_47 >> 8)
   0B69 C0 E0              2909 	push	acc
   0B6B 74 80              2910 	mov	a,#0x80
   0B6D C0 E0              2911 	push	acc
                           2912 ;	genCall
   0B6F 12s00r00           2913 	lcall	_printf
   0B72 15 81              2914 	dec	sp
   0B74 15 81              2915 	dec	sp
   0B76 15 81              2916 	dec	sp
                           2917 ;	main.c:346: getBlockAndAddress(&end_address, &end_block);
                           2918 ;	genCast
   0B78 90s00r00           2919 	mov	dptr,#_getBlockAndAddress_PARM_2
   0B7B 74r75              2920 	mov	a,#_handleEEPROMMode_end_block_1_1
   0B7D F0                 2921 	movx	@dptr,a
   0B7E A3                 2922 	inc	dptr
   0B7F 74s00              2923 	mov	a,#(_handleEEPROMMode_end_block_1_1 >> 8)
   0B81 F0                 2924 	movx	@dptr,a
   0B82 A3                 2925 	inc	dptr
   0B83 74 00              2926 	mov	a,#0x0
   0B85 F0                 2927 	movx	@dptr,a
                           2928 ;	genCall
                           2929 ;	Peephole 182.a	used 16 bit load of DPTR
   0B86 90s00r77           2930 	mov	dptr,#_handleEEPROMMode_end_address_1_1
   0B89 75 F0 00           2931 	mov	b,#0x00
   0B8C 12s00r0C           2932 	lcall	_getBlockAndAddress
                           2933 ;	main.c:347: start_addr =( block << 8) | address;
                           2934 ;	genAssign
   0B8F 90s00r74           2935 	mov	dptr,#_handleEEPROMMode_block_1_1
   0B92 E0                 2936 	movx	a,@dptr
   0B93 FA                 2937 	mov	r2,a
                           2938 ;	genCast
                           2939 ;	genLeftShift
                           2940 ;	genLeftShiftLiteral
                           2941 ;	genlshTwo
                           2942 ;	peephole 177.e	removed redundant move
   0B94 8A 03              2943 	mov	ar3,r2
   0B96 7A 00              2944 	mov	r2,#0x00
                           2945 ;	genAssign
   0B98 90s00r76           2946 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B9B E0                 2947 	movx	a,@dptr
                           2948 ;	genCast
                           2949 ;	genOr
   0B9C FC                 2950 	mov	r4,a
   0B9D 7D 00              2951 	mov	r5,#0x00
                           2952 ;	Peephole 177.d	removed redundant move
   0B9F 42 02              2953 	orl	ar2,a
   0BA1 ED                 2954 	mov	a,r5
   0BA2 42 03              2955 	orl	ar3,a
                           2956 ;	genAssign
   0BA4 90s00r78           2957 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0BA7 EA                 2958 	mov	a,r2
   0BA8 F0                 2959 	movx	@dptr,a
   0BA9 A3                 2960 	inc	dptr
   0BAA EB                 2961 	mov	a,r3
   0BAB F0                 2962 	movx	@dptr,a
                           2963 ;	main.c:348: end_addr = (end_block << 8) | end_address;
                           2964 ;	genAssign
   0BAC 90s00r75           2965 	mov	dptr,#_handleEEPROMMode_end_block_1_1
   0BAF E0                 2966 	movx	a,@dptr
   0BB0 FC                 2967 	mov	r4,a
                           2968 ;	genCast
                           2969 ;	genLeftShift
                           2970 ;	genLeftShiftLiteral
                           2971 ;	genlshTwo
                           2972 ;	peephole 177.e	removed redundant move
   0BB1 8C 05              2973 	mov	ar5,r4
   0BB3 7C 00              2974 	mov	r4,#0x00
                           2975 ;	genAssign
   0BB5 90s00r77           2976 	mov	dptr,#_handleEEPROMMode_end_address_1_1
   0BB8 E0                 2977 	movx	a,@dptr
                           2978 ;	genCast
                           2979 ;	genOr
   0BB9 FE                 2980 	mov	r6,a
   0BBA 7F 00              2981 	mov	r7,#0x00
                           2982 ;	Peephole 177.d	removed redundant move
   0BBC 42 04              2983 	orl	ar4,a
   0BBE EF                 2984 	mov	a,r7
   0BBF 42 05              2985 	orl	ar5,a
                           2986 ;	genAssign
   0BC1 90s00r7A           2987 	mov	dptr,#_handleEEPROMMode_end_addr_1_1
   0BC4 EC                 2988 	mov	a,r4
   0BC5 F0                 2989 	movx	@dptr,a
   0BC6 A3                 2990 	inc	dptr
   0BC7 ED                 2991 	mov	a,r5
   0BC8 F0                 2992 	movx	@dptr,a
                           2993 ;	main.c:349: if (start_addr > end_addr){
                           2994 ;	genAssign
                           2995 ;	genAssign
                           2996 ;	genCmpGt
                           2997 ;	genCmp
   0BC9 C3                 2998 	clr	c
   0BCA EC                 2999 	mov	a,r4
   0BCB 9A                 3000 	subb	a,r2
   0BCC ED                 3001 	mov	a,r5
   0BCD 9B                 3002 	subb	a,r3
                           3003 ;	genIfxJump
                           3004 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0BCE 50 16              3005 	jnc	00106$
                           3006 ;	Peephole 300	removed redundant label 00141$
                           3007 ;	main.c:350: printf("\r\nInvalid addresses. End address must be after start address");
                           3008 ;	genIpush
   0BD0 74rC3              3009 	mov	a,#__str_48
   0BD2 C0 E0              3010 	push	acc
   0BD4 74s05              3011 	mov	a,#(__str_48 >> 8)
   0BD6 C0 E0              3012 	push	acc
   0BD8 74 80              3013 	mov	a,#0x80
   0BDA C0 E0              3014 	push	acc
                           3015 ;	genCall
   0BDC 12s00r00           3016 	lcall	_printf
   0BDF 15 81              3017 	dec	sp
   0BE1 15 81              3018 	dec	sp
   0BE3 15 81              3019 	dec	sp
                           3020 ;	main.c:351: return;
                           3021 ;	genRet
                           3022 ;	Peephole 251.a	replaced ljmp to ret with ret
   0BE5 22                 3023 	ret
   0BE6                    3024 00106$:
                           3025 ;	main.c:353: printf("\r\n");
                           3026 ;	genIpush
   0BE6 74rB7              3027 	mov	a,#__str_29
   0BE8 C0 E0              3028 	push	acc
   0BEA 74s03              3029 	mov	a,#(__str_29 >> 8)
   0BEC C0 E0              3030 	push	acc
   0BEE 74 80              3031 	mov	a,#0x80
   0BF0 C0 E0              3032 	push	acc
                           3033 ;	genCall
   0BF2 12s00r00           3034 	lcall	_printf
   0BF5 15 81              3035 	dec	sp
   0BF7 15 81              3036 	dec	sp
   0BF9 15 81              3037 	dec	sp
                           3038 ;	main.c:354: while(start_addr <= end_addr){
                           3039 ;	genAssign
   0BFB 90s00r7A           3040 	mov	dptr,#_handleEEPROMMode_end_addr_1_1
   0BFE E0                 3041 	movx	a,@dptr
   0BFF FA                 3042 	mov	r2,a
   0C00 A3                 3043 	inc	dptr
   0C01 E0                 3044 	movx	a,@dptr
   0C02 FB                 3045 	mov	r3,a
                           3046 ;	genAssign
   0C03 8A 04              3047 	mov	ar4,r2
   0C05 8B 05              3048 	mov	ar5,r3
   0C07                    3049 00113$:
                           3050 ;	genAssign
   0C07 90s00r78           3051 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0C0A E0                 3052 	movx	a,@dptr
   0C0B FE                 3053 	mov	r6,a
   0C0C A3                 3054 	inc	dptr
   0C0D E0                 3055 	movx	a,@dptr
   0C0E FF                 3056 	mov	r7,a
                           3057 ;	genCmpGt
                           3058 ;	genCmp
   0C0F C3                 3059 	clr	c
   0C10 EC                 3060 	mov	a,r4
   0C11 9E                 3061 	subb	a,r6
   0C12 ED                 3062 	mov	a,r5
   0C13 9F                 3063 	subb	a,r7
                           3064 ;	genIfxJump
   0C14 50 01              3065 	jnc	00142$
                           3066 ;	Peephole 251.a	replaced ljmp to ret with ret
   0C16 22                 3067 	ret
   0C17                    3068 00142$:
                           3069 ;	main.c:355: printf("%x: ", start_addr);
                           3070 ;	genIpush
   0C17 C0 02              3071 	push	ar2
   0C19 C0 03              3072 	push	ar3
   0C1B C0 04              3073 	push	ar4
   0C1D C0 05              3074 	push	ar5
   0C1F C0 06              3075 	push	ar6
   0C21 C0 07              3076 	push	ar7
   0C23 C0 06              3077 	push	ar6
   0C25 C0 07              3078 	push	ar7
                           3079 ;	genIpush
   0C27 74rBA              3080 	mov	a,#__str_30
   0C29 C0 E0              3081 	push	acc
   0C2B 74s03              3082 	mov	a,#(__str_30 >> 8)
   0C2D C0 E0              3083 	push	acc
   0C2F 74 80              3084 	mov	a,#0x80
   0C31 C0 E0              3085 	push	acc
                           3086 ;	genCall
   0C33 12s00r00           3087 	lcall	_printf
   0C36 E5 81              3088 	mov	a,sp
   0C38 24 FB              3089 	add	a,#0xfb
   0C3A F5 81              3090 	mov	sp,a
   0C3C D0 07              3091 	pop	ar7
   0C3E D0 06              3092 	pop	ar6
   0C40 D0 05              3093 	pop	ar5
   0C42 D0 04              3094 	pop	ar4
   0C44 D0 03              3095 	pop	ar3
   0C46 D0 02              3096 	pop	ar2
                           3097 ;	main.c:357: for (i = 0; i < 16; ++i){
                           3098 ;	genAssign
                           3099 ;	genAssign
   0C48 78 00              3100 	mov	r0,#0x00
   0C4A                    3101 00109$:
                           3102 ;	genCmpLt
                           3103 ;	genCmp
   0C4A B8 10 00           3104 	cjne	r0,#0x10,00143$
   0C4D                    3105 00143$:
                           3106 ;	genIfxJump
                           3107 ;	Peephole 112.b	changed ljmp to sjmp
                           3108 ;	Peephole 160.b	removed sjmp by inverse jump logic
   0C4D 50 76              3109 	jnc	00134$
                           3110 ;	Peephole 300	removed redundant label 00144$
                           3111 ;	main.c:358: lcdData = EPROM_ByteRead(start_addr & 0xFF, start_addr >> 8);
                           3112 ;	genIpush
   0C4F C0 04              3113 	push	ar4
   0C51 C0 05              3114 	push	ar5
                           3115 ;	genAnd
   0C53 8E 01              3116 	mov	ar1,r6
   0C55 7C 00              3117 	mov	r4,#0x00
                           3118 ;	genCast
                           3119 ;	genGetByte
   0C57 90s00r00           3120 	mov	dptr,#_EPROM_ByteRead_PARM_2
   0C5A EF                 3121 	mov	a,r7
   0C5B F0                 3122 	movx	@dptr,a
                           3123 ;	genCall
   0C5C 89 82              3124 	mov	dpl,r1
   0C5E C0 02              3125 	push	ar2
   0C60 C0 03              3126 	push	ar3
   0C62 C0 05              3127 	push	ar5
   0C64 C0 06              3128 	push	ar6
   0C66 C0 07              3129 	push	ar7
   0C68 C0 00              3130 	push	ar0
   0C6A 12s00r00           3131 	lcall	_EPROM_ByteRead
   0C6D AC 82              3132 	mov	r4,dpl
   0C6F D0 00              3133 	pop	ar0
   0C71 D0 07              3134 	pop	ar7
   0C73 D0 06              3135 	pop	ar6
   0C75 D0 05              3136 	pop	ar5
   0C77 D0 03              3137 	pop	ar3
   0C79 D0 02              3138 	pop	ar2
                           3139 ;	main.c:359: printf("%x ", lcdData);
                           3140 ;	genCast
   0C7B 7D 00              3141 	mov	r5,#0x00
                           3142 ;	genIpush
   0C7D C0 02              3143 	push	ar2
   0C7F C0 03              3144 	push	ar3
   0C81 C0 04              3145 	push	ar4
   0C83 C0 05              3146 	push	ar5
   0C85 C0 06              3147 	push	ar6
   0C87 C0 07              3148 	push	ar7
   0C89 C0 00              3149 	push	ar0
   0C8B C0 04              3150 	push	ar4
   0C8D C0 05              3151 	push	ar5
                           3152 ;	genIpush
   0C8F 74rBF              3153 	mov	a,#__str_31
   0C91 C0 E0              3154 	push	acc
   0C93 74s03              3155 	mov	a,#(__str_31 >> 8)
   0C95 C0 E0              3156 	push	acc
   0C97 74 80              3157 	mov	a,#0x80
   0C99 C0 E0              3158 	push	acc
                           3159 ;	genCall
   0C9B 12s00r00           3160 	lcall	_printf
   0C9E E5 81              3161 	mov	a,sp
   0CA0 24 FB              3162 	add	a,#0xfb
   0CA2 F5 81              3163 	mov	sp,a
   0CA4 D0 00              3164 	pop	ar0
   0CA6 D0 07              3165 	pop	ar7
   0CA8 D0 06              3166 	pop	ar6
   0CAA D0 05              3167 	pop	ar5
   0CAC D0 04              3168 	pop	ar4
   0CAE D0 03              3169 	pop	ar3
   0CB0 D0 02              3170 	pop	ar2
                           3171 ;	main.c:360: start_addr++;
                           3172 ;	genPlus
                           3173 ;     genPlusIncr
   0CB2 0E                 3174 	inc	r6
   0CB3 BE 00 01           3175 	cjne	r6,#0x00,00145$
   0CB6 0F                 3176 	inc	r7
   0CB7                    3177 00145$:
                           3178 ;	main.c:361: if(start_addr > end_addr){
                           3179 ;	genCmpGt
                           3180 ;	genCmp
   0CB7 C3                 3181 	clr	c
   0CB8 EA                 3182 	mov	a,r2
   0CB9 9E                 3183 	subb	a,r6
   0CBA EB                 3184 	mov	a,r3
   0CBB 9F                 3185 	subb	a,r7
                           3186 ;	genIpop
                           3187 ;	genIfx
                           3188 ;	genIfxJump
                           3189 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           3190 ;	Peephole 129.c	optimized condition
   0CBC D0 05              3191 	pop	ar5
   0CBE D0 04              3192 	pop	ar4
   0CC0 40 03              3193 	jc	00134$
                           3194 ;	Peephole 300	removed redundant label 00146$
                           3195 ;	main.c:357: for (i = 0; i < 16; ++i){
                           3196 ;	genPlus
                           3197 ;     genPlusIncr
   0CC2 08                 3198 	inc	r0
                           3199 ;	Peephole 112.b	changed ljmp to sjmp
   0CC3 80 85              3200 	sjmp	00109$
   0CC5                    3201 00134$:
                           3202 ;	genAssign
   0CC5 90s00r78           3203 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0CC8 EE                 3204 	mov	a,r6
   0CC9 F0                 3205 	movx	@dptr,a
   0CCA A3                 3206 	inc	dptr
   0CCB EF                 3207 	mov	a,r7
   0CCC F0                 3208 	movx	@dptr,a
                           3209 ;	main.c:365: printf("\r\n");
                           3210 ;	genIpush
   0CCD C0 02              3211 	push	ar2
   0CCF C0 03              3212 	push	ar3
   0CD1 C0 04              3213 	push	ar4
   0CD3 C0 05              3214 	push	ar5
   0CD5 74rB7              3215 	mov	a,#__str_29
   0CD7 C0 E0              3216 	push	acc
   0CD9 74s03              3217 	mov	a,#(__str_29 >> 8)
   0CDB C0 E0              3218 	push	acc
   0CDD 74 80              3219 	mov	a,#0x80
   0CDF C0 E0              3220 	push	acc
                           3221 ;	genCall
   0CE1 12s00r00           3222 	lcall	_printf
   0CE4 15 81              3223 	dec	sp
   0CE6 15 81              3224 	dec	sp
   0CE8 15 81              3225 	dec	sp
   0CEA D0 05              3226 	pop	ar5
   0CEC D0 04              3227 	pop	ar4
   0CEE D0 03              3228 	pop	ar3
   0CF0 D0 02              3229 	pop	ar2
   0CF2 02s0Cr07           3230 	ljmp	00113$
                           3231 ;	main.c:369: case 'r':
   0CF5                    3232 00116$:
                           3233 ;	main.c:370: mode = MAIN_MODE;
                           3234 ;	genAssign
   0CF5 90s00r00           3235 	mov	dptr,#_mode
                           3236 ;	Peephole 181	changed mov to clr
   0CF8 E4                 3237 	clr	a
   0CF9 F0                 3238 	movx	@dptr,a
                           3239 ;	main.c:371: MainMenu();
                           3240 ;	genCall
                           3241 ;	main.c:372: break;
                           3242 ;	main.c:373: case 'H':
                           3243 ;	Peephole 112.b	changed ljmp to sjmp
                           3244 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3245 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0CFA 02s10r4B           3246 	ljmp	_MainMenu
   0CFD                    3247 00117$:
                           3248 ;	main.c:374: EEPROM_Menu();
                           3249 ;	genCall
                           3250 ;	main.c:378: }
                           3251 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0CFD 02s08rB0           3252 	ljmp	_EEPROM_Menu
                           3253 ;
                           3254 ;------------------------------------------------------------
                           3255 ;Allocation info for local variables in function 'CLOCK_Menu'
                           3256 ;------------------------------------------------------------
                           3257 ;------------------------------------------------------------
                           3258 ;	main.c:382: void CLOCK_Menu(void){
                           3259 ;	-----------------------------------------
                           3260 ;	 function CLOCK_Menu
                           3261 ;	-----------------------------------------
   0D00                    3262 _CLOCK_Menu:
                           3263 ;	main.c:383: printf("\r\nIn Clock Mode");
                           3264 ;	genIpush
   0D00 74r00              3265 	mov	a,#__str_49
   0D02 C0 E0              3266 	push	acc
   0D04 74s06              3267 	mov	a,#(__str_49 >> 8)
   0D06 C0 E0              3268 	push	acc
   0D08 74 80              3269 	mov	a,#0x80
   0D0A C0 E0              3270 	push	acc
                           3271 ;	genCall
   0D0C 12s00r00           3272 	lcall	_printf
   0D0F 15 81              3273 	dec	sp
   0D11 15 81              3274 	dec	sp
   0D13 15 81              3275 	dec	sp
                           3276 ;	main.c:384: printf("\r\nPress 'H' for help");
                           3277 ;	genIpush
   0D15 74r9F              3278 	mov	a,#__str_4
   0D17 C0 E0              3279 	push	acc
   0D19 74s00              3280 	mov	a,#(__str_4 >> 8)
   0D1B C0 E0              3281 	push	acc
   0D1D 74 80              3282 	mov	a,#0x80
   0D1F C0 E0              3283 	push	acc
                           3284 ;	genCall
   0D21 12s00r00           3285 	lcall	_printf
   0D24 15 81              3286 	dec	sp
   0D26 15 81              3287 	dec	sp
   0D28 15 81              3288 	dec	sp
                           3289 ;	main.c:385: printf("\r\nPress 'T' to stop the clock");
                           3290 ;	genIpush
   0D2A 74r10              3291 	mov	a,#__str_50
   0D2C C0 E0              3292 	push	acc
   0D2E 74s06              3293 	mov	a,#(__str_50 >> 8)
   0D30 C0 E0              3294 	push	acc
   0D32 74 80              3295 	mov	a,#0x80
   0D34 C0 E0              3296 	push	acc
                           3297 ;	genCall
   0D36 12s00r00           3298 	lcall	_printf
   0D39 15 81              3299 	dec	sp
   0D3B 15 81              3300 	dec	sp
   0D3D 15 81              3301 	dec	sp
                           3302 ;	main.c:386: printf("\r\nPress 'S' to start the clock again");
                           3303 ;	genIpush
   0D3F 74r2E              3304 	mov	a,#__str_51
   0D41 C0 E0              3305 	push	acc
   0D43 74s06              3306 	mov	a,#(__str_51 >> 8)
   0D45 C0 E0              3307 	push	acc
   0D47 74 80              3308 	mov	a,#0x80
   0D49 C0 E0              3309 	push	acc
                           3310 ;	genCall
   0D4B 12s00r00           3311 	lcall	_printf
   0D4E 15 81              3312 	dec	sp
   0D50 15 81              3313 	dec	sp
   0D52 15 81              3314 	dec	sp
                           3315 ;	main.c:387: printf("\r\nPress 'O' to reset the clock to 0");
                           3316 ;	genIpush
   0D54 74r53              3317 	mov	a,#__str_52
   0D56 C0 E0              3318 	push	acc
   0D58 74s06              3319 	mov	a,#(__str_52 >> 8)
   0D5A C0 E0              3320 	push	acc
   0D5C 74 80              3321 	mov	a,#0x80
   0D5E C0 E0              3322 	push	acc
                           3323 ;	genCall
   0D60 12s00r00           3324 	lcall	_printf
   0D63 15 81              3325 	dec	sp
   0D65 15 81              3326 	dec	sp
   0D67 15 81              3327 	dec	sp
                           3328 ;	main.c:388: printf("\r\nPress 'N' to create a new alarm");
                           3329 ;	genIpush
   0D69 74r77              3330 	mov	a,#__str_53
   0D6B C0 E0              3331 	push	acc
   0D6D 74s06              3332 	mov	a,#(__str_53 >> 8)
   0D6F C0 E0              3333 	push	acc
   0D71 74 80              3334 	mov	a,#0x80
   0D73 C0 E0              3335 	push	acc
                           3336 ;	genCall
   0D75 12s00r00           3337 	lcall	_printf
   0D78 15 81              3338 	dec	sp
   0D7A 15 81              3339 	dec	sp
   0D7C 15 81              3340 	dec	sp
                           3341 ;	main.c:389: printf("\r\nPress 'C' to view count for each alarm");
                           3342 ;	genIpush
   0D7E 74r99              3343 	mov	a,#__str_54
   0D80 C0 E0              3344 	push	acc
   0D82 74s06              3345 	mov	a,#(__str_54 >> 8)
   0D84 C0 E0              3346 	push	acc
   0D86 74 80              3347 	mov	a,#0x80
   0D88 C0 E0              3348 	push	acc
                           3349 ;	genCall
   0D8A 12s00r00           3350 	lcall	_printf
   0D8D 15 81              3351 	dec	sp
   0D8F 15 81              3352 	dec	sp
   0D91 15 81              3353 	dec	sp
                           3354 ;	main.c:390: printf("\r\nPress 'D' to disable an alarm");
                           3355 ;	genIpush
   0D93 74rC2              3356 	mov	a,#__str_55
   0D95 C0 E0              3357 	push	acc
   0D97 74s06              3358 	mov	a,#(__str_55 >> 8)
   0D99 C0 E0              3359 	push	acc
   0D9B 74 80              3360 	mov	a,#0x80
   0D9D C0 E0              3361 	push	acc
                           3362 ;	genCall
   0D9F 12s00r00           3363 	lcall	_printf
   0DA2 15 81              3364 	dec	sp
   0DA4 15 81              3365 	dec	sp
   0DA6 15 81              3366 	dec	sp
                           3367 ;	main.c:391: printf("\r\nPress 'E' to reenable an alarm");
                           3368 ;	genIpush
   0DA8 74rE2              3369 	mov	a,#__str_56
   0DAA C0 E0              3370 	push	acc
   0DAC 74s06              3371 	mov	a,#(__str_56 >> 8)
   0DAE C0 E0              3372 	push	acc
   0DB0 74 80              3373 	mov	a,#0x80
   0DB2 C0 E0              3374 	push	acc
                           3375 ;	genCall
   0DB4 12s00r00           3376 	lcall	_printf
   0DB7 15 81              3377 	dec	sp
   0DB9 15 81              3378 	dec	sp
   0DBB 15 81              3379 	dec	sp
                           3380 ;	main.c:392: printf("\r\nPress 'r' to return to main menu\r\n");
                           3381 ;	genIpush
   0DBD 74r44              3382 	mov	a,#__str_9
   0DBF C0 E0              3383 	push	acc
   0DC1 74s01              3384 	mov	a,#(__str_9 >> 8)
   0DC3 C0 E0              3385 	push	acc
   0DC5 74 80              3386 	mov	a,#0x80
   0DC7 C0 E0              3387 	push	acc
                           3388 ;	genCall
   0DC9 12s00r00           3389 	lcall	_printf
   0DCC 15 81              3390 	dec	sp
   0DCE 15 81              3391 	dec	sp
   0DD0 15 81              3392 	dec	sp
                           3393 ;	Peephole 300	removed redundant label 00101$
   0DD2 22                 3394 	ret
                           3395 ;------------------------------------------------------------
                           3396 ;Allocation info for local variables in function 'handleCLOCKMode'
                           3397 ;------------------------------------------------------------
                           3398 ;c                         Allocated with name '_handleCLOCKMode_c_1_1'
                           3399 ;alarm_duration            Allocated with name '_handleCLOCKMode_alarm_duration_1_1'
                           3400 ;i                         Allocated with name '_handleCLOCKMode_i_1_1'
                           3401 ;------------------------------------------------------------
                           3402 ;	main.c:396: void handleCLOCKMode(char c){
                           3403 ;	-----------------------------------------
                           3404 ;	 function handleCLOCKMode
                           3405 ;	-----------------------------------------
   0DD3                    3406 _handleCLOCKMode:
                           3407 ;	genReceive
   0DD3 E5 82              3408 	mov	a,dpl
   0DD5 90s00r7C           3409 	mov	dptr,#_handleCLOCKMode_c_1_1
   0DD8 F0                 3410 	movx	@dptr,a
                           3411 ;	main.c:399: switch(c){
                           3412 ;	genAssign
   0DD9 90s00r7C           3413 	mov	dptr,#_handleCLOCKMode_c_1_1
   0DDC E0                 3414 	movx	a,@dptr
   0DDD FA                 3415 	mov	r2,a
                           3416 ;	genCmpEq
                           3417 ;	gencjneshort
   0DDE BA 43 03           3418 	cjne	r2,#0x43,00147$
   0DE1 02s0Er7B           3419 	ljmp	00140$
   0DE4                    3420 00147$:
                           3421 ;	genCmpEq
                           3422 ;	gencjneshort
   0DE4 BA 44 03           3423 	cjne	r2,#0x44,00148$
   0DE7 02s0Fr22           3424 	ljmp	00109$
   0DEA                    3425 00148$:
                           3426 ;	genCmpEq
                           3427 ;	gencjneshort
   0DEA BA 45 03           3428 	cjne	r2,#0x45,00149$
   0DED 02s0FrA3           3429 	ljmp	00113$
   0DF0                    3430 00149$:
                           3431 ;	genCmpEq
                           3432 ;	gencjneshort
   0DF0 BA 48 03           3433 	cjne	r2,#0x48,00150$
   0DF3 02s10r48           3434 	ljmp	00120$
   0DF6                    3435 00150$:
                           3436 ;	genCmpEq
                           3437 ;	gencjneshort
   0DF6 BA 4E 02           3438 	cjne	r2,#0x4E,00151$
                           3439 ;	Peephole 112.b	changed ljmp to sjmp
   0DF9 80 5E              3440 	sjmp	00104$
   0DFB                    3441 00151$:
                           3442 ;	genCmpEq
                           3443 ;	gencjneshort
   0DFB BA 4F 02           3444 	cjne	r2,#0x4F,00152$
                           3445 ;	Peephole 112.b	changed ljmp to sjmp
   0DFE 80 41              3446 	sjmp	00103$
   0E00                    3447 00152$:
                           3448 ;	genCmpEq
                           3449 ;	gencjneshort
   0E00 BA 53 02           3450 	cjne	r2,#0x53,00153$
                           3451 ;	Peephole 112.b	changed ljmp to sjmp
   0E03 80 24              3452 	sjmp	00102$
   0E05                    3453 00153$:
                           3454 ;	genCmpEq
                           3455 ;	gencjneshort
   0E05 BA 54 02           3456 	cjne	r2,#0x54,00154$
                           3457 ;	Peephole 112.b	changed ljmp to sjmp
   0E08 80 07              3458 	sjmp	00101$
   0E0A                    3459 00154$:
                           3460 ;	genCmpEq
                           3461 ;	gencjneshort
   0E0A BA 72 03           3462 	cjne	r2,#0x72,00155$
   0E0D 02s10r40           3463 	ljmp	00119$
   0E10                    3464 00155$:
                           3465 ;	Peephole 251.a	replaced ljmp to ret with ret
   0E10 22                 3466 	ret
                           3467 ;	main.c:400: case 'T':
   0E11                    3468 00101$:
                           3469 ;	main.c:401: printf("\r\nStopping the clock");
                           3470 ;	genIpush
   0E11 74r03              3471 	mov	a,#__str_57
   0E13 C0 E0              3472 	push	acc
   0E15 74s07              3473 	mov	a,#(__str_57 >> 8)
   0E17 C0 E0              3474 	push	acc
   0E19 74 80              3475 	mov	a,#0x80
   0E1B C0 E0              3476 	push	acc
                           3477 ;	genCall
   0E1D 12s00r00           3478 	lcall	_printf
   0E20 15 81              3479 	dec	sp
   0E22 15 81              3480 	dec	sp
   0E24 15 81              3481 	dec	sp
                           3482 ;	main.c:402: Clock_Stop();
                           3483 ;	genCall
                           3484 ;	main.c:403: break;
                           3485 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3486 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E26 02s00r00           3487 	ljmp	_Clock_Stop
                           3488 ;	main.c:404: case 'S':
   0E29                    3489 00102$:
                           3490 ;	main.c:405: printf("\r\nStarting the clock");
                           3491 ;	genIpush
   0E29 74r18              3492 	mov	a,#__str_58
   0E2B C0 E0              3493 	push	acc
   0E2D 74s07              3494 	mov	a,#(__str_58 >> 8)
   0E2F C0 E0              3495 	push	acc
   0E31 74 80              3496 	mov	a,#0x80
   0E33 C0 E0              3497 	push	acc
                           3498 ;	genCall
   0E35 12s00r00           3499 	lcall	_printf
   0E38 15 81              3500 	dec	sp
   0E3A 15 81              3501 	dec	sp
   0E3C 15 81              3502 	dec	sp
                           3503 ;	main.c:406: Clock_Start();
                           3504 ;	genCall
                           3505 ;	main.c:407: break;
                           3506 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3507 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E3E 02s00r00           3508 	ljmp	_Clock_Start
                           3509 ;	main.c:408: case 'O':
   0E41                    3510 00103$:
                           3511 ;	main.c:409: printf("\r\nResetting the clock");
                           3512 ;	genIpush
   0E41 74r2D              3513 	mov	a,#__str_59
   0E43 C0 E0              3514 	push	acc
   0E45 74s07              3515 	mov	a,#(__str_59 >> 8)
   0E47 C0 E0              3516 	push	acc
   0E49 74 80              3517 	mov	a,#0x80
   0E4B C0 E0              3518 	push	acc
                           3519 ;	genCall
   0E4D 12s00r00           3520 	lcall	_printf
   0E50 15 81              3521 	dec	sp
   0E52 15 81              3522 	dec	sp
   0E54 15 81              3523 	dec	sp
                           3524 ;	main.c:410: Clock_Reset();
                           3525 ;	genCall
                           3526 ;	main.c:411: break;
                           3527 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3528 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E56 02s00r00           3529 	ljmp	_Clock_Reset
                           3530 ;	main.c:412: case 'N':
   0E59                    3531 00104$:
                           3532 ;	main.c:413: printf("\r\nEnter alarm time in seconds:\r\n");
                           3533 ;	genIpush
   0E59 74r43              3534 	mov	a,#__str_60
   0E5B C0 E0              3535 	push	acc
   0E5D 74s07              3536 	mov	a,#(__str_60 >> 8)
   0E5F C0 E0              3537 	push	acc
   0E61 74 80              3538 	mov	a,#0x80
   0E63 C0 E0              3539 	push	acc
                           3540 ;	genCall
   0E65 12s00r00           3541 	lcall	_printf
   0E68 15 81              3542 	dec	sp
   0E6A 15 81              3543 	dec	sp
   0E6C 15 81              3544 	dec	sp
                           3545 ;	main.c:414: alarm_duration = Serial_GetInteger(5);
                           3546 ;	genCall
                           3547 ;	Peephole 182.b	used 16 bit load of dptr
   0E6E 90 00 05           3548 	mov	dptr,#0x0005
   0E71 12s00r00           3549 	lcall	_Serial_GetInteger
                           3550 ;	main.c:415: Clock_NewAlarm(alarm_duration);
                           3551 ;	genCall
   0E74 AA 82              3552 	mov	r2,dpl
                           3553 ;	Peephole 177.d	removed redundant move
   0E76 AB 83              3554 	mov  r3,dph
                           3555 ;	Peephole 177.a	removed redundant mov
                           3556 ;	main.c:416: break;
                           3557 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3558 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E78 02s00r00           3559 	ljmp	_Clock_NewAlarm
                           3560 ;	main.c:418: for (i = 0; i < 3; ++i){
   0E7B                    3561 00140$:
                           3562 ;	genAssign
   0E7B 7A 00              3563 	mov	r2,#0x00
   0E7D                    3564 00123$:
                           3565 ;	genCmpLt
                           3566 ;	genCmp
   0E7D BA 03 00           3567 	cjne	r2,#0x03,00156$
   0E80                    3568 00156$:
                           3569 ;	genIfxJump
   0E80 40 03              3570 	jc	00157$
   0E82 02s0Fr0C           3571 	ljmp	00126$
   0E85                    3572 00157$:
                           3573 ;	main.c:419: if (ActiveAlarms[i])
                           3574 ;	genPlus
                           3575 ;	Peephole 236.g	used r2 instead of ar2
   0E85 EA                 3576 	mov	a,r2
   0E86 24r00              3577 	add	a,#_ActiveAlarms
   0E88 FB                 3578 	mov	r3,a
                           3579 ;	Peephole 181	changed mov to clr
   0E89 E4                 3580 	clr	a
   0E8A 34s00              3581 	addc	a,#(_ActiveAlarms >> 8)
   0E8C FC                 3582 	mov	r4,a
                           3583 ;	genPointerGet
                           3584 ;	genFarPointerGet
   0E8D 8B 82              3585 	mov	dpl,r3
   0E8F 8C 83              3586 	mov	dph,r4
   0E91 E0                 3587 	movx	a,@dptr
                           3588 ;	genIfxJump
                           3589 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0E92 60 3B              3590 	jz	00107$
                           3591 ;	Peephole 300	removed redundant label 00158$
                           3592 ;	main.c:420: printf("\r\nAlarm %d: %u <Enabled>", i, AlarmCount[i]);
                           3593 ;	genMult
                           3594 ;	genMultOneByte
   0E94 EA                 3595 	mov	a,r2
   0E95 75 F0 02           3596 	mov	b,#0x02
   0E98 A4                 3597 	mul	ab
                           3598 ;	genPlus
   0E99 24r00              3599 	add	a,#_AlarmCount
   0E9B F5 82              3600 	mov	dpl,a
   0E9D 74s00              3601 	mov	a,#(_AlarmCount >> 8)
   0E9F 35 F0              3602 	addc	a,b
   0EA1 F5 83              3603 	mov	dph,a
                           3604 ;	genPointerGet
                           3605 ;	genFarPointerGet
   0EA3 E0                 3606 	movx	a,@dptr
   0EA4 FB                 3607 	mov	r3,a
   0EA5 A3                 3608 	inc	dptr
   0EA6 E0                 3609 	movx	a,@dptr
   0EA7 FC                 3610 	mov	r4,a
                           3611 ;	genCast
   0EA8 8A 05              3612 	mov	ar5,r2
   0EAA 7E 00              3613 	mov	r6,#0x00
                           3614 ;	genIpush
   0EAC C0 02              3615 	push	ar2
   0EAE C0 03              3616 	push	ar3
   0EB0 C0 04              3617 	push	ar4
                           3618 ;	genIpush
   0EB2 C0 05              3619 	push	ar5
   0EB4 C0 06              3620 	push	ar6
                           3621 ;	genIpush
   0EB6 74r64              3622 	mov	a,#__str_61
   0EB8 C0 E0              3623 	push	acc
   0EBA 74s07              3624 	mov	a,#(__str_61 >> 8)
   0EBC C0 E0              3625 	push	acc
   0EBE 74 80              3626 	mov	a,#0x80
   0EC0 C0 E0              3627 	push	acc
                           3628 ;	genCall
   0EC2 12s00r00           3629 	lcall	_printf
   0EC5 E5 81              3630 	mov	a,sp
   0EC7 24 F9              3631 	add	a,#0xf9
   0EC9 F5 81              3632 	mov	sp,a
   0ECB D0 02              3633 	pop	ar2
                           3634 ;	Peephole 112.b	changed ljmp to sjmp
   0ECD 80 39              3635 	sjmp	00125$
   0ECF                    3636 00107$:
                           3637 ;	main.c:422: printf("\r\nAlarm %d: %u <Disabled>", i, AlarmCount[i]);
                           3638 ;	genMult
                           3639 ;	genMultOneByte
   0ECF EA                 3640 	mov	a,r2
   0ED0 75 F0 02           3641 	mov	b,#0x02
   0ED3 A4                 3642 	mul	ab
                           3643 ;	genPlus
   0ED4 24r00              3644 	add	a,#_AlarmCount
   0ED6 F5 82              3645 	mov	dpl,a
   0ED8 74s00              3646 	mov	a,#(_AlarmCount >> 8)
   0EDA 35 F0              3647 	addc	a,b
   0EDC F5 83              3648 	mov	dph,a
                           3649 ;	genPointerGet
                           3650 ;	genFarPointerGet
   0EDE E0                 3651 	movx	a,@dptr
   0EDF FB                 3652 	mov	r3,a
   0EE0 A3                 3653 	inc	dptr
   0EE1 E0                 3654 	movx	a,@dptr
   0EE2 FC                 3655 	mov	r4,a
                           3656 ;	genCast
   0EE3 8A 05              3657 	mov	ar5,r2
   0EE5 7E 00              3658 	mov	r6,#0x00
                           3659 ;	genIpush
   0EE7 C0 02              3660 	push	ar2
   0EE9 C0 03              3661 	push	ar3
   0EEB C0 04              3662 	push	ar4
                           3663 ;	genIpush
   0EED C0 05              3664 	push	ar5
   0EEF C0 06              3665 	push	ar6
                           3666 ;	genIpush
   0EF1 74r7D              3667 	mov	a,#__str_62
   0EF3 C0 E0              3668 	push	acc
   0EF5 74s07              3669 	mov	a,#(__str_62 >> 8)
   0EF7 C0 E0              3670 	push	acc
   0EF9 74 80              3671 	mov	a,#0x80
   0EFB C0 E0              3672 	push	acc
                           3673 ;	genCall
   0EFD 12s00r00           3674 	lcall	_printf
   0F00 E5 81              3675 	mov	a,sp
   0F02 24 F9              3676 	add	a,#0xf9
   0F04 F5 81              3677 	mov	sp,a
   0F06 D0 02              3678 	pop	ar2
   0F08                    3679 00125$:
                           3680 ;	main.c:418: for (i = 0; i < 3; ++i){
                           3681 ;	genPlus
                           3682 ;     genPlusIncr
   0F08 0A                 3683 	inc	r2
   0F09 02s0Er7D           3684 	ljmp	00123$
   0F0C                    3685 00126$:
                           3686 ;	main.c:424: printf("\r\n");
                           3687 ;	genIpush
   0F0C 74rB7              3688 	mov	a,#__str_29
   0F0E C0 E0              3689 	push	acc
   0F10 74s03              3690 	mov	a,#(__str_29 >> 8)
   0F12 C0 E0              3691 	push	acc
   0F14 74 80              3692 	mov	a,#0x80
   0F16 C0 E0              3693 	push	acc
                           3694 ;	genCall
   0F18 12s00r00           3695 	lcall	_printf
   0F1B 15 81              3696 	dec	sp
   0F1D 15 81              3697 	dec	sp
   0F1F 15 81              3698 	dec	sp
                           3699 ;	main.c:425: break;
                           3700 ;	Peephole 251.a	replaced ljmp to ret with ret
   0F21 22                 3701 	ret
                           3702 ;	main.c:426: case 'D':
   0F22                    3703 00109$:
                           3704 ;	main.c:427: printf("\r\nEnter an alarm number from 0-2 to disable:");
                           3705 ;	genIpush
   0F22 74r97              3706 	mov	a,#__str_63
   0F24 C0 E0              3707 	push	acc
   0F26 74s07              3708 	mov	a,#(__str_63 >> 8)
   0F28 C0 E0              3709 	push	acc
   0F2A 74 80              3710 	mov	a,#0x80
   0F2C C0 E0              3711 	push	acc
                           3712 ;	genCall
   0F2E 12s00r00           3713 	lcall	_printf
   0F31 15 81              3714 	dec	sp
   0F33 15 81              3715 	dec	sp
   0F35 15 81              3716 	dec	sp
                           3717 ;	main.c:428: i = Serial_GetInteger(1);
                           3718 ;	genCall
                           3719 ;	Peephole 182.b	used 16 bit load of dptr
   0F37 90 00 01           3720 	mov	dptr,#0x0001
   0F3A 12s00r00           3721 	lcall	_Serial_GetInteger
   0F3D AA 82              3722 	mov	r2,dpl
   0F3F AB 83              3723 	mov	r3,dph
                           3724 ;	genCast
   0F41 90s00r7D           3725 	mov	dptr,#_handleCLOCKMode_i_1_1
   0F44 EA                 3726 	mov	a,r2
   0F45 F0                 3727 	movx	@dptr,a
                           3728 ;	main.c:429: while(i > 2){
   0F46                    3729 00110$:
                           3730 ;	genAssign
   0F46 90s00r7D           3731 	mov	dptr,#_handleCLOCKMode_i_1_1
   0F49 E0                 3732 	movx	a,@dptr
                           3733 ;	genCmpGt
                           3734 ;	genCmp
                           3735 ;	genIfxJump
                           3736 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           3737 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0F4A FA                 3738 	mov  r2,a
                           3739 ;	Peephole 177.a	removed redundant mov
   0F4B 24 FD              3740 	add	a,#0xff - 0x02
   0F4D 50 26              3741 	jnc	00112$
                           3742 ;	Peephole 300	removed redundant label 00159$
                           3743 ;	main.c:430: printf("\r\nEnter an alarm number from 0-2 to disable:");
                           3744 ;	genIpush
   0F4F 74r97              3745 	mov	a,#__str_63
   0F51 C0 E0              3746 	push	acc
   0F53 74s07              3747 	mov	a,#(__str_63 >> 8)
   0F55 C0 E0              3748 	push	acc
   0F57 74 80              3749 	mov	a,#0x80
   0F59 C0 E0              3750 	push	acc
                           3751 ;	genCall
   0F5B 12s00r00           3752 	lcall	_printf
   0F5E 15 81              3753 	dec	sp
   0F60 15 81              3754 	dec	sp
   0F62 15 81              3755 	dec	sp
                           3756 ;	main.c:431: i = Serial_GetInteger(1);
                           3757 ;	genCall
                           3758 ;	Peephole 182.b	used 16 bit load of dptr
   0F64 90 00 01           3759 	mov	dptr,#0x0001
   0F67 12s00r00           3760 	lcall	_Serial_GetInteger
   0F6A AB 82              3761 	mov	r3,dpl
   0F6C AC 83              3762 	mov	r4,dph
                           3763 ;	genCast
   0F6E 90s00r7D           3764 	mov	dptr,#_handleCLOCKMode_i_1_1
   0F71 EB                 3765 	mov	a,r3
   0F72 F0                 3766 	movx	@dptr,a
                           3767 ;	Peephole 112.b	changed ljmp to sjmp
   0F73 80 D1              3768 	sjmp	00110$
   0F75                    3769 00112$:
                           3770 ;	main.c:433: printf("\r\nAlarm %d disabled\r\n", i);
                           3771 ;	genCast
   0F75 8A 03              3772 	mov	ar3,r2
   0F77 7C 00              3773 	mov	r4,#0x00
                           3774 ;	genIpush
   0F79 C0 02              3775 	push	ar2
   0F7B C0 03              3776 	push	ar3
   0F7D C0 04              3777 	push	ar4
                           3778 ;	genIpush
   0F7F 74rC4              3779 	mov	a,#__str_64
   0F81 C0 E0              3780 	push	acc
   0F83 74s07              3781 	mov	a,#(__str_64 >> 8)
   0F85 C0 E0              3782 	push	acc
   0F87 74 80              3783 	mov	a,#0x80
   0F89 C0 E0              3784 	push	acc
                           3785 ;	genCall
   0F8B 12s00r00           3786 	lcall	_printf
   0F8E E5 81              3787 	mov	a,sp
   0F90 24 FB              3788 	add	a,#0xfb
   0F92 F5 81              3789 	mov	sp,a
   0F94 D0 02              3790 	pop	ar2
                           3791 ;	main.c:434: ActiveAlarms[i] = 0;
                           3792 ;	genPlus
                           3793 ;	Peephole 236.g	used r2 instead of ar2
   0F96 EA                 3794 	mov	a,r2
   0F97 24r00              3795 	add	a,#_ActiveAlarms
   0F99 F5 82              3796 	mov	dpl,a
                           3797 ;	Peephole 181	changed mov to clr
   0F9B E4                 3798 	clr	a
   0F9C 34s00              3799 	addc	a,#(_ActiveAlarms >> 8)
   0F9E F5 83              3800 	mov	dph,a
                           3801 ;	genPointerSet
                           3802 ;     genFarPointerSet
                           3803 ;	Peephole 181	changed mov to clr
   0FA0 E4                 3804 	clr	a
   0FA1 F0                 3805 	movx	@dptr,a
                           3806 ;	main.c:435: break;
                           3807 ;	Peephole 251.a	replaced ljmp to ret with ret
   0FA2 22                 3808 	ret
                           3809 ;	main.c:436: case 'E':
   0FA3                    3810 00113$:
                           3811 ;	main.c:437: printf("\r\nEnter an alarm number from 0-2 to enable:");
                           3812 ;	genIpush
   0FA3 74rDA              3813 	mov	a,#__str_65
   0FA5 C0 E0              3814 	push	acc
   0FA7 74s07              3815 	mov	a,#(__str_65 >> 8)
   0FA9 C0 E0              3816 	push	acc
   0FAB 74 80              3817 	mov	a,#0x80
   0FAD C0 E0              3818 	push	acc
                           3819 ;	genCall
   0FAF 12s00r00           3820 	lcall	_printf
   0FB2 15 81              3821 	dec	sp
   0FB4 15 81              3822 	dec	sp
   0FB6 15 81              3823 	dec	sp
                           3824 ;	main.c:438: i = Serial_GetInteger(1);
                           3825 ;	genCall
                           3826 ;	Peephole 182.b	used 16 bit load of dptr
   0FB8 90 00 01           3827 	mov	dptr,#0x0001
   0FBB 12s00r00           3828 	lcall	_Serial_GetInteger
   0FBE AA 82              3829 	mov	r2,dpl
   0FC0 AB 83              3830 	mov	r3,dph
                           3831 ;	genCast
   0FC2 90s00r7D           3832 	mov	dptr,#_handleCLOCKMode_i_1_1
   0FC5 EA                 3833 	mov	a,r2
   0FC6 F0                 3834 	movx	@dptr,a
                           3835 ;	main.c:439: while(i > 2){
   0FC7                    3836 00114$:
                           3837 ;	genAssign
   0FC7 90s00r7D           3838 	mov	dptr,#_handleCLOCKMode_i_1_1
   0FCA E0                 3839 	movx	a,@dptr
                           3840 ;	genCmpGt
                           3841 ;	genCmp
                           3842 ;	genIfxJump
                           3843 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           3844 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0FCB FA                 3845 	mov  r2,a
                           3846 ;	Peephole 177.a	removed redundant mov
   0FCC 24 FD              3847 	add	a,#0xff - 0x02
   0FCE 50 26              3848 	jnc	00116$
                           3849 ;	Peephole 300	removed redundant label 00160$
                           3850 ;	main.c:440: printf("\r\nEnter an alarm number from 0-2 to enable:");
                           3851 ;	genIpush
   0FD0 74rDA              3852 	mov	a,#__str_65
   0FD2 C0 E0              3853 	push	acc
   0FD4 74s07              3854 	mov	a,#(__str_65 >> 8)
   0FD6 C0 E0              3855 	push	acc
   0FD8 74 80              3856 	mov	a,#0x80
   0FDA C0 E0              3857 	push	acc
                           3858 ;	genCall
   0FDC 12s00r00           3859 	lcall	_printf
   0FDF 15 81              3860 	dec	sp
   0FE1 15 81              3861 	dec	sp
   0FE3 15 81              3862 	dec	sp
                           3863 ;	main.c:441: i = Serial_GetInteger(1);
                           3864 ;	genCall
                           3865 ;	Peephole 182.b	used 16 bit load of dptr
   0FE5 90 00 01           3866 	mov	dptr,#0x0001
   0FE8 12s00r00           3867 	lcall	_Serial_GetInteger
   0FEB AB 82              3868 	mov	r3,dpl
   0FED AC 83              3869 	mov	r4,dph
                           3870 ;	genCast
   0FEF 90s00r7D           3871 	mov	dptr,#_handleCLOCKMode_i_1_1
   0FF2 EB                 3872 	mov	a,r3
   0FF3 F0                 3873 	movx	@dptr,a
                           3874 ;	Peephole 112.b	changed ljmp to sjmp
   0FF4 80 D1              3875 	sjmp	00114$
   0FF6                    3876 00116$:
                           3877 ;	main.c:443: printf("\r\nAlarm %d enabled\r\n", i);
                           3878 ;	genCast
   0FF6 8A 03              3879 	mov	ar3,r2
   0FF8 7C 00              3880 	mov	r4,#0x00
                           3881 ;	genIpush
   0FFA C0 02              3882 	push	ar2
   0FFC C0 03              3883 	push	ar3
   0FFE C0 04              3884 	push	ar4
                           3885 ;	genIpush
   1000 74r06              3886 	mov	a,#__str_66
   1002 C0 E0              3887 	push	acc
   1004 74s08              3888 	mov	a,#(__str_66 >> 8)
   1006 C0 E0              3889 	push	acc
   1008 74 80              3890 	mov	a,#0x80
   100A C0 E0              3891 	push	acc
                           3892 ;	genCall
   100C 12s00r00           3893 	lcall	_printf
   100F E5 81              3894 	mov	a,sp
   1011 24 FB              3895 	add	a,#0xfb
   1013 F5 81              3896 	mov	sp,a
   1015 D0 02              3897 	pop	ar2
                           3898 ;	main.c:444: if (AlarmCount[i] != 0)
                           3899 ;	genMult
                           3900 ;	genMultOneByte
   1017 EA                 3901 	mov	a,r2
   1018 75 F0 02           3902 	mov	b,#0x02
   101B A4                 3903 	mul	ab
                           3904 ;	genPlus
   101C 24r00              3905 	add	a,#_AlarmCount
   101E F5 82              3906 	mov	dpl,a
   1020 74s00              3907 	mov	a,#(_AlarmCount >> 8)
   1022 35 F0              3908 	addc	a,b
   1024 F5 83              3909 	mov	dph,a
                           3910 ;	genPointerGet
                           3911 ;	genFarPointerGet
   1026 E0                 3912 	movx	a,@dptr
   1027 FB                 3913 	mov	r3,a
   1028 A3                 3914 	inc	dptr
   1029 E0                 3915 	movx	a,@dptr
   102A FC                 3916 	mov	r4,a
                           3917 ;	genCmpEq
                           3918 ;	gencjneshort
   102B BB 00 04           3919 	cjne	r3,#0x00,00161$
   102E BC 00 01           3920 	cjne	r4,#0x00,00161$
                           3921 ;	Peephole 112.b	changed ljmp to sjmp
                           3922 ;	Peephole 251.b	replaced sjmp to ret with ret
   1031 22                 3923 	ret
   1032                    3924 00161$:
                           3925 ;	main.c:445: ActiveAlarms[i] = 1;
                           3926 ;	genPlus
                           3927 ;	Peephole 236.g	used r2 instead of ar2
   1032 EA                 3928 	mov	a,r2
   1033 24r00              3929 	add	a,#_ActiveAlarms
   1035 F5 82              3930 	mov	dpl,a
                           3931 ;	Peephole 181	changed mov to clr
   1037 E4                 3932 	clr	a
   1038 34s00              3933 	addc	a,#(_ActiveAlarms >> 8)
   103A F5 83              3934 	mov	dph,a
                           3935 ;	genPointerSet
                           3936 ;     genFarPointerSet
   103C 74 01              3937 	mov	a,#0x01
   103E F0                 3938 	movx	@dptr,a
                           3939 ;	main.c:446: break;
                           3940 ;	main.c:447: case 'r':
                           3941 ;	Peephole 112.b	changed ljmp to sjmp
                           3942 ;	Peephole 251.b	replaced sjmp to ret with ret
   103F 22                 3943 	ret
   1040                    3944 00119$:
                           3945 ;	main.c:448: mode = MAIN_MODE;
                           3946 ;	genAssign
   1040 90s00r00           3947 	mov	dptr,#_mode
                           3948 ;	Peephole 181	changed mov to clr
   1043 E4                 3949 	clr	a
   1044 F0                 3950 	movx	@dptr,a
                           3951 ;	main.c:449: MainMenu();
                           3952 ;	genCall
                           3953 ;	main.c:450: break;
                           3954 ;	main.c:451: case 'H':
                           3955 ;	Peephole 112.b	changed ljmp to sjmp
                           3956 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3957 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1045 02s10r4B           3958 	ljmp	_MainMenu
   1048                    3959 00120$:
                           3960 ;	main.c:452: CLOCK_Menu();
                           3961 ;	genCall
                           3962 ;	main.c:456: }
                           3963 ;	Peephole 253.b	replaced lcall/ret with ljmp
   1048 02s0Dr00           3964 	ljmp	_CLOCK_Menu
                           3965 ;
                           3966 ;------------------------------------------------------------
                           3967 ;Allocation info for local variables in function 'MainMenu'
                           3968 ;------------------------------------------------------------
                           3969 ;------------------------------------------------------------
                           3970 ;	main.c:460: void MainMenu(void){
                           3971 ;	-----------------------------------------
                           3972 ;	 function MainMenu
                           3973 ;	-----------------------------------------
   104B                    3974 _MainMenu:
                           3975 ;	main.c:461: printf("\r\n***************");
                           3976 ;	genIpush
   104B 74r1B              3977 	mov	a,#__str_67
   104D C0 E0              3978 	push	acc
   104F 74s08              3979 	mov	a,#(__str_67 >> 8)
   1051 C0 E0              3980 	push	acc
   1053 74 80              3981 	mov	a,#0x80
   1055 C0 E0              3982 	push	acc
                           3983 ;	genCall
   1057 12s00r00           3984 	lcall	_printf
   105A 15 81              3985 	dec	sp
   105C 15 81              3986 	dec	sp
   105E 15 81              3987 	dec	sp
                           3988 ;	main.c:462: printf("\r\n    Menu\r\n");
                           3989 ;	genIpush
   1060 74r2D              3990 	mov	a,#__str_68
   1062 C0 E0              3991 	push	acc
   1064 74s08              3992 	mov	a,#(__str_68 >> 8)
   1066 C0 E0              3993 	push	acc
   1068 74 80              3994 	mov	a,#0x80
   106A C0 E0              3995 	push	acc
                           3996 ;	genCall
   106C 12s00r00           3997 	lcall	_printf
   106F 15 81              3998 	dec	sp
   1071 15 81              3999 	dec	sp
   1073 15 81              4000 	dec	sp
                           4001 ;	main.c:463: printf("\r\n***************");
                           4002 ;	genIpush
   1075 74r1B              4003 	mov	a,#__str_67
   1077 C0 E0              4004 	push	acc
   1079 74s08              4005 	mov	a,#(__str_67 >> 8)
   107B C0 E0              4006 	push	acc
   107D 74 80              4007 	mov	a,#0x80
   107F C0 E0              4008 	push	acc
                           4009 ;	genCall
   1081 12s00r00           4010 	lcall	_printf
   1084 15 81              4011 	dec	sp
   1086 15 81              4012 	dec	sp
   1088 15 81              4013 	dec	sp
                           4014 ;	main.c:464: printf("\r\nPress 'H' to show the help menu");
                           4015 ;	genIpush
   108A 74r3A              4016 	mov	a,#__str_69
   108C C0 E0              4017 	push	acc
   108E 74s08              4018 	mov	a,#(__str_69 >> 8)
   1090 C0 E0              4019 	push	acc
   1092 74 80              4020 	mov	a,#0x80
   1094 C0 E0              4021 	push	acc
                           4022 ;	genCall
   1096 12s00r00           4023 	lcall	_printf
   1099 15 81              4024 	dec	sp
   109B 15 81              4025 	dec	sp
   109D 15 81              4026 	dec	sp
                           4027 ;	main.c:465: printf("\r\nPress 'L' to enter LCD control mode");
                           4028 ;	genIpush
   109F 74r5C              4029 	mov	a,#__str_70
   10A1 C0 E0              4030 	push	acc
   10A3 74s08              4031 	mov	a,#(__str_70 >> 8)
   10A5 C0 E0              4032 	push	acc
   10A7 74 80              4033 	mov	a,#0x80
   10A9 C0 E0              4034 	push	acc
                           4035 ;	genCall
   10AB 12s00r00           4036 	lcall	_printf
   10AE 15 81              4037 	dec	sp
   10B0 15 81              4038 	dec	sp
   10B2 15 81              4039 	dec	sp
                           4040 ;	main.c:466: printf("\r\nPress 'E' to enter EEPROM control mode");
                           4041 ;	genIpush
   10B4 74r82              4042 	mov	a,#__str_71
   10B6 C0 E0              4043 	push	acc
   10B8 74s08              4044 	mov	a,#(__str_71 >> 8)
   10BA C0 E0              4045 	push	acc
   10BC 74 80              4046 	mov	a,#0x80
   10BE C0 E0              4047 	push	acc
                           4048 ;	genCall
   10C0 12s00r00           4049 	lcall	_printf
   10C3 15 81              4050 	dec	sp
   10C5 15 81              4051 	dec	sp
   10C7 15 81              4052 	dec	sp
                           4053 ;	main.c:467: printf("\r\nPress 'C' to enter Clock control mode");
                           4054 ;	genIpush
   10C9 74rAB              4055 	mov	a,#__str_72
   10CB C0 E0              4056 	push	acc
   10CD 74s08              4057 	mov	a,#(__str_72 >> 8)
   10CF C0 E0              4058 	push	acc
   10D1 74 80              4059 	mov	a,#0x80
   10D3 C0 E0              4060 	push	acc
                           4061 ;	genCall
   10D5 12s00r00           4062 	lcall	_printf
   10D8 15 81              4063 	dec	sp
   10DA 15 81              4064 	dec	sp
   10DC 15 81              4065 	dec	sp
                           4066 ;	main.c:468: printf("\r\nPress 'G' to enter Custom Code control mode\r\n");
                           4067 ;	genIpush
   10DE 74rD3              4068 	mov	a,#__str_73
   10E0 C0 E0              4069 	push	acc
   10E2 74s08              4070 	mov	a,#(__str_73 >> 8)
   10E4 C0 E0              4071 	push	acc
   10E6 74 80              4072 	mov	a,#0x80
   10E8 C0 E0              4073 	push	acc
                           4074 ;	genCall
   10EA 12s00r00           4075 	lcall	_printf
   10ED 15 81              4076 	dec	sp
   10EF 15 81              4077 	dec	sp
   10F1 15 81              4078 	dec	sp
                           4079 ;	Peephole 300	removed redundant label 00101$
   10F3 22                 4080 	ret
                           4081 ;------------------------------------------------------------
                           4082 ;Allocation info for local variables in function 'handleMAINMode'
                           4083 ;------------------------------------------------------------
                           4084 ;c                         Allocated with name '_handleMAINMode_c_1_1'
                           4085 ;------------------------------------------------------------
                           4086 ;	main.c:471: void handleMAINMode(char c){
                           4087 ;	-----------------------------------------
                           4088 ;	 function handleMAINMode
                           4089 ;	-----------------------------------------
   10F4                    4090 _handleMAINMode:
                           4091 ;	genReceive
   10F4 E5 82              4092 	mov	a,dpl
   10F6 90s00r7E           4093 	mov	dptr,#_handleMAINMode_c_1_1
   10F9 F0                 4094 	movx	@dptr,a
                           4095 ;	main.c:472: switch(c){
                           4096 ;	genAssign
   10FA 90s00r7E           4097 	mov	dptr,#_handleMAINMode_c_1_1
   10FD E0                 4098 	movx	a,@dptr
   10FE FA                 4099 	mov	r2,a
                           4100 ;	genCmpEq
                           4101 ;	gencjneshort
   10FF BA 43 02           4102 	cjne	r2,#0x43,00115$
                           4103 ;	Peephole 112.b	changed ljmp to sjmp
   1102 80 29              4104 	sjmp	00104$
   1104                    4105 00115$:
                           4106 ;	genCmpEq
                           4107 ;	gencjneshort
   1104 BA 45 02           4108 	cjne	r2,#0x45,00116$
                           4109 ;	Peephole 112.b	changed ljmp to sjmp
   1107 80 1B              4110 	sjmp	00103$
   1109                    4111 00116$:
                           4112 ;	genCmpEq
                           4113 ;	gencjneshort
   1109 BA 47 02           4114 	cjne	r2,#0x47,00117$
                           4115 ;	Peephole 112.b	changed ljmp to sjmp
   110C 80 28              4116 	sjmp	00105$
   110E                    4117 00117$:
                           4118 ;	genCmpEq
                           4119 ;	gencjneshort
   110E BA 48 02           4120 	cjne	r2,#0x48,00118$
                           4121 ;	Peephole 112.b	changed ljmp to sjmp
   1111 80 05              4122 	sjmp	00101$
   1113                    4123 00118$:
                           4124 ;	genCmpEq
                           4125 ;	gencjneshort
                           4126 ;	Peephole 112.b	changed ljmp to sjmp
                           4127 ;	main.c:473: case 'H':
                           4128 ;	Peephole 112.b	changed ljmp to sjmp
                           4129 ;	Peephole 198.b	optimized misc jump sequence
   1113 BA 4C 29           4130 	cjne	r2,#0x4C,00108$
   1116 80 03              4131 	sjmp	00102$
                           4132 ;	Peephole 300	removed redundant label 00119$
   1118                    4133 00101$:
                           4134 ;	main.c:474: MainMenu();
                           4135 ;	genCall
                           4136 ;	main.c:475: break;
                           4137 ;	main.c:476: case 'L':
                           4138 ;	Peephole 112.b	changed ljmp to sjmp
                           4139 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4140 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1118 02s10r4B           4141 	ljmp	_MainMenu
   111B                    4142 00102$:
                           4143 ;	main.c:477: mode = LCD_MODE;
                           4144 ;	genAssign
   111B 90s00r00           4145 	mov	dptr,#_mode
   111E 74 01              4146 	mov	a,#0x01
   1120 F0                 4147 	movx	@dptr,a
                           4148 ;	main.c:478: LCD_Menu();
                           4149 ;	genCall
                           4150 ;	main.c:479: break;
                           4151 ;	main.c:480: case 'E':
                           4152 ;	Peephole 112.b	changed ljmp to sjmp
                           4153 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4154 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1121 02s02r3D           4155 	ljmp	_LCD_Menu
   1124                    4156 00103$:
                           4157 ;	main.c:481: mode = EEPROM_MODE;
                           4158 ;	genAssign
   1124 90s00r00           4159 	mov	dptr,#_mode
   1127 74 02              4160 	mov	a,#0x02
   1129 F0                 4161 	movx	@dptr,a
                           4162 ;	main.c:482: EEPROM_Menu();
                           4163 ;	genCall
                           4164 ;	main.c:483: break;
                           4165 ;	main.c:484: case 'C':
                           4166 ;	Peephole 112.b	changed ljmp to sjmp
                           4167 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4168 ;	Peephole 253.a	replaced lcall/ret with ljmp
   112A 02s08rB0           4169 	ljmp	_EEPROM_Menu
   112D                    4170 00104$:
                           4171 ;	main.c:485: mode = CLOCK_MODE;
                           4172 ;	genAssign
   112D 90s00r00           4173 	mov	dptr,#_mode
   1130 74 03              4174 	mov	a,#0x03
   1132 F0                 4175 	movx	@dptr,a
                           4176 ;	main.c:486: CLOCK_Menu();
                           4177 ;	genCall
                           4178 ;	main.c:487: break;
                           4179 ;	main.c:488: case 'G':
                           4180 ;	Peephole 112.b	changed ljmp to sjmp
                           4181 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4182 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1133 02s0Dr00           4183 	ljmp	_CLOCK_Menu
   1136                    4184 00105$:
                           4185 ;	main.c:489: mode = CG_MODE;
                           4186 ;	genAssign
   1136 90s00r00           4187 	mov	dptr,#_mode
   1139 74 04              4188 	mov	a,#0x04
   113B F0                 4189 	movx	@dptr,a
                           4190 ;	main.c:490: CG_Menu();
                           4191 ;	genCall
                           4192 ;	main.c:494: }
                           4193 ;	Peephole 253.c	replaced lcall with ljmp
   113C 02s00rE8           4194 	ljmp	_CG_Menu
   113F                    4195 00108$:
   113F 22                 4196 	ret
                           4197 ;------------------------------------------------------------
                           4198 ;Allocation info for local variables in function 'handleInput'
                           4199 ;------------------------------------------------------------
                           4200 ;c                         Allocated with name '_handleInput_c_1_1'
                           4201 ;------------------------------------------------------------
                           4202 ;	main.c:501: void handleInput(char c){
                           4203 ;	-----------------------------------------
                           4204 ;	 function handleInput
                           4205 ;	-----------------------------------------
   1140                    4206 _handleInput:
                           4207 ;	genReceive
   1140 E5 82              4208 	mov	a,dpl
   1142 90s00r7F           4209 	mov	dptr,#_handleInput_c_1_1
   1145 F0                 4210 	movx	@dptr,a
                           4211 ;	main.c:502: switch(mode){
                           4212 ;	genAssign
   1146 90s00r00           4213 	mov	dptr,#_mode
   1149 E0                 4214 	movx	a,@dptr
                           4215 ;	genCmpGt
                           4216 ;	genCmp
                           4217 ;	genIfxJump
                           4218 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   114A FA                 4219 	mov  r2,a
                           4220 ;	Peephole 177.a	removed redundant mov
   114B 24 FB              4221 	add	a,#0xff - 0x04
                           4222 ;	Peephole 112.b	changed ljmp to sjmp
                           4223 ;	Peephole 160.a	removed sjmp by inverse jump logic
   114D 40 48              4224 	jc	00107$
                           4225 ;	Peephole 300	removed redundant label 00110$
                           4226 ;	genJumpTab
   114F EA                 4227 	mov	a,r2
                           4228 ;	Peephole 254	optimized left shift
   1150 2A                 4229 	add	a,r2
   1151 2A                 4230 	add	a,r2
   1152 90s11r56           4231 	mov	dptr,#00111$
   1155 73                 4232 	jmp	@a+dptr
   1156                    4233 00111$:
   1156 02s11r65           4234 	ljmp	00101$
   1159 02s11r6F           4235 	ljmp	00102$
   115C 02s11r79           4236 	ljmp	00103$
   115F 02s11r83           4237 	ljmp	00104$
   1162 02s11r8D           4238 	ljmp	00105$
                           4239 ;	main.c:503: case MAIN_MODE:
   1165                    4240 00101$:
                           4241 ;	main.c:504: handleMAINMode(c);
                           4242 ;	genAssign
   1165 90s00r7F           4243 	mov	dptr,#_handleInput_c_1_1
   1168 E0                 4244 	movx	a,@dptr
                           4245 ;	genCall
   1169 FA                 4246 	mov	r2,a
                           4247 ;	Peephole 244.c	loading dpl from a instead of r2
   116A F5 82              4248 	mov	dpl,a
                           4249 ;	main.c:505: break;
                           4250 ;	main.c:506: case LCD_MODE:
                           4251 ;	Peephole 112.b	changed ljmp to sjmp
                           4252 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4253 ;	Peephole 253.a	replaced lcall/ret with ljmp
   116C 02s10rF4           4254 	ljmp	_handleMAINMode
   116F                    4255 00102$:
                           4256 ;	main.c:507: handleLCDMode(c);
                           4257 ;	genAssign
   116F 90s00r7F           4258 	mov	dptr,#_handleInput_c_1_1
   1172 E0                 4259 	movx	a,@dptr
                           4260 ;	genCall
   1173 FA                 4261 	mov	r2,a
                           4262 ;	Peephole 244.c	loading dpl from a instead of r2
   1174 F5 82              4263 	mov	dpl,a
                           4264 ;	main.c:508: break;
                           4265 ;	main.c:509: case EEPROM_MODE:
                           4266 ;	Peephole 112.b	changed ljmp to sjmp
                           4267 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4268 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1176 02s03r25           4269 	ljmp	_handleLCDMode
   1179                    4270 00103$:
                           4271 ;	main.c:510: handleEEPROMMode(c);
                           4272 ;	genAssign
   1179 90s00r7F           4273 	mov	dptr,#_handleInput_c_1_1
   117C E0                 4274 	movx	a,@dptr
                           4275 ;	genCall
   117D FA                 4276 	mov	r2,a
                           4277 ;	Peephole 244.c	loading dpl from a instead of r2
   117E F5 82              4278 	mov	dpl,a
                           4279 ;	main.c:511: break;
                           4280 ;	main.c:512: case CLOCK_MODE:
                           4281 ;	Peephole 112.b	changed ljmp to sjmp
                           4282 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4283 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1180 02s09r44           4284 	ljmp	_handleEEPROMMode
   1183                    4285 00104$:
                           4286 ;	main.c:513: handleCLOCKMode(c);
                           4287 ;	genAssign
   1183 90s00r7F           4288 	mov	dptr,#_handleInput_c_1_1
   1186 E0                 4289 	movx	a,@dptr
                           4290 ;	genCall
   1187 FA                 4291 	mov	r2,a
                           4292 ;	Peephole 244.c	loading dpl from a instead of r2
   1188 F5 82              4293 	mov	dpl,a
                           4294 ;	main.c:514: break;
                           4295 ;	main.c:515: case CG_MODE:
                           4296 ;	Peephole 112.b	changed ljmp to sjmp
                           4297 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4298 ;	Peephole 253.a	replaced lcall/ret with ljmp
   118A 02s0DrD3           4299 	ljmp	_handleCLOCKMode
   118D                    4300 00105$:
                           4301 ;	main.c:516: handleCGMode(c);
                           4302 ;	genAssign
   118D 90s00r7F           4303 	mov	dptr,#_handleInput_c_1_1
   1190 E0                 4304 	movx	a,@dptr
                           4305 ;	genCall
   1191 FA                 4306 	mov	r2,a
                           4307 ;	Peephole 244.c	loading dpl from a instead of r2
   1192 F5 82              4308 	mov	dpl,a
                           4309 ;	main.c:518: }
                           4310 ;	Peephole 253.c	replaced lcall with ljmp
   1194 02s01r7C           4311 	ljmp	_handleCGMode
   1197                    4312 00107$:
   1197 22                 4313 	ret
                           4314 ;------------------------------------------------------------
                           4315 ;Allocation info for local variables in function 'main'
                           4316 ;------------------------------------------------------------
                           4317 ;c                         Allocated with name '_main_c_2_2'
                           4318 ;i                         Allocated with name '_main_i_2_2'
                           4319 ;------------------------------------------------------------
                           4320 ;	main.c:524: void main(void)
                           4321 ;	-----------------------------------------
                           4322 ;	 function main
                           4323 ;	-----------------------------------------
   1198                    4324 _main:
                           4325 ;	main.c:526: Serial_Init();
                           4326 ;	genCall
   1198 12s00r00           4327 	lcall	_Serial_Init
                           4328 ;	main.c:527: EPROM_Init();
                           4329 ;	genCall
   119B 12s00r00           4330 	lcall	_EPROM_Init
                           4331 ;	main.c:528: LCD_Init();
                           4332 ;	genCall
   119E 12s00r00           4333 	lcall	_LCD_Init
                           4334 ;	main.c:529: P1_3 = 1;
                           4335 ;	genAssign
   11A1 D2 93              4336 	setb	_P1_3
                           4337 ;	main.c:531: Timer0_Init();
                           4338 ;	genCall
   11A3 12s00r00           4339 	lcall	_Timer0_Init
                           4340 ;	main.c:532: mode = MAIN_MODE;
                           4341 ;	genAssign
   11A6 90s00r00           4342 	mov	dptr,#_mode
                           4343 ;	Peephole 181	changed mov to clr
                           4344 ;	main.c:533: LCD_gotoxy(0,0);    //Start at 0,0
                           4345 ;	genAssign
                           4346 ;	Peephole 181	changed mov to clr
                           4347 ;	Peephole 219.a	removed redundant clear
   11A9 E4                 4348 	clr	a
   11AA F0                 4349 	movx	@dptr,a
   11AB 90s00r00           4350 	mov	dptr,#_LCD_gotoxy_PARM_2
   11AE F0                 4351 	movx	@dptr,a
                           4352 ;	genCall
   11AF 75 82 00           4353 	mov	dpl,#0x00
   11B2 12s00r00           4354 	lcall	_LCD_gotoxy
                           4355 ;	main.c:534: MainMenu();
                           4356 ;	genCall
   11B5 12s10r4B           4357 	lcall	_MainMenu
                           4358 ;	main.c:539: checkAlarms:
   11B8                    4359 00101$:
                           4360 ;	main.c:540: for (i = 0; i < 3; ++i){
                           4361 ;	genAssign
   11B8 90s00r80           4362 	mov	dptr,#_main_i_2_2
                           4363 ;	Peephole 181	changed mov to clr
   11BB E4                 4364 	clr	a
   11BC F0                 4365 	movx	@dptr,a
                           4366 ;	genAssign
   11BD 7A 00              4367 	mov	r2,#0x00
   11BF                    4368 00119$:
                           4369 ;	genCmpLt
                           4370 ;	genCmp
   11BF BA 03 00           4371 	cjne	r2,#0x03,00141$
   11C2                    4372 00141$:
                           4373 ;	genIfxJump
   11C2 40 03              4374 	jc	00142$
   11C4 02s12rC2           4375 	ljmp	00122$
   11C7                    4376 00142$:
                           4377 ;	main.c:541: if(ExpiredAlarms[i]){
                           4378 ;	genPlus
                           4379 ;	Peephole 236.g	used r2 instead of ar2
   11C7 EA                 4380 	mov	a,r2
   11C8 24r01              4381 	add	a,#_ExpiredAlarms
   11CA FB                 4382 	mov	r3,a
                           4383 ;	Peephole 181	changed mov to clr
   11CB E4                 4384 	clr	a
   11CC 34s00              4385 	addc	a,#(_ExpiredAlarms >> 8)
   11CE FC                 4386 	mov	r4,a
                           4387 ;	genPointerGet
                           4388 ;	genFarPointerGet
   11CF 8B 82              4389 	mov	dpl,r3
   11D1 8C 83              4390 	mov	dph,r4
   11D3 E0                 4391 	movx	a,@dptr
                           4392 ;	genIfxJump
   11D4 70 03              4393 	jnz	00143$
   11D6 02s12rB9           4394 	ljmp	00121$
   11D9                    4395 00143$:
                           4396 ;	main.c:542: printf("\r\nAlarm %d going off, you must press 'D' to disable it\r\n", i);
                           4397 ;	genCast
   11D9 8A 03              4398 	mov	ar3,r2
   11DB 7C 00              4399 	mov	r4,#0x00
                           4400 ;	genIpush
   11DD C0 03              4401 	push	ar3
   11DF C0 04              4402 	push	ar4
                           4403 ;	genIpush
   11E1 74r03              4404 	mov	a,#__str_74
   11E3 C0 E0              4405 	push	acc
   11E5 74s09              4406 	mov	a,#(__str_74 >> 8)
   11E7 C0 E0              4407 	push	acc
   11E9 74 80              4408 	mov	a,#0x80
   11EB C0 E0              4409 	push	acc
                           4410 ;	genCall
   11ED 12s00r00           4411 	lcall	_printf
   11F0 E5 81              4412 	mov	a,sp
   11F2 24 FB              4413 	add	a,#0xfb
   11F4 F5 81              4414 	mov	sp,a
                           4415 ;	main.c:543: LCD_gotoxy(0,0);
                           4416 ;	genAssign
   11F6 90s00r00           4417 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4418 ;	Peephole 181	changed mov to clr
   11F9 E4                 4419 	clr	a
   11FA F0                 4420 	movx	@dptr,a
                           4421 ;	genCall
   11FB 75 82 00           4422 	mov	dpl,#0x00
   11FE 12s00r00           4423 	lcall	_LCD_gotoxy
                           4424 ;	main.c:544: LCD_Putstr("Disable Alarm!");
                           4425 ;	genCall
                           4426 ;	Peephole 182.a	used 16 bit load of DPTR
   1201 90s09r3C           4427 	mov	dptr,#__str_75
   1204 75 F0 80           4428 	mov	b,#0x80
   1207 12s00r00           4429 	lcall	_LCD_Putstr
                           4430 ;	main.c:545: while(getchar() != 'D'){
                           4431 ;	genAssign
   120A 90s00r80           4432 	mov	dptr,#_main_i_2_2
   120D E0                 4433 	movx	a,@dptr
   120E FB                 4434 	mov	r3,a
   120F                    4435 00102$:
                           4436 ;	genCall
   120F C0 03              4437 	push	ar3
   1211 12s00r00           4438 	lcall	_getchar
   1214 AC 82              4439 	mov	r4,dpl
   1216 D0 03              4440 	pop	ar3
                           4441 ;	genCmpEq
                           4442 ;	gencjneshort
   1218 BC 44 02           4443 	cjne	r4,#0x44,00144$
                           4444 ;	Peephole 112.b	changed ljmp to sjmp
   121B 80 3F              4445 	sjmp	00104$
   121D                    4446 00144$:
                           4447 ;	main.c:546: printf("\r\nAlarm %d going off, you must press 'D' to disable it\r\n", i);
                           4448 ;	genCast
   121D 8B 04              4449 	mov	ar4,r3
   121F 7D 00              4450 	mov	r5,#0x00
                           4451 ;	genIpush
   1221 C0 03              4452 	push	ar3
   1223 C0 04              4453 	push	ar4
   1225 C0 05              4454 	push	ar5
                           4455 ;	genIpush
   1227 74r03              4456 	mov	a,#__str_74
   1229 C0 E0              4457 	push	acc
   122B 74s09              4458 	mov	a,#(__str_74 >> 8)
   122D C0 E0              4459 	push	acc
   122F 74 80              4460 	mov	a,#0x80
   1231 C0 E0              4461 	push	acc
                           4462 ;	genCall
   1233 12s00r00           4463 	lcall	_printf
   1236 E5 81              4464 	mov	a,sp
   1238 24 FB              4465 	add	a,#0xfb
   123A F5 81              4466 	mov	sp,a
   123C D0 03              4467 	pop	ar3
                           4468 ;	main.c:547: LCD_gotoxy(0,0);
                           4469 ;	genAssign
   123E 90s00r00           4470 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4471 ;	Peephole 181	changed mov to clr
   1241 E4                 4472 	clr	a
   1242 F0                 4473 	movx	@dptr,a
                           4474 ;	genCall
   1243 75 82 00           4475 	mov	dpl,#0x00
   1246 C0 03              4476 	push	ar3
   1248 12s00r00           4477 	lcall	_LCD_gotoxy
   124B D0 03              4478 	pop	ar3
                           4479 ;	main.c:548: LCD_Putstr("Disable Alarm!");
                           4480 ;	genCall
                           4481 ;	Peephole 182.a	used 16 bit load of DPTR
   124D 90s09r3C           4482 	mov	dptr,#__str_75
   1250 75 F0 80           4483 	mov	b,#0x80
   1253 C0 03              4484 	push	ar3
   1255 12s00r00           4485 	lcall	_LCD_Putstr
   1258 D0 03              4486 	pop	ar3
                           4487 ;	Peephole 112.b	changed ljmp to sjmp
   125A 80 B3              4488 	sjmp	00102$
   125C                    4489 00104$:
                           4490 ;	main.c:550: printf("\r\nAlarm %d disabled!\r\n", i);
                           4491 ;	genAssign
   125C 90s00r80           4492 	mov	dptr,#_main_i_2_2
   125F E0                 4493 	movx	a,@dptr
   1260 FB                 4494 	mov	r3,a
                           4495 ;	genCast
   1261 8B 04              4496 	mov	ar4,r3
   1263 7D 00              4497 	mov	r5,#0x00
                           4498 ;	genIpush
   1265 C0 03              4499 	push	ar3
   1267 C0 04              4500 	push	ar4
   1269 C0 05              4501 	push	ar5
                           4502 ;	genIpush
   126B 74r4B              4503 	mov	a,#__str_76
   126D C0 E0              4504 	push	acc
   126F 74s09              4505 	mov	a,#(__str_76 >> 8)
   1271 C0 E0              4506 	push	acc
   1273 74 80              4507 	mov	a,#0x80
   1275 C0 E0              4508 	push	acc
                           4509 ;	genCall
   1277 12s00r00           4510 	lcall	_printf
   127A E5 81              4511 	mov	a,sp
   127C 24 FB              4512 	add	a,#0xfb
   127E F5 81              4513 	mov	sp,a
   1280 D0 03              4514 	pop	ar3
                           4515 ;	main.c:551: LCD_gotoxy(0,0);
                           4516 ;	genAssign
   1282 90s00r00           4517 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4518 ;	Peephole 181	changed mov to clr
   1285 E4                 4519 	clr	a
   1286 F0                 4520 	movx	@dptr,a
                           4521 ;	genCall
   1287 75 82 00           4522 	mov	dpl,#0x00
   128A C0 03              4523 	push	ar3
   128C 12s00r00           4524 	lcall	_LCD_gotoxy
   128F D0 03              4525 	pop	ar3
                           4526 ;	main.c:552: LCD_Putstr("              ");
                           4527 ;	genCall
                           4528 ;	Peephole 182.a	used 16 bit load of DPTR
   1291 90s09r62           4529 	mov	dptr,#__str_77
   1294 75 F0 80           4530 	mov	b,#0x80
   1297 C0 03              4531 	push	ar3
   1299 12s00r00           4532 	lcall	_LCD_Putstr
   129C D0 03              4533 	pop	ar3
                           4534 ;	main.c:553: ActiveAlarms[i] = 0;
                           4535 ;	genPlus
                           4536 ;	Peephole 236.g	used r3 instead of ar3
   129E EB                 4537 	mov	a,r3
   129F 24r00              4538 	add	a,#_ActiveAlarms
   12A1 F5 82              4539 	mov	dpl,a
                           4540 ;	Peephole 181	changed mov to clr
   12A3 E4                 4541 	clr	a
   12A4 34s00              4542 	addc	a,#(_ActiveAlarms >> 8)
   12A6 F5 83              4543 	mov	dph,a
                           4544 ;	genPointerSet
                           4545 ;     genFarPointerSet
                           4546 ;	Peephole 181	changed mov to clr
   12A8 E4                 4547 	clr	a
   12A9 F0                 4548 	movx	@dptr,a
                           4549 ;	main.c:554: ExpiredAlarms[i] = 0;
                           4550 ;	genPlus
                           4551 ;	Peephole 236.g	used r3 instead of ar3
   12AA EB                 4552 	mov	a,r3
   12AB 24r01              4553 	add	a,#_ExpiredAlarms
   12AD F5 82              4554 	mov	dpl,a
                           4555 ;	Peephole 181	changed mov to clr
   12AF E4                 4556 	clr	a
   12B0 34s00              4557 	addc	a,#(_ExpiredAlarms >> 8)
   12B2 F5 83              4558 	mov	dph,a
                           4559 ;	genPointerSet
                           4560 ;     genFarPointerSet
                           4561 ;	Peephole 181	changed mov to clr
   12B4 E4                 4562 	clr	a
   12B5 F0                 4563 	movx	@dptr,a
                           4564 ;	main.c:555: goto checkAlarms;
   12B6 02s11rB8           4565 	ljmp	00101$
   12B9                    4566 00121$:
                           4567 ;	main.c:540: for (i = 0; i < 3; ++i){
                           4568 ;	genPlus
                           4569 ;     genPlusIncr
   12B9 0A                 4570 	inc	r2
                           4571 ;	genAssign
   12BA 90s00r80           4572 	mov	dptr,#_main_i_2_2
   12BD EA                 4573 	mov	a,r2
   12BE F0                 4574 	movx	@dptr,a
   12BF 02s11rBF           4575 	ljmp	00119$
   12C2                    4576 00122$:
                           4577 ;	main.c:558: c = getchar ();
                           4578 ;	genCall
   12C2 12s00r00           4579 	lcall	_getchar
   12C5 AA 82              4580 	mov	r2,dpl
                           4581 ;	main.c:559: if(DisableFlag){
                           4582 ;	genIfx
                           4583 ;	genIfxJump
                           4584 ;	main.c:560: DisableFlag = false;
                           4585 ;	genAssign
                           4586 ;	Peephole 250.b	using atomic test and clear
   12C7 10*00 03           4587 	jbc	_DisableFlag,00145$
   12CA 02s13r46           4588 	ljmp	00113$
   12CD                    4589 00145$:
                           4590 ;	main.c:561: if(c == 'D'){
                           4591 ;	genCmpEq
                           4592 ;	gencjneshort
   12CD BA 44 02           4593 	cjne	r2,#0x44,00146$
   12D0 80 03              4594 	sjmp	00147$
   12D2                    4595 00146$:
   12D2 02s11rB8           4596 	ljmp	00101$
   12D5                    4597 00147$:
                           4598 ;	main.c:562: for (i = 0; i < 3; ++i){
                           4599 ;	genAssign
   12D5 7B 00              4600 	mov	r3,#0x00
   12D7                    4601 00123$:
                           4602 ;	genCmpLt
                           4603 ;	genCmp
   12D7 BB 03 00           4604 	cjne	r3,#0x03,00148$
   12DA                    4605 00148$:
                           4606 ;	genIfxJump
   12DA 40 03              4607 	jc	00149$
   12DC 02s11rB8           4608 	ljmp	00101$
   12DF                    4609 00149$:
                           4610 ;	main.c:563: if(ExpiredAlarms[i]){
                           4611 ;	genPlus
                           4612 ;	Peephole 236.g	used r3 instead of ar3
   12DF EB                 4613 	mov	a,r3
   12E0 24r01              4614 	add	a,#_ExpiredAlarms
   12E2 FC                 4615 	mov	r4,a
                           4616 ;	Peephole 181	changed mov to clr
   12E3 E4                 4617 	clr	a
   12E4 34s00              4618 	addc	a,#(_ExpiredAlarms >> 8)
   12E6 FD                 4619 	mov	r5,a
                           4620 ;	genPointerGet
                           4621 ;	genFarPointerGet
   12E7 8C 82              4622 	mov	dpl,r4
   12E9 8D 83              4623 	mov	dph,r5
   12EB E0                 4624 	movx	a,@dptr
                           4625 ;	genIfxJump
                           4626 ;	Peephole 108.c	removed ljmp by inverse jump logic
   12EC 60 55              4627 	jz	00125$
                           4628 ;	Peephole 300	removed redundant label 00150$
                           4629 ;	main.c:564: printf("\r\nAlarm %d disabled!\r\n", i);
                           4630 ;	genCast
   12EE 8B 04              4631 	mov	ar4,r3
   12F0 7D 00              4632 	mov	r5,#0x00
                           4633 ;	genIpush
   12F2 C0 03              4634 	push	ar3
   12F4 C0 04              4635 	push	ar4
   12F6 C0 05              4636 	push	ar5
                           4637 ;	genIpush
   12F8 74r4B              4638 	mov	a,#__str_76
   12FA C0 E0              4639 	push	acc
   12FC 74s09              4640 	mov	a,#(__str_76 >> 8)
   12FE C0 E0              4641 	push	acc
   1300 74 80              4642 	mov	a,#0x80
   1302 C0 E0              4643 	push	acc
                           4644 ;	genCall
   1304 12s00r00           4645 	lcall	_printf
   1307 E5 81              4646 	mov	a,sp
   1309 24 FB              4647 	add	a,#0xfb
   130B F5 81              4648 	mov	sp,a
   130D D0 03              4649 	pop	ar3
                           4650 ;	main.c:565: LCD_gotoxy(0,0);
                           4651 ;	genAssign
   130F 90s00r00           4652 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4653 ;	Peephole 181	changed mov to clr
   1312 E4                 4654 	clr	a
   1313 F0                 4655 	movx	@dptr,a
                           4656 ;	genCall
   1314 75 82 00           4657 	mov	dpl,#0x00
   1317 C0 03              4658 	push	ar3
   1319 12s00r00           4659 	lcall	_LCD_gotoxy
   131C D0 03              4660 	pop	ar3
                           4661 ;	main.c:566: LCD_Putstr("              ");
                           4662 ;	genCall
                           4663 ;	Peephole 182.a	used 16 bit load of DPTR
   131E 90s09r62           4664 	mov	dptr,#__str_77
   1321 75 F0 80           4665 	mov	b,#0x80
   1324 C0 03              4666 	push	ar3
   1326 12s00r00           4667 	lcall	_LCD_Putstr
   1329 D0 03              4668 	pop	ar3
                           4669 ;	main.c:567: ActiveAlarms[i] = 0;
                           4670 ;	genPlus
                           4671 ;	Peephole 236.g	used r3 instead of ar3
   132B EB                 4672 	mov	a,r3
   132C 24r00              4673 	add	a,#_ActiveAlarms
   132E F5 82              4674 	mov	dpl,a
                           4675 ;	Peephole 181	changed mov to clr
   1330 E4                 4676 	clr	a
   1331 34s00              4677 	addc	a,#(_ActiveAlarms >> 8)
   1333 F5 83              4678 	mov	dph,a
                           4679 ;	genPointerSet
                           4680 ;     genFarPointerSet
                           4681 ;	Peephole 181	changed mov to clr
   1335 E4                 4682 	clr	a
   1336 F0                 4683 	movx	@dptr,a
                           4684 ;	main.c:568: ExpiredAlarms[i] = 0;
                           4685 ;	genPlus
                           4686 ;	Peephole 236.g	used r3 instead of ar3
   1337 EB                 4687 	mov	a,r3
   1338 24r01              4688 	add	a,#_ExpiredAlarms
   133A F5 82              4689 	mov	dpl,a
                           4690 ;	Peephole 181	changed mov to clr
   133C E4                 4691 	clr	a
   133D 34s00              4692 	addc	a,#(_ExpiredAlarms >> 8)
   133F F5 83              4693 	mov	dph,a
                           4694 ;	genPointerSet
                           4695 ;     genFarPointerSet
                           4696 ;	Peephole 181	changed mov to clr
   1341 E4                 4697 	clr	a
   1342 F0                 4698 	movx	@dptr,a
   1343                    4699 00125$:
                           4700 ;	main.c:562: for (i = 0; i < 3; ++i){
                           4701 ;	genPlus
                           4702 ;     genPlusIncr
   1343 0B                 4703 	inc	r3
                           4704 ;	main.c:574: goto checkAlarms;
                           4705 ;	Peephole 112.b	changed ljmp to sjmp
   1344 80 91              4706 	sjmp	00123$
   1346                    4707 00113$:
                           4708 ;	main.c:578: if (c == ENTER_KEY){
                           4709 ;	genCmpEq
                           4710 ;	gencjneshort
                           4711 ;	Peephole 112.b	changed ljmp to sjmp
                           4712 ;	Peephole 198.b	optimized misc jump sequence
   1346 BA 0D 0A           4713 	cjne	r2,#0x0D,00115$
                           4714 ;	Peephole 200.b	removed redundant sjmp
                           4715 ;	Peephole 300	removed redundant label 00151$
                           4716 ;	Peephole 300	removed redundant label 00152$
                           4717 ;	main.c:579: putchar('\n');
                           4718 ;	genCall
   1349 75 82 0A           4719 	mov	dpl,#0x0A
   134C C0 02              4720 	push	ar2
   134E 12s00r00           4721 	lcall	_putchar
   1351 D0 02              4722 	pop	ar2
   1353                    4723 00115$:
                           4724 ;	main.c:581: putchar(c);
                           4725 ;	genCall
   1353 8A 82              4726 	mov	dpl,r2
   1355 C0 02              4727 	push	ar2
   1357 12s00r00           4728 	lcall	_putchar
   135A D0 02              4729 	pop	ar2
                           4730 ;	main.c:582: handleInput(c);
                           4731 ;	genCall
   135C 8A 82              4732 	mov	dpl,r2
   135E 12s11r40           4733 	lcall	_handleInput
   1361 02s11rB8           4734 	ljmp	00101$
                           4735 ;	Peephole 259.b	removed redundant label 00127$ and ret
                           4736 ;
                           4737 	.area CSEG    (CODE)
                           4738 	.area CONST   (CODE)
   0000                    4739 __str_0:
   0000 0D                 4740 	.db 0x0D
   0001 0A                 4741 	.db 0x0A
   0002 45 6E 74 65 72 20  4742 	.ascii "Enter an EEPROM block number from 0-7: "
        61 6E 20 45 45 50
        52 4F 4D 20 62 6C
        6F 63 6B 20 6E 75
        6D 62 65 72 20 66
        72 6F 6D 20 30 2D
        37 3A 20
   0029 00                 4743 	.db 0x00
   002A                    4744 __str_1:
   002A 0D                 4745 	.db 0x0D
   002B 0A                 4746 	.db 0x0A
   002C 49 4E 56 41 4C 49  4747 	.ascii "INVALID: Enter an EEPROM block number from 0-7: "
        44 3A 20 45 6E 74
        65 72 20 61 6E 20
        45 45 50 52 4F 4D
        20 62 6C 6F 63 6B
        20 6E 75 6D 62 65
        72 20 66 72 6F 6D
        20 30 2D 37 3A 20
   005C 00                 4748 	.db 0x00
   005D                    4749 __str_2:
   005D 0D                 4750 	.db 0x0D
   005E 0A                 4751 	.db 0x0A
   005F 45 6E 74 65 72 20  4752 	.ascii "Enter an EEPROM Word address in hex:"
        61 6E 20 45 45 50
        52 4F 4D 20 57 6F
        72 64 20 61 64 64
        72 65 73 73 20 69
        6E 20 68 65 78 3A
   0083 00                 4753 	.db 0x00
   0084                    4754 __str_3:
   0084 0D                 4755 	.db 0x0D
   0085 0A                 4756 	.db 0x0A
   0086 49 6E 20 43 75 73  4757 	.ascii "In Custom Character Mode"
        74 6F 6D 20 43 68
        61 72 61 63 74 65
        72 20 4D 6F 64 65
   009E 00                 4758 	.db 0x00
   009F                    4759 __str_4:
   009F 0D                 4760 	.db 0x0D
   00A0 0A                 4761 	.db 0x0A
   00A1 50 72 65 73 73 20  4762 	.ascii "Press 'H' for help"
        27 48 27 20 66 6F
        72 20 68 65 6C 70
   00B3 00                 4763 	.db 0x00
   00B4                    4764 __str_5:
   00B4 0D                 4765 	.db 0x0D
   00B5 0A                 4766 	.db 0x0A
   00B6 50 72 65 73 73 20  4767 	.ascii "Press 'T' to test to custom code"
        27 54 27 20 74 6F
        20 74 65 73 74 20
        74 6F 20 63 75 73
        74 6F 6D 20 63 6F
        64 65
   00D6 00                 4768 	.db 0x00
   00D7                    4769 __str_6:
   00D7 0D                 4770 	.db 0x0D
   00D8 0A                 4771 	.db 0x0A
   00D9 50 72 65 73 73 20  4772 	.ascii "Press 'N' to add a new character"
        27 4E 27 20 74 6F
        20 61 64 64 20 61
        20 6E 65 77 20 63
        68 61 72 61 63 74
        65 72
   00F9 00                 4773 	.db 0x00
   00FA                    4774 __str_7:
   00FA 0D                 4775 	.db 0x0D
   00FB 0A                 4776 	.db 0x0A
   00FC 50 72 65 73 73 20  4777 	.ascii "Press 'S' to print a custom character"
        27 53 27 20 74 6F
        20 70 72 69 6E 74
        20 61 20 63 75 73
        74 6F 6D 20 63 68
        61 72 61 63 74 65
        72
   0121 00                 4778 	.db 0x00
   0122                    4779 __str_8:
   0122 0D                 4780 	.db 0x0D
   0123 0A                 4781 	.db 0x0A
   0124 50 72 65 73 73 20  4782 	.ascii "Press 'F' to draw a flag to LCD"
        27 46 27 20 74 6F
        20 64 72 61 77 20
        61 20 66 6C 61 67
        20 74 6F 20 4C 43
        44
   0143 00                 4783 	.db 0x00
   0144                    4784 __str_9:
   0144 0D                 4785 	.db 0x0D
   0145 0A                 4786 	.db 0x0A
   0146 50 72 65 73 73 20  4787 	.ascii "Press 'r' to return to main menu"
        27 72 27 20 74 6F
        20 72 65 74 75 72
        6E 20 74 6F 20 6D
        61 69 6E 20 6D 65
        6E 75
   0166 0D                 4788 	.db 0x0D
   0167 0A                 4789 	.db 0x0A
   0168 00                 4790 	.db 0x00
   0169                    4791 __str_10:
   0169 0D                 4792 	.db 0x0D
   016A 0A                 4793 	.db 0x0A
   016B 45 6E 74 65 72 20  4794 	.ascii "Enter an address from 0-7:"
        61 6E 20 61 64 64
        72 65 73 73 20 66
        72 6F 6D 20 30 2D
        37 3A
   0185 00                 4795 	.db 0x00
   0186                    4796 __str_11:
   0186 0D                 4797 	.db 0x0D
   0187 0A                 4798 	.db 0x0A
   0188 57 72 6F 74 65 20  4799 	.ascii "Wrote custom character to LCD"
        63 75 73 74 6F 6D
        20 63 68 61 72 61
        63 74 65 72 20 74
        6F 20 4C 43 44
   01A5 0D                 4800 	.db 0x0D
   01A6 0A                 4801 	.db 0x0A
   01A7 00                 4802 	.db 0x00
   01A8                    4803 __str_12:
   01A8 0D                 4804 	.db 0x0D
   01A9 0A                 4805 	.db 0x0A
   01AA 49 6E 20 4C 43 44  4806 	.ascii "In LCD Mode"
        20 4D 6F 64 65
   01B5 00                 4807 	.db 0x00
   01B6                    4808 __str_13:
   01B6 0D                 4809 	.db 0x0D
   01B7 0A                 4810 	.db 0x0A
   01B8 50 72 65 73 73 20  4811 	.ascii "Press 'I' to Init LCD. Must call this first"
        27 49 27 20 74 6F
        20 49 6E 69 74 20
        4C 43 44 2E 20 4D
        75 73 74 20 63 61
        6C 6C 20 74 68 69
        73 20 66 69 72 73
        74
   01E3 00                 4812 	.db 0x00
   01E4                    4813 __str_14:
   01E4 0D                 4814 	.db 0x0D
   01E5 0A                 4815 	.db 0x0A
   01E6 50 72 65 73 73 20  4816 	.ascii "Press 'g' to show gotoaddr "
        27 67 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 61 64
        64 72 20
   0201 00                 4817 	.db 0x00
   0202                    4818 __str_15:
   0202 0D                 4819 	.db 0x0D
   0203 0A                 4820 	.db 0x0A
   0204 50 72 65 73 73 20  4821 	.ascii "Press 'x' to show gotoxy"
        27 78 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 78 79
   021C 00                 4822 	.db 0x00
   021D                    4823 __str_16:
   021D 0D                 4824 	.db 0x0D
   021E 0A                 4825 	.db 0x0A
   021F 50 72 65 73 73 20  4826 	.ascii "Press 'c' to show putch "
        27 63 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 63 68 20
   0237 00                 4827 	.db 0x00
   0238                    4828 __str_17:
   0238 0D                 4829 	.db 0x0D
   0239 0A                 4830 	.db 0x0A
   023A 50 72 65 73 73 20  4831 	.ascii "Press 's' to show putstr"
        27 73 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 73 74 72
   0252 00                 4832 	.db 0x00
   0253                    4833 __str_18:
   0253 0D                 4834 	.db 0x0D
   0254 0A                 4835 	.db 0x0A
   0255 50 72 65 73 73 20  4836 	.ascii "Press 'C' to clear the LCD display"
        27 43 27 20 74 6F
        20 63 6C 65 61 72
        20 74 68 65 20 4C
        43 44 20 64 69 73
        70 6C 61 79
   0277 00                 4837 	.db 0x00
   0278                    4838 __str_19:
   0278 0D                 4839 	.db 0x0D
   0279 0A                 4840 	.db 0x0A
   027A 50 72 65 73 73 20  4841 	.ascii "Press 'Y' to read the contents of DDRAM"
        27 59 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 44 44
        52 41 4D
   02A1 00                 4842 	.db 0x00
   02A2                    4843 __str_20:
   02A2 0D                 4844 	.db 0x0D
   02A3 0A                 4845 	.db 0x0A
   02A4 50 72 65 73 73 20  4846 	.ascii "Press 'G' to read the contents of CGRAM"
        27 47 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 43 47
        52 41 4D
   02CB 00                 4847 	.db 0x00
   02CC                    4848 __str_21:
   02CC 0D                 4849 	.db 0x0D
   02CD 0A                 4850 	.db 0x0A
   02CE 49 6E 69 74 69 61  4851 	.ascii "Initializing LCD"
        6C 69 7A 69 6E 67
        20 4C 43 44
   02DE 0D                 4852 	.db 0x0D
   02DF 0A                 4853 	.db 0x0A
   02E0 00                 4854 	.db 0x00
   02E1                    4855 __str_22:
   02E1 0D                 4856 	.db 0x0D
   02E2 0A                 4857 	.db 0x0A
   02E3 45 6E 74 65 72 20  4858 	.ascii "Enter a hex address to go to"
        61 20 68 65 78 20
        61 64 64 72 65 73
        73 20 74 6F 20 67
        6F 20 74 6F
   02FF 0D                 4859 	.db 0x0D
   0300 0A                 4860 	.db 0x0A
   0301 00                 4861 	.db 0x00
   0302                    4862 __str_23:
   0302 0D                 4863 	.db 0x0D
   0303 0A                 4864 	.db 0x0A
   0304 45 6E 74 65 72 20  4865 	.ascii "Enter a row from 0-3:"
        61 20 72 6F 77 20
        66 72 6F 6D 20 30
        2D 33 3A
   0319 00                 4866 	.db 0x00
   031A                    4867 __str_24:
   031A 0D                 4868 	.db 0x0D
   031B 0A                 4869 	.db 0x0A
   031C 45 6E 74 65 72 20  4870 	.ascii "Enter a col from 0-15:"
        61 20 63 6F 6C 20
        66 72 6F 6D 20 30
        2D 31 35 3A
   0332 00                 4871 	.db 0x00
   0333                    4872 __str_25:
   0333 0D                 4873 	.db 0x0D
   0334 0A                 4874 	.db 0x0A
   0335 4D 6F 76 65 64 20  4875 	.ascii "Moved cursor to new location (%d,%d)"
        63 75 72 73 6F 72
        20 74 6F 20 6E 65
        77 20 6C 6F 63 61
        74 69 6F 6E 20 28
        25 64 2C 25 64 29
   0359 0D                 4876 	.db 0x0D
   035A 0A                 4877 	.db 0x0A
   035B 00                 4878 	.db 0x00
   035C                    4879 __str_26:
   035C 0D                 4880 	.db 0x0D
   035D 0A                 4881 	.db 0x0A
   035E 45 6E 74 65 72 20  4882 	.ascii "Enter a character to put at current address"
        61 20 63 68 61 72
        61 63 74 65 72 20
        74 6F 20 70 75 74
        20 61 74 20 63 75
        72 72 65 6E 74 20
        61 64 64 72 65 73
        73
   0389 0D                 4883 	.db 0x0D
   038A 0A                 4884 	.db 0x0A
   038B 00                 4885 	.db 0x00
   038C                    4886 __str_27:
   038C 0D                 4887 	.db 0x0D
   038D 45 6E 74 65 72 20  4888 	.ascii "Enter a string"
        61 20 73 74 72 69
        6E 67
   039B 0D                 4889 	.db 0x0D
   039C 0A                 4890 	.db 0x0A
   039D 00                 4891 	.db 0x00
   039E                    4892 __str_28:
   039E 0D                 4893 	.db 0x0D
   039F 0A                 4894 	.db 0x0A
   03A0 4C 43 44 20 44 69  4895 	.ascii "LCD Display Cleared!"
        73 70 6C 61 79 20
        43 6C 65 61 72 65
        64 21
   03B4 0D                 4896 	.db 0x0D
   03B5 0A                 4897 	.db 0x0A
   03B6 00                 4898 	.db 0x00
   03B7                    4899 __str_29:
   03B7 0D                 4900 	.db 0x0D
   03B8 0A                 4901 	.db 0x0A
   03B9 00                 4902 	.db 0x00
   03BA                    4903 __str_30:
   03BA 25 78 3A 20        4904 	.ascii "%x: "
   03BE 00                 4905 	.db 0x00
   03BF                    4906 __str_31:
   03BF 25 78 20           4907 	.ascii "%x "
   03C2 00                 4908 	.db 0x00
   03C3                    4909 __str_32:
   03C3 0D                 4910 	.db 0x0D
   03C4 0A                 4911 	.db 0x0A
   03C5 49 6E 20 45 45 50  4912 	.ascii "In EEPROM Mode"
        52 4F 4D 20 4D 6F
        64 65
   03D3 00                 4913 	.db 0x00
   03D4                    4914 __str_33:
   03D4 0D                 4915 	.db 0x0D
   03D5 0A                 4916 	.db 0x0A
   03D6 50 72 65 73 73 20  4917 	.ascii "Press 'W' to write a byte to EEPROM"
        27 57 27 20 74 6F
        20 77 72 69 74 65
        20 61 20 62 79 74
        65 20 74 6F 20 45
        45 50 52 4F 4D
   03F9 00                 4918 	.db 0x00
   03FA                    4919 __str_34:
   03FA 0D                 4920 	.db 0x0D
   03FB 0A                 4921 	.db 0x0A
   03FC 50 72 65 73 73 20  4922 	.ascii "Press 'R' to read a byte from EEPROM"
        27 52 27 20 74 6F
        20 72 65 61 64 20
        61 20 62 79 74 65
        20 66 72 6F 6D 20
        45 45 50 52 4F 4D
   0420 00                 4923 	.db 0x00
   0421                    4924 __str_35:
   0421 0D                 4925 	.db 0x0D
   0422 0A                 4926 	.db 0x0A
   0423 50 72 65 73 73 20  4927 	.ascii "Press 'L' to display EEPROM data on LCD"
        27 4C 27 20 74 6F
        20 64 69 73 70 6C
        61 79 20 45 45 50
        52 4F 4D 20 64 61
        74 61 20 6F 6E 20
        4C 43 44
   044A 00                 4928 	.db 0x00
   044B                    4929 __str_36:
   044B 0D                 4930 	.db 0x0D
   044C 0A                 4931 	.db 0x0A
   044D 50 72 65 73 73 20  4932 	.ascii "Press 'D' to do a Hex Dump of EEPROM"
        27 44 27 20 74 6F
        20 64 6F 20 61 20
        48 65 78 20 44 75
        6D 70 20 6F 66 20
        45 45 50 52 4F 4D
   0471 00                 4933 	.db 0x00
   0472                    4934 __str_37:
   0472 0D                 4935 	.db 0x0D
   0473 0A                 4936 	.db 0x0A
   0474 57 72 69 74 69 6E  4937 	.ascii "Writing to EEPROM..."
        67 20 74 6F 20 45
        45 50 52 4F 4D 2E
        2E 2E
   0488 00                 4938 	.db 0x00
   0489                    4939 __str_38:
   0489 0D                 4940 	.db 0x0D
   048A 0A                 4941 	.db 0x0A
   048B 45 6E 74 65 72 20  4942 	.ascii "Enter a byte of data to write to EEPROM:"
        61 20 62 79 74 65
        20 6F 66 20 64 61
        74 61 20 74 6F 20
        77 72 69 74 65 20
        74 6F 20 45 45 50
        52 4F 4D 3A
   04B3 00                 4943 	.db 0x00
   04B4                    4944 __str_39:
   04B4 0D                 4945 	.db 0x0D
   04B5 0A                 4946 	.db 0x0A
   04B6 57 72 6F 74 65 20  4947 	.ascii "Wrote %X to block %d address 0x%X in EEPROM!"
        25 58 20 74 6F 20
        62 6C 6F 63 6B 20
        25 64 20 61 64 64
        72 65 73 73 20 30
        78 25 58 20 69 6E
        20 45 45 50 52 4F
        4D 21
   04E2 0D                 4948 	.db 0x0D
   04E3 0A                 4949 	.db 0x0A
   04E4 00                 4950 	.db 0x00
   04E5                    4951 __str_40:
   04E5 0D                 4952 	.db 0x0D
   04E6 0A                 4953 	.db 0x0A
   04E7 52 65 61 64 69 6E  4954 	.ascii "Reading from EEPROM..."
        67 20 66 72 6F 6D
        20 45 45 50 52 4F
        4D 2E 2E 2E
   04FD 00                 4955 	.db 0x00
   04FE                    4956 __str_41:
   04FE 0D                 4957 	.db 0x0D
   04FF 0A                 4958 	.db 0x0A
   0500 52 65 61 64 20 25  4959 	.ascii "Read %X from block %d address 0x%X"
        58 20 66 72 6F 6D
        20 62 6C 6F 63 6B
        20 25 64 20 61 64
        64 72 65 73 73 20
        30 78 25 58
   0522 0D                 4960 	.db 0x0D
   0523 0A                 4961 	.db 0x0A
   0524 00                 4962 	.db 0x00
   0525                    4963 __str_42:
   0525 0D                 4964 	.db 0x0D
   0526 0A                 4965 	.db 0x0A
   0527 45 6E 74 65 72 20  4966 	.ascii "Enter LCD row from 0-3:"
        4C 43 44 20 72 6F
        77 20 66 72 6F 6D
        20 30 2D 33 3A
   053E 00                 4967 	.db 0x00
   053F                    4968 __str_43:
   053F 3A 20              4969 	.ascii ": "
   0541 00                 4970 	.db 0x00
   0542                    4971 __str_44:
   0542 0D                 4972 	.db 0x0D
   0543 0A                 4973 	.db 0x0A
   0544 57 72 6F 74 65 20  4974 	.ascii "Wrote to LCD!"
        74 6F 20 4C 43 44
        21
   0551 0D                 4975 	.db 0x0D
   0552 0A                 4976 	.db 0x0A
   0553 00                 4977 	.db 0x00
   0554                    4978 __str_45:
   0554 0D                 4979 	.db 0x0D
   0555 0A                 4980 	.db 0x0A
   0556 50 65 72 66 6F 72  4981 	.ascii "Performing an EEPROM data dump"
        6D 69 6E 67 20 61
        6E 20 45 45 50 52
        4F 4D 20 64 61 74
        61 20 64 75 6D 70
   0574 0D                 4982 	.db 0x0D
   0575 0A                 4983 	.db 0x0A
   0576 00                 4984 	.db 0x00
   0577                    4985 __str_46:
   0577 0D                 4986 	.db 0x0D
   0578 0A                 4987 	.db 0x0A
   0579 45 6E 74 65 72 20  4988 	.ascii "Enter the starting block and address"
        74 68 65 20 73 74
        61 72 74 69 6E 67
        20 62 6C 6F 63 6B
        20 61 6E 64 20 61
        64 64 72 65 73 73
   059D 00                 4989 	.db 0x00
   059E                    4990 __str_47:
   059E 0D                 4991 	.db 0x0D
   059F 0A                 4992 	.db 0x0A
   05A0 45 6E 74 65 72 20  4993 	.ascii "Enter the ending block and address"
        74 68 65 20 65 6E
        64 69 6E 67 20 62
        6C 6F 63 6B 20 61
        6E 64 20 61 64 64
        72 65 73 73
   05C2 00                 4994 	.db 0x00
   05C3                    4995 __str_48:
   05C3 0D                 4996 	.db 0x0D
   05C4 0A                 4997 	.db 0x0A
   05C5 49 6E 76 61 6C 69  4998 	.ascii "Invalid addresses. End address must be after start address"
        64 20 61 64 64 72
        65 73 73 65 73 2E
        20 45 6E 64 20 61
        64 64 72 65 73 73
        20 6D 75 73 74 20
        62 65 20 61 66 74
        65 72 20 73 74 61
        72 74 20 61 64 64
        72 65 73 73
   05FF 00                 4999 	.db 0x00
   0600                    5000 __str_49:
   0600 0D                 5001 	.db 0x0D
   0601 0A                 5002 	.db 0x0A
   0602 49 6E 20 43 6C 6F  5003 	.ascii "In Clock Mode"
        63 6B 20 4D 6F 64
        65
   060F 00                 5004 	.db 0x00
   0610                    5005 __str_50:
   0610 0D                 5006 	.db 0x0D
   0611 0A                 5007 	.db 0x0A
   0612 50 72 65 73 73 20  5008 	.ascii "Press 'T' to stop the clock"
        27 54 27 20 74 6F
        20 73 74 6F 70 20
        74 68 65 20 63 6C
        6F 63 6B
   062D 00                 5009 	.db 0x00
   062E                    5010 __str_51:
   062E 0D                 5011 	.db 0x0D
   062F 0A                 5012 	.db 0x0A
   0630 50 72 65 73 73 20  5013 	.ascii "Press 'S' to start the clock again"
        27 53 27 20 74 6F
        20 73 74 61 72 74
        20 74 68 65 20 63
        6C 6F 63 6B 20 61
        67 61 69 6E
   0652 00                 5014 	.db 0x00
   0653                    5015 __str_52:
   0653 0D                 5016 	.db 0x0D
   0654 0A                 5017 	.db 0x0A
   0655 50 72 65 73 73 20  5018 	.ascii "Press 'O' to reset the clock to 0"
        27 4F 27 20 74 6F
        20 72 65 73 65 74
        20 74 68 65 20 63
        6C 6F 63 6B 20 74
        6F 20 30
   0676 00                 5019 	.db 0x00
   0677                    5020 __str_53:
   0677 0D                 5021 	.db 0x0D
   0678 0A                 5022 	.db 0x0A
   0679 50 72 65 73 73 20  5023 	.ascii "Press 'N' to create a new alarm"
        27 4E 27 20 74 6F
        20 63 72 65 61 74
        65 20 61 20 6E 65
        77 20 61 6C 61 72
        6D
   0698 00                 5024 	.db 0x00
   0699                    5025 __str_54:
   0699 0D                 5026 	.db 0x0D
   069A 0A                 5027 	.db 0x0A
   069B 50 72 65 73 73 20  5028 	.ascii "Press 'C' to view count for each alarm"
        27 43 27 20 74 6F
        20 76 69 65 77 20
        63 6F 75 6E 74 20
        66 6F 72 20 65 61
        63 68 20 61 6C 61
        72 6D
   06C1 00                 5029 	.db 0x00
   06C2                    5030 __str_55:
   06C2 0D                 5031 	.db 0x0D
   06C3 0A                 5032 	.db 0x0A
   06C4 50 72 65 73 73 20  5033 	.ascii "Press 'D' to disable an alarm"
        27 44 27 20 74 6F
        20 64 69 73 61 62
        6C 65 20 61 6E 20
        61 6C 61 72 6D
   06E1 00                 5034 	.db 0x00
   06E2                    5035 __str_56:
   06E2 0D                 5036 	.db 0x0D
   06E3 0A                 5037 	.db 0x0A
   06E4 50 72 65 73 73 20  5038 	.ascii "Press 'E' to reenable an alarm"
        27 45 27 20 74 6F
        20 72 65 65 6E 61
        62 6C 65 20 61 6E
        20 61 6C 61 72 6D
   0702 00                 5039 	.db 0x00
   0703                    5040 __str_57:
   0703 0D                 5041 	.db 0x0D
   0704 0A                 5042 	.db 0x0A
   0705 53 74 6F 70 70 69  5043 	.ascii "Stopping the clock"
        6E 67 20 74 68 65
        20 63 6C 6F 63 6B
   0717 00                 5044 	.db 0x00
   0718                    5045 __str_58:
   0718 0D                 5046 	.db 0x0D
   0719 0A                 5047 	.db 0x0A
   071A 53 74 61 72 74 69  5048 	.ascii "Starting the clock"
        6E 67 20 74 68 65
        20 63 6C 6F 63 6B
   072C 00                 5049 	.db 0x00
   072D                    5050 __str_59:
   072D 0D                 5051 	.db 0x0D
   072E 0A                 5052 	.db 0x0A
   072F 52 65 73 65 74 74  5053 	.ascii "Resetting the clock"
        69 6E 67 20 74 68
        65 20 63 6C 6F 63
        6B
   0742 00                 5054 	.db 0x00
   0743                    5055 __str_60:
   0743 0D                 5056 	.db 0x0D
   0744 0A                 5057 	.db 0x0A
   0745 45 6E 74 65 72 20  5058 	.ascii "Enter alarm time in seconds:"
        61 6C 61 72 6D 20
        74 69 6D 65 20 69
        6E 20 73 65 63 6F
        6E 64 73 3A
   0761 0D                 5059 	.db 0x0D
   0762 0A                 5060 	.db 0x0A
   0763 00                 5061 	.db 0x00
   0764                    5062 __str_61:
   0764 0D                 5063 	.db 0x0D
   0765 0A                 5064 	.db 0x0A
   0766 41 6C 61 72 6D 20  5065 	.ascii "Alarm %d: %u <Enabled>"
        25 64 3A 20 25 75
        20 3C 45 6E 61 62
        6C 65 64 3E
   077C 00                 5066 	.db 0x00
   077D                    5067 __str_62:
   077D 0D                 5068 	.db 0x0D
   077E 0A                 5069 	.db 0x0A
   077F 41 6C 61 72 6D 20  5070 	.ascii "Alarm %d: %u <Disabled>"
        25 64 3A 20 25 75
        20 3C 44 69 73 61
        62 6C 65 64 3E
   0796 00                 5071 	.db 0x00
   0797                    5072 __str_63:
   0797 0D                 5073 	.db 0x0D
   0798 0A                 5074 	.db 0x0A
   0799 45 6E 74 65 72 20  5075 	.ascii "Enter an alarm number from 0-2 to disable:"
        61 6E 20 61 6C 61
        72 6D 20 6E 75 6D
        62 65 72 20 66 72
        6F 6D 20 30 2D 32
        20 74 6F 20 64 69
        73 61 62 6C 65 3A
   07C3 00                 5076 	.db 0x00
   07C4                    5077 __str_64:
   07C4 0D                 5078 	.db 0x0D
   07C5 0A                 5079 	.db 0x0A
   07C6 41 6C 61 72 6D 20  5080 	.ascii "Alarm %d disabled"
        25 64 20 64 69 73
        61 62 6C 65 64
   07D7 0D                 5081 	.db 0x0D
   07D8 0A                 5082 	.db 0x0A
   07D9 00                 5083 	.db 0x00
   07DA                    5084 __str_65:
   07DA 0D                 5085 	.db 0x0D
   07DB 0A                 5086 	.db 0x0A
   07DC 45 6E 74 65 72 20  5087 	.ascii "Enter an alarm number from 0-2 to enable:"
        61 6E 20 61 6C 61
        72 6D 20 6E 75 6D
        62 65 72 20 66 72
        6F 6D 20 30 2D 32
        20 74 6F 20 65 6E
        61 62 6C 65 3A
   0805 00                 5088 	.db 0x00
   0806                    5089 __str_66:
   0806 0D                 5090 	.db 0x0D
   0807 0A                 5091 	.db 0x0A
   0808 41 6C 61 72 6D 20  5092 	.ascii "Alarm %d enabled"
        25 64 20 65 6E 61
        62 6C 65 64
   0818 0D                 5093 	.db 0x0D
   0819 0A                 5094 	.db 0x0A
   081A 00                 5095 	.db 0x00
   081B                    5096 __str_67:
   081B 0D                 5097 	.db 0x0D
   081C 0A                 5098 	.db 0x0A
   081D 2A 2A 2A 2A 2A 2A  5099 	.ascii "***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   082C 00                 5100 	.db 0x00
   082D                    5101 __str_68:
   082D 0D                 5102 	.db 0x0D
   082E 0A                 5103 	.db 0x0A
   082F 20 20 20 20 4D 65  5104 	.ascii "    Menu"
        6E 75
   0837 0D                 5105 	.db 0x0D
   0838 0A                 5106 	.db 0x0A
   0839 00                 5107 	.db 0x00
   083A                    5108 __str_69:
   083A 0D                 5109 	.db 0x0D
   083B 0A                 5110 	.db 0x0A
   083C 50 72 65 73 73 20  5111 	.ascii "Press 'H' to show the help menu"
        27 48 27 20 74 6F
        20 73 68 6F 77 20
        74 68 65 20 68 65
        6C 70 20 6D 65 6E
        75
   085B 00                 5112 	.db 0x00
   085C                    5113 __str_70:
   085C 0D                 5114 	.db 0x0D
   085D 0A                 5115 	.db 0x0A
   085E 50 72 65 73 73 20  5116 	.ascii "Press 'L' to enter LCD control mode"
        27 4C 27 20 74 6F
        20 65 6E 74 65 72
        20 4C 43 44 20 63
        6F 6E 74 72 6F 6C
        20 6D 6F 64 65
   0881 00                 5117 	.db 0x00
   0882                    5118 __str_71:
   0882 0D                 5119 	.db 0x0D
   0883 0A                 5120 	.db 0x0A
   0884 50 72 65 73 73 20  5121 	.ascii "Press 'E' to enter EEPROM control mode"
        27 45 27 20 74 6F
        20 65 6E 74 65 72
        20 45 45 50 52 4F
        4D 20 63 6F 6E 74
        72 6F 6C 20 6D 6F
        64 65
   08AA 00                 5122 	.db 0x00
   08AB                    5123 __str_72:
   08AB 0D                 5124 	.db 0x0D
   08AC 0A                 5125 	.db 0x0A
   08AD 50 72 65 73 73 20  5126 	.ascii "Press 'C' to enter Clock control mode"
        27 43 27 20 74 6F
        20 65 6E 74 65 72
        20 43 6C 6F 63 6B
        20 63 6F 6E 74 72
        6F 6C 20 6D 6F 64
        65
   08D2 00                 5127 	.db 0x00
   08D3                    5128 __str_73:
   08D3 0D                 5129 	.db 0x0D
   08D4 0A                 5130 	.db 0x0A
   08D5 50 72 65 73 73 20  5131 	.ascii "Press 'G' to enter Custom Code control mode"
        27 47 27 20 74 6F
        20 65 6E 74 65 72
        20 43 75 73 74 6F
        6D 20 43 6F 64 65
        20 63 6F 6E 74 72
        6F 6C 20 6D 6F 64
        65
   0900 0D                 5132 	.db 0x0D
   0901 0A                 5133 	.db 0x0A
   0902 00                 5134 	.db 0x00
   0903                    5135 __str_74:
   0903 0D                 5136 	.db 0x0D
   0904 0A                 5137 	.db 0x0A
   0905 41 6C 61 72 6D 20  5138 	.ascii "Alarm %d going off, you must press 'D' to disable it"
        25 64 20 67 6F 69
        6E 67 20 6F 66 66
        2C 20 79 6F 75 20
        6D 75 73 74 20 70
        72 65 73 73 20 27
        44 27 20 74 6F 20
        64 69 73 61 62 6C
        65 20 69 74
   0939 0D                 5139 	.db 0x0D
   093A 0A                 5140 	.db 0x0A
   093B 00                 5141 	.db 0x00
   093C                    5142 __str_75:
   093C 44 69 73 61 62 6C  5143 	.ascii "Disable Alarm!"
        65 20 41 6C 61 72
        6D 21
   094A 00                 5144 	.db 0x00
   094B                    5145 __str_76:
   094B 0D                 5146 	.db 0x0D
   094C 0A                 5147 	.db 0x0A
   094D 41 6C 61 72 6D 20  5148 	.ascii "Alarm %d disabled!"
        25 64 20 64 69 73
        61 62 6C 65 64 21
   095F 0D                 5149 	.db 0x0D
   0960 0A                 5150 	.db 0x0A
   0961 00                 5151 	.db 0x00
   0962                    5152 __str_77:
   0962 20 20 20 20 20 20  5153 	.ascii "              "
        20 20 20 20 20 20
        20 20
   0970 00                 5154 	.db 0x00
                           5155 	.area XINIT   (CODE)
   0000                    5156 __xinit__mode:
   0000 00                 5157 	.db #0x00
   0001                    5158 __xinit__ExpiredAlarms:
   0001 00                 5159 	.db #0x00
   0002 00                 5160 	.db #0x00
   0003 00                 5161 	.db #0x00
