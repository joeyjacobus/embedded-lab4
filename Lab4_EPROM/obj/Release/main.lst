                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sat Nov 12 18:42:03 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _handleInput
                             14 	.globl _getBlockAndAddress
                             15 	.globl __sdcc_external_startup
                             16 	.globl _P5_7
                             17 	.globl _P5_6
                             18 	.globl _P5_5
                             19 	.globl _P5_4
                             20 	.globl _P5_3
                             21 	.globl _P5_2
                             22 	.globl _P5_1
                             23 	.globl _P5_0
                             24 	.globl _P4_7
                             25 	.globl _P4_6
                             26 	.globl _P4_5
                             27 	.globl _P4_4
                             28 	.globl _P4_3
                             29 	.globl _P4_2
                             30 	.globl _P4_1
                             31 	.globl _P4_0
                             32 	.globl _PX0L
                             33 	.globl _PT0L
                             34 	.globl _PX1L
                             35 	.globl _PT1L
                             36 	.globl _PLS
                             37 	.globl _PT2L
                             38 	.globl _PPCL
                             39 	.globl _EC
                             40 	.globl _CCF0
                             41 	.globl _CCF1
                             42 	.globl _CCF2
                             43 	.globl _CCF3
                             44 	.globl _CCF4
                             45 	.globl _CR
                             46 	.globl _CF
                             47 	.globl _TF2
                             48 	.globl _EXF2
                             49 	.globl _RCLK
                             50 	.globl _TCLK
                             51 	.globl _EXEN2
                             52 	.globl _TR2
                             53 	.globl _C_T2
                             54 	.globl _CP_RL2
                             55 	.globl _T2CON_7
                             56 	.globl _T2CON_6
                             57 	.globl _T2CON_5
                             58 	.globl _T2CON_4
                             59 	.globl _T2CON_3
                             60 	.globl _T2CON_2
                             61 	.globl _T2CON_1
                             62 	.globl _T2CON_0
                             63 	.globl _PT2
                             64 	.globl _ET2
                             65 	.globl _CY
                             66 	.globl _AC
                             67 	.globl _F0
                             68 	.globl _RS1
                             69 	.globl _RS0
                             70 	.globl _OV
                             71 	.globl _F1
                             72 	.globl _P
                             73 	.globl _PS
                             74 	.globl _PT1
                             75 	.globl _PX1
                             76 	.globl _PT0
                             77 	.globl _PX0
                             78 	.globl _RD
                             79 	.globl _WR
                             80 	.globl _T1
                             81 	.globl _T0
                             82 	.globl _INT1
                             83 	.globl _INT0
                             84 	.globl _TXD
                             85 	.globl _RXD
                             86 	.globl _P3_7
                             87 	.globl _P3_6
                             88 	.globl _P3_5
                             89 	.globl _P3_4
                             90 	.globl _P3_3
                             91 	.globl _P3_2
                             92 	.globl _P3_1
                             93 	.globl _P3_0
                             94 	.globl _EA
                             95 	.globl _ES
                             96 	.globl _ET1
                             97 	.globl _EX1
                             98 	.globl _ET0
                             99 	.globl _EX0
                            100 	.globl _P2_7
                            101 	.globl _P2_6
                            102 	.globl _P2_5
                            103 	.globl _P2_4
                            104 	.globl _P2_3
                            105 	.globl _P2_2
                            106 	.globl _P2_1
                            107 	.globl _P2_0
                            108 	.globl _SM0
                            109 	.globl _SM1
                            110 	.globl _SM2
                            111 	.globl _REN
                            112 	.globl _TB8
                            113 	.globl _RB8
                            114 	.globl _TI
                            115 	.globl _RI
                            116 	.globl _P1_7
                            117 	.globl _P1_6
                            118 	.globl _P1_5
                            119 	.globl _P1_4
                            120 	.globl _P1_3
                            121 	.globl _P1_2
                            122 	.globl _P1_1
                            123 	.globl _P1_0
                            124 	.globl _TF1
                            125 	.globl _TR1
                            126 	.globl _TF0
                            127 	.globl _TR0
                            128 	.globl _IE1
                            129 	.globl _IT1
                            130 	.globl _IE0
                            131 	.globl _IT0
                            132 	.globl _P0_7
                            133 	.globl _P0_6
                            134 	.globl _P0_5
                            135 	.globl _P0_4
                            136 	.globl _P0_3
                            137 	.globl _P0_2
                            138 	.globl _P0_1
                            139 	.globl _P0_0
                            140 	.globl _EECON
                            141 	.globl _KBF
                            142 	.globl _KBE
                            143 	.globl _KBLS
                            144 	.globl _BRL
                            145 	.globl _BDRCON
                            146 	.globl _T2MOD
                            147 	.globl _SPDAT
                            148 	.globl _SPSTA
                            149 	.globl _SPCON
                            150 	.globl _SADEN
                            151 	.globl _SADDR
                            152 	.globl _WDTPRG
                            153 	.globl _WDTRST
                            154 	.globl _P5
                            155 	.globl _P4
                            156 	.globl _IPH1
                            157 	.globl _IPL1
                            158 	.globl _IPH0
                            159 	.globl _IPL0
                            160 	.globl _IEN1
                            161 	.globl _IEN0
                            162 	.globl _CMOD
                            163 	.globl _CL
                            164 	.globl _CH
                            165 	.globl _CCON
                            166 	.globl _CCAPM4
                            167 	.globl _CCAPM3
                            168 	.globl _CCAPM2
                            169 	.globl _CCAPM1
                            170 	.globl _CCAPM0
                            171 	.globl _CCAP4L
                            172 	.globl _CCAP3L
                            173 	.globl _CCAP2L
                            174 	.globl _CCAP1L
                            175 	.globl _CCAP0L
                            176 	.globl _CCAP4H
                            177 	.globl _CCAP3H
                            178 	.globl _CCAP2H
                            179 	.globl _CCAP1H
                            180 	.globl _CCAP0H
                            181 	.globl _CKCKON1
                            182 	.globl _CKCKON0
                            183 	.globl _CKRL
                            184 	.globl _AUXR1
                            185 	.globl _AUXR
                            186 	.globl _TH2
                            187 	.globl _TL2
                            188 	.globl _RCAP2H
                            189 	.globl _RCAP2L
                            190 	.globl _T2CON
                            191 	.globl _B
                            192 	.globl _ACC
                            193 	.globl _PSW
                            194 	.globl _IP
                            195 	.globl _P3
                            196 	.globl _IE
                            197 	.globl _P2
                            198 	.globl _SBUF
                            199 	.globl _SCON
                            200 	.globl _P1
                            201 	.globl _TH1
                            202 	.globl _TH0
                            203 	.globl _TL1
                            204 	.globl _TL0
                            205 	.globl _TMOD
                            206 	.globl _TCON
                            207 	.globl _PCON
                            208 	.globl _DPH
                            209 	.globl _DPL
                            210 	.globl _SP
                            211 	.globl _P0
                            212 	.globl _ExpiredAlarms
                            213 	.globl _mode
                            214 	.globl _getBlockAndAddress_PARM_2
                            215 	.globl _DisableFlag
                            216 	.globl _LCD_Menu
                            217 	.globl _handleLCDMode
                            218 	.globl _EEPROM_Menu
                            219 	.globl _handleEEPROMMode
                            220 	.globl _CLOCK_Menu
                            221 	.globl _handleCLOCKMode
                            222 	.globl _MainMenu
                            223 	.globl _handleMAINMode
                            224 ;--------------------------------------------------------
                            225 ; special function registers
                            226 ;--------------------------------------------------------
                            227 	.area RSEG    (DATA)
                    0080    228 _P0	=	0x0080
                    0081    229 _SP	=	0x0081
                    0082    230 _DPL	=	0x0082
                    0083    231 _DPH	=	0x0083
                    0087    232 _PCON	=	0x0087
                    0088    233 _TCON	=	0x0088
                    0089    234 _TMOD	=	0x0089
                    008A    235 _TL0	=	0x008a
                    008B    236 _TL1	=	0x008b
                    008C    237 _TH0	=	0x008c
                    008D    238 _TH1	=	0x008d
                    0090    239 _P1	=	0x0090
                    0098    240 _SCON	=	0x0098
                    0099    241 _SBUF	=	0x0099
                    00A0    242 _P2	=	0x00a0
                    00A8    243 _IE	=	0x00a8
                    00B0    244 _P3	=	0x00b0
                    00B8    245 _IP	=	0x00b8
                    00D0    246 _PSW	=	0x00d0
                    00E0    247 _ACC	=	0x00e0
                    00F0    248 _B	=	0x00f0
                    00C8    249 _T2CON	=	0x00c8
                    00CA    250 _RCAP2L	=	0x00ca
                    00CB    251 _RCAP2H	=	0x00cb
                    00CC    252 _TL2	=	0x00cc
                    00CD    253 _TH2	=	0x00cd
                    008E    254 _AUXR	=	0x008e
                    00A2    255 _AUXR1	=	0x00a2
                    0097    256 _CKRL	=	0x0097
                    008F    257 _CKCKON0	=	0x008f
                    008F    258 _CKCKON1	=	0x008f
                    00FA    259 _CCAP0H	=	0x00fa
                    00FB    260 _CCAP1H	=	0x00fb
                    00FC    261 _CCAP2H	=	0x00fc
                    00FD    262 _CCAP3H	=	0x00fd
                    00FE    263 _CCAP4H	=	0x00fe
                    00EA    264 _CCAP0L	=	0x00ea
                    00EB    265 _CCAP1L	=	0x00eb
                    00EC    266 _CCAP2L	=	0x00ec
                    00ED    267 _CCAP3L	=	0x00ed
                    00EE    268 _CCAP4L	=	0x00ee
                    00DA    269 _CCAPM0	=	0x00da
                    00DB    270 _CCAPM1	=	0x00db
                    00DC    271 _CCAPM2	=	0x00dc
                    00DD    272 _CCAPM3	=	0x00dd
                    00DE    273 _CCAPM4	=	0x00de
                    00D8    274 _CCON	=	0x00d8
                    00F9    275 _CH	=	0x00f9
                    00E9    276 _CL	=	0x00e9
                    00D9    277 _CMOD	=	0x00d9
                    00A8    278 _IEN0	=	0x00a8
                    00B1    279 _IEN1	=	0x00b1
                    00B8    280 _IPL0	=	0x00b8
                    00B7    281 _IPH0	=	0x00b7
                    00B2    282 _IPL1	=	0x00b2
                    00B3    283 _IPH1	=	0x00b3
                    00C0    284 _P4	=	0x00c0
                    00D8    285 _P5	=	0x00d8
                    00A6    286 _WDTRST	=	0x00a6
                    00A7    287 _WDTPRG	=	0x00a7
                    00A9    288 _SADDR	=	0x00a9
                    00B9    289 _SADEN	=	0x00b9
                    00C3    290 _SPCON	=	0x00c3
                    00C4    291 _SPSTA	=	0x00c4
                    00C5    292 _SPDAT	=	0x00c5
                    00C9    293 _T2MOD	=	0x00c9
                    009B    294 _BDRCON	=	0x009b
                    009A    295 _BRL	=	0x009a
                    009C    296 _KBLS	=	0x009c
                    009D    297 _KBE	=	0x009d
                    009E    298 _KBF	=	0x009e
                    00D2    299 _EECON	=	0x00d2
                            300 ;--------------------------------------------------------
                            301 ; special function bits
                            302 ;--------------------------------------------------------
                            303 	.area RSEG    (DATA)
                    0080    304 _P0_0	=	0x0080
                    0081    305 _P0_1	=	0x0081
                    0082    306 _P0_2	=	0x0082
                    0083    307 _P0_3	=	0x0083
                    0084    308 _P0_4	=	0x0084
                    0085    309 _P0_5	=	0x0085
                    0086    310 _P0_6	=	0x0086
                    0087    311 _P0_7	=	0x0087
                    0088    312 _IT0	=	0x0088
                    0089    313 _IE0	=	0x0089
                    008A    314 _IT1	=	0x008a
                    008B    315 _IE1	=	0x008b
                    008C    316 _TR0	=	0x008c
                    008D    317 _TF0	=	0x008d
                    008E    318 _TR1	=	0x008e
                    008F    319 _TF1	=	0x008f
                    0090    320 _P1_0	=	0x0090
                    0091    321 _P1_1	=	0x0091
                    0092    322 _P1_2	=	0x0092
                    0093    323 _P1_3	=	0x0093
                    0094    324 _P1_4	=	0x0094
                    0095    325 _P1_5	=	0x0095
                    0096    326 _P1_6	=	0x0096
                    0097    327 _P1_7	=	0x0097
                    0098    328 _RI	=	0x0098
                    0099    329 _TI	=	0x0099
                    009A    330 _RB8	=	0x009a
                    009B    331 _TB8	=	0x009b
                    009C    332 _REN	=	0x009c
                    009D    333 _SM2	=	0x009d
                    009E    334 _SM1	=	0x009e
                    009F    335 _SM0	=	0x009f
                    00A0    336 _P2_0	=	0x00a0
                    00A1    337 _P2_1	=	0x00a1
                    00A2    338 _P2_2	=	0x00a2
                    00A3    339 _P2_3	=	0x00a3
                    00A4    340 _P2_4	=	0x00a4
                    00A5    341 _P2_5	=	0x00a5
                    00A6    342 _P2_6	=	0x00a6
                    00A7    343 _P2_7	=	0x00a7
                    00A8    344 _EX0	=	0x00a8
                    00A9    345 _ET0	=	0x00a9
                    00AA    346 _EX1	=	0x00aa
                    00AB    347 _ET1	=	0x00ab
                    00AC    348 _ES	=	0x00ac
                    00AF    349 _EA	=	0x00af
                    00B0    350 _P3_0	=	0x00b0
                    00B1    351 _P3_1	=	0x00b1
                    00B2    352 _P3_2	=	0x00b2
                    00B3    353 _P3_3	=	0x00b3
                    00B4    354 _P3_4	=	0x00b4
                    00B5    355 _P3_5	=	0x00b5
                    00B6    356 _P3_6	=	0x00b6
                    00B7    357 _P3_7	=	0x00b7
                    00B0    358 _RXD	=	0x00b0
                    00B1    359 _TXD	=	0x00b1
                    00B2    360 _INT0	=	0x00b2
                    00B3    361 _INT1	=	0x00b3
                    00B4    362 _T0	=	0x00b4
                    00B5    363 _T1	=	0x00b5
                    00B6    364 _WR	=	0x00b6
                    00B7    365 _RD	=	0x00b7
                    00B8    366 _PX0	=	0x00b8
                    00B9    367 _PT0	=	0x00b9
                    00BA    368 _PX1	=	0x00ba
                    00BB    369 _PT1	=	0x00bb
                    00BC    370 _PS	=	0x00bc
                    00D0    371 _P	=	0x00d0
                    00D1    372 _F1	=	0x00d1
                    00D2    373 _OV	=	0x00d2
                    00D3    374 _RS0	=	0x00d3
                    00D4    375 _RS1	=	0x00d4
                    00D5    376 _F0	=	0x00d5
                    00D6    377 _AC	=	0x00d6
                    00D7    378 _CY	=	0x00d7
                    00AD    379 _ET2	=	0x00ad
                    00BD    380 _PT2	=	0x00bd
                    00C8    381 _T2CON_0	=	0x00c8
                    00C9    382 _T2CON_1	=	0x00c9
                    00CA    383 _T2CON_2	=	0x00ca
                    00CB    384 _T2CON_3	=	0x00cb
                    00CC    385 _T2CON_4	=	0x00cc
                    00CD    386 _T2CON_5	=	0x00cd
                    00CE    387 _T2CON_6	=	0x00ce
                    00CF    388 _T2CON_7	=	0x00cf
                    00C8    389 _CP_RL2	=	0x00c8
                    00C9    390 _C_T2	=	0x00c9
                    00CA    391 _TR2	=	0x00ca
                    00CB    392 _EXEN2	=	0x00cb
                    00CC    393 _TCLK	=	0x00cc
                    00CD    394 _RCLK	=	0x00cd
                    00CE    395 _EXF2	=	0x00ce
                    00CF    396 _TF2	=	0x00cf
                    00DF    397 _CF	=	0x00df
                    00DE    398 _CR	=	0x00de
                    00DC    399 _CCF4	=	0x00dc
                    00DB    400 _CCF3	=	0x00db
                    00DA    401 _CCF2	=	0x00da
                    00D9    402 _CCF1	=	0x00d9
                    00D8    403 _CCF0	=	0x00d8
                    00AE    404 _EC	=	0x00ae
                    00BE    405 _PPCL	=	0x00be
                    00BD    406 _PT2L	=	0x00bd
                    00BC    407 _PLS	=	0x00bc
                    00BB    408 _PT1L	=	0x00bb
                    00BA    409 _PX1L	=	0x00ba
                    00B9    410 _PT0L	=	0x00b9
                    00B8    411 _PX0L	=	0x00b8
                    00C0    412 _P4_0	=	0x00c0
                    00C1    413 _P4_1	=	0x00c1
                    00C2    414 _P4_2	=	0x00c2
                    00C3    415 _P4_3	=	0x00c3
                    00C4    416 _P4_4	=	0x00c4
                    00C5    417 _P4_5	=	0x00c5
                    00C6    418 _P4_6	=	0x00c6
                    00C7    419 _P4_7	=	0x00c7
                    00D8    420 _P5_0	=	0x00d8
                    00D9    421 _P5_1	=	0x00d9
                    00DA    422 _P5_2	=	0x00da
                    00DB    423 _P5_3	=	0x00db
                    00DC    424 _P5_4	=	0x00dc
                    00DD    425 _P5_5	=	0x00dd
                    00DE    426 _P5_6	=	0x00de
                    00DF    427 _P5_7	=	0x00df
                            428 ;--------------------------------------------------------
                            429 ; overlayable register banks
                            430 ;--------------------------------------------------------
                            431 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     432 	.ds 8
                            433 ;--------------------------------------------------------
                            434 ; internal ram data
                            435 ;--------------------------------------------------------
                            436 	.area DSEG    (DATA)
                            437 ;--------------------------------------------------------
                            438 ; overlayable items in internal ram 
                            439 ;--------------------------------------------------------
                            440 	.area OSEG    (OVR,DATA)
                            441 ;--------------------------------------------------------
                            442 ; Stack segment in internal ram 
                            443 ;--------------------------------------------------------
                            444 	.area	SSEG	(DATA)
   0000                     445 __start__stack:
   0000                     446 	.ds	1
                            447 
                            448 ;--------------------------------------------------------
                            449 ; indirectly addressable internal ram data
                            450 ;--------------------------------------------------------
                            451 	.area ISEG    (DATA)
                            452 ;--------------------------------------------------------
                            453 ; bit data
                            454 ;--------------------------------------------------------
                            455 	.area BSEG    (BIT)
   0000                     456 _DisableFlag::
   0000                     457 	.ds 1
                            458 ;--------------------------------------------------------
                            459 ; paged external ram data
                            460 ;--------------------------------------------------------
                            461 	.area PSEG    (PAG,XDATA)
                            462 ;--------------------------------------------------------
                            463 ; external ram data
                            464 ;--------------------------------------------------------
                            465 	.area XSEG    (XDATA)
   0000                     466 _getBlockAndAddress_PARM_2:
   0000                     467 	.ds 3
   0003                     468 _getBlockAndAddress_address_1_1:
   0003                     469 	.ds 3
   0006                     470 _handleLCDMode_c_1_1:
   0006                     471 	.ds 1
   0007                     472 _handleLCDMode_row_1_1:
   0007                     473 	.ds 2
   0009                     474 _handleLCDMode_col_1_1:
   0009                     475 	.ds 2
   000B                     476 _handleLCDMode_str_1_1:
   000B                     477 	.ds 100
   006F                     478 _handleEEPROMMode_c_1_1:
   006F                     479 	.ds 1
   0070                     480 _handleEEPROMMode_block_1_1:
   0070                     481 	.ds 1
   0071                     482 _handleEEPROMMode_end_block_1_1:
   0071                     483 	.ds 1
   0072                     484 _handleEEPROMMode_address_1_1:
   0072                     485 	.ds 1
   0073                     486 _handleEEPROMMode_end_address_1_1:
   0073                     487 	.ds 1
   0074                     488 _handleEEPROMMode_start_addr_1_1:
   0074                     489 	.ds 2
   0076                     490 _handleEEPROMMode_end_addr_1_1:
   0076                     491 	.ds 2
   0078                     492 _handleCLOCKMode_c_1_1:
   0078                     493 	.ds 1
   0079                     494 _handleCLOCKMode_i_1_1:
   0079                     495 	.ds 1
   007A                     496 _handleMAINMode_c_1_1:
   007A                     497 	.ds 1
   007B                     498 _handleInput_c_1_1:
   007B                     499 	.ds 1
   007C                     500 _main_i_2_2:
   007C                     501 	.ds 1
                            502 ;--------------------------------------------------------
                            503 ; external initialized ram data
                            504 ;--------------------------------------------------------
                            505 	.area XISEG   (XDATA)
   0000                     506 _mode::
   0000                     507 	.ds 1
   0001                     508 _ExpiredAlarms::
   0001                     509 	.ds 3
                            510 	.area HOME    (CODE)
                            511 	.area GSINIT0 (CODE)
                            512 	.area GSINIT1 (CODE)
                            513 	.area GSINIT2 (CODE)
                            514 	.area GSINIT3 (CODE)
                            515 	.area GSINIT4 (CODE)
                            516 	.area GSINIT5 (CODE)
                            517 	.area GSINIT  (CODE)
                            518 	.area GSFINAL (CODE)
                            519 	.area CSEG    (CODE)
                            520 ;--------------------------------------------------------
                            521 ; interrupt vector 
                            522 ;--------------------------------------------------------
                            523 	.area HOME    (CODE)
   0000                     524 __interrupt_vect:
   0000 02s00r00            525 	ljmp	__sdcc_gsinit_startup
   0003 32                  526 	reti
   0004                     527 	.ds	7
   000B 02s00r00            528 	ljmp	_timer0
                            529 ;--------------------------------------------------------
                            530 ; global & static initialisations
                            531 ;--------------------------------------------------------
                            532 	.area HOME    (CODE)
                            533 	.area GSINIT  (CODE)
                            534 	.area GSFINAL (CODE)
                            535 	.area GSINIT  (CODE)
                            536 	.globl __sdcc_gsinit_startup
                            537 	.globl __sdcc_program_startup
                            538 	.globl __start__stack
                            539 	.globl __mcs51_genXINIT
                            540 	.globl __mcs51_genXRAMCLEAR
                            541 	.globl __mcs51_genRAMCLEAR
                            542 ;	main.c:34: bool DisableFlag = false;
                            543 ;	genAssign
   0000 C2*00               544 	clr	_DisableFlag
                            545 	.area GSFINAL (CODE)
   0000 02s00r00            546 	ljmp	__sdcc_program_startup
                            547 ;--------------------------------------------------------
                            548 ; Home
                            549 ;--------------------------------------------------------
                            550 	.area HOME    (CODE)
                            551 	.area CSEG    (CODE)
   0000                     552 __sdcc_program_startup:
   0000 12s10r08            553 	lcall	_main
                            554 ;	return from main will lock up
   0003 80 FE               555 	sjmp .
                            556 ;--------------------------------------------------------
                            557 ; code
                            558 ;--------------------------------------------------------
                            559 	.area CSEG    (CODE)
                            560 ;------------------------------------------------------------
                            561 ;Allocation info for local variables in function '_sdcc_external_startup'
                            562 ;------------------------------------------------------------
                            563 ;------------------------------------------------------------
                            564 ;	main.c:49: _sdcc_external_startup(){
                            565 ;	-----------------------------------------
                            566 ;	 function _sdcc_external_startup
                            567 ;	-----------------------------------------
   0005                     568 __sdcc_external_startup:
                    0002    569 	ar2 = 0x02
                    0003    570 	ar3 = 0x03
                    0004    571 	ar4 = 0x04
                    0005    572 	ar5 = 0x05
                    0006    573 	ar6 = 0x06
                    0007    574 	ar7 = 0x07
                    0000    575 	ar0 = 0x00
                    0001    576 	ar1 = 0x01
                            577 ;	main.c:51: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            578 ;	genOr
   0005 43 8E 0C            579 	orl	_AUXR,#0x0C
                            580 ;	main.c:52: return 0;
                            581 ;	genRet
                            582 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            583 	mov	dptr,#0x0000
                            584 ;	Peephole 300	removed redundant label 00101$
   000B 22                  585 	ret
                            586 ;------------------------------------------------------------
                            587 ;Allocation info for local variables in function 'getBlockAndAddress'
                            588 ;------------------------------------------------------------
                            589 ;block                     Allocated with name '_getBlockAndAddress_PARM_2'
                            590 ;address                   Allocated with name '_getBlockAndAddress_address_1_1'
                            591 ;------------------------------------------------------------
                            592 ;	main.c:56: void getBlockAndAddress(uint8_t *address, uint8_t *block){
                            593 ;	-----------------------------------------
                            594 ;	 function getBlockAndAddress
                            595 ;	-----------------------------------------
   000C                     596 _getBlockAndAddress:
                            597 ;	genReceive
   000C AA F0               598 	mov	r2,b
   000E AB 83               599 	mov	r3,dph
   0010 E5 82               600 	mov	a,dpl
   0012 90s00r03            601 	mov	dptr,#_getBlockAndAddress_address_1_1
   0015 F0                  602 	movx	@dptr,a
   0016 A3                  603 	inc	dptr
   0017 EB                  604 	mov	a,r3
   0018 F0                  605 	movx	@dptr,a
   0019 A3                  606 	inc	dptr
   001A EA                  607 	mov	a,r2
   001B F0                  608 	movx	@dptr,a
                            609 ;	main.c:57: printf("\r\nEnter an EEPROM block number from 0-7: ");
                            610 ;	genIpush
   001C 74r00               611 	mov	a,#__str_0
   001E C0 E0               612 	push	acc
   0020 74s00               613 	mov	a,#(__str_0 >> 8)
   0022 C0 E0               614 	push	acc
   0024 74 80               615 	mov	a,#0x80
   0026 C0 E0               616 	push	acc
                            617 ;	genCall
   0028 12s00r00            618 	lcall	_printf
   002B 15 81               619 	dec	sp
   002D 15 81               620 	dec	sp
   002F 15 81               621 	dec	sp
                            622 ;	main.c:58: *block = Serial_GetInteger(1);
                            623 ;	genAssign
   0031 90s00r00            624 	mov	dptr,#_getBlockAndAddress_PARM_2
   0034 E0                  625 	movx	a,@dptr
   0035 FA                  626 	mov	r2,a
   0036 A3                  627 	inc	dptr
   0037 E0                  628 	movx	a,@dptr
   0038 FB                  629 	mov	r3,a
   0039 A3                  630 	inc	dptr
   003A E0                  631 	movx	a,@dptr
   003B FC                  632 	mov	r4,a
                            633 ;	genCall
                            634 ;	Peephole 182.b	used 16 bit load of dptr
   003C 90 00 01            635 	mov	dptr,#0x0001
   003F C0 02               636 	push	ar2
   0041 C0 03               637 	push	ar3
   0043 C0 04               638 	push	ar4
   0045 12s00r00            639 	lcall	_Serial_GetInteger
   0048 AD 82               640 	mov	r5,dpl
   004A AE 83               641 	mov	r6,dph
   004C D0 04               642 	pop	ar4
   004E D0 03               643 	pop	ar3
   0050 D0 02               644 	pop	ar2
                            645 ;	genCast
                            646 ;	genPointerSet
                            647 ;	genGenPointerSet
   0052 8A 82               648 	mov	dpl,r2
   0054 8B 83               649 	mov	dph,r3
   0056 8C F0               650 	mov	b,r4
   0058 ED                  651 	mov	a,r5
   0059 12s00r00            652 	lcall	__gptrput
                            653 ;	main.c:59: while(*block > 7){
   005C                     654 00101$:
                            655 ;	genPointerGet
                            656 ;	genGenPointerGet
   005C 8A 82               657 	mov	dpl,r2
   005E 8B 83               658 	mov	dph,r3
   0060 8C F0               659 	mov	b,r4
   0062 12s00r00            660 	lcall	__gptrget
                            661 ;	genCmpGt
                            662 ;	genCmp
                            663 ;	genIfxJump
                            664 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            665 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0065 FD                  666 	mov  r5,a
                            667 ;	Peephole 177.a	removed redundant mov
   0066 24 F8               668 	add	a,#0xff - 0x07
   0068 50 43               669 	jnc	00103$
                            670 ;	Peephole 300	removed redundant label 00108$
                            671 ;	main.c:60: printf("\r\nINVALID: Enter an EEPROM block number from 0-7: ");
                            672 ;	genIpush
   006A C0 02               673 	push	ar2
   006C C0 03               674 	push	ar3
   006E C0 04               675 	push	ar4
   0070 74r2A               676 	mov	a,#__str_1
   0072 C0 E0               677 	push	acc
   0074 74s00               678 	mov	a,#(__str_1 >> 8)
   0076 C0 E0               679 	push	acc
   0078 74 80               680 	mov	a,#0x80
   007A C0 E0               681 	push	acc
                            682 ;	genCall
   007C 12s00r00            683 	lcall	_printf
   007F 15 81               684 	dec	sp
   0081 15 81               685 	dec	sp
   0083 15 81               686 	dec	sp
   0085 D0 04               687 	pop	ar4
   0087 D0 03               688 	pop	ar3
   0089 D0 02               689 	pop	ar2
                            690 ;	main.c:61: *block = Serial_GetInteger(1);
                            691 ;	genCall
                            692 ;	Peephole 182.b	used 16 bit load of dptr
   008B 90 00 01            693 	mov	dptr,#0x0001
   008E C0 02               694 	push	ar2
   0090 C0 03               695 	push	ar3
   0092 C0 04               696 	push	ar4
   0094 12s00r00            697 	lcall	_Serial_GetInteger
   0097 AD 82               698 	mov	r5,dpl
   0099 AE 83               699 	mov	r6,dph
   009B D0 04               700 	pop	ar4
   009D D0 03               701 	pop	ar3
   009F D0 02               702 	pop	ar2
                            703 ;	genCast
                            704 ;	genPointerSet
                            705 ;	genGenPointerSet
   00A1 8A 82               706 	mov	dpl,r2
   00A3 8B 83               707 	mov	dph,r3
   00A5 8C F0               708 	mov	b,r4
   00A7 ED                  709 	mov	a,r5
   00A8 12s00r00            710 	lcall	__gptrput
                            711 ;	Peephole 112.b	changed ljmp to sjmp
   00AB 80 AF               712 	sjmp	00101$
   00AD                     713 00103$:
                            714 ;	main.c:64: printf("\r\nEnter an EEPROM Word address in hex:");
                            715 ;	genIpush
   00AD 74r5D               716 	mov	a,#__str_2
   00AF C0 E0               717 	push	acc
   00B1 74s00               718 	mov	a,#(__str_2 >> 8)
   00B3 C0 E0               719 	push	acc
   00B5 74 80               720 	mov	a,#0x80
   00B7 C0 E0               721 	push	acc
                            722 ;	genCall
   00B9 12s00r00            723 	lcall	_printf
   00BC 15 81               724 	dec	sp
   00BE 15 81               725 	dec	sp
   00C0 15 81               726 	dec	sp
                            727 ;	main.c:65: *address = Serial_GetHex();
                            728 ;	genAssign
   00C2 90s00r03            729 	mov	dptr,#_getBlockAndAddress_address_1_1
   00C5 E0                  730 	movx	a,@dptr
   00C6 FA                  731 	mov	r2,a
   00C7 A3                  732 	inc	dptr
   00C8 E0                  733 	movx	a,@dptr
   00C9 FB                  734 	mov	r3,a
   00CA A3                  735 	inc	dptr
   00CB E0                  736 	movx	a,@dptr
   00CC FC                  737 	mov	r4,a
                            738 ;	genCall
   00CD C0 02               739 	push	ar2
   00CF C0 03               740 	push	ar3
   00D1 C0 04               741 	push	ar4
   00D3 12s00r00            742 	lcall	_Serial_GetHex
   00D6 AD 82               743 	mov	r5,dpl
   00D8 D0 04               744 	pop	ar4
   00DA D0 03               745 	pop	ar3
   00DC D0 02               746 	pop	ar2
                            747 ;	genPointerSet
                            748 ;	genGenPointerSet
   00DE 8A 82               749 	mov	dpl,r2
   00E0 8B 83               750 	mov	dph,r3
   00E2 8C F0               751 	mov	b,r4
   00E4 ED                  752 	mov	a,r5
                            753 ;	Peephole 253.b	replaced lcall/ret with ljmp
   00E5 02s00r00            754 	ljmp	__gptrput
                            755 ;
                            756 ;------------------------------------------------------------
                            757 ;Allocation info for local variables in function 'LCD_Menu'
                            758 ;------------------------------------------------------------
                            759 ;------------------------------------------------------------
                            760 ;	main.c:68: void LCD_Menu(void){
                            761 ;	-----------------------------------------
                            762 ;	 function LCD_Menu
                            763 ;	-----------------------------------------
   00E8                     764 _LCD_Menu:
                            765 ;	main.c:69: printf("\r\nIn LCD Mode");
                            766 ;	genIpush
   00E8 74r84               767 	mov	a,#__str_3
   00EA C0 E0               768 	push	acc
   00EC 74s00               769 	mov	a,#(__str_3 >> 8)
   00EE C0 E0               770 	push	acc
   00F0 74 80               771 	mov	a,#0x80
   00F2 C0 E0               772 	push	acc
                            773 ;	genCall
   00F4 12s00r00            774 	lcall	_printf
   00F7 15 81               775 	dec	sp
   00F9 15 81               776 	dec	sp
   00FB 15 81               777 	dec	sp
                            778 ;	main.c:70: printf("\r\nPress 'H' for help");
                            779 ;	genIpush
   00FD 74r92               780 	mov	a,#__str_4
   00FF C0 E0               781 	push	acc
   0101 74s00               782 	mov	a,#(__str_4 >> 8)
   0103 C0 E0               783 	push	acc
   0105 74 80               784 	mov	a,#0x80
   0107 C0 E0               785 	push	acc
                            786 ;	genCall
   0109 12s00r00            787 	lcall	_printf
   010C 15 81               788 	dec	sp
   010E 15 81               789 	dec	sp
   0110 15 81               790 	dec	sp
                            791 ;	main.c:71: printf("\r\nPress 'I' to Init LCD. Must call this first");
                            792 ;	genIpush
   0112 74rA7               793 	mov	a,#__str_5
   0114 C0 E0               794 	push	acc
   0116 74s00               795 	mov	a,#(__str_5 >> 8)
   0118 C0 E0               796 	push	acc
   011A 74 80               797 	mov	a,#0x80
   011C C0 E0               798 	push	acc
                            799 ;	genCall
   011E 12s00r00            800 	lcall	_printf
   0121 15 81               801 	dec	sp
   0123 15 81               802 	dec	sp
   0125 15 81               803 	dec	sp
                            804 ;	main.c:72: printf("\r\nPress 'g' to show gotoaddr ");
                            805 ;	genIpush
   0127 74rD5               806 	mov	a,#__str_6
   0129 C0 E0               807 	push	acc
   012B 74s00               808 	mov	a,#(__str_6 >> 8)
   012D C0 E0               809 	push	acc
   012F 74 80               810 	mov	a,#0x80
   0131 C0 E0               811 	push	acc
                            812 ;	genCall
   0133 12s00r00            813 	lcall	_printf
   0136 15 81               814 	dec	sp
   0138 15 81               815 	dec	sp
   013A 15 81               816 	dec	sp
                            817 ;	main.c:73: printf("\r\nPress 'x' to show gotoxy");
                            818 ;	genIpush
   013C 74rF3               819 	mov	a,#__str_7
   013E C0 E0               820 	push	acc
   0140 74s00               821 	mov	a,#(__str_7 >> 8)
   0142 C0 E0               822 	push	acc
   0144 74 80               823 	mov	a,#0x80
   0146 C0 E0               824 	push	acc
                            825 ;	genCall
   0148 12s00r00            826 	lcall	_printf
   014B 15 81               827 	dec	sp
   014D 15 81               828 	dec	sp
   014F 15 81               829 	dec	sp
                            830 ;	main.c:74: printf("\r\nPress 'c' to show putch ");
                            831 ;	genIpush
   0151 74r0E               832 	mov	a,#__str_8
   0153 C0 E0               833 	push	acc
   0155 74s01               834 	mov	a,#(__str_8 >> 8)
   0157 C0 E0               835 	push	acc
   0159 74 80               836 	mov	a,#0x80
   015B C0 E0               837 	push	acc
                            838 ;	genCall
   015D 12s00r00            839 	lcall	_printf
   0160 15 81               840 	dec	sp
   0162 15 81               841 	dec	sp
   0164 15 81               842 	dec	sp
                            843 ;	main.c:75: printf("\r\nPress 's' to show putstr");
                            844 ;	genIpush
   0166 74r29               845 	mov	a,#__str_9
   0168 C0 E0               846 	push	acc
   016A 74s01               847 	mov	a,#(__str_9 >> 8)
   016C C0 E0               848 	push	acc
   016E 74 80               849 	mov	a,#0x80
   0170 C0 E0               850 	push	acc
                            851 ;	genCall
   0172 12s00r00            852 	lcall	_printf
   0175 15 81               853 	dec	sp
   0177 15 81               854 	dec	sp
   0179 15 81               855 	dec	sp
                            856 ;	main.c:76: printf("\r\nPress 'C' to clear the LCD display");
                            857 ;	genIpush
   017B 74r44               858 	mov	a,#__str_10
   017D C0 E0               859 	push	acc
   017F 74s01               860 	mov	a,#(__str_10 >> 8)
   0181 C0 E0               861 	push	acc
   0183 74 80               862 	mov	a,#0x80
   0185 C0 E0               863 	push	acc
                            864 ;	genCall
   0187 12s00r00            865 	lcall	_printf
   018A 15 81               866 	dec	sp
   018C 15 81               867 	dec	sp
   018E 15 81               868 	dec	sp
                            869 ;	main.c:77: printf("\r\nPress 'Y' to read the contents of DDRAM");
                            870 ;	genIpush
   0190 74r69               871 	mov	a,#__str_11
   0192 C0 E0               872 	push	acc
   0194 74s01               873 	mov	a,#(__str_11 >> 8)
   0196 C0 E0               874 	push	acc
   0198 74 80               875 	mov	a,#0x80
   019A C0 E0               876 	push	acc
                            877 ;	genCall
   019C 12s00r00            878 	lcall	_printf
   019F 15 81               879 	dec	sp
   01A1 15 81               880 	dec	sp
   01A3 15 81               881 	dec	sp
                            882 ;	main.c:78: printf("\r\nPress 'G' to read the contents of CGRAM");
                            883 ;	genIpush
   01A5 74r93               884 	mov	a,#__str_12
   01A7 C0 E0               885 	push	acc
   01A9 74s01               886 	mov	a,#(__str_12 >> 8)
   01AB C0 E0               887 	push	acc
   01AD 74 80               888 	mov	a,#0x80
   01AF C0 E0               889 	push	acc
                            890 ;	genCall
   01B1 12s00r00            891 	lcall	_printf
   01B4 15 81               892 	dec	sp
   01B6 15 81               893 	dec	sp
   01B8 15 81               894 	dec	sp
                            895 ;	main.c:79: printf("\r\nPress 'r' to return to main menu\r\n");
                            896 ;	genIpush
   01BA 74rBD               897 	mov	a,#__str_13
   01BC C0 E0               898 	push	acc
   01BE 74s01               899 	mov	a,#(__str_13 >> 8)
   01C0 C0 E0               900 	push	acc
   01C2 74 80               901 	mov	a,#0x80
   01C4 C0 E0               902 	push	acc
                            903 ;	genCall
   01C6 12s00r00            904 	lcall	_printf
   01C9 15 81               905 	dec	sp
   01CB 15 81               906 	dec	sp
   01CD 15 81               907 	dec	sp
                            908 ;	Peephole 300	removed redundant label 00101$
   01CF 22                  909 	ret
                            910 ;------------------------------------------------------------
                            911 ;Allocation info for local variables in function 'handleLCDMode'
                            912 ;------------------------------------------------------------
                            913 ;c                         Allocated with name '_handleLCDMode_c_1_1'
                            914 ;row                       Allocated with name '_handleLCDMode_row_1_1'
                            915 ;col                       Allocated with name '_handleLCDMode_col_1_1'
                            916 ;address                   Allocated with name '_handleLCDMode_address_1_1'
                            917 ;str                       Allocated with name '_handleLCDMode_str_1_1'
                            918 ;i                         Allocated with name '_handleLCDMode_i_1_1'
                            919 ;------------------------------------------------------------
                            920 ;	main.c:83: void handleLCDMode(char c){
                            921 ;	-----------------------------------------
                            922 ;	 function handleLCDMode
                            923 ;	-----------------------------------------
   01D0                     924 _handleLCDMode:
                            925 ;	genReceive
   01D0 E5 82               926 	mov	a,dpl
   01D2 90s00r06            927 	mov	dptr,#_handleLCDMode_c_1_1
   01D5 F0                  928 	movx	@dptr,a
                            929 ;	main.c:89: switch(c){
                            930 ;	genAssign
   01D6 90s00r06            931 	mov	dptr,#_handleLCDMode_c_1_1
   01D9 E0                  932 	movx	a,@dptr
   01DA FA                  933 	mov	r2,a
                            934 ;	genCmpEq
                            935 ;	gencjneshort
   01DB BA 43 03            936 	cjne	r2,#0x43,00139$
   01DE 02s03rFA            937 	ljmp	00117$
   01E1                     938 00139$:
                            939 ;	genCmpEq
                            940 ;	gencjneshort
   01E1 BA 48 03            941 	cjne	r2,#0x48,00140$
   01E4 02s04r1E            942 	ljmp	00119$
   01E7                     943 00140$:
                            944 ;	genCmpEq
                            945 ;	gencjneshort
   01E7 BA 49 02            946 	cjne	r2,#0x49,00141$
                            947 ;	Peephole 112.b	changed ljmp to sjmp
   01EA 80 1D               948 	sjmp	00101$
   01EC                     949 00141$:
                            950 ;	genCmpEq
                            951 ;	gencjneshort
   01EC BA 63 03            952 	cjne	r2,#0x63,00142$
   01EF 02s03r52            953 	ljmp	00110$
   01F2                     954 00142$:
                            955 ;	genCmpEq
                            956 ;	gencjneshort
   01F2 BA 67 02            957 	cjne	r2,#0x67,00143$
                            958 ;	Peephole 112.b	changed ljmp to sjmp
   01F5 80 2A               959 	sjmp	00102$
   01F7                     960 00143$:
                            961 ;	genCmpEq
                            962 ;	gencjneshort
   01F7 BA 72 03            963 	cjne	r2,#0x72,00144$
   01FA 02s04r16            964 	ljmp	00118$
   01FD                     965 00144$:
                            966 ;	genCmpEq
                            967 ;	gencjneshort
   01FD BA 73 03            968 	cjne	r2,#0x73,00145$
   0200 02s03r80            969 	ljmp	00111$
   0203                     970 00145$:
                            971 ;	genCmpEq
                            972 ;	gencjneshort
   0203 BA 78 02            973 	cjne	r2,#0x78,00146$
                            974 ;	Peephole 112.b	changed ljmp to sjmp
   0206 80 36               975 	sjmp	00103$
   0208                     976 00146$:
                            977 ;	Peephole 251.a	replaced ljmp to ret with ret
   0208 22                  978 	ret
                            979 ;	main.c:90: case 'I':
   0209                     980 00101$:
                            981 ;	main.c:91: printf("\r\nInitializing LCD\r\n");
                            982 ;	genIpush
   0209 74rE2               983 	mov	a,#__str_14
   020B C0 E0               984 	push	acc
   020D 74s01               985 	mov	a,#(__str_14 >> 8)
   020F C0 E0               986 	push	acc
   0211 74 80               987 	mov	a,#0x80
   0213 C0 E0               988 	push	acc
                            989 ;	genCall
   0215 12s00r00            990 	lcall	_printf
   0218 15 81               991 	dec	sp
   021A 15 81               992 	dec	sp
   021C 15 81               993 	dec	sp
                            994 ;	main.c:92: LCD_Init();
                            995 ;	genCall
                            996 ;	main.c:93: break;
                            997 ;	Peephole 251.a	replaced ljmp to ret with ret
                            998 ;	Peephole 253.a	replaced lcall/ret with ljmp
   021E 02s00r00            999 	ljmp	_LCD_Init
                           1000 ;	main.c:94: case 'g':
   0221                    1001 00102$:
                           1002 ;	main.c:95: printf("\r\nEnter a hex address to go to\r\n");
                           1003 ;	genIpush
   0221 74rF7              1004 	mov	a,#__str_15
   0223 C0 E0              1005 	push	acc
   0225 74s01              1006 	mov	a,#(__str_15 >> 8)
   0227 C0 E0              1007 	push	acc
   0229 74 80              1008 	mov	a,#0x80
   022B C0 E0              1009 	push	acc
                           1010 ;	genCall
   022D 12s00r00           1011 	lcall	_printf
   0230 15 81              1012 	dec	sp
   0232 15 81              1013 	dec	sp
   0234 15 81              1014 	dec	sp
                           1015 ;	main.c:96: address = Serial_GetHex();
                           1016 ;	genCall
   0236 12s00r00           1017 	lcall	_Serial_GetHex
                           1018 ;	main.c:97: LCD_gotoaddr(address);
                           1019 ;	genCall
   0239 AA 82              1020 	mov  r2,dpl
                           1021 ;	Peephole 177.a	removed redundant mov
                           1022 ;	main.c:98: break;
                           1023 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1024 ;	Peephole 253.a	replaced lcall/ret with ljmp
   023B 02s00r00           1025 	ljmp	_LCD_gotoaddr
                           1026 ;	main.c:99: case 'x':
   023E                    1027 00103$:
                           1028 ;	main.c:100: printf ("\r\nEnter a row from 0-3:");
                           1029 ;	genIpush
   023E 74r18              1030 	mov	a,#__str_16
   0240 C0 E0              1031 	push	acc
   0242 74s02              1032 	mov	a,#(__str_16 >> 8)
   0244 C0 E0              1033 	push	acc
   0246 74 80              1034 	mov	a,#0x80
   0248 C0 E0              1035 	push	acc
                           1036 ;	genCall
   024A 12s00r00           1037 	lcall	_printf
   024D 15 81              1038 	dec	sp
   024F 15 81              1039 	dec	sp
   0251 15 81              1040 	dec	sp
                           1041 ;	main.c:101: row = Serial_GetInteger(3);
                           1042 ;	genCall
                           1043 ;	Peephole 182.b	used 16 bit load of dptr
   0253 90 00 03           1044 	mov	dptr,#0x0003
   0256 12s00r00           1045 	lcall	_Serial_GetInteger
   0259 E5 82              1046 	mov	a,dpl
   025B 85 83 F0           1047 	mov	b,dph
                           1048 ;	genAssign
   025E 90s00r07           1049 	mov	dptr,#_handleLCDMode_row_1_1
   0261 F0                 1050 	movx	@dptr,a
   0262 A3                 1051 	inc	dptr
   0263 E5 F0              1052 	mov	a,b
   0265 F0                 1053 	movx	@dptr,a
                           1054 ;	main.c:102: while(row > 3){
   0266                    1055 00104$:
                           1056 ;	genAssign
   0266 90s00r07           1057 	mov	dptr,#_handleLCDMode_row_1_1
   0269 E0                 1058 	movx	a,@dptr
   026A FA                 1059 	mov	r2,a
   026B A3                 1060 	inc	dptr
   026C E0                 1061 	movx	a,@dptr
   026D FB                 1062 	mov	r3,a
                           1063 ;	genCmpGt
                           1064 ;	genCmp
   026E C3                 1065 	clr	c
   026F 74 03              1066 	mov	a,#0x03
   0271 9A                 1067 	subb	a,r2
                           1068 ;	Peephole 159	avoided xrl during execution
   0272 74 80              1069 	mov	a,#(0x00 ^ 0x80)
   0274 8B F0              1070 	mov	b,r3
   0276 63 F0 80           1071 	xrl	b,#0x80
   0279 95 F0              1072 	subb	a,b
                           1073 ;	genIfxJump
                           1074 ;	Peephole 108.a	removed ljmp by inverse jump logic
   027B 50 2A              1075 	jnc	00106$
                           1076 ;	Peephole 300	removed redundant label 00147$
                           1077 ;	main.c:103: printf ("\r\nEnter a row from 0-3:");
                           1078 ;	genIpush
   027D 74r18              1079 	mov	a,#__str_16
   027F C0 E0              1080 	push	acc
   0281 74s02              1081 	mov	a,#(__str_16 >> 8)
   0283 C0 E0              1082 	push	acc
   0285 74 80              1083 	mov	a,#0x80
   0287 C0 E0              1084 	push	acc
                           1085 ;	genCall
   0289 12s00r00           1086 	lcall	_printf
   028C 15 81              1087 	dec	sp
   028E 15 81              1088 	dec	sp
   0290 15 81              1089 	dec	sp
                           1090 ;	main.c:104: row = Serial_GetInteger(3);
                           1091 ;	genCall
                           1092 ;	Peephole 182.b	used 16 bit load of dptr
   0292 90 00 03           1093 	mov	dptr,#0x0003
   0295 12s00r00           1094 	lcall	_Serial_GetInteger
   0298 E5 82              1095 	mov	a,dpl
   029A 85 83 F0           1096 	mov	b,dph
                           1097 ;	genAssign
   029D 90s00r07           1098 	mov	dptr,#_handleLCDMode_row_1_1
   02A0 F0                 1099 	movx	@dptr,a
   02A1 A3                 1100 	inc	dptr
   02A2 E5 F0              1101 	mov	a,b
   02A4 F0                 1102 	movx	@dptr,a
                           1103 ;	Peephole 112.b	changed ljmp to sjmp
   02A5 80 BF              1104 	sjmp	00104$
   02A7                    1105 00106$:
                           1106 ;	main.c:107: printf ("\r\nEnter a col from 0-15:");
                           1107 ;	genIpush
   02A7 74r30              1108 	mov	a,#__str_17
   02A9 C0 E0              1109 	push	acc
   02AB 74s02              1110 	mov	a,#(__str_17 >> 8)
   02AD C0 E0              1111 	push	acc
   02AF 74 80              1112 	mov	a,#0x80
   02B1 C0 E0              1113 	push	acc
                           1114 ;	genCall
   02B3 12s00r00           1115 	lcall	_printf
   02B6 15 81              1116 	dec	sp
   02B8 15 81              1117 	dec	sp
   02BA 15 81              1118 	dec	sp
                           1119 ;	main.c:108: col = Serial_GetInteger(3) ;
                           1120 ;	genCall
                           1121 ;	Peephole 182.b	used 16 bit load of dptr
   02BC 90 00 03           1122 	mov	dptr,#0x0003
   02BF 12s00r00           1123 	lcall	_Serial_GetInteger
   02C2 E5 82              1124 	mov	a,dpl
   02C4 85 83 F0           1125 	mov	b,dph
                           1126 ;	genAssign
   02C7 90s00r09           1127 	mov	dptr,#_handleLCDMode_col_1_1
   02CA F0                 1128 	movx	@dptr,a
   02CB A3                 1129 	inc	dptr
   02CC E5 F0              1130 	mov	a,b
   02CE F0                 1131 	movx	@dptr,a
                           1132 ;	main.c:109: while(col > 15){
   02CF                    1133 00107$:
                           1134 ;	genAssign
   02CF 90s00r09           1135 	mov	dptr,#_handleLCDMode_col_1_1
   02D2 E0                 1136 	movx	a,@dptr
   02D3 FA                 1137 	mov	r2,a
   02D4 A3                 1138 	inc	dptr
   02D5 E0                 1139 	movx	a,@dptr
   02D6 FB                 1140 	mov	r3,a
                           1141 ;	genCmpGt
                           1142 ;	genCmp
   02D7 C3                 1143 	clr	c
   02D8 74 0F              1144 	mov	a,#0x0F
   02DA 9A                 1145 	subb	a,r2
                           1146 ;	Peephole 159	avoided xrl during execution
   02DB 74 80              1147 	mov	a,#(0x00 ^ 0x80)
   02DD 8B F0              1148 	mov	b,r3
   02DF 63 F0 80           1149 	xrl	b,#0x80
   02E2 95 F0              1150 	subb	a,b
                           1151 ;	genIfxJump
                           1152 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02E4 50 2A              1153 	jnc	00109$
                           1154 ;	Peephole 300	removed redundant label 00148$
                           1155 ;	main.c:110: printf ("\r\nEnter a col from 0-15:");
                           1156 ;	genIpush
   02E6 74r30              1157 	mov	a,#__str_17
   02E8 C0 E0              1158 	push	acc
   02EA 74s02              1159 	mov	a,#(__str_17 >> 8)
   02EC C0 E0              1160 	push	acc
   02EE 74 80              1161 	mov	a,#0x80
   02F0 C0 E0              1162 	push	acc
                           1163 ;	genCall
   02F2 12s00r00           1164 	lcall	_printf
   02F5 15 81              1165 	dec	sp
   02F7 15 81              1166 	dec	sp
   02F9 15 81              1167 	dec	sp
                           1168 ;	main.c:111: col = Serial_GetInteger(3);
                           1169 ;	genCall
                           1170 ;	Peephole 182.b	used 16 bit load of dptr
   02FB 90 00 03           1171 	mov	dptr,#0x0003
   02FE 12s00r00           1172 	lcall	_Serial_GetInteger
   0301 E5 82              1173 	mov	a,dpl
   0303 85 83 F0           1174 	mov	b,dph
                           1175 ;	genAssign
   0306 90s00r09           1176 	mov	dptr,#_handleLCDMode_col_1_1
   0309 F0                 1177 	movx	@dptr,a
   030A A3                 1178 	inc	dptr
   030B E5 F0              1179 	mov	a,b
   030D F0                 1180 	movx	@dptr,a
                           1181 ;	Peephole 112.b	changed ljmp to sjmp
   030E 80 BF              1182 	sjmp	00107$
   0310                    1183 00109$:
                           1184 ;	main.c:114: LCD_gotoxy(row, col);
                           1185 ;	genAssign
   0310 90s00r07           1186 	mov	dptr,#_handleLCDMode_row_1_1
   0313 E0                 1187 	movx	a,@dptr
   0314 FC                 1188 	mov	r4,a
   0315 A3                 1189 	inc	dptr
   0316 E0                 1190 	movx	a,@dptr
   0317 FD                 1191 	mov	r5,a
                           1192 ;	genCast
   0318 8C 06              1193 	mov	ar6,r4
                           1194 ;	genCast
   031A 90s00r00           1195 	mov	dptr,#_LCD_gotoxy_PARM_2
   031D EA                 1196 	mov	a,r2
   031E F0                 1197 	movx	@dptr,a
                           1198 ;	genCall
   031F 8E 82              1199 	mov	dpl,r6
   0321 C0 02              1200 	push	ar2
   0323 C0 03              1201 	push	ar3
   0325 C0 04              1202 	push	ar4
   0327 C0 05              1203 	push	ar5
   0329 12s00r00           1204 	lcall	_LCD_gotoxy
   032C D0 05              1205 	pop	ar5
   032E D0 04              1206 	pop	ar4
   0330 D0 03              1207 	pop	ar3
   0332 D0 02              1208 	pop	ar2
                           1209 ;	main.c:115: printf("\r\nMoved cursor to new location (%d,%d)\r\n", row, col);
                           1210 ;	genIpush
   0334 C0 02              1211 	push	ar2
   0336 C0 03              1212 	push	ar3
                           1213 ;	genIpush
   0338 C0 04              1214 	push	ar4
   033A C0 05              1215 	push	ar5
                           1216 ;	genIpush
   033C 74r49              1217 	mov	a,#__str_18
   033E C0 E0              1218 	push	acc
   0340 74s02              1219 	mov	a,#(__str_18 >> 8)
   0342 C0 E0              1220 	push	acc
   0344 74 80              1221 	mov	a,#0x80
   0346 C0 E0              1222 	push	acc
                           1223 ;	genCall
   0348 12s00r00           1224 	lcall	_printf
   034B E5 81              1225 	mov	a,sp
   034D 24 F9              1226 	add	a,#0xf9
   034F F5 81              1227 	mov	sp,a
                           1228 ;	main.c:116: break;
                           1229 ;	Peephole 251.a	replaced ljmp to ret with ret
   0351 22                 1230 	ret
                           1231 ;	main.c:117: case 'c':
   0352                    1232 00110$:
                           1233 ;	main.c:118: printf("\r\nEnter a character to put at current address\r\n");
                           1234 ;	genIpush
   0352 74r72              1235 	mov	a,#__str_19
   0354 C0 E0              1236 	push	acc
   0356 74s02              1237 	mov	a,#(__str_19 >> 8)
   0358 C0 E0              1238 	push	acc
   035A 74 80              1239 	mov	a,#0x80
   035C C0 E0              1240 	push	acc
                           1241 ;	genCall
   035E 12s00r00           1242 	lcall	_printf
   0361 15 81              1243 	dec	sp
   0363 15 81              1244 	dec	sp
   0365 15 81              1245 	dec	sp
                           1246 ;	main.c:120: LCD_Putch(getchar());
                           1247 ;	genCall
   0367 12s00r00           1248 	lcall	_getchar
                           1249 ;	genCall
   036A AA 82              1250 	mov  r2,dpl
                           1251 ;	Peephole 177.a	removed redundant mov
   036C 12s00r00           1252 	lcall	_LCD_Putch
                           1253 ;	main.c:121: address = LCD_ReadAddr();
                           1254 ;	genCall
   036F 12s00r00           1255 	lcall	_LCD_ReadAddr
   0372 AA 82              1256 	mov	r2,dpl
                           1257 ;	main.c:122: TimerRedraw();
                           1258 ;	genCall
   0374 C0 02              1259 	push	ar2
   0376 12s00r00           1260 	lcall	_TimerRedraw
   0379 D0 02              1261 	pop	ar2
                           1262 ;	main.c:123: LCD_gotoaddr(address);
                           1263 ;	genCall
   037B 8A 82              1264 	mov	dpl,r2
                           1265 ;	main.c:125: break;
                           1266 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1267 ;	Peephole 253.a	replaced lcall/ret with ljmp
   037D 02s00r00           1268 	ljmp	_LCD_gotoaddr
                           1269 ;	main.c:126: case 's':
   0380                    1270 00111$:
                           1271 ;	main.c:127: printf("\r\Enter a string\r\n");
                           1272 ;	genIpush
   0380 74rA2              1273 	mov	a,#__str_20
   0382 C0 E0              1274 	push	acc
   0384 74s02              1275 	mov	a,#(__str_20 >> 8)
   0386 C0 E0              1276 	push	acc
   0388 74 80              1277 	mov	a,#0x80
   038A C0 E0              1278 	push	acc
                           1279 ;	genCall
   038C 12s00r00           1280 	lcall	_printf
   038F 15 81              1281 	dec	sp
   0391 15 81              1282 	dec	sp
   0393 15 81              1283 	dec	sp
                           1284 ;	main.c:129: while(i < 100){
                           1285 ;	genAssign
   0395 7A 00              1286 	mov	r2,#0x00
   0397                    1287 00114$:
                           1288 ;	genCmpLt
                           1289 ;	genCmp
   0397 BA 64 00           1290 	cjne	r2,#0x64,00149$
   039A                    1291 00149$:
                           1292 ;	genIfxJump
                           1293 ;	Peephole 108.a	removed ljmp by inverse jump logic
   039A 50 44              1294 	jnc	00116$
                           1295 ;	Peephole 300	removed redundant label 00150$
                           1296 ;	main.c:130: str[i] = getchar();
                           1297 ;	genPlus
                           1298 ;	Peephole 236.g	used r2 instead of ar2
   039C EA                 1299 	mov	a,r2
   039D 24r0B              1300 	add	a,#_handleLCDMode_str_1_1
   039F FB                 1301 	mov	r3,a
                           1302 ;	Peephole 181	changed mov to clr
   03A0 E4                 1303 	clr	a
   03A1 34s00              1304 	addc	a,#(_handleLCDMode_str_1_1 >> 8)
   03A3 FC                 1305 	mov	r4,a
                           1306 ;	genCall
   03A4 C0 02              1307 	push	ar2
   03A6 C0 03              1308 	push	ar3
   03A8 C0 04              1309 	push	ar4
   03AA 12s00r00           1310 	lcall	_getchar
   03AD AD 82              1311 	mov	r5,dpl
   03AF D0 04              1312 	pop	ar4
   03B1 D0 03              1313 	pop	ar3
   03B3 D0 02              1314 	pop	ar2
                           1315 ;	genPointerSet
                           1316 ;     genFarPointerSet
   03B5 8B 82              1317 	mov	dpl,r3
   03B7 8C 83              1318 	mov	dph,r4
   03B9 ED                 1319 	mov	a,r5
   03BA F0                 1320 	movx	@dptr,a
                           1321 ;	main.c:131: putchar(str[i]);
                           1322 ;	genCall
   03BB 8D 82              1323 	mov	dpl,r5
   03BD C0 02              1324 	push	ar2
   03BF C0 03              1325 	push	ar3
   03C1 C0 04              1326 	push	ar4
   03C3 12s00r00           1327 	lcall	_putchar
   03C6 D0 04              1328 	pop	ar4
   03C8 D0 03              1329 	pop	ar3
   03CA D0 02              1330 	pop	ar2
                           1331 ;	main.c:132: if (str[i] == ENTER_KEY){
                           1332 ;	genPointerGet
                           1333 ;	genFarPointerGet
   03CC 8B 82              1334 	mov	dpl,r3
   03CE 8C 83              1335 	mov	dph,r4
   03D0 E0                 1336 	movx	a,@dptr
   03D1 FD                 1337 	mov	r5,a
                           1338 ;	genCmpEq
                           1339 ;	gencjneshort
                           1340 ;	Peephole 112.b	changed ljmp to sjmp
                           1341 ;	Peephole 198.b	optimized misc jump sequence
   03D2 BD 0D 08           1342 	cjne	r5,#0x0D,00113$
                           1343 ;	Peephole 200.b	removed redundant sjmp
                           1344 ;	Peephole 300	removed redundant label 00151$
                           1345 ;	Peephole 300	removed redundant label 00152$
                           1346 ;	main.c:133: str[i] = '\0';
                           1347 ;	genPointerSet
                           1348 ;     genFarPointerSet
   03D5 8B 82              1349 	mov	dpl,r3
   03D7 8C 83              1350 	mov	dph,r4
                           1351 ;	Peephole 181	changed mov to clr
   03D9 E4                 1352 	clr	a
   03DA F0                 1353 	movx	@dptr,a
                           1354 ;	main.c:134: break;
                           1355 ;	Peephole 112.b	changed ljmp to sjmp
   03DB 80 03              1356 	sjmp	00116$
   03DD                    1357 00113$:
                           1358 ;	main.c:136: i++;
                           1359 ;	genPlus
                           1360 ;     genPlusIncr
   03DD 0A                 1361 	inc	r2
                           1362 ;	Peephole 112.b	changed ljmp to sjmp
   03DE 80 B7              1363 	sjmp	00114$
   03E0                    1364 00116$:
                           1365 ;	main.c:138: LCD_Putstr(str);
                           1366 ;	genCall
                           1367 ;	Peephole 182.a	used 16 bit load of DPTR
   03E0 90s00r0B           1368 	mov	dptr,#_handleLCDMode_str_1_1
   03E3 75 F0 00           1369 	mov	b,#0x00
   03E6 12s00r00           1370 	lcall	_LCD_Putstr
                           1371 ;	main.c:139: address = LCD_ReadAddr();
                           1372 ;	genCall
   03E9 12s00r00           1373 	lcall	_LCD_ReadAddr
   03EC AA 82              1374 	mov	r2,dpl
                           1375 ;	main.c:140: TimerRedraw();
                           1376 ;	genCall
   03EE C0 02              1377 	push	ar2
   03F0 12s00r00           1378 	lcall	_TimerRedraw
   03F3 D0 02              1379 	pop	ar2
                           1380 ;	main.c:141: LCD_gotoaddr(address);
                           1381 ;	genCall
   03F5 8A 82              1382 	mov	dpl,r2
                           1383 ;	main.c:142: break;
                           1384 ;	main.c:143: case 'C':
                           1385 ;	Peephole 112.b	changed ljmp to sjmp
                           1386 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1387 ;	Peephole 253.a	replaced lcall/ret with ljmp
   03F7 02s00r00           1388 	ljmp	_LCD_gotoaddr
   03FA                    1389 00117$:
                           1390 ;	main.c:144: LCD_ClearScreen();
                           1391 ;	genCall
   03FA 12s00r00           1392 	lcall	_LCD_ClearScreen
                           1393 ;	main.c:146: TimerRedraw();
                           1394 ;	genCall
   03FD 12s00r00           1395 	lcall	_TimerRedraw
                           1396 ;	main.c:147: printf("\r\nLCD Display Cleared!\r\n");
                           1397 ;	genIpush
   0400 74rB4              1398 	mov	a,#__str_21
   0402 C0 E0              1399 	push	acc
   0404 74s02              1400 	mov	a,#(__str_21 >> 8)
   0406 C0 E0              1401 	push	acc
   0408 74 80              1402 	mov	a,#0x80
   040A C0 E0              1403 	push	acc
                           1404 ;	genCall
   040C 12s00r00           1405 	lcall	_printf
   040F 15 81              1406 	dec	sp
   0411 15 81              1407 	dec	sp
   0413 15 81              1408 	dec	sp
                           1409 ;	main.c:148: break;
                           1410 ;	main.c:149: case 'r':
                           1411 ;	Peephole 112.b	changed ljmp to sjmp
                           1412 ;	Peephole 251.b	replaced sjmp to ret with ret
   0415 22                 1413 	ret
   0416                    1414 00118$:
                           1415 ;	main.c:150: mode = MAIN_MODE;
                           1416 ;	genAssign
   0416 90s00r00           1417 	mov	dptr,#_mode
                           1418 ;	Peephole 181	changed mov to clr
   0419 E4                 1419 	clr	a
   041A F0                 1420 	movx	@dptr,a
                           1421 ;	main.c:151: MainMenu();
                           1422 ;	genCall
                           1423 ;	main.c:152: break;
                           1424 ;	main.c:153: case 'H':
                           1425 ;	Peephole 112.b	changed ljmp to sjmp
                           1426 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1427 ;	Peephole 253.a	replaced lcall/ret with ljmp
   041B 02s0ErEB           1428 	ljmp	_MainMenu
   041E                    1429 00119$:
                           1430 ;	main.c:154: LCD_Menu();
                           1431 ;	genCall
                           1432 ;	main.c:158: }
                           1433 ;	Peephole 253.b	replaced lcall/ret with ljmp
   041E 02s00rE8           1434 	ljmp	_LCD_Menu
                           1435 ;
                           1436 ;------------------------------------------------------------
                           1437 ;Allocation info for local variables in function 'EEPROM_Menu'
                           1438 ;------------------------------------------------------------
                           1439 ;------------------------------------------------------------
                           1440 ;	main.c:161: void EEPROM_Menu(void){
                           1441 ;	-----------------------------------------
                           1442 ;	 function EEPROM_Menu
                           1443 ;	-----------------------------------------
   0421                    1444 _EEPROM_Menu:
                           1445 ;	main.c:162: printf("\r\nIn EEPROM Mode");
                           1446 ;	genIpush
   0421 74rCD              1447 	mov	a,#__str_22
   0423 C0 E0              1448 	push	acc
   0425 74s02              1449 	mov	a,#(__str_22 >> 8)
   0427 C0 E0              1450 	push	acc
   0429 74 80              1451 	mov	a,#0x80
   042B C0 E0              1452 	push	acc
                           1453 ;	genCall
   042D 12s00r00           1454 	lcall	_printf
   0430 15 81              1455 	dec	sp
   0432 15 81              1456 	dec	sp
   0434 15 81              1457 	dec	sp
                           1458 ;	main.c:163: printf("\r\nPress 'H' for help");
                           1459 ;	genIpush
   0436 74r92              1460 	mov	a,#__str_4
   0438 C0 E0              1461 	push	acc
   043A 74s00              1462 	mov	a,#(__str_4 >> 8)
   043C C0 E0              1463 	push	acc
   043E 74 80              1464 	mov	a,#0x80
   0440 C0 E0              1465 	push	acc
                           1466 ;	genCall
   0442 12s00r00           1467 	lcall	_printf
   0445 15 81              1468 	dec	sp
   0447 15 81              1469 	dec	sp
   0449 15 81              1470 	dec	sp
                           1471 ;	main.c:164: printf("\r\nPress 'W' to write a byte to EEPROM");
                           1472 ;	genIpush
   044B 74rDE              1473 	mov	a,#__str_23
   044D C0 E0              1474 	push	acc
   044F 74s02              1475 	mov	a,#(__str_23 >> 8)
   0451 C0 E0              1476 	push	acc
   0453 74 80              1477 	mov	a,#0x80
   0455 C0 E0              1478 	push	acc
                           1479 ;	genCall
   0457 12s00r00           1480 	lcall	_printf
   045A 15 81              1481 	dec	sp
   045C 15 81              1482 	dec	sp
   045E 15 81              1483 	dec	sp
                           1484 ;	main.c:165: printf("\r\nPress 'R' to read a byte from EEPROM");
                           1485 ;	genIpush
   0460 74r04              1486 	mov	a,#__str_24
   0462 C0 E0              1487 	push	acc
   0464 74s03              1488 	mov	a,#(__str_24 >> 8)
   0466 C0 E0              1489 	push	acc
   0468 74 80              1490 	mov	a,#0x80
   046A C0 E0              1491 	push	acc
                           1492 ;	genCall
   046C 12s00r00           1493 	lcall	_printf
   046F 15 81              1494 	dec	sp
   0471 15 81              1495 	dec	sp
   0473 15 81              1496 	dec	sp
                           1497 ;	main.c:166: printf("\r\nPress 'L' to display EEPROM data on LCD");
                           1498 ;	genIpush
   0475 74r2B              1499 	mov	a,#__str_25
   0477 C0 E0              1500 	push	acc
   0479 74s03              1501 	mov	a,#(__str_25 >> 8)
   047B C0 E0              1502 	push	acc
   047D 74 80              1503 	mov	a,#0x80
   047F C0 E0              1504 	push	acc
                           1505 ;	genCall
   0481 12s00r00           1506 	lcall	_printf
   0484 15 81              1507 	dec	sp
   0486 15 81              1508 	dec	sp
   0488 15 81              1509 	dec	sp
                           1510 ;	main.c:167: printf("\r\nPress 'D' to do a Hex Dump of EEPROM");
                           1511 ;	genIpush
   048A 74r55              1512 	mov	a,#__str_26
   048C C0 E0              1513 	push	acc
   048E 74s03              1514 	mov	a,#(__str_26 >> 8)
   0490 C0 E0              1515 	push	acc
   0492 74 80              1516 	mov	a,#0x80
   0494 C0 E0              1517 	push	acc
                           1518 ;	genCall
   0496 12s00r00           1519 	lcall	_printf
   0499 15 81              1520 	dec	sp
   049B 15 81              1521 	dec	sp
   049D 15 81              1522 	dec	sp
                           1523 ;	main.c:168: printf("\r\nPress 'r' to return to main menu\r\n");
                           1524 ;	genIpush
   049F 74rBD              1525 	mov	a,#__str_13
   04A1 C0 E0              1526 	push	acc
   04A3 74s01              1527 	mov	a,#(__str_13 >> 8)
   04A5 C0 E0              1528 	push	acc
   04A7 74 80              1529 	mov	a,#0x80
   04A9 C0 E0              1530 	push	acc
                           1531 ;	genCall
   04AB 12s00r00           1532 	lcall	_printf
   04AE 15 81              1533 	dec	sp
   04B0 15 81              1534 	dec	sp
   04B2 15 81              1535 	dec	sp
                           1536 ;	Peephole 300	removed redundant label 00101$
   04B4 22                 1537 	ret
                           1538 ;------------------------------------------------------------
                           1539 ;Allocation info for local variables in function 'handleEEPROMMode'
                           1540 ;------------------------------------------------------------
                           1541 ;c                         Allocated with name '_handleEEPROMMode_c_1_1'
                           1542 ;block                     Allocated with name '_handleEEPROMMode_block_1_1'
                           1543 ;end_block                 Allocated with name '_handleEEPROMMode_end_block_1_1'
                           1544 ;address                   Allocated with name '_handleEEPROMMode_address_1_1'
                           1545 ;end_address               Allocated with name '_handleEEPROMMode_end_address_1_1'
                           1546 ;i                         Allocated with name '_handleEEPROMMode_i_1_1'
                           1547 ;lcdData                   Allocated with name '_handleEEPROMMode_lcdData_1_1'
                           1548 ;Lcd_row                   Allocated with name '_handleEEPROMMode_Lcd_row_1_1'
                           1549 ;start_addr                Allocated with name '_handleEEPROMMode_start_addr_1_1'
                           1550 ;end_addr                  Allocated with name '_handleEEPROMMode_end_addr_1_1'
                           1551 ;------------------------------------------------------------
                           1552 ;	main.c:171: void handleEEPROMMode(char c){
                           1553 ;	-----------------------------------------
                           1554 ;	 function handleEEPROMMode
                           1555 ;	-----------------------------------------
   04B5                    1556 _handleEEPROMMode:
                           1557 ;	genReceive
   04B5 E5 82              1558 	mov	a,dpl
   04B7 90s00r6F           1559 	mov	dptr,#_handleEEPROMMode_c_1_1
   04BA F0                 1560 	movx	@dptr,a
                           1561 ;	main.c:181: switch(c){
                           1562 ;	genAssign
   04BB 90s00r6F           1563 	mov	dptr,#_handleEEPROMMode_c_1_1
   04BE E0                 1564 	movx	a,@dptr
   04BF FA                 1565 	mov	r2,a
                           1566 ;	genCmpEq
                           1567 ;	gencjneshort
   04C0 BA 44 03           1568 	cjne	r2,#0x44,00174$
   04C3 02s06r9F           1569 	ljmp	00104$
   04C6                    1570 00174$:
                           1571 ;	genCmpEq
                           1572 ;	gencjneshort
   04C6 BA 47 03           1573 	cjne	r2,#0x47,00175$
   04C9 02s0ArAC           1574 	ljmp	00117$
   04CC                    1575 00175$:
                           1576 ;	genCmpEq
                           1577 ;	gencjneshort
   04CC BA 48 03           1578 	cjne	r2,#0x48,00176$
   04CF 02s0Br9D           1579 	ljmp	00122$
   04D2                    1580 00176$:
                           1581 ;	genCmpEq
                           1582 ;	gencjneshort
   04D2 BA 4C 03           1583 	cjne	r2,#0x4C,00177$
   04D5 02s05rF8           1584 	ljmp	00103$
   04D8                    1585 00177$:
                           1586 ;	genCmpEq
                           1587 ;	gencjneshort
   04D8 BA 52 03           1588 	cjne	r2,#0x52,00178$
   04DB 02s05r85           1589 	ljmp	00102$
   04DE                    1590 00178$:
                           1591 ;	genCmpEq
                           1592 ;	gencjneshort
   04DE BA 57 02           1593 	cjne	r2,#0x57,00179$
                           1594 ;	Peephole 112.b	changed ljmp to sjmp
   04E1 80 0D              1595 	sjmp	00101$
   04E3                    1596 00179$:
                           1597 ;	genCmpEq
                           1598 ;	gencjneshort
   04E3 BA 59 03           1599 	cjne	r2,#0x59,00180$
   04E6 02s08r72           1600 	ljmp	00116$
   04E9                    1601 00180$:
                           1602 ;	genCmpEq
                           1603 ;	gencjneshort
   04E9 BA 72 03           1604 	cjne	r2,#0x72,00181$
   04EC 02s0Br95           1605 	ljmp	00121$
   04EF                    1606 00181$:
                           1607 ;	Peephole 251.a	replaced ljmp to ret with ret
   04EF 22                 1608 	ret
                           1609 ;	main.c:182: case 'W':
   04F0                    1610 00101$:
                           1611 ;	main.c:183: printf("\r\nWriting to EEPROM...");
                           1612 ;	genIpush
   04F0 74r7C              1613 	mov	a,#__str_27
   04F2 C0 E0              1614 	push	acc
   04F4 74s03              1615 	mov	a,#(__str_27 >> 8)
   04F6 C0 E0              1616 	push	acc
   04F8 74 80              1617 	mov	a,#0x80
   04FA C0 E0              1618 	push	acc
                           1619 ;	genCall
   04FC 12s00r00           1620 	lcall	_printf
   04FF 15 81              1621 	dec	sp
   0501 15 81              1622 	dec	sp
   0503 15 81              1623 	dec	sp
                           1624 ;	main.c:184: getBlockAndAddress(&address, &block);
                           1625 ;	genCast
   0505 90s00r00           1626 	mov	dptr,#_getBlockAndAddress_PARM_2
   0508 74r70              1627 	mov	a,#_handleEEPROMMode_block_1_1
   050A F0                 1628 	movx	@dptr,a
   050B A3                 1629 	inc	dptr
   050C 74s00              1630 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   050E F0                 1631 	movx	@dptr,a
   050F A3                 1632 	inc	dptr
   0510 74 00              1633 	mov	a,#0x0
   0512 F0                 1634 	movx	@dptr,a
                           1635 ;	genCall
                           1636 ;	Peephole 182.a	used 16 bit load of DPTR
   0513 90s00r72           1637 	mov	dptr,#_handleEEPROMMode_address_1_1
   0516 75 F0 00           1638 	mov	b,#0x00
   0519 12s00r0C           1639 	lcall	_getBlockAndAddress
                           1640 ;	main.c:185: printf("\r\nEnter a byte of data to write to EEPROM:");
                           1641 ;	genIpush
   051C 74r93              1642 	mov	a,#__str_28
   051E C0 E0              1643 	push	acc
   0520 74s03              1644 	mov	a,#(__str_28 >> 8)
   0522 C0 E0              1645 	push	acc
   0524 74 80              1646 	mov	a,#0x80
   0526 C0 E0              1647 	push	acc
                           1648 ;	genCall
   0528 12s00r00           1649 	lcall	_printf
   052B 15 81              1650 	dec	sp
   052D 15 81              1651 	dec	sp
   052F 15 81              1652 	dec	sp
                           1653 ;	main.c:186: lcdData = Serial_GetHex();
                           1654 ;	genCall
   0531 12s00r00           1655 	lcall	_Serial_GetHex
   0534 AA 82              1656 	mov	r2,dpl
                           1657 ;	main.c:187: EPROM_ByteWrite(lcdData, address, block);
                           1658 ;	genAssign
   0536 90s00r72           1659 	mov	dptr,#_handleEEPROMMode_address_1_1
   0539 E0                 1660 	movx	a,@dptr
   053A FB                 1661 	mov	r3,a
                           1662 ;	genAssign
   053B 90s00r70           1663 	mov	dptr,#_handleEEPROMMode_block_1_1
   053E E0                 1664 	movx	a,@dptr
   053F FC                 1665 	mov	r4,a
                           1666 ;	genAssign
   0540 90s00r00           1667 	mov	dptr,#_EPROM_ByteWrite_PARM_2
   0543 EB                 1668 	mov	a,r3
   0544 F0                 1669 	movx	@dptr,a
                           1670 ;	genAssign
   0545 90s00r00           1671 	mov	dptr,#_EPROM_ByteWrite_PARM_3
   0548 EC                 1672 	mov	a,r4
   0549 F0                 1673 	movx	@dptr,a
                           1674 ;	genCall
   054A 8A 82              1675 	mov	dpl,r2
   054C C0 02              1676 	push	ar2
   054E 12s00r00           1677 	lcall	_EPROM_ByteWrite
   0551 D0 02              1678 	pop	ar2
                           1679 ;	main.c:188: printf("\r\nWrote %X to block %d address 0x%X in EEPROM!\r\n", lcdData, block, address);
                           1680 ;	genAssign
   0553 90s00r72           1681 	mov	dptr,#_handleEEPROMMode_address_1_1
   0556 E0                 1682 	movx	a,@dptr
   0557 FB                 1683 	mov	r3,a
                           1684 ;	genCast
   0558 7C 00              1685 	mov	r4,#0x00
                           1686 ;	genAssign
   055A 90s00r70           1687 	mov	dptr,#_handleEEPROMMode_block_1_1
   055D E0                 1688 	movx	a,@dptr
   055E FD                 1689 	mov	r5,a
                           1690 ;	genCast
   055F 7E 00              1691 	mov	r6,#0x00
                           1692 ;	genCast
   0561 7F 00              1693 	mov	r7,#0x00
                           1694 ;	genIpush
   0563 C0 03              1695 	push	ar3
   0565 C0 04              1696 	push	ar4
                           1697 ;	genIpush
   0567 C0 05              1698 	push	ar5
   0569 C0 06              1699 	push	ar6
                           1700 ;	genIpush
   056B C0 02              1701 	push	ar2
   056D C0 07              1702 	push	ar7
                           1703 ;	genIpush
   056F 74rBE              1704 	mov	a,#__str_29
   0571 C0 E0              1705 	push	acc
   0573 74s03              1706 	mov	a,#(__str_29 >> 8)
   0575 C0 E0              1707 	push	acc
   0577 74 80              1708 	mov	a,#0x80
   0579 C0 E0              1709 	push	acc
                           1710 ;	genCall
   057B 12s00r00           1711 	lcall	_printf
   057E E5 81              1712 	mov	a,sp
   0580 24 F7              1713 	add	a,#0xf7
   0582 F5 81              1714 	mov	sp,a
                           1715 ;	main.c:189: break;
                           1716 ;	Peephole 251.a	replaced ljmp to ret with ret
   0584 22                 1717 	ret
                           1718 ;	main.c:190: case 'R':
   0585                    1719 00102$:
                           1720 ;	main.c:191: printf("\r\nReading from EEPROM...");
                           1721 ;	genIpush
   0585 74rEF              1722 	mov	a,#__str_30
   0587 C0 E0              1723 	push	acc
   0589 74s03              1724 	mov	a,#(__str_30 >> 8)
   058B C0 E0              1725 	push	acc
   058D 74 80              1726 	mov	a,#0x80
   058F C0 E0              1727 	push	acc
                           1728 ;	genCall
   0591 12s00r00           1729 	lcall	_printf
   0594 15 81              1730 	dec	sp
   0596 15 81              1731 	dec	sp
   0598 15 81              1732 	dec	sp
                           1733 ;	main.c:192: getBlockAndAddress(&address, &block);
                           1734 ;	genCast
   059A 90s00r00           1735 	mov	dptr,#_getBlockAndAddress_PARM_2
   059D 74r70              1736 	mov	a,#_handleEEPROMMode_block_1_1
   059F F0                 1737 	movx	@dptr,a
   05A0 A3                 1738 	inc	dptr
   05A1 74s00              1739 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   05A3 F0                 1740 	movx	@dptr,a
   05A4 A3                 1741 	inc	dptr
   05A5 74 00              1742 	mov	a,#0x0
   05A7 F0                 1743 	movx	@dptr,a
                           1744 ;	genCall
                           1745 ;	Peephole 182.a	used 16 bit load of DPTR
   05A8 90s00r72           1746 	mov	dptr,#_handleEEPROMMode_address_1_1
   05AB 75 F0 00           1747 	mov	b,#0x00
   05AE 12s00r0C           1748 	lcall	_getBlockAndAddress
                           1749 ;	main.c:194: lcdData = EPROM_ByteRead(address, block);
                           1750 ;	genAssign
   05B1 90s00r72           1751 	mov	dptr,#_handleEEPROMMode_address_1_1
   05B4 E0                 1752 	movx	a,@dptr
   05B5 FA                 1753 	mov	r2,a
                           1754 ;	genAssign
   05B6 90s00r70           1755 	mov	dptr,#_handleEEPROMMode_block_1_1
   05B9 E0                 1756 	movx	a,@dptr
                           1757 ;	genAssign
   05BA FB                 1758 	mov	r3,a
   05BB 90s00r00           1759 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           1760 ;	Peephole 100	removed redundant mov
   05BE F0                 1761 	movx	@dptr,a
                           1762 ;	genCall
   05BF 8A 82              1763 	mov	dpl,r2
   05C1 12s00r00           1764 	lcall	_EPROM_ByteRead
   05C4 AA 82              1765 	mov	r2,dpl
                           1766 ;	main.c:195: printf("\r\nRead %X from block %d address 0x%X\r\n", lcdData, block, address);
                           1767 ;	genAssign
   05C6 90s00r72           1768 	mov	dptr,#_handleEEPROMMode_address_1_1
   05C9 E0                 1769 	movx	a,@dptr
   05CA FB                 1770 	mov	r3,a
                           1771 ;	genCast
   05CB 7C 00              1772 	mov	r4,#0x00
                           1773 ;	genAssign
   05CD 90s00r70           1774 	mov	dptr,#_handleEEPROMMode_block_1_1
   05D0 E0                 1775 	movx	a,@dptr
   05D1 FD                 1776 	mov	r5,a
                           1777 ;	genCast
   05D2 7E 00              1778 	mov	r6,#0x00
                           1779 ;	genCast
   05D4 7F 00              1780 	mov	r7,#0x00
                           1781 ;	genIpush
   05D6 C0 03              1782 	push	ar3
   05D8 C0 04              1783 	push	ar4
                           1784 ;	genIpush
   05DA C0 05              1785 	push	ar5
   05DC C0 06              1786 	push	ar6
                           1787 ;	genIpush
   05DE C0 02              1788 	push	ar2
   05E0 C0 07              1789 	push	ar7
                           1790 ;	genIpush
   05E2 74r08              1791 	mov	a,#__str_31
   05E4 C0 E0              1792 	push	acc
   05E6 74s04              1793 	mov	a,#(__str_31 >> 8)
   05E8 C0 E0              1794 	push	acc
   05EA 74 80              1795 	mov	a,#0x80
   05EC C0 E0              1796 	push	acc
                           1797 ;	genCall
   05EE 12s00r00           1798 	lcall	_printf
   05F1 E5 81              1799 	mov	a,sp
   05F3 24 F7              1800 	add	a,#0xf7
   05F5 F5 81              1801 	mov	sp,a
                           1802 ;	main.c:196: break;
                           1803 ;	Peephole 251.a	replaced ljmp to ret with ret
   05F7 22                 1804 	ret
                           1805 ;	main.c:197: case 'L':
   05F8                    1806 00103$:
                           1807 ;	main.c:198: getBlockAndAddress(&address, &block);
                           1808 ;	genCast
   05F8 90s00r00           1809 	mov	dptr,#_getBlockAndAddress_PARM_2
   05FB 74r70              1810 	mov	a,#_handleEEPROMMode_block_1_1
   05FD F0                 1811 	movx	@dptr,a
   05FE A3                 1812 	inc	dptr
   05FF 74s00              1813 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0601 F0                 1814 	movx	@dptr,a
   0602 A3                 1815 	inc	dptr
   0603 74 00              1816 	mov	a,#0x0
   0605 F0                 1817 	movx	@dptr,a
                           1818 ;	genCall
                           1819 ;	Peephole 182.a	used 16 bit load of DPTR
   0606 90s00r72           1820 	mov	dptr,#_handleEEPROMMode_address_1_1
   0609 75 F0 00           1821 	mov	b,#0x00
   060C 12s00r0C           1822 	lcall	_getBlockAndAddress
                           1823 ;	main.c:200: lcdData = EPROM_ByteRead(address, block);
                           1824 ;	genAssign
   060F 90s00r72           1825 	mov	dptr,#_handleEEPROMMode_address_1_1
   0612 E0                 1826 	movx	a,@dptr
   0613 FA                 1827 	mov	r2,a
                           1828 ;	genAssign
   0614 90s00r70           1829 	mov	dptr,#_handleEEPROMMode_block_1_1
   0617 E0                 1830 	movx	a,@dptr
                           1831 ;	genAssign
   0618 FB                 1832 	mov	r3,a
   0619 90s00r00           1833 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           1834 ;	Peephole 100	removed redundant mov
   061C F0                 1835 	movx	@dptr,a
                           1836 ;	genCall
   061D 8A 82              1837 	mov	dpl,r2
   061F 12s00r00           1838 	lcall	_EPROM_ByteRead
   0622 AA 82              1839 	mov	r2,dpl
                           1840 ;	main.c:202: printf("\r\nEnter LCD row from 0-3:");
                           1841 ;	genIpush
   0624 C0 02              1842 	push	ar2
   0626 74r2F              1843 	mov	a,#__str_32
   0628 C0 E0              1844 	push	acc
   062A 74s04              1845 	mov	a,#(__str_32 >> 8)
   062C C0 E0              1846 	push	acc
   062E 74 80              1847 	mov	a,#0x80
   0630 C0 E0              1848 	push	acc
                           1849 ;	genCall
   0632 12s00r00           1850 	lcall	_printf
   0635 15 81              1851 	dec	sp
   0637 15 81              1852 	dec	sp
   0639 15 81              1853 	dec	sp
   063B D0 02              1854 	pop	ar2
                           1855 ;	main.c:203: Lcd_row = Serial_GetInteger(1);
                           1856 ;	genCall
                           1857 ;	Peephole 182.b	used 16 bit load of dptr
   063D 90 00 01           1858 	mov	dptr,#0x0001
   0640 C0 02              1859 	push	ar2
   0642 12s00r00           1860 	lcall	_Serial_GetInteger
   0645 AB 82              1861 	mov	r3,dpl
   0647 AC 83              1862 	mov	r4,dph
   0649 D0 02              1863 	pop	ar2
                           1864 ;	genCast
                           1865 ;	main.c:205: LCD_gotoxy(Lcd_row, 0);
                           1866 ;	genAssign
   064B 90s00r00           1867 	mov	dptr,#_LCD_gotoxy_PARM_2
                           1868 ;	Peephole 181	changed mov to clr
   064E E4                 1869 	clr	a
   064F F0                 1870 	movx	@dptr,a
                           1871 ;	genCall
   0650 8B 82              1872 	mov	dpl,r3
   0652 C0 02              1873 	push	ar2
   0654 12s00r00           1874 	lcall	_LCD_gotoxy
   0657 D0 02              1875 	pop	ar2
                           1876 ;	main.c:206: LCD_Putch(block + '0');
                           1877 ;	genAssign
   0659 90s00r70           1878 	mov	dptr,#_handleEEPROMMode_block_1_1
   065C E0                 1879 	movx	a,@dptr
                           1880 ;	genPlus
                           1881 ;     genPlusIncr
                           1882 ;	Peephole 236.a	used r3 instead of ar3
                           1883 ;	Peephole 214	reduced some extra moves
                           1884 ;	genCall
                           1885 ;	Peephole 215	removed some moves
   065D 24 30              1886 	add	a,#0x30
   065F FB                 1887 	mov	r3,a
                           1888 ;	Peephole 244.c	loading dpl from a instead of r3
   0660 F5 82              1889 	mov	dpl,a
   0662 C0 02              1890 	push	ar2
   0664 12s00r00           1891 	lcall	_LCD_Putch
   0667 D0 02              1892 	pop	ar2
                           1893 ;	main.c:207: LCD_Puthex(address);
                           1894 ;	genAssign
   0669 90s00r72           1895 	mov	dptr,#_handleEEPROMMode_address_1_1
   066C E0                 1896 	movx	a,@dptr
                           1897 ;	genCall
   066D FB                 1898 	mov	r3,a
                           1899 ;	Peephole 244.c	loading dpl from a instead of r3
   066E F5 82              1900 	mov	dpl,a
   0670 C0 02              1901 	push	ar2
   0672 12s00r00           1902 	lcall	_LCD_Puthex
   0675 D0 02              1903 	pop	ar2
                           1904 ;	main.c:208: LCD_Putstr(": ");
                           1905 ;	genCall
                           1906 ;	Peephole 182.a	used 16 bit load of DPTR
   0677 90s04r49           1907 	mov	dptr,#__str_33
   067A 75 F0 80           1908 	mov	b,#0x80
   067D C0 02              1909 	push	ar2
   067F 12s00r00           1910 	lcall	_LCD_Putstr
   0682 D0 02              1911 	pop	ar2
                           1912 ;	main.c:209: LCD_Puthex(lcdData);
                           1913 ;	genCall
   0684 8A 82              1914 	mov	dpl,r2
   0686 12s00r00           1915 	lcall	_LCD_Puthex
                           1916 ;	main.c:211: printf("\r\nWrote to LCD!\r\n");
                           1917 ;	genIpush
   0689 74r4C              1918 	mov	a,#__str_34
   068B C0 E0              1919 	push	acc
   068D 74s04              1920 	mov	a,#(__str_34 >> 8)
   068F C0 E0              1921 	push	acc
   0691 74 80              1922 	mov	a,#0x80
   0693 C0 E0              1923 	push	acc
                           1924 ;	genCall
   0695 12s00r00           1925 	lcall	_printf
   0698 15 81              1926 	dec	sp
   069A 15 81              1927 	dec	sp
   069C 15 81              1928 	dec	sp
                           1929 ;	main.c:212: break;
                           1930 ;	Peephole 251.a	replaced ljmp to ret with ret
   069E 22                 1931 	ret
                           1932 ;	main.c:214: case 'D':
   069F                    1933 00104$:
                           1934 ;	main.c:215: printf("\r\nPerforming an EEPROM data dump\r\n");
                           1935 ;	genIpush
   069F 74r5E              1936 	mov	a,#__str_35
   06A1 C0 E0              1937 	push	acc
   06A3 74s04              1938 	mov	a,#(__str_35 >> 8)
   06A5 C0 E0              1939 	push	acc
   06A7 74 80              1940 	mov	a,#0x80
   06A9 C0 E0              1941 	push	acc
                           1942 ;	genCall
   06AB 12s00r00           1943 	lcall	_printf
   06AE 15 81              1944 	dec	sp
   06B0 15 81              1945 	dec	sp
   06B2 15 81              1946 	dec	sp
                           1947 ;	main.c:216: printf("\r\nEnter the starting block and address");
                           1948 ;	genIpush
   06B4 74r81              1949 	mov	a,#__str_36
   06B6 C0 E0              1950 	push	acc
   06B8 74s04              1951 	mov	a,#(__str_36 >> 8)
   06BA C0 E0              1952 	push	acc
   06BC 74 80              1953 	mov	a,#0x80
   06BE C0 E0              1954 	push	acc
                           1955 ;	genCall
   06C0 12s00r00           1956 	lcall	_printf
   06C3 15 81              1957 	dec	sp
   06C5 15 81              1958 	dec	sp
   06C7 15 81              1959 	dec	sp
                           1960 ;	main.c:217: getBlockAndAddress(&address, &block);
                           1961 ;	genCast
   06C9 90s00r00           1962 	mov	dptr,#_getBlockAndAddress_PARM_2
   06CC 74r70              1963 	mov	a,#_handleEEPROMMode_block_1_1
   06CE F0                 1964 	movx	@dptr,a
   06CF A3                 1965 	inc	dptr
   06D0 74s00              1966 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   06D2 F0                 1967 	movx	@dptr,a
   06D3 A3                 1968 	inc	dptr
   06D4 74 00              1969 	mov	a,#0x0
   06D6 F0                 1970 	movx	@dptr,a
                           1971 ;	genCall
                           1972 ;	Peephole 182.a	used 16 bit load of DPTR
   06D7 90s00r72           1973 	mov	dptr,#_handleEEPROMMode_address_1_1
   06DA 75 F0 00           1974 	mov	b,#0x00
   06DD 12s00r0C           1975 	lcall	_getBlockAndAddress
                           1976 ;	main.c:218: printf("\r\nEnter the ending block and address");
                           1977 ;	genIpush
   06E0 74rA8              1978 	mov	a,#__str_37
   06E2 C0 E0              1979 	push	acc
   06E4 74s04              1980 	mov	a,#(__str_37 >> 8)
   06E6 C0 E0              1981 	push	acc
   06E8 74 80              1982 	mov	a,#0x80
   06EA C0 E0              1983 	push	acc
                           1984 ;	genCall
   06EC 12s00r00           1985 	lcall	_printf
   06EF 15 81              1986 	dec	sp
   06F1 15 81              1987 	dec	sp
   06F3 15 81              1988 	dec	sp
                           1989 ;	main.c:219: getBlockAndAddress(&end_address, &end_block);
                           1990 ;	genCast
   06F5 90s00r00           1991 	mov	dptr,#_getBlockAndAddress_PARM_2
   06F8 74r71              1992 	mov	a,#_handleEEPROMMode_end_block_1_1
   06FA F0                 1993 	movx	@dptr,a
   06FB A3                 1994 	inc	dptr
   06FC 74s00              1995 	mov	a,#(_handleEEPROMMode_end_block_1_1 >> 8)
   06FE F0                 1996 	movx	@dptr,a
   06FF A3                 1997 	inc	dptr
   0700 74 00              1998 	mov	a,#0x0
   0702 F0                 1999 	movx	@dptr,a
                           2000 ;	genCall
                           2001 ;	Peephole 182.a	used 16 bit load of DPTR
   0703 90s00r73           2002 	mov	dptr,#_handleEEPROMMode_end_address_1_1
   0706 75 F0 00           2003 	mov	b,#0x00
   0709 12s00r0C           2004 	lcall	_getBlockAndAddress
                           2005 ;	main.c:220: start_addr =( block << 8) | address;
                           2006 ;	genAssign
   070C 90s00r70           2007 	mov	dptr,#_handleEEPROMMode_block_1_1
   070F E0                 2008 	movx	a,@dptr
   0710 FA                 2009 	mov	r2,a
                           2010 ;	genCast
                           2011 ;	genLeftShift
                           2012 ;	genLeftShiftLiteral
                           2013 ;	genlshTwo
                           2014 ;	peephole 177.e	removed redundant move
   0711 8A 03              2015 	mov	ar3,r2
   0713 7A 00              2016 	mov	r2,#0x00
                           2017 ;	genAssign
   0715 90s00r72           2018 	mov	dptr,#_handleEEPROMMode_address_1_1
   0718 E0                 2019 	movx	a,@dptr
                           2020 ;	genCast
                           2021 ;	genOr
   0719 FC                 2022 	mov	r4,a
   071A 7D 00              2023 	mov	r5,#0x00
                           2024 ;	Peephole 177.d	removed redundant move
   071C 42 02              2025 	orl	ar2,a
   071E ED                 2026 	mov	a,r5
   071F 42 03              2027 	orl	ar3,a
                           2028 ;	genAssign
   0721 90s00r74           2029 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0724 EA                 2030 	mov	a,r2
   0725 F0                 2031 	movx	@dptr,a
   0726 A3                 2032 	inc	dptr
   0727 EB                 2033 	mov	a,r3
   0728 F0                 2034 	movx	@dptr,a
                           2035 ;	main.c:221: end_addr = (end_block << 8) | end_address;
                           2036 ;	genAssign
   0729 90s00r71           2037 	mov	dptr,#_handleEEPROMMode_end_block_1_1
   072C E0                 2038 	movx	a,@dptr
   072D FC                 2039 	mov	r4,a
                           2040 ;	genCast
                           2041 ;	genLeftShift
                           2042 ;	genLeftShiftLiteral
                           2043 ;	genlshTwo
                           2044 ;	peephole 177.e	removed redundant move
   072E 8C 05              2045 	mov	ar5,r4
   0730 7C 00              2046 	mov	r4,#0x00
                           2047 ;	genAssign
   0732 90s00r73           2048 	mov	dptr,#_handleEEPROMMode_end_address_1_1
   0735 E0                 2049 	movx	a,@dptr
                           2050 ;	genCast
                           2051 ;	genOr
   0736 FE                 2052 	mov	r6,a
   0737 7F 00              2053 	mov	r7,#0x00
                           2054 ;	Peephole 177.d	removed redundant move
   0739 42 04              2055 	orl	ar4,a
   073B EF                 2056 	mov	a,r7
   073C 42 05              2057 	orl	ar5,a
                           2058 ;	genAssign
   073E 90s00r76           2059 	mov	dptr,#_handleEEPROMMode_end_addr_1_1
   0741 EC                 2060 	mov	a,r4
   0742 F0                 2061 	movx	@dptr,a
   0743 A3                 2062 	inc	dptr
   0744 ED                 2063 	mov	a,r5
   0745 F0                 2064 	movx	@dptr,a
                           2065 ;	main.c:222: if (start_addr > end_addr){
                           2066 ;	genAssign
                           2067 ;	genAssign
                           2068 ;	genCmpGt
                           2069 ;	genCmp
   0746 C3                 2070 	clr	c
   0747 EC                 2071 	mov	a,r4
   0748 9A                 2072 	subb	a,r2
   0749 ED                 2073 	mov	a,r5
   074A 9B                 2074 	subb	a,r3
                           2075 ;	genIfxJump
                           2076 ;	Peephole 108.a	removed ljmp by inverse jump logic
   074B 50 16              2077 	jnc	00106$
                           2078 ;	Peephole 300	removed redundant label 00182$
                           2079 ;	main.c:223: printf("\r\nInvalid addresses. End address must be after start address");
                           2080 ;	genIpush
   074D 74rCD              2081 	mov	a,#__str_38
   074F C0 E0              2082 	push	acc
   0751 74s04              2083 	mov	a,#(__str_38 >> 8)
   0753 C0 E0              2084 	push	acc
   0755 74 80              2085 	mov	a,#0x80
   0757 C0 E0              2086 	push	acc
                           2087 ;	genCall
   0759 12s00r00           2088 	lcall	_printf
   075C 15 81              2089 	dec	sp
   075E 15 81              2090 	dec	sp
   0760 15 81              2091 	dec	sp
                           2092 ;	main.c:224: return;
                           2093 ;	genRet
                           2094 ;	Peephole 251.a	replaced ljmp to ret with ret
   0762 22                 2095 	ret
   0763                    2096 00106$:
                           2097 ;	main.c:226: printf("\r\n");
                           2098 ;	genIpush
   0763 74r0A              2099 	mov	a,#__str_39
   0765 C0 E0              2100 	push	acc
   0767 74s05              2101 	mov	a,#(__str_39 >> 8)
   0769 C0 E0              2102 	push	acc
   076B 74 80              2103 	mov	a,#0x80
   076D C0 E0              2104 	push	acc
                           2105 ;	genCall
   076F 12s00r00           2106 	lcall	_printf
   0772 15 81              2107 	dec	sp
   0774 15 81              2108 	dec	sp
   0776 15 81              2109 	dec	sp
                           2110 ;	main.c:227: while(start_addr <= end_addr){
                           2111 ;	genAssign
   0778 90s00r76           2112 	mov	dptr,#_handleEEPROMMode_end_addr_1_1
   077B E0                 2113 	movx	a,@dptr
   077C FA                 2114 	mov	r2,a
   077D A3                 2115 	inc	dptr
   077E E0                 2116 	movx	a,@dptr
   077F FB                 2117 	mov	r3,a
                           2118 ;	genAssign
   0780 8A 04              2119 	mov	ar4,r2
   0782 8B 05              2120 	mov	ar5,r3
   0784                    2121 00113$:
                           2122 ;	genAssign
   0784 90s00r74           2123 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0787 E0                 2124 	movx	a,@dptr
   0788 FE                 2125 	mov	r6,a
   0789 A3                 2126 	inc	dptr
   078A E0                 2127 	movx	a,@dptr
   078B FF                 2128 	mov	r7,a
                           2129 ;	genCmpGt
                           2130 ;	genCmp
   078C C3                 2131 	clr	c
   078D EC                 2132 	mov	a,r4
   078E 9E                 2133 	subb	a,r6
   078F ED                 2134 	mov	a,r5
   0790 9F                 2135 	subb	a,r7
                           2136 ;	genIfxJump
   0791 50 01              2137 	jnc	00183$
                           2138 ;	Peephole 251.a	replaced ljmp to ret with ret
   0793 22                 2139 	ret
   0794                    2140 00183$:
                           2141 ;	main.c:228: printf("%x: ", start_addr);
                           2142 ;	genIpush
   0794 C0 02              2143 	push	ar2
   0796 C0 03              2144 	push	ar3
   0798 C0 04              2145 	push	ar4
   079A C0 05              2146 	push	ar5
   079C C0 06              2147 	push	ar6
   079E C0 07              2148 	push	ar7
   07A0 C0 06              2149 	push	ar6
   07A2 C0 07              2150 	push	ar7
                           2151 ;	genIpush
   07A4 74r0D              2152 	mov	a,#__str_40
   07A6 C0 E0              2153 	push	acc
   07A8 74s05              2154 	mov	a,#(__str_40 >> 8)
   07AA C0 E0              2155 	push	acc
   07AC 74 80              2156 	mov	a,#0x80
   07AE C0 E0              2157 	push	acc
                           2158 ;	genCall
   07B0 12s00r00           2159 	lcall	_printf
   07B3 E5 81              2160 	mov	a,sp
   07B5 24 FB              2161 	add	a,#0xfb
   07B7 F5 81              2162 	mov	sp,a
   07B9 D0 07              2163 	pop	ar7
   07BB D0 06              2164 	pop	ar6
   07BD D0 05              2165 	pop	ar5
   07BF D0 04              2166 	pop	ar4
   07C1 D0 03              2167 	pop	ar3
   07C3 D0 02              2168 	pop	ar2
                           2169 ;	main.c:230: for (i = 0; i < 16; ++i){
                           2170 ;	genAssign
                           2171 ;	genAssign
   07C5 78 00              2172 	mov	r0,#0x00
   07C7                    2173 00109$:
                           2174 ;	genCmpLt
                           2175 ;	genCmp
   07C7 B8 10 00           2176 	cjne	r0,#0x10,00184$
   07CA                    2177 00184$:
                           2178 ;	genIfxJump
                           2179 ;	Peephole 112.b	changed ljmp to sjmp
                           2180 ;	Peephole 160.b	removed sjmp by inverse jump logic
   07CA 50 76              2181 	jnc	00168$
                           2182 ;	Peephole 300	removed redundant label 00185$
                           2183 ;	main.c:231: lcdData = EPROM_ByteRead(start_addr & 0xFF, start_addr >> 8);
                           2184 ;	genIpush
   07CC C0 04              2185 	push	ar4
   07CE C0 05              2186 	push	ar5
                           2187 ;	genAnd
   07D0 8E 01              2188 	mov	ar1,r6
   07D2 7C 00              2189 	mov	r4,#0x00
                           2190 ;	genCast
                           2191 ;	genGetByte
   07D4 90s00r00           2192 	mov	dptr,#_EPROM_ByteRead_PARM_2
   07D7 EF                 2193 	mov	a,r7
   07D8 F0                 2194 	movx	@dptr,a
                           2195 ;	genCall
   07D9 89 82              2196 	mov	dpl,r1
   07DB C0 02              2197 	push	ar2
   07DD C0 03              2198 	push	ar3
   07DF C0 05              2199 	push	ar5
   07E1 C0 06              2200 	push	ar6
   07E3 C0 07              2201 	push	ar7
   07E5 C0 00              2202 	push	ar0
   07E7 12s00r00           2203 	lcall	_EPROM_ByteRead
   07EA AC 82              2204 	mov	r4,dpl
   07EC D0 00              2205 	pop	ar0
   07EE D0 07              2206 	pop	ar7
   07F0 D0 06              2207 	pop	ar6
   07F2 D0 05              2208 	pop	ar5
   07F4 D0 03              2209 	pop	ar3
   07F6 D0 02              2210 	pop	ar2
                           2211 ;	main.c:232: printf("%x ", lcdData);
                           2212 ;	genCast
   07F8 7D 00              2213 	mov	r5,#0x00
                           2214 ;	genIpush
   07FA C0 02              2215 	push	ar2
   07FC C0 03              2216 	push	ar3
   07FE C0 04              2217 	push	ar4
   0800 C0 05              2218 	push	ar5
   0802 C0 06              2219 	push	ar6
   0804 C0 07              2220 	push	ar7
   0806 C0 00              2221 	push	ar0
   0808 C0 04              2222 	push	ar4
   080A C0 05              2223 	push	ar5
                           2224 ;	genIpush
   080C 74r12              2225 	mov	a,#__str_41
   080E C0 E0              2226 	push	acc
   0810 74s05              2227 	mov	a,#(__str_41 >> 8)
   0812 C0 E0              2228 	push	acc
   0814 74 80              2229 	mov	a,#0x80
   0816 C0 E0              2230 	push	acc
                           2231 ;	genCall
   0818 12s00r00           2232 	lcall	_printf
   081B E5 81              2233 	mov	a,sp
   081D 24 FB              2234 	add	a,#0xfb
   081F F5 81              2235 	mov	sp,a
   0821 D0 00              2236 	pop	ar0
   0823 D0 07              2237 	pop	ar7
   0825 D0 06              2238 	pop	ar6
   0827 D0 05              2239 	pop	ar5
   0829 D0 04              2240 	pop	ar4
   082B D0 03              2241 	pop	ar3
   082D D0 02              2242 	pop	ar2
                           2243 ;	main.c:233: start_addr++;
                           2244 ;	genPlus
                           2245 ;     genPlusIncr
   082F 0E                 2246 	inc	r6
   0830 BE 00 01           2247 	cjne	r6,#0x00,00186$
   0833 0F                 2248 	inc	r7
   0834                    2249 00186$:
                           2250 ;	main.c:234: if(start_addr > end_addr){
                           2251 ;	genCmpGt
                           2252 ;	genCmp
   0834 C3                 2253 	clr	c
   0835 EA                 2254 	mov	a,r2
   0836 9E                 2255 	subb	a,r6
   0837 EB                 2256 	mov	a,r3
   0838 9F                 2257 	subb	a,r7
                           2258 ;	genIpop
                           2259 ;	genIfx
                           2260 ;	genIfxJump
                           2261 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           2262 ;	Peephole 129.c	optimized condition
   0839 D0 05              2263 	pop	ar5
   083B D0 04              2264 	pop	ar4
   083D 40 03              2265 	jc	00168$
                           2266 ;	Peephole 300	removed redundant label 00187$
                           2267 ;	main.c:230: for (i = 0; i < 16; ++i){
                           2268 ;	genPlus
                           2269 ;     genPlusIncr
   083F 08                 2270 	inc	r0
                           2271 ;	Peephole 112.b	changed ljmp to sjmp
   0840 80 85              2272 	sjmp	00109$
   0842                    2273 00168$:
                           2274 ;	genAssign
   0842 90s00r74           2275 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0845 EE                 2276 	mov	a,r6
   0846 F0                 2277 	movx	@dptr,a
   0847 A3                 2278 	inc	dptr
   0848 EF                 2279 	mov	a,r7
   0849 F0                 2280 	movx	@dptr,a
                           2281 ;	main.c:238: printf("\r\n");
                           2282 ;	genIpush
   084A C0 02              2283 	push	ar2
   084C C0 03              2284 	push	ar3
   084E C0 04              2285 	push	ar4
   0850 C0 05              2286 	push	ar5
   0852 74r0A              2287 	mov	a,#__str_39
   0854 C0 E0              2288 	push	acc
   0856 74s05              2289 	mov	a,#(__str_39 >> 8)
   0858 C0 E0              2290 	push	acc
   085A 74 80              2291 	mov	a,#0x80
   085C C0 E0              2292 	push	acc
                           2293 ;	genCall
   085E 12s00r00           2294 	lcall	_printf
   0861 15 81              2295 	dec	sp
   0863 15 81              2296 	dec	sp
   0865 15 81              2297 	dec	sp
   0867 D0 05              2298 	pop	ar5
   0869 D0 04              2299 	pop	ar4
   086B D0 03              2300 	pop	ar3
   086D D0 02              2301 	pop	ar2
   086F 02s07r84           2302 	ljmp	00113$
                           2303 ;	main.c:241: case 'Y':
   0872                    2304 00116$:
                           2305 ;	main.c:242: printf("\r\n");
                           2306 ;	genIpush
   0872 74r0A              2307 	mov	a,#__str_39
   0874 C0 E0              2308 	push	acc
   0876 74s05              2309 	mov	a,#(__str_39 >> 8)
   0878 C0 E0              2310 	push	acc
   087A 74 80              2311 	mov	a,#0x80
   087C C0 E0              2312 	push	acc
                           2313 ;	genCall
   087E 12s00r00           2314 	lcall	_printf
   0881 15 81              2315 	dec	sp
   0883 15 81              2316 	dec	sp
   0885 15 81              2317 	dec	sp
                           2318 ;	main.c:246: printf("%x: ", start_addr);
                           2319 ;	genIpush
   0887 74 80              2320 	mov	a,#0x80
   0889 C0 E0              2321 	push	acc
                           2322 ;	Peephole 181	changed mov to clr
   088B E4                 2323 	clr	a
   088C C0 E0              2324 	push	acc
                           2325 ;	genIpush
   088E 74r0D              2326 	mov	a,#__str_40
   0890 C0 E0              2327 	push	acc
   0892 74s05              2328 	mov	a,#(__str_40 >> 8)
   0894 C0 E0              2329 	push	acc
   0896 74 80              2330 	mov	a,#0x80
   0898 C0 E0              2331 	push	acc
                           2332 ;	genCall
   089A 12s00r00           2333 	lcall	_printf
   089D E5 81              2334 	mov	a,sp
   089F 24 FB              2335 	add	a,#0xfb
   08A1 F5 81              2336 	mov	sp,a
                           2337 ;	main.c:247: for (i = 0; i < 16; ++i){
                           2338 ;	genAssign
   08A3 7A 80              2339 	mov	r2,#0x80
   08A5 7B 00              2340 	mov	r3,#0x00
                           2341 ;	genAssign
   08A7 7C 10              2342 	mov	r4,#0x10
   08A9                    2343 00127$:
                           2344 ;	main.c:248: LCD_SetDDRAMAddress(start_addr);
                           2345 ;	genCast
   08A9 8A 05              2346 	mov	ar5,r2
                           2347 ;	genCall
   08AB 8D 82              2348 	mov	dpl,r5
   08AD C0 02              2349 	push	ar2
   08AF C0 03              2350 	push	ar3
   08B1 C0 04              2351 	push	ar4
   08B3 12s00r00           2352 	lcall	_LCD_SetDDRAMAddress
   08B6 D0 04              2353 	pop	ar4
   08B8 D0 03              2354 	pop	ar3
   08BA D0 02              2355 	pop	ar2
                           2356 ;	main.c:249: lcdData = LCD_ReadRAM();
                           2357 ;	genCall
   08BC C0 02              2358 	push	ar2
   08BE C0 03              2359 	push	ar3
   08C0 C0 04              2360 	push	ar4
   08C2 12s00r00           2361 	lcall	_LCD_ReadRAM
   08C5 AD 82              2362 	mov	r5,dpl
   08C7 D0 04              2363 	pop	ar4
   08C9 D0 03              2364 	pop	ar3
   08CB D0 02              2365 	pop	ar2
                           2366 ;	main.c:250: printf("%x ", lcdData);
                           2367 ;	genCast
   08CD 7E 00              2368 	mov	r6,#0x00
                           2369 ;	genIpush
   08CF C0 02              2370 	push	ar2
   08D1 C0 03              2371 	push	ar3
   08D3 C0 04              2372 	push	ar4
   08D5 C0 05              2373 	push	ar5
   08D7 C0 06              2374 	push	ar6
                           2375 ;	genIpush
   08D9 74r12              2376 	mov	a,#__str_41
   08DB C0 E0              2377 	push	acc
   08DD 74s05              2378 	mov	a,#(__str_41 >> 8)
   08DF C0 E0              2379 	push	acc
   08E1 74 80              2380 	mov	a,#0x80
   08E3 C0 E0              2381 	push	acc
                           2382 ;	genCall
   08E5 12s00r00           2383 	lcall	_printf
   08E8 E5 81              2384 	mov	a,sp
   08EA 24 FB              2385 	add	a,#0xfb
   08EC F5 81              2386 	mov	sp,a
   08EE D0 04              2387 	pop	ar4
   08F0 D0 03              2388 	pop	ar3
   08F2 D0 02              2389 	pop	ar2
                           2390 ;	main.c:251: start_addr++;
                           2391 ;	genPlus
                           2392 ;     genPlusIncr
   08F4 0A                 2393 	inc	r2
   08F5 BA 00 01           2394 	cjne	r2,#0x00,00188$
   08F8 0B                 2395 	inc	r3
   08F9                    2396 00188$:
                           2397 ;	genDjnz
                           2398 ;	Peephole 112.b	changed ljmp to sjmp
                           2399 ;	Peephole 205	optimized misc jump sequence
   08F9 DC AE              2400 	djnz	r4,00127$
                           2401 ;	Peephole 300	removed redundant label 00189$
                           2402 ;	Peephole 300	removed redundant label 00190$
                           2403 ;	main.c:247: for (i = 0; i < 16; ++i){
                           2404 ;	main.c:253: printf("\r\n");
                           2405 ;	genIpush
   08FB 74r0A              2406 	mov	a,#__str_39
   08FD C0 E0              2407 	push	acc
   08FF 74s05              2408 	mov	a,#(__str_39 >> 8)
   0901 C0 E0              2409 	push	acc
   0903 74 80              2410 	mov	a,#0x80
   0905 C0 E0              2411 	push	acc
                           2412 ;	genCall
   0907 12s00r00           2413 	lcall	_printf
   090A 15 81              2414 	dec	sp
   090C 15 81              2415 	dec	sp
   090E 15 81              2416 	dec	sp
                           2417 ;	main.c:256: printf("%x: ", start_addr);
                           2418 ;	genIpush
   0910 74 C0              2419 	mov	a,#0xC0
   0912 C0 E0              2420 	push	acc
                           2421 ;	Peephole 181	changed mov to clr
   0914 E4                 2422 	clr	a
   0915 C0 E0              2423 	push	acc
                           2424 ;	genIpush
   0917 74r0D              2425 	mov	a,#__str_40
   0919 C0 E0              2426 	push	acc
   091B 74s05              2427 	mov	a,#(__str_40 >> 8)
   091D C0 E0              2428 	push	acc
   091F 74 80              2429 	mov	a,#0x80
   0921 C0 E0              2430 	push	acc
                           2431 ;	genCall
   0923 12s00r00           2432 	lcall	_printf
   0926 E5 81              2433 	mov	a,sp
   0928 24 FB              2434 	add	a,#0xfb
   092A F5 81              2435 	mov	sp,a
                           2436 ;	main.c:257: for (i = 0; i < 16; ++i){
                           2437 ;	genAssign
   092C 7A C0              2438 	mov	r2,#0xC0
   092E 7B 00              2439 	mov	r3,#0x00
                           2440 ;	genAssign
   0930 7C 10              2441 	mov	r4,#0x10
   0932                    2442 00130$:
                           2443 ;	main.c:258: LCD_SetDDRAMAddress(start_addr);
                           2444 ;	genCast
   0932 8A 05              2445 	mov	ar5,r2
                           2446 ;	genCall
   0934 8D 82              2447 	mov	dpl,r5
   0936 C0 02              2448 	push	ar2
   0938 C0 03              2449 	push	ar3
   093A C0 04              2450 	push	ar4
   093C 12s00r00           2451 	lcall	_LCD_SetDDRAMAddress
   093F D0 04              2452 	pop	ar4
   0941 D0 03              2453 	pop	ar3
   0943 D0 02              2454 	pop	ar2
                           2455 ;	main.c:259: lcdData = LCD_ReadRAM();
                           2456 ;	genCall
   0945 C0 02              2457 	push	ar2
   0947 C0 03              2458 	push	ar3
   0949 C0 04              2459 	push	ar4
   094B 12s00r00           2460 	lcall	_LCD_ReadRAM
   094E AD 82              2461 	mov	r5,dpl
   0950 D0 04              2462 	pop	ar4
   0952 D0 03              2463 	pop	ar3
   0954 D0 02              2464 	pop	ar2
                           2465 ;	main.c:260: printf("%x ", lcdData);
                           2466 ;	genCast
   0956 7E 00              2467 	mov	r6,#0x00
                           2468 ;	genIpush
   0958 C0 02              2469 	push	ar2
   095A C0 03              2470 	push	ar3
   095C C0 04              2471 	push	ar4
   095E C0 05              2472 	push	ar5
   0960 C0 06              2473 	push	ar6
                           2474 ;	genIpush
   0962 74r12              2475 	mov	a,#__str_41
   0964 C0 E0              2476 	push	acc
   0966 74s05              2477 	mov	a,#(__str_41 >> 8)
   0968 C0 E0              2478 	push	acc
   096A 74 80              2479 	mov	a,#0x80
   096C C0 E0              2480 	push	acc
                           2481 ;	genCall
   096E 12s00r00           2482 	lcall	_printf
   0971 E5 81              2483 	mov	a,sp
   0973 24 FB              2484 	add	a,#0xfb
   0975 F5 81              2485 	mov	sp,a
   0977 D0 04              2486 	pop	ar4
   0979 D0 03              2487 	pop	ar3
   097B D0 02              2488 	pop	ar2
                           2489 ;	main.c:261: start_addr++;
                           2490 ;	genPlus
                           2491 ;     genPlusIncr
   097D 0A                 2492 	inc	r2
   097E BA 00 01           2493 	cjne	r2,#0x00,00191$
   0981 0B                 2494 	inc	r3
   0982                    2495 00191$:
                           2496 ;	genDjnz
                           2497 ;	Peephole 112.b	changed ljmp to sjmp
                           2498 ;	Peephole 205	optimized misc jump sequence
   0982 DC AE              2499 	djnz	r4,00130$
                           2500 ;	Peephole 300	removed redundant label 00192$
                           2501 ;	Peephole 300	removed redundant label 00193$
                           2502 ;	main.c:257: for (i = 0; i < 16; ++i){
                           2503 ;	main.c:263: printf("\r\n");
                           2504 ;	genIpush
   0984 74r0A              2505 	mov	a,#__str_39
   0986 C0 E0              2506 	push	acc
   0988 74s05              2507 	mov	a,#(__str_39 >> 8)
   098A C0 E0              2508 	push	acc
   098C 74 80              2509 	mov	a,#0x80
   098E C0 E0              2510 	push	acc
                           2511 ;	genCall
   0990 12s00r00           2512 	lcall	_printf
   0993 15 81              2513 	dec	sp
   0995 15 81              2514 	dec	sp
   0997 15 81              2515 	dec	sp
                           2516 ;	main.c:266: printf("%x: ", start_addr);
                           2517 ;	genIpush
   0999 74 90              2518 	mov	a,#0x90
   099B C0 E0              2519 	push	acc
                           2520 ;	Peephole 181	changed mov to clr
   099D E4                 2521 	clr	a
   099E C0 E0              2522 	push	acc
                           2523 ;	genIpush
   09A0 74r0D              2524 	mov	a,#__str_40
   09A2 C0 E0              2525 	push	acc
   09A4 74s05              2526 	mov	a,#(__str_40 >> 8)
   09A6 C0 E0              2527 	push	acc
   09A8 74 80              2528 	mov	a,#0x80
   09AA C0 E0              2529 	push	acc
                           2530 ;	genCall
   09AC 12s00r00           2531 	lcall	_printf
   09AF E5 81              2532 	mov	a,sp
   09B1 24 FB              2533 	add	a,#0xfb
   09B3 F5 81              2534 	mov	sp,a
                           2535 ;	main.c:267: for (i = 0; i < 16; ++i){
                           2536 ;	genAssign
   09B5 7A 90              2537 	mov	r2,#0x90
   09B7 7B 00              2538 	mov	r3,#0x00
                           2539 ;	genAssign
   09B9 7C 10              2540 	mov	r4,#0x10
   09BB                    2541 00133$:
                           2542 ;	main.c:268: LCD_SetDDRAMAddress(start_addr);
                           2543 ;	genCast
   09BB 8A 05              2544 	mov	ar5,r2
                           2545 ;	genCall
   09BD 8D 82              2546 	mov	dpl,r5
   09BF C0 02              2547 	push	ar2
   09C1 C0 03              2548 	push	ar3
   09C3 C0 04              2549 	push	ar4
   09C5 12s00r00           2550 	lcall	_LCD_SetDDRAMAddress
   09C8 D0 04              2551 	pop	ar4
   09CA D0 03              2552 	pop	ar3
   09CC D0 02              2553 	pop	ar2
                           2554 ;	main.c:269: lcdData = LCD_ReadRAM();
                           2555 ;	genCall
   09CE C0 02              2556 	push	ar2
   09D0 C0 03              2557 	push	ar3
   09D2 C0 04              2558 	push	ar4
   09D4 12s00r00           2559 	lcall	_LCD_ReadRAM
   09D7 AD 82              2560 	mov	r5,dpl
   09D9 D0 04              2561 	pop	ar4
   09DB D0 03              2562 	pop	ar3
   09DD D0 02              2563 	pop	ar2
                           2564 ;	main.c:270: printf("%x ", lcdData);
                           2565 ;	genCast
   09DF 7E 00              2566 	mov	r6,#0x00
                           2567 ;	genIpush
   09E1 C0 02              2568 	push	ar2
   09E3 C0 03              2569 	push	ar3
   09E5 C0 04              2570 	push	ar4
   09E7 C0 05              2571 	push	ar5
   09E9 C0 06              2572 	push	ar6
                           2573 ;	genIpush
   09EB 74r12              2574 	mov	a,#__str_41
   09ED C0 E0              2575 	push	acc
   09EF 74s05              2576 	mov	a,#(__str_41 >> 8)
   09F1 C0 E0              2577 	push	acc
   09F3 74 80              2578 	mov	a,#0x80
   09F5 C0 E0              2579 	push	acc
                           2580 ;	genCall
   09F7 12s00r00           2581 	lcall	_printf
   09FA E5 81              2582 	mov	a,sp
   09FC 24 FB              2583 	add	a,#0xfb
   09FE F5 81              2584 	mov	sp,a
   0A00 D0 04              2585 	pop	ar4
   0A02 D0 03              2586 	pop	ar3
   0A04 D0 02              2587 	pop	ar2
                           2588 ;	main.c:271: start_addr++;
                           2589 ;	genPlus
                           2590 ;     genPlusIncr
   0A06 0A                 2591 	inc	r2
   0A07 BA 00 01           2592 	cjne	r2,#0x00,00194$
   0A0A 0B                 2593 	inc	r3
   0A0B                    2594 00194$:
                           2595 ;	genDjnz
                           2596 ;	Peephole 112.b	changed ljmp to sjmp
                           2597 ;	Peephole 205	optimized misc jump sequence
   0A0B DC AE              2598 	djnz	r4,00133$
                           2599 ;	Peephole 300	removed redundant label 00195$
                           2600 ;	Peephole 300	removed redundant label 00196$
                           2601 ;	main.c:267: for (i = 0; i < 16; ++i){
                           2602 ;	main.c:273: printf("\r\n");
                           2603 ;	genIpush
   0A0D 74r0A              2604 	mov	a,#__str_39
   0A0F C0 E0              2605 	push	acc
   0A11 74s05              2606 	mov	a,#(__str_39 >> 8)
   0A13 C0 E0              2607 	push	acc
   0A15 74 80              2608 	mov	a,#0x80
   0A17 C0 E0              2609 	push	acc
                           2610 ;	genCall
   0A19 12s00r00           2611 	lcall	_printf
   0A1C 15 81              2612 	dec	sp
   0A1E 15 81              2613 	dec	sp
   0A20 15 81              2614 	dec	sp
                           2615 ;	main.c:276: printf("%x: ", start_addr);
                           2616 ;	genIpush
   0A22 74 D0              2617 	mov	a,#0xD0
   0A24 C0 E0              2618 	push	acc
                           2619 ;	Peephole 181	changed mov to clr
   0A26 E4                 2620 	clr	a
   0A27 C0 E0              2621 	push	acc
                           2622 ;	genIpush
   0A29 74r0D              2623 	mov	a,#__str_40
   0A2B C0 E0              2624 	push	acc
   0A2D 74s05              2625 	mov	a,#(__str_40 >> 8)
   0A2F C0 E0              2626 	push	acc
   0A31 74 80              2627 	mov	a,#0x80
   0A33 C0 E0              2628 	push	acc
                           2629 ;	genCall
   0A35 12s00r00           2630 	lcall	_printf
   0A38 E5 81              2631 	mov	a,sp
   0A3A 24 FB              2632 	add	a,#0xfb
   0A3C F5 81              2633 	mov	sp,a
                           2634 ;	main.c:277: for (i = 0; i < 16; ++i){
                           2635 ;	genAssign
   0A3E 7A D0              2636 	mov	r2,#0xD0
   0A40 7B 00              2637 	mov	r3,#0x00
                           2638 ;	genAssign
   0A42 7C 10              2639 	mov	r4,#0x10
   0A44                    2640 00136$:
                           2641 ;	main.c:278: LCD_SetDDRAMAddress(start_addr);
                           2642 ;	genCast
   0A44 8A 05              2643 	mov	ar5,r2
                           2644 ;	genCall
   0A46 8D 82              2645 	mov	dpl,r5
   0A48 C0 02              2646 	push	ar2
   0A4A C0 03              2647 	push	ar3
   0A4C C0 04              2648 	push	ar4
   0A4E 12s00r00           2649 	lcall	_LCD_SetDDRAMAddress
   0A51 D0 04              2650 	pop	ar4
   0A53 D0 03              2651 	pop	ar3
   0A55 D0 02              2652 	pop	ar2
                           2653 ;	main.c:279: lcdData = LCD_ReadRAM();
                           2654 ;	genCall
   0A57 C0 02              2655 	push	ar2
   0A59 C0 03              2656 	push	ar3
   0A5B C0 04              2657 	push	ar4
   0A5D 12s00r00           2658 	lcall	_LCD_ReadRAM
   0A60 AD 82              2659 	mov	r5,dpl
   0A62 D0 04              2660 	pop	ar4
   0A64 D0 03              2661 	pop	ar3
   0A66 D0 02              2662 	pop	ar2
                           2663 ;	main.c:280: printf("%x ", lcdData);
                           2664 ;	genCast
   0A68 7E 00              2665 	mov	r6,#0x00
                           2666 ;	genIpush
   0A6A C0 02              2667 	push	ar2
   0A6C C0 03              2668 	push	ar3
   0A6E C0 04              2669 	push	ar4
   0A70 C0 05              2670 	push	ar5
   0A72 C0 06              2671 	push	ar6
                           2672 ;	genIpush
   0A74 74r12              2673 	mov	a,#__str_41
   0A76 C0 E0              2674 	push	acc
   0A78 74s05              2675 	mov	a,#(__str_41 >> 8)
   0A7A C0 E0              2676 	push	acc
   0A7C 74 80              2677 	mov	a,#0x80
   0A7E C0 E0              2678 	push	acc
                           2679 ;	genCall
   0A80 12s00r00           2680 	lcall	_printf
   0A83 E5 81              2681 	mov	a,sp
   0A85 24 FB              2682 	add	a,#0xfb
   0A87 F5 81              2683 	mov	sp,a
   0A89 D0 04              2684 	pop	ar4
   0A8B D0 03              2685 	pop	ar3
   0A8D D0 02              2686 	pop	ar2
                           2687 ;	main.c:281: start_addr++;
                           2688 ;	genPlus
                           2689 ;     genPlusIncr
   0A8F 0A                 2690 	inc	r2
   0A90 BA 00 01           2691 	cjne	r2,#0x00,00197$
   0A93 0B                 2692 	inc	r3
   0A94                    2693 00197$:
                           2694 ;	genDjnz
                           2695 ;	Peephole 112.b	changed ljmp to sjmp
                           2696 ;	Peephole 205	optimized misc jump sequence
   0A94 DC AE              2697 	djnz	r4,00136$
                           2698 ;	Peephole 300	removed redundant label 00198$
                           2699 ;	Peephole 300	removed redundant label 00199$
                           2700 ;	main.c:277: for (i = 0; i < 16; ++i){
                           2701 ;	main.c:283: printf("\r\n");
                           2702 ;	genIpush
   0A96 74r0A              2703 	mov	a,#__str_39
   0A98 C0 E0              2704 	push	acc
   0A9A 74s05              2705 	mov	a,#(__str_39 >> 8)
   0A9C C0 E0              2706 	push	acc
   0A9E 74 80              2707 	mov	a,#0x80
   0AA0 C0 E0              2708 	push	acc
                           2709 ;	genCall
   0AA2 12s00r00           2710 	lcall	_printf
   0AA5 15 81              2711 	dec	sp
   0AA7 15 81              2712 	dec	sp
   0AA9 15 81              2713 	dec	sp
                           2714 ;	main.c:286: break;
                           2715 ;	Peephole 251.a	replaced ljmp to ret with ret
   0AAB 22                 2716 	ret
                           2717 ;	main.c:287: case 'G':
   0AAC                    2718 00117$:
                           2719 ;	main.c:288: printf("\r\n");
                           2720 ;	genIpush
   0AAC 74r0A              2721 	mov	a,#__str_39
   0AAE C0 E0              2722 	push	acc
   0AB0 74s05              2723 	mov	a,#(__str_39 >> 8)
   0AB2 C0 E0              2724 	push	acc
   0AB4 74 80              2725 	mov	a,#0x80
   0AB6 C0 E0              2726 	push	acc
                           2727 ;	genCall
   0AB8 12s00r00           2728 	lcall	_printf
   0ABB 15 81              2729 	dec	sp
   0ABD 15 81              2730 	dec	sp
   0ABF 15 81              2731 	dec	sp
                           2732 ;	main.c:290: EA = 0;     //Disable interrupts temporarily. Shared globals
                           2733 ;	genAssign
   0AC1 C2 AF              2734 	clr	_EA
                           2735 ;	main.c:291: Saved_Address = LCD_ReadAddr();
                           2736 ;	genCall
   0AC3 12s00r00           2737 	lcall	_LCD_ReadAddr
   0AC6 E5 82              2738 	mov	a,dpl
                           2739 ;	genAssign
   0AC8 90s00r00           2740 	mov	dptr,#_Saved_Address
   0ACB F0                 2741 	movx	@dptr,a
                           2742 ;	main.c:292: CG_Accessed = true;
                           2743 ;	genAssign
   0ACC D2*00              2744 	setb	_CG_Accessed
                           2745 ;	main.c:293: EA = 1;
                           2746 ;	genAssign
   0ACE D2 AF              2747 	setb	_EA
                           2748 ;	main.c:296: start_addr = 0x40;
                           2749 ;	genAssign
   0AD0 90s00r74           2750 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0AD3 74 40              2751 	mov	a,#0x40
   0AD5 F0                 2752 	movx	@dptr,a
   0AD6 E4                 2753 	clr	a
   0AD7 A3                 2754 	inc	dptr
   0AD8 F0                 2755 	movx	@dptr,a
                           2756 ;	main.c:298: while (start_addr < 0x80){
   0AD9                    2757 00118$:
                           2758 ;	genAssign
   0AD9 90s00r74           2759 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0ADC E0                 2760 	movx	a,@dptr
   0ADD FA                 2761 	mov	r2,a
   0ADE A3                 2762 	inc	dptr
   0ADF E0                 2763 	movx	a,@dptr
   0AE0 FB                 2764 	mov	r3,a
                           2765 ;	genCmpLt
                           2766 ;	genCmp
   0AE1 C3                 2767 	clr	c
   0AE2 EA                 2768 	mov	a,r2
   0AE3 94 80              2769 	subb	a,#0x80
   0AE5 EB                 2770 	mov	a,r3
   0AE6 94 00              2771 	subb	a,#0x00
                           2772 ;	genIfxJump
   0AE8 40 03              2773 	jc	00200$
   0AEA 02s0Br82           2774 	ljmp	00120$
   0AED                    2775 00200$:
                           2776 ;	main.c:299: printf("%x: ", start_addr);
                           2777 ;	genIpush
   0AED C0 02              2778 	push	ar2
   0AEF C0 03              2779 	push	ar3
   0AF1 C0 02              2780 	push	ar2
   0AF3 C0 03              2781 	push	ar3
                           2782 ;	genIpush
   0AF5 74r0D              2783 	mov	a,#__str_40
   0AF7 C0 E0              2784 	push	acc
   0AF9 74s05              2785 	mov	a,#(__str_40 >> 8)
   0AFB C0 E0              2786 	push	acc
   0AFD 74 80              2787 	mov	a,#0x80
   0AFF C0 E0              2788 	push	acc
                           2789 ;	genCall
   0B01 12s00r00           2790 	lcall	_printf
   0B04 E5 81              2791 	mov	a,sp
   0B06 24 FB              2792 	add	a,#0xfb
   0B08 F5 81              2793 	mov	sp,a
   0B0A D0 03              2794 	pop	ar3
   0B0C D0 02              2795 	pop	ar2
                           2796 ;	main.c:301: for (i = 0; i < 16; ++i){
                           2797 ;	genAssign
                           2798 ;	genAssign
   0B0E 7C 10              2799 	mov	r4,#0x10
   0B10                    2800 00139$:
                           2801 ;	main.c:302: LCD_SetCGRAMAddress(start_addr);
                           2802 ;	genCast
   0B10 8A 05              2803 	mov	ar5,r2
                           2804 ;	genCall
   0B12 8D 82              2805 	mov	dpl,r5
   0B14 C0 02              2806 	push	ar2
   0B16 C0 03              2807 	push	ar3
   0B18 C0 04              2808 	push	ar4
   0B1A 12s00r00           2809 	lcall	_LCD_SetCGRAMAddress
   0B1D D0 04              2810 	pop	ar4
   0B1F D0 03              2811 	pop	ar3
   0B21 D0 02              2812 	pop	ar2
                           2813 ;	main.c:303: lcdData = LCD_ReadRAM();
                           2814 ;	genCall
   0B23 C0 02              2815 	push	ar2
   0B25 C0 03              2816 	push	ar3
   0B27 C0 04              2817 	push	ar4
   0B29 12s00r00           2818 	lcall	_LCD_ReadRAM
   0B2C AD 82              2819 	mov	r5,dpl
   0B2E D0 04              2820 	pop	ar4
   0B30 D0 03              2821 	pop	ar3
   0B32 D0 02              2822 	pop	ar2
                           2823 ;	main.c:304: printf("%x ", lcdData);
                           2824 ;	genCast
   0B34 7E 00              2825 	mov	r6,#0x00
                           2826 ;	genIpush
   0B36 C0 02              2827 	push	ar2
   0B38 C0 03              2828 	push	ar3
   0B3A C0 04              2829 	push	ar4
   0B3C C0 05              2830 	push	ar5
   0B3E C0 06              2831 	push	ar6
                           2832 ;	genIpush
   0B40 74r12              2833 	mov	a,#__str_41
   0B42 C0 E0              2834 	push	acc
   0B44 74s05              2835 	mov	a,#(__str_41 >> 8)
   0B46 C0 E0              2836 	push	acc
   0B48 74 80              2837 	mov	a,#0x80
   0B4A C0 E0              2838 	push	acc
                           2839 ;	genCall
   0B4C 12s00r00           2840 	lcall	_printf
   0B4F E5 81              2841 	mov	a,sp
   0B51 24 FB              2842 	add	a,#0xfb
   0B53 F5 81              2843 	mov	sp,a
   0B55 D0 04              2844 	pop	ar4
   0B57 D0 03              2845 	pop	ar3
   0B59 D0 02              2846 	pop	ar2
                           2847 ;	main.c:305: start_addr++;
                           2848 ;	genPlus
                           2849 ;     genPlusIncr
   0B5B 0A                 2850 	inc	r2
   0B5C BA 00 01           2851 	cjne	r2,#0x00,00201$
   0B5F 0B                 2852 	inc	r3
   0B60                    2853 00201$:
                           2854 ;	genDjnz
                           2855 ;	Peephole 112.b	changed ljmp to sjmp
                           2856 ;	Peephole 205	optimized misc jump sequence
   0B60 DC AE              2857 	djnz	r4,00139$
                           2858 ;	Peephole 300	removed redundant label 00202$
                           2859 ;	Peephole 300	removed redundant label 00203$
                           2860 ;	main.c:301: for (i = 0; i < 16; ++i){
                           2861 ;	main.c:307: printf("\r\n");
                           2862 ;	genAssign
   0B62 90s00r74           2863 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0B65 EA                 2864 	mov	a,r2
   0B66 F0                 2865 	movx	@dptr,a
   0B67 A3                 2866 	inc	dptr
   0B68 EB                 2867 	mov	a,r3
   0B69 F0                 2868 	movx	@dptr,a
                           2869 ;	genIpush
   0B6A 74r0A              2870 	mov	a,#__str_39
   0B6C C0 E0              2871 	push	acc
   0B6E 74s05              2872 	mov	a,#(__str_39 >> 8)
   0B70 C0 E0              2873 	push	acc
   0B72 74 80              2874 	mov	a,#0x80
   0B74 C0 E0              2875 	push	acc
                           2876 ;	genCall
   0B76 12s00r00           2877 	lcall	_printf
   0B79 15 81              2878 	dec	sp
   0B7B 15 81              2879 	dec	sp
   0B7D 15 81              2880 	dec	sp
   0B7F 02s0ArD9           2881 	ljmp	00118$
   0B82                    2882 00120$:
                           2883 ;	main.c:310: LCD_SetDDRAMAddress(Saved_Address);
                           2884 ;	genAssign
   0B82 90s00r00           2885 	mov	dptr,#_Saved_Address
   0B85 E0                 2886 	movx	a,@dptr
                           2887 ;	genCall
   0B86 FA                 2888 	mov	r2,a
                           2889 ;	Peephole 244.c	loading dpl from a instead of r2
   0B87 F5 82              2890 	mov	dpl,a
   0B89 12s00r00           2891 	lcall	_LCD_SetDDRAMAddress
                           2892 ;	main.c:311: EA = 0;
                           2893 ;	genAssign
   0B8C C2 AF              2894 	clr	_EA
                           2895 ;	main.c:312: CG_Accessed = false;
                           2896 ;	genAssign
   0B8E C2*00              2897 	clr	_CG_Accessed
                           2898 ;	main.c:313: EA = 1;
                           2899 ;	genAssign
   0B90 D2 AF              2900 	setb	_EA
                           2901 ;	main.c:314: TimerRedraw();
                           2902 ;	genCall
                           2903 ;	main.c:315: break;
                           2904 ;	main.c:316: case 'r':
                           2905 ;	Peephole 112.b	changed ljmp to sjmp
                           2906 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2907 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0B92 02s00r00           2908 	ljmp	_TimerRedraw
   0B95                    2909 00121$:
                           2910 ;	main.c:317: mode = MAIN_MODE;
                           2911 ;	genAssign
   0B95 90s00r00           2912 	mov	dptr,#_mode
                           2913 ;	Peephole 181	changed mov to clr
   0B98 E4                 2914 	clr	a
   0B99 F0                 2915 	movx	@dptr,a
                           2916 ;	main.c:318: MainMenu();
                           2917 ;	genCall
                           2918 ;	main.c:319: break;
                           2919 ;	main.c:320: case 'H':
                           2920 ;	Peephole 112.b	changed ljmp to sjmp
                           2921 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2922 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0B9A 02s0ErEB           2923 	ljmp	_MainMenu
   0B9D                    2924 00122$:
                           2925 ;	main.c:321: EEPROM_Menu();
                           2926 ;	genCall
                           2927 ;	main.c:325: }
                           2928 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0B9D 02s04r21           2929 	ljmp	_EEPROM_Menu
                           2930 ;
                           2931 ;------------------------------------------------------------
                           2932 ;Allocation info for local variables in function 'CLOCK_Menu'
                           2933 ;------------------------------------------------------------
                           2934 ;------------------------------------------------------------
                           2935 ;	main.c:329: void CLOCK_Menu(void){
                           2936 ;	-----------------------------------------
                           2937 ;	 function CLOCK_Menu
                           2938 ;	-----------------------------------------
   0BA0                    2939 _CLOCK_Menu:
                           2940 ;	main.c:330: printf("\r\nIn Clock Mode");
                           2941 ;	genIpush
   0BA0 74r16              2942 	mov	a,#__str_42
   0BA2 C0 E0              2943 	push	acc
   0BA4 74s05              2944 	mov	a,#(__str_42 >> 8)
   0BA6 C0 E0              2945 	push	acc
   0BA8 74 80              2946 	mov	a,#0x80
   0BAA C0 E0              2947 	push	acc
                           2948 ;	genCall
   0BAC 12s00r00           2949 	lcall	_printf
   0BAF 15 81              2950 	dec	sp
   0BB1 15 81              2951 	dec	sp
   0BB3 15 81              2952 	dec	sp
                           2953 ;	main.c:331: printf("\r\nPress 'H' for help");
                           2954 ;	genIpush
   0BB5 74r92              2955 	mov	a,#__str_4
   0BB7 C0 E0              2956 	push	acc
   0BB9 74s00              2957 	mov	a,#(__str_4 >> 8)
   0BBB C0 E0              2958 	push	acc
   0BBD 74 80              2959 	mov	a,#0x80
   0BBF C0 E0              2960 	push	acc
                           2961 ;	genCall
   0BC1 12s00r00           2962 	lcall	_printf
   0BC4 15 81              2963 	dec	sp
   0BC6 15 81              2964 	dec	sp
   0BC8 15 81              2965 	dec	sp
                           2966 ;	main.c:332: printf("\r\nPress 'T' to stop the clock");
                           2967 ;	genIpush
   0BCA 74r26              2968 	mov	a,#__str_43
   0BCC C0 E0              2969 	push	acc
   0BCE 74s05              2970 	mov	a,#(__str_43 >> 8)
   0BD0 C0 E0              2971 	push	acc
   0BD2 74 80              2972 	mov	a,#0x80
   0BD4 C0 E0              2973 	push	acc
                           2974 ;	genCall
   0BD6 12s00r00           2975 	lcall	_printf
   0BD9 15 81              2976 	dec	sp
   0BDB 15 81              2977 	dec	sp
   0BDD 15 81              2978 	dec	sp
                           2979 ;	main.c:333: printf("\r\nPress 'S' to start the clock again");
                           2980 ;	genIpush
   0BDF 74r44              2981 	mov	a,#__str_44
   0BE1 C0 E0              2982 	push	acc
   0BE3 74s05              2983 	mov	a,#(__str_44 >> 8)
   0BE5 C0 E0              2984 	push	acc
   0BE7 74 80              2985 	mov	a,#0x80
   0BE9 C0 E0              2986 	push	acc
                           2987 ;	genCall
   0BEB 12s00r00           2988 	lcall	_printf
   0BEE 15 81              2989 	dec	sp
   0BF0 15 81              2990 	dec	sp
   0BF2 15 81              2991 	dec	sp
                           2992 ;	main.c:334: printf("\r\nPress 'O' to reset the clock to 0");
                           2993 ;	genIpush
   0BF4 74r69              2994 	mov	a,#__str_45
   0BF6 C0 E0              2995 	push	acc
   0BF8 74s05              2996 	mov	a,#(__str_45 >> 8)
   0BFA C0 E0              2997 	push	acc
   0BFC 74 80              2998 	mov	a,#0x80
   0BFE C0 E0              2999 	push	acc
                           3000 ;	genCall
   0C00 12s00r00           3001 	lcall	_printf
   0C03 15 81              3002 	dec	sp
   0C05 15 81              3003 	dec	sp
   0C07 15 81              3004 	dec	sp
                           3005 ;	main.c:335: printf("\r\nPress 'N' to create a new alarm");
                           3006 ;	genIpush
   0C09 74r8D              3007 	mov	a,#__str_46
   0C0B C0 E0              3008 	push	acc
   0C0D 74s05              3009 	mov	a,#(__str_46 >> 8)
   0C0F C0 E0              3010 	push	acc
   0C11 74 80              3011 	mov	a,#0x80
   0C13 C0 E0              3012 	push	acc
                           3013 ;	genCall
   0C15 12s00r00           3014 	lcall	_printf
   0C18 15 81              3015 	dec	sp
   0C1A 15 81              3016 	dec	sp
   0C1C 15 81              3017 	dec	sp
                           3018 ;	main.c:336: printf("\r\nPress 'C' to view count for each alarm");
                           3019 ;	genIpush
   0C1E 74rAF              3020 	mov	a,#__str_47
   0C20 C0 E0              3021 	push	acc
   0C22 74s05              3022 	mov	a,#(__str_47 >> 8)
   0C24 C0 E0              3023 	push	acc
   0C26 74 80              3024 	mov	a,#0x80
   0C28 C0 E0              3025 	push	acc
                           3026 ;	genCall
   0C2A 12s00r00           3027 	lcall	_printf
   0C2D 15 81              3028 	dec	sp
   0C2F 15 81              3029 	dec	sp
   0C31 15 81              3030 	dec	sp
                           3031 ;	main.c:337: printf("\r\nPress 'D' to disable an alarm");
                           3032 ;	genIpush
   0C33 74rD8              3033 	mov	a,#__str_48
   0C35 C0 E0              3034 	push	acc
   0C37 74s05              3035 	mov	a,#(__str_48 >> 8)
   0C39 C0 E0              3036 	push	acc
   0C3B 74 80              3037 	mov	a,#0x80
   0C3D C0 E0              3038 	push	acc
                           3039 ;	genCall
   0C3F 12s00r00           3040 	lcall	_printf
   0C42 15 81              3041 	dec	sp
   0C44 15 81              3042 	dec	sp
   0C46 15 81              3043 	dec	sp
                           3044 ;	main.c:338: printf("\r\nPress 'E' to reenable an alarm");
                           3045 ;	genIpush
   0C48 74rF8              3046 	mov	a,#__str_49
   0C4A C0 E0              3047 	push	acc
   0C4C 74s05              3048 	mov	a,#(__str_49 >> 8)
   0C4E C0 E0              3049 	push	acc
   0C50 74 80              3050 	mov	a,#0x80
   0C52 C0 E0              3051 	push	acc
                           3052 ;	genCall
   0C54 12s00r00           3053 	lcall	_printf
   0C57 15 81              3054 	dec	sp
   0C59 15 81              3055 	dec	sp
   0C5B 15 81              3056 	dec	sp
                           3057 ;	main.c:339: printf("\r\nPress 'r' to return to main menu\r\n");
                           3058 ;	genIpush
   0C5D 74rBD              3059 	mov	a,#__str_13
   0C5F C0 E0              3060 	push	acc
   0C61 74s01              3061 	mov	a,#(__str_13 >> 8)
   0C63 C0 E0              3062 	push	acc
   0C65 74 80              3063 	mov	a,#0x80
   0C67 C0 E0              3064 	push	acc
                           3065 ;	genCall
   0C69 12s00r00           3066 	lcall	_printf
   0C6C 15 81              3067 	dec	sp
   0C6E 15 81              3068 	dec	sp
   0C70 15 81              3069 	dec	sp
                           3070 ;	Peephole 300	removed redundant label 00101$
   0C72 22                 3071 	ret
                           3072 ;------------------------------------------------------------
                           3073 ;Allocation info for local variables in function 'handleCLOCKMode'
                           3074 ;------------------------------------------------------------
                           3075 ;c                         Allocated with name '_handleCLOCKMode_c_1_1'
                           3076 ;alarm_duration            Allocated with name '_handleCLOCKMode_alarm_duration_1_1'
                           3077 ;i                         Allocated with name '_handleCLOCKMode_i_1_1'
                           3078 ;------------------------------------------------------------
                           3079 ;	main.c:343: void handleCLOCKMode(char c){
                           3080 ;	-----------------------------------------
                           3081 ;	 function handleCLOCKMode
                           3082 ;	-----------------------------------------
   0C73                    3083 _handleCLOCKMode:
                           3084 ;	genReceive
   0C73 E5 82              3085 	mov	a,dpl
   0C75 90s00r78           3086 	mov	dptr,#_handleCLOCKMode_c_1_1
   0C78 F0                 3087 	movx	@dptr,a
                           3088 ;	main.c:346: switch(c){
                           3089 ;	genAssign
   0C79 90s00r78           3090 	mov	dptr,#_handleCLOCKMode_c_1_1
   0C7C E0                 3091 	movx	a,@dptr
   0C7D FA                 3092 	mov	r2,a
                           3093 ;	genCmpEq
                           3094 ;	gencjneshort
   0C7E BA 43 03           3095 	cjne	r2,#0x43,00147$
   0C81 02s0Dr1B           3096 	ljmp	00140$
   0C84                    3097 00147$:
                           3098 ;	genCmpEq
                           3099 ;	gencjneshort
   0C84 BA 44 03           3100 	cjne	r2,#0x44,00148$
   0C87 02s0DrC2           3101 	ljmp	00109$
   0C8A                    3102 00148$:
                           3103 ;	genCmpEq
                           3104 ;	gencjneshort
   0C8A BA 45 03           3105 	cjne	r2,#0x45,00149$
   0C8D 02s0Er43           3106 	ljmp	00113$
   0C90                    3107 00149$:
                           3108 ;	genCmpEq
                           3109 ;	gencjneshort
   0C90 BA 48 03           3110 	cjne	r2,#0x48,00150$
   0C93 02s0ErE8           3111 	ljmp	00120$
   0C96                    3112 00150$:
                           3113 ;	genCmpEq
                           3114 ;	gencjneshort
   0C96 BA 4E 02           3115 	cjne	r2,#0x4E,00151$
                           3116 ;	Peephole 112.b	changed ljmp to sjmp
   0C99 80 5E              3117 	sjmp	00104$
   0C9B                    3118 00151$:
                           3119 ;	genCmpEq
                           3120 ;	gencjneshort
   0C9B BA 4F 02           3121 	cjne	r2,#0x4F,00152$
                           3122 ;	Peephole 112.b	changed ljmp to sjmp
   0C9E 80 41              3123 	sjmp	00103$
   0CA0                    3124 00152$:
                           3125 ;	genCmpEq
                           3126 ;	gencjneshort
   0CA0 BA 53 02           3127 	cjne	r2,#0x53,00153$
                           3128 ;	Peephole 112.b	changed ljmp to sjmp
   0CA3 80 24              3129 	sjmp	00102$
   0CA5                    3130 00153$:
                           3131 ;	genCmpEq
                           3132 ;	gencjneshort
   0CA5 BA 54 02           3133 	cjne	r2,#0x54,00154$
                           3134 ;	Peephole 112.b	changed ljmp to sjmp
   0CA8 80 07              3135 	sjmp	00101$
   0CAA                    3136 00154$:
                           3137 ;	genCmpEq
                           3138 ;	gencjneshort
   0CAA BA 72 03           3139 	cjne	r2,#0x72,00155$
   0CAD 02s0ErE0           3140 	ljmp	00119$
   0CB0                    3141 00155$:
                           3142 ;	Peephole 251.a	replaced ljmp to ret with ret
   0CB0 22                 3143 	ret
                           3144 ;	main.c:347: case 'T':
   0CB1                    3145 00101$:
                           3146 ;	main.c:348: printf("\r\nStopping the clock");
                           3147 ;	genIpush
   0CB1 74r19              3148 	mov	a,#__str_50
   0CB3 C0 E0              3149 	push	acc
   0CB5 74s06              3150 	mov	a,#(__str_50 >> 8)
   0CB7 C0 E0              3151 	push	acc
   0CB9 74 80              3152 	mov	a,#0x80
   0CBB C0 E0              3153 	push	acc
                           3154 ;	genCall
   0CBD 12s00r00           3155 	lcall	_printf
   0CC0 15 81              3156 	dec	sp
   0CC2 15 81              3157 	dec	sp
   0CC4 15 81              3158 	dec	sp
                           3159 ;	main.c:349: Clock_Stop();
                           3160 ;	genCall
                           3161 ;	main.c:350: break;
                           3162 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3163 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0CC6 02s00r00           3164 	ljmp	_Clock_Stop
                           3165 ;	main.c:351: case 'S':
   0CC9                    3166 00102$:
                           3167 ;	main.c:352: printf("\r\nStarting the clock");
                           3168 ;	genIpush
   0CC9 74r2E              3169 	mov	a,#__str_51
   0CCB C0 E0              3170 	push	acc
   0CCD 74s06              3171 	mov	a,#(__str_51 >> 8)
   0CCF C0 E0              3172 	push	acc
   0CD1 74 80              3173 	mov	a,#0x80
   0CD3 C0 E0              3174 	push	acc
                           3175 ;	genCall
   0CD5 12s00r00           3176 	lcall	_printf
   0CD8 15 81              3177 	dec	sp
   0CDA 15 81              3178 	dec	sp
   0CDC 15 81              3179 	dec	sp
                           3180 ;	main.c:353: Clock_Start();
                           3181 ;	genCall
                           3182 ;	main.c:354: break;
                           3183 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3184 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0CDE 02s00r00           3185 	ljmp	_Clock_Start
                           3186 ;	main.c:355: case 'O':
   0CE1                    3187 00103$:
                           3188 ;	main.c:356: printf("\r\nResetting the clock");
                           3189 ;	genIpush
   0CE1 74r43              3190 	mov	a,#__str_52
   0CE3 C0 E0              3191 	push	acc
   0CE5 74s06              3192 	mov	a,#(__str_52 >> 8)
   0CE7 C0 E0              3193 	push	acc
   0CE9 74 80              3194 	mov	a,#0x80
   0CEB C0 E0              3195 	push	acc
                           3196 ;	genCall
   0CED 12s00r00           3197 	lcall	_printf
   0CF0 15 81              3198 	dec	sp
   0CF2 15 81              3199 	dec	sp
   0CF4 15 81              3200 	dec	sp
                           3201 ;	main.c:357: Clock_Reset();
                           3202 ;	genCall
                           3203 ;	main.c:358: break;
                           3204 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3205 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0CF6 02s00r00           3206 	ljmp	_Clock_Reset
                           3207 ;	main.c:359: case 'N':
   0CF9                    3208 00104$:
                           3209 ;	main.c:360: printf("\r\nEnter alarm time in seconds:\r\n");
                           3210 ;	genIpush
   0CF9 74r59              3211 	mov	a,#__str_53
   0CFB C0 E0              3212 	push	acc
   0CFD 74s06              3213 	mov	a,#(__str_53 >> 8)
   0CFF C0 E0              3214 	push	acc
   0D01 74 80              3215 	mov	a,#0x80
   0D03 C0 E0              3216 	push	acc
                           3217 ;	genCall
   0D05 12s00r00           3218 	lcall	_printf
   0D08 15 81              3219 	dec	sp
   0D0A 15 81              3220 	dec	sp
   0D0C 15 81              3221 	dec	sp
                           3222 ;	main.c:361: alarm_duration = Serial_GetInteger(5);
                           3223 ;	genCall
                           3224 ;	Peephole 182.b	used 16 bit load of dptr
   0D0E 90 00 05           3225 	mov	dptr,#0x0005
   0D11 12s00r00           3226 	lcall	_Serial_GetInteger
                           3227 ;	main.c:362: Clock_NewAlarm(alarm_duration);
                           3228 ;	genCall
   0D14 AA 82              3229 	mov	r2,dpl
                           3230 ;	Peephole 177.d	removed redundant move
   0D16 AB 83              3231 	mov  r3,dph
                           3232 ;	Peephole 177.a	removed redundant mov
                           3233 ;	main.c:363: break;
                           3234 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3235 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0D18 02s00r00           3236 	ljmp	_Clock_NewAlarm
                           3237 ;	main.c:365: for (i = 0; i < 3; ++i){
   0D1B                    3238 00140$:
                           3239 ;	genAssign
   0D1B 7A 00              3240 	mov	r2,#0x00
   0D1D                    3241 00123$:
                           3242 ;	genCmpLt
                           3243 ;	genCmp
   0D1D BA 03 00           3244 	cjne	r2,#0x03,00156$
   0D20                    3245 00156$:
                           3246 ;	genIfxJump
   0D20 40 03              3247 	jc	00157$
   0D22 02s0DrAC           3248 	ljmp	00126$
   0D25                    3249 00157$:
                           3250 ;	main.c:366: if (ActiveAlarms[i])
                           3251 ;	genPlus
                           3252 ;	Peephole 236.g	used r2 instead of ar2
   0D25 EA                 3253 	mov	a,r2
   0D26 24r00              3254 	add	a,#_ActiveAlarms
   0D28 FB                 3255 	mov	r3,a
                           3256 ;	Peephole 181	changed mov to clr
   0D29 E4                 3257 	clr	a
   0D2A 34s00              3258 	addc	a,#(_ActiveAlarms >> 8)
   0D2C FC                 3259 	mov	r4,a
                           3260 ;	genPointerGet
                           3261 ;	genFarPointerGet
   0D2D 8B 82              3262 	mov	dpl,r3
   0D2F 8C 83              3263 	mov	dph,r4
   0D31 E0                 3264 	movx	a,@dptr
                           3265 ;	genIfxJump
                           3266 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0D32 60 3B              3267 	jz	00107$
                           3268 ;	Peephole 300	removed redundant label 00158$
                           3269 ;	main.c:367: printf("\r\nAlarm %d: %u <Enabled>", i, AlarmCount[i]);
                           3270 ;	genMult
                           3271 ;	genMultOneByte
   0D34 EA                 3272 	mov	a,r2
   0D35 75 F0 02           3273 	mov	b,#0x02
   0D38 A4                 3274 	mul	ab
                           3275 ;	genPlus
   0D39 24r00              3276 	add	a,#_AlarmCount
   0D3B F5 82              3277 	mov	dpl,a
   0D3D 74s00              3278 	mov	a,#(_AlarmCount >> 8)
   0D3F 35 F0              3279 	addc	a,b
   0D41 F5 83              3280 	mov	dph,a
                           3281 ;	genPointerGet
                           3282 ;	genFarPointerGet
   0D43 E0                 3283 	movx	a,@dptr
   0D44 FB                 3284 	mov	r3,a
   0D45 A3                 3285 	inc	dptr
   0D46 E0                 3286 	movx	a,@dptr
   0D47 FC                 3287 	mov	r4,a
                           3288 ;	genCast
   0D48 8A 05              3289 	mov	ar5,r2
   0D4A 7E 00              3290 	mov	r6,#0x00
                           3291 ;	genIpush
   0D4C C0 02              3292 	push	ar2
   0D4E C0 03              3293 	push	ar3
   0D50 C0 04              3294 	push	ar4
                           3295 ;	genIpush
   0D52 C0 05              3296 	push	ar5
   0D54 C0 06              3297 	push	ar6
                           3298 ;	genIpush
   0D56 74r7A              3299 	mov	a,#__str_54
   0D58 C0 E0              3300 	push	acc
   0D5A 74s06              3301 	mov	a,#(__str_54 >> 8)
   0D5C C0 E0              3302 	push	acc
   0D5E 74 80              3303 	mov	a,#0x80
   0D60 C0 E0              3304 	push	acc
                           3305 ;	genCall
   0D62 12s00r00           3306 	lcall	_printf
   0D65 E5 81              3307 	mov	a,sp
   0D67 24 F9              3308 	add	a,#0xf9
   0D69 F5 81              3309 	mov	sp,a
   0D6B D0 02              3310 	pop	ar2
                           3311 ;	Peephole 112.b	changed ljmp to sjmp
   0D6D 80 39              3312 	sjmp	00125$
   0D6F                    3313 00107$:
                           3314 ;	main.c:369: printf("\r\nAlarm %d: %u <Disabled>", i, AlarmCount[i]);
                           3315 ;	genMult
                           3316 ;	genMultOneByte
   0D6F EA                 3317 	mov	a,r2
   0D70 75 F0 02           3318 	mov	b,#0x02
   0D73 A4                 3319 	mul	ab
                           3320 ;	genPlus
   0D74 24r00              3321 	add	a,#_AlarmCount
   0D76 F5 82              3322 	mov	dpl,a
   0D78 74s00              3323 	mov	a,#(_AlarmCount >> 8)
   0D7A 35 F0              3324 	addc	a,b
   0D7C F5 83              3325 	mov	dph,a
                           3326 ;	genPointerGet
                           3327 ;	genFarPointerGet
   0D7E E0                 3328 	movx	a,@dptr
   0D7F FB                 3329 	mov	r3,a
   0D80 A3                 3330 	inc	dptr
   0D81 E0                 3331 	movx	a,@dptr
   0D82 FC                 3332 	mov	r4,a
                           3333 ;	genCast
   0D83 8A 05              3334 	mov	ar5,r2
   0D85 7E 00              3335 	mov	r6,#0x00
                           3336 ;	genIpush
   0D87 C0 02              3337 	push	ar2
   0D89 C0 03              3338 	push	ar3
   0D8B C0 04              3339 	push	ar4
                           3340 ;	genIpush
   0D8D C0 05              3341 	push	ar5
   0D8F C0 06              3342 	push	ar6
                           3343 ;	genIpush
   0D91 74r93              3344 	mov	a,#__str_55
   0D93 C0 E0              3345 	push	acc
   0D95 74s06              3346 	mov	a,#(__str_55 >> 8)
   0D97 C0 E0              3347 	push	acc
   0D99 74 80              3348 	mov	a,#0x80
   0D9B C0 E0              3349 	push	acc
                           3350 ;	genCall
   0D9D 12s00r00           3351 	lcall	_printf
   0DA0 E5 81              3352 	mov	a,sp
   0DA2 24 F9              3353 	add	a,#0xf9
   0DA4 F5 81              3354 	mov	sp,a
   0DA6 D0 02              3355 	pop	ar2
   0DA8                    3356 00125$:
                           3357 ;	main.c:365: for (i = 0; i < 3; ++i){
                           3358 ;	genPlus
                           3359 ;     genPlusIncr
   0DA8 0A                 3360 	inc	r2
   0DA9 02s0Dr1D           3361 	ljmp	00123$
   0DAC                    3362 00126$:
                           3363 ;	main.c:371: printf("\r\n");
                           3364 ;	genIpush
   0DAC 74r0A              3365 	mov	a,#__str_39
   0DAE C0 E0              3366 	push	acc
   0DB0 74s05              3367 	mov	a,#(__str_39 >> 8)
   0DB2 C0 E0              3368 	push	acc
   0DB4 74 80              3369 	mov	a,#0x80
   0DB6 C0 E0              3370 	push	acc
                           3371 ;	genCall
   0DB8 12s00r00           3372 	lcall	_printf
   0DBB 15 81              3373 	dec	sp
   0DBD 15 81              3374 	dec	sp
   0DBF 15 81              3375 	dec	sp
                           3376 ;	main.c:372: break;
                           3377 ;	Peephole 251.a	replaced ljmp to ret with ret
   0DC1 22                 3378 	ret
                           3379 ;	main.c:373: case 'D':
   0DC2                    3380 00109$:
                           3381 ;	main.c:374: printf("\r\nEnter an alarm number from 0-2 to disable:");
                           3382 ;	genIpush
   0DC2 74rAD              3383 	mov	a,#__str_56
   0DC4 C0 E0              3384 	push	acc
   0DC6 74s06              3385 	mov	a,#(__str_56 >> 8)
   0DC8 C0 E0              3386 	push	acc
   0DCA 74 80              3387 	mov	a,#0x80
   0DCC C0 E0              3388 	push	acc
                           3389 ;	genCall
   0DCE 12s00r00           3390 	lcall	_printf
   0DD1 15 81              3391 	dec	sp
   0DD3 15 81              3392 	dec	sp
   0DD5 15 81              3393 	dec	sp
                           3394 ;	main.c:375: i = Serial_GetInteger(1);
                           3395 ;	genCall
                           3396 ;	Peephole 182.b	used 16 bit load of dptr
   0DD7 90 00 01           3397 	mov	dptr,#0x0001
   0DDA 12s00r00           3398 	lcall	_Serial_GetInteger
   0DDD AA 82              3399 	mov	r2,dpl
   0DDF AB 83              3400 	mov	r3,dph
                           3401 ;	genCast
   0DE1 90s00r79           3402 	mov	dptr,#_handleCLOCKMode_i_1_1
   0DE4 EA                 3403 	mov	a,r2
   0DE5 F0                 3404 	movx	@dptr,a
                           3405 ;	main.c:376: while(i > 2){
   0DE6                    3406 00110$:
                           3407 ;	genAssign
   0DE6 90s00r79           3408 	mov	dptr,#_handleCLOCKMode_i_1_1
   0DE9 E0                 3409 	movx	a,@dptr
                           3410 ;	genCmpGt
                           3411 ;	genCmp
                           3412 ;	genIfxJump
                           3413 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           3414 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0DEA FA                 3415 	mov  r2,a
                           3416 ;	Peephole 177.a	removed redundant mov
   0DEB 24 FD              3417 	add	a,#0xff - 0x02
   0DED 50 26              3418 	jnc	00112$
                           3419 ;	Peephole 300	removed redundant label 00159$
                           3420 ;	main.c:377: printf("\r\nEnter an alarm number from 0-2 to disable:");
                           3421 ;	genIpush
   0DEF 74rAD              3422 	mov	a,#__str_56
   0DF1 C0 E0              3423 	push	acc
   0DF3 74s06              3424 	mov	a,#(__str_56 >> 8)
   0DF5 C0 E0              3425 	push	acc
   0DF7 74 80              3426 	mov	a,#0x80
   0DF9 C0 E0              3427 	push	acc
                           3428 ;	genCall
   0DFB 12s00r00           3429 	lcall	_printf
   0DFE 15 81              3430 	dec	sp
   0E00 15 81              3431 	dec	sp
   0E02 15 81              3432 	dec	sp
                           3433 ;	main.c:378: i = Serial_GetInteger(1);
                           3434 ;	genCall
                           3435 ;	Peephole 182.b	used 16 bit load of dptr
   0E04 90 00 01           3436 	mov	dptr,#0x0001
   0E07 12s00r00           3437 	lcall	_Serial_GetInteger
   0E0A AB 82              3438 	mov	r3,dpl
   0E0C AC 83              3439 	mov	r4,dph
                           3440 ;	genCast
   0E0E 90s00r79           3441 	mov	dptr,#_handleCLOCKMode_i_1_1
   0E11 EB                 3442 	mov	a,r3
   0E12 F0                 3443 	movx	@dptr,a
                           3444 ;	Peephole 112.b	changed ljmp to sjmp
   0E13 80 D1              3445 	sjmp	00110$
   0E15                    3446 00112$:
                           3447 ;	main.c:380: printf("\r\nAlarm %d disabled\r\n", i);
                           3448 ;	genCast
   0E15 8A 03              3449 	mov	ar3,r2
   0E17 7C 00              3450 	mov	r4,#0x00
                           3451 ;	genIpush
   0E19 C0 02              3452 	push	ar2
   0E1B C0 03              3453 	push	ar3
   0E1D C0 04              3454 	push	ar4
                           3455 ;	genIpush
   0E1F 74rDA              3456 	mov	a,#__str_57
   0E21 C0 E0              3457 	push	acc
   0E23 74s06              3458 	mov	a,#(__str_57 >> 8)
   0E25 C0 E0              3459 	push	acc
   0E27 74 80              3460 	mov	a,#0x80
   0E29 C0 E0              3461 	push	acc
                           3462 ;	genCall
   0E2B 12s00r00           3463 	lcall	_printf
   0E2E E5 81              3464 	mov	a,sp
   0E30 24 FB              3465 	add	a,#0xfb
   0E32 F5 81              3466 	mov	sp,a
   0E34 D0 02              3467 	pop	ar2
                           3468 ;	main.c:381: ActiveAlarms[i] = 0;
                           3469 ;	genPlus
                           3470 ;	Peephole 236.g	used r2 instead of ar2
   0E36 EA                 3471 	mov	a,r2
   0E37 24r00              3472 	add	a,#_ActiveAlarms
   0E39 F5 82              3473 	mov	dpl,a
                           3474 ;	Peephole 181	changed mov to clr
   0E3B E4                 3475 	clr	a
   0E3C 34s00              3476 	addc	a,#(_ActiveAlarms >> 8)
   0E3E F5 83              3477 	mov	dph,a
                           3478 ;	genPointerSet
                           3479 ;     genFarPointerSet
                           3480 ;	Peephole 181	changed mov to clr
   0E40 E4                 3481 	clr	a
   0E41 F0                 3482 	movx	@dptr,a
                           3483 ;	main.c:382: break;
                           3484 ;	Peephole 251.a	replaced ljmp to ret with ret
   0E42 22                 3485 	ret
                           3486 ;	main.c:383: case 'E':
   0E43                    3487 00113$:
                           3488 ;	main.c:384: printf("\r\nEnter an alarm number from 0-2 to enable:");
                           3489 ;	genIpush
   0E43 74rF0              3490 	mov	a,#__str_58
   0E45 C0 E0              3491 	push	acc
   0E47 74s06              3492 	mov	a,#(__str_58 >> 8)
   0E49 C0 E0              3493 	push	acc
   0E4B 74 80              3494 	mov	a,#0x80
   0E4D C0 E0              3495 	push	acc
                           3496 ;	genCall
   0E4F 12s00r00           3497 	lcall	_printf
   0E52 15 81              3498 	dec	sp
   0E54 15 81              3499 	dec	sp
   0E56 15 81              3500 	dec	sp
                           3501 ;	main.c:385: i = Serial_GetInteger(1);
                           3502 ;	genCall
                           3503 ;	Peephole 182.b	used 16 bit load of dptr
   0E58 90 00 01           3504 	mov	dptr,#0x0001
   0E5B 12s00r00           3505 	lcall	_Serial_GetInteger
   0E5E AA 82              3506 	mov	r2,dpl
   0E60 AB 83              3507 	mov	r3,dph
                           3508 ;	genCast
   0E62 90s00r79           3509 	mov	dptr,#_handleCLOCKMode_i_1_1
   0E65 EA                 3510 	mov	a,r2
   0E66 F0                 3511 	movx	@dptr,a
                           3512 ;	main.c:386: while(i > 2){
   0E67                    3513 00114$:
                           3514 ;	genAssign
   0E67 90s00r79           3515 	mov	dptr,#_handleCLOCKMode_i_1_1
   0E6A E0                 3516 	movx	a,@dptr
                           3517 ;	genCmpGt
                           3518 ;	genCmp
                           3519 ;	genIfxJump
                           3520 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           3521 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0E6B FA                 3522 	mov  r2,a
                           3523 ;	Peephole 177.a	removed redundant mov
   0E6C 24 FD              3524 	add	a,#0xff - 0x02
   0E6E 50 26              3525 	jnc	00116$
                           3526 ;	Peephole 300	removed redundant label 00160$
                           3527 ;	main.c:387: printf("\r\nEnter an alarm number from 0-2 to enable:");
                           3528 ;	genIpush
   0E70 74rF0              3529 	mov	a,#__str_58
   0E72 C0 E0              3530 	push	acc
   0E74 74s06              3531 	mov	a,#(__str_58 >> 8)
   0E76 C0 E0              3532 	push	acc
   0E78 74 80              3533 	mov	a,#0x80
   0E7A C0 E0              3534 	push	acc
                           3535 ;	genCall
   0E7C 12s00r00           3536 	lcall	_printf
   0E7F 15 81              3537 	dec	sp
   0E81 15 81              3538 	dec	sp
   0E83 15 81              3539 	dec	sp
                           3540 ;	main.c:388: i = Serial_GetInteger(1);
                           3541 ;	genCall
                           3542 ;	Peephole 182.b	used 16 bit load of dptr
   0E85 90 00 01           3543 	mov	dptr,#0x0001
   0E88 12s00r00           3544 	lcall	_Serial_GetInteger
   0E8B AB 82              3545 	mov	r3,dpl
   0E8D AC 83              3546 	mov	r4,dph
                           3547 ;	genCast
   0E8F 90s00r79           3548 	mov	dptr,#_handleCLOCKMode_i_1_1
   0E92 EB                 3549 	mov	a,r3
   0E93 F0                 3550 	movx	@dptr,a
                           3551 ;	Peephole 112.b	changed ljmp to sjmp
   0E94 80 D1              3552 	sjmp	00114$
   0E96                    3553 00116$:
                           3554 ;	main.c:390: printf("\r\nAlarm %d enabled\r\n", i);
                           3555 ;	genCast
   0E96 8A 03              3556 	mov	ar3,r2
   0E98 7C 00              3557 	mov	r4,#0x00
                           3558 ;	genIpush
   0E9A C0 02              3559 	push	ar2
   0E9C C0 03              3560 	push	ar3
   0E9E C0 04              3561 	push	ar4
                           3562 ;	genIpush
   0EA0 74r1C              3563 	mov	a,#__str_59
   0EA2 C0 E0              3564 	push	acc
   0EA4 74s07              3565 	mov	a,#(__str_59 >> 8)
   0EA6 C0 E0              3566 	push	acc
   0EA8 74 80              3567 	mov	a,#0x80
   0EAA C0 E0              3568 	push	acc
                           3569 ;	genCall
   0EAC 12s00r00           3570 	lcall	_printf
   0EAF E5 81              3571 	mov	a,sp
   0EB1 24 FB              3572 	add	a,#0xfb
   0EB3 F5 81              3573 	mov	sp,a
   0EB5 D0 02              3574 	pop	ar2
                           3575 ;	main.c:391: if (AlarmCount[i] != 0)
                           3576 ;	genMult
                           3577 ;	genMultOneByte
   0EB7 EA                 3578 	mov	a,r2
   0EB8 75 F0 02           3579 	mov	b,#0x02
   0EBB A4                 3580 	mul	ab
                           3581 ;	genPlus
   0EBC 24r00              3582 	add	a,#_AlarmCount
   0EBE F5 82              3583 	mov	dpl,a
   0EC0 74s00              3584 	mov	a,#(_AlarmCount >> 8)
   0EC2 35 F0              3585 	addc	a,b
   0EC4 F5 83              3586 	mov	dph,a
                           3587 ;	genPointerGet
                           3588 ;	genFarPointerGet
   0EC6 E0                 3589 	movx	a,@dptr
   0EC7 FB                 3590 	mov	r3,a
   0EC8 A3                 3591 	inc	dptr
   0EC9 E0                 3592 	movx	a,@dptr
   0ECA FC                 3593 	mov	r4,a
                           3594 ;	genCmpEq
                           3595 ;	gencjneshort
   0ECB BB 00 04           3596 	cjne	r3,#0x00,00161$
   0ECE BC 00 01           3597 	cjne	r4,#0x00,00161$
                           3598 ;	Peephole 112.b	changed ljmp to sjmp
                           3599 ;	Peephole 251.b	replaced sjmp to ret with ret
   0ED1 22                 3600 	ret
   0ED2                    3601 00161$:
                           3602 ;	main.c:392: ActiveAlarms[i] = 1;
                           3603 ;	genPlus
                           3604 ;	Peephole 236.g	used r2 instead of ar2
   0ED2 EA                 3605 	mov	a,r2
   0ED3 24r00              3606 	add	a,#_ActiveAlarms
   0ED5 F5 82              3607 	mov	dpl,a
                           3608 ;	Peephole 181	changed mov to clr
   0ED7 E4                 3609 	clr	a
   0ED8 34s00              3610 	addc	a,#(_ActiveAlarms >> 8)
   0EDA F5 83              3611 	mov	dph,a
                           3612 ;	genPointerSet
                           3613 ;     genFarPointerSet
   0EDC 74 01              3614 	mov	a,#0x01
   0EDE F0                 3615 	movx	@dptr,a
                           3616 ;	main.c:393: break;
                           3617 ;	main.c:394: case 'r':
                           3618 ;	Peephole 112.b	changed ljmp to sjmp
                           3619 ;	Peephole 251.b	replaced sjmp to ret with ret
   0EDF 22                 3620 	ret
   0EE0                    3621 00119$:
                           3622 ;	main.c:395: mode = MAIN_MODE;
                           3623 ;	genAssign
   0EE0 90s00r00           3624 	mov	dptr,#_mode
                           3625 ;	Peephole 181	changed mov to clr
   0EE3 E4                 3626 	clr	a
   0EE4 F0                 3627 	movx	@dptr,a
                           3628 ;	main.c:396: MainMenu();
                           3629 ;	genCall
                           3630 ;	main.c:397: break;
                           3631 ;	main.c:398: case 'H':
                           3632 ;	Peephole 112.b	changed ljmp to sjmp
                           3633 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3634 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0EE5 02s0ErEB           3635 	ljmp	_MainMenu
   0EE8                    3636 00120$:
                           3637 ;	main.c:399: CLOCK_Menu();
                           3638 ;	genCall
                           3639 ;	main.c:403: }
                           3640 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0EE8 02s0BrA0           3641 	ljmp	_CLOCK_Menu
                           3642 ;
                           3643 ;------------------------------------------------------------
                           3644 ;Allocation info for local variables in function 'MainMenu'
                           3645 ;------------------------------------------------------------
                           3646 ;------------------------------------------------------------
                           3647 ;	main.c:407: void MainMenu(void){
                           3648 ;	-----------------------------------------
                           3649 ;	 function MainMenu
                           3650 ;	-----------------------------------------
   0EEB                    3651 _MainMenu:
                           3652 ;	main.c:408: printf("\r\n***************");
                           3653 ;	genIpush
   0EEB 74r31              3654 	mov	a,#__str_60
   0EED C0 E0              3655 	push	acc
   0EEF 74s07              3656 	mov	a,#(__str_60 >> 8)
   0EF1 C0 E0              3657 	push	acc
   0EF3 74 80              3658 	mov	a,#0x80
   0EF5 C0 E0              3659 	push	acc
                           3660 ;	genCall
   0EF7 12s00r00           3661 	lcall	_printf
   0EFA 15 81              3662 	dec	sp
   0EFC 15 81              3663 	dec	sp
   0EFE 15 81              3664 	dec	sp
                           3665 ;	main.c:409: printf("\r\n    Menu\r\n");
                           3666 ;	genIpush
   0F00 74r43              3667 	mov	a,#__str_61
   0F02 C0 E0              3668 	push	acc
   0F04 74s07              3669 	mov	a,#(__str_61 >> 8)
   0F06 C0 E0              3670 	push	acc
   0F08 74 80              3671 	mov	a,#0x80
   0F0A C0 E0              3672 	push	acc
                           3673 ;	genCall
   0F0C 12s00r00           3674 	lcall	_printf
   0F0F 15 81              3675 	dec	sp
   0F11 15 81              3676 	dec	sp
   0F13 15 81              3677 	dec	sp
                           3678 ;	main.c:410: printf("\r\n***************");
                           3679 ;	genIpush
   0F15 74r31              3680 	mov	a,#__str_60
   0F17 C0 E0              3681 	push	acc
   0F19 74s07              3682 	mov	a,#(__str_60 >> 8)
   0F1B C0 E0              3683 	push	acc
   0F1D 74 80              3684 	mov	a,#0x80
   0F1F C0 E0              3685 	push	acc
                           3686 ;	genCall
   0F21 12s00r00           3687 	lcall	_printf
   0F24 15 81              3688 	dec	sp
   0F26 15 81              3689 	dec	sp
   0F28 15 81              3690 	dec	sp
                           3691 ;	main.c:411: printf("\r\nPress 'H' to show the help menu");
                           3692 ;	genIpush
   0F2A 74r50              3693 	mov	a,#__str_62
   0F2C C0 E0              3694 	push	acc
   0F2E 74s07              3695 	mov	a,#(__str_62 >> 8)
   0F30 C0 E0              3696 	push	acc
   0F32 74 80              3697 	mov	a,#0x80
   0F34 C0 E0              3698 	push	acc
                           3699 ;	genCall
   0F36 12s00r00           3700 	lcall	_printf
   0F39 15 81              3701 	dec	sp
   0F3B 15 81              3702 	dec	sp
   0F3D 15 81              3703 	dec	sp
                           3704 ;	main.c:412: printf("\r\nPress 'L' to enter LCD control mode");
                           3705 ;	genIpush
   0F3F 74r72              3706 	mov	a,#__str_63
   0F41 C0 E0              3707 	push	acc
   0F43 74s07              3708 	mov	a,#(__str_63 >> 8)
   0F45 C0 E0              3709 	push	acc
   0F47 74 80              3710 	mov	a,#0x80
   0F49 C0 E0              3711 	push	acc
                           3712 ;	genCall
   0F4B 12s00r00           3713 	lcall	_printf
   0F4E 15 81              3714 	dec	sp
   0F50 15 81              3715 	dec	sp
   0F52 15 81              3716 	dec	sp
                           3717 ;	main.c:413: printf("\r\nPress 'E' to enter EEPROM control mode");
                           3718 ;	genIpush
   0F54 74r98              3719 	mov	a,#__str_64
   0F56 C0 E0              3720 	push	acc
   0F58 74s07              3721 	mov	a,#(__str_64 >> 8)
   0F5A C0 E0              3722 	push	acc
   0F5C 74 80              3723 	mov	a,#0x80
   0F5E C0 E0              3724 	push	acc
                           3725 ;	genCall
   0F60 12s00r00           3726 	lcall	_printf
   0F63 15 81              3727 	dec	sp
   0F65 15 81              3728 	dec	sp
   0F67 15 81              3729 	dec	sp
                           3730 ;	main.c:414: printf("\r\nPress 'C' to enter Clock control mode\r\n");
                           3731 ;	genIpush
   0F69 74rC1              3732 	mov	a,#__str_65
   0F6B C0 E0              3733 	push	acc
   0F6D 74s07              3734 	mov	a,#(__str_65 >> 8)
   0F6F C0 E0              3735 	push	acc
   0F71 74 80              3736 	mov	a,#0x80
   0F73 C0 E0              3737 	push	acc
                           3738 ;	genCall
   0F75 12s00r00           3739 	lcall	_printf
   0F78 15 81              3740 	dec	sp
   0F7A 15 81              3741 	dec	sp
   0F7C 15 81              3742 	dec	sp
                           3743 ;	Peephole 300	removed redundant label 00101$
   0F7E 22                 3744 	ret
                           3745 ;------------------------------------------------------------
                           3746 ;Allocation info for local variables in function 'handleMAINMode'
                           3747 ;------------------------------------------------------------
                           3748 ;c                         Allocated with name '_handleMAINMode_c_1_1'
                           3749 ;------------------------------------------------------------
                           3750 ;	main.c:417: void handleMAINMode(char c){
                           3751 ;	-----------------------------------------
                           3752 ;	 function handleMAINMode
                           3753 ;	-----------------------------------------
   0F7F                    3754 _handleMAINMode:
                           3755 ;	genReceive
   0F7F E5 82              3756 	mov	a,dpl
   0F81 90s00r7A           3757 	mov	dptr,#_handleMAINMode_c_1_1
   0F84 F0                 3758 	movx	@dptr,a
                           3759 ;	main.c:418: switch(c){
                           3760 ;	genAssign
   0F85 90s00r7A           3761 	mov	dptr,#_handleMAINMode_c_1_1
   0F88 E0                 3762 	movx	a,@dptr
   0F89 FA                 3763 	mov	r2,a
                           3764 ;	genCmpEq
                           3765 ;	gencjneshort
   0F8A BA 43 02           3766 	cjne	r2,#0x43,00113$
                           3767 ;	Peephole 112.b	changed ljmp to sjmp
   0F8D 80 24              3768 	sjmp	00104$
   0F8F                    3769 00113$:
                           3770 ;	genCmpEq
                           3771 ;	gencjneshort
   0F8F BA 45 02           3772 	cjne	r2,#0x45,00114$
                           3773 ;	Peephole 112.b	changed ljmp to sjmp
   0F92 80 16              3774 	sjmp	00103$
   0F94                    3775 00114$:
                           3776 ;	genCmpEq
                           3777 ;	gencjneshort
   0F94 BA 48 02           3778 	cjne	r2,#0x48,00115$
                           3779 ;	Peephole 112.b	changed ljmp to sjmp
   0F97 80 05              3780 	sjmp	00101$
   0F99                    3781 00115$:
                           3782 ;	genCmpEq
                           3783 ;	gencjneshort
                           3784 ;	Peephole 112.b	changed ljmp to sjmp
                           3785 ;	main.c:419: case 'H':
                           3786 ;	Peephole 112.b	changed ljmp to sjmp
                           3787 ;	Peephole 198.b	optimized misc jump sequence
   0F99 BA 4C 20           3788 	cjne	r2,#0x4C,00107$
   0F9C 80 03              3789 	sjmp	00102$
                           3790 ;	Peephole 300	removed redundant label 00116$
   0F9E                    3791 00101$:
                           3792 ;	main.c:420: MainMenu();
                           3793 ;	genCall
                           3794 ;	main.c:421: break;
                           3795 ;	main.c:422: case 'L':
                           3796 ;	Peephole 112.b	changed ljmp to sjmp
                           3797 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3798 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0F9E 02s0ErEB           3799 	ljmp	_MainMenu
   0FA1                    3800 00102$:
                           3801 ;	main.c:423: mode = LCD_MODE;
                           3802 ;	genAssign
   0FA1 90s00r00           3803 	mov	dptr,#_mode
   0FA4 74 01              3804 	mov	a,#0x01
   0FA6 F0                 3805 	movx	@dptr,a
                           3806 ;	main.c:424: LCD_Menu();
                           3807 ;	genCall
                           3808 ;	main.c:425: break;
                           3809 ;	main.c:426: case 'E':
                           3810 ;	Peephole 112.b	changed ljmp to sjmp
                           3811 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3812 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FA7 02s00rE8           3813 	ljmp	_LCD_Menu
   0FAA                    3814 00103$:
                           3815 ;	main.c:427: mode = EEPROM_MODE;
                           3816 ;	genAssign
   0FAA 90s00r00           3817 	mov	dptr,#_mode
   0FAD 74 02              3818 	mov	a,#0x02
   0FAF F0                 3819 	movx	@dptr,a
                           3820 ;	main.c:428: EEPROM_Menu();
                           3821 ;	genCall
                           3822 ;	main.c:429: break;
                           3823 ;	main.c:430: case 'C':
                           3824 ;	Peephole 112.b	changed ljmp to sjmp
                           3825 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3826 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FB0 02s04r21           3827 	ljmp	_EEPROM_Menu
   0FB3                    3828 00104$:
                           3829 ;	main.c:431: mode = CLOCK_MODE;
                           3830 ;	genAssign
   0FB3 90s00r00           3831 	mov	dptr,#_mode
   0FB6 74 03              3832 	mov	a,#0x03
   0FB8 F0                 3833 	movx	@dptr,a
                           3834 ;	main.c:432: CLOCK_Menu();
                           3835 ;	genCall
                           3836 ;	main.c:436: }
                           3837 ;	Peephole 253.c	replaced lcall with ljmp
   0FB9 02s0BrA0           3838 	ljmp	_CLOCK_Menu
   0FBC                    3839 00107$:
   0FBC 22                 3840 	ret
                           3841 ;------------------------------------------------------------
                           3842 ;Allocation info for local variables in function 'handleInput'
                           3843 ;------------------------------------------------------------
                           3844 ;c                         Allocated with name '_handleInput_c_1_1'
                           3845 ;------------------------------------------------------------
                           3846 ;	main.c:443: void handleInput(char c){
                           3847 ;	-----------------------------------------
                           3848 ;	 function handleInput
                           3849 ;	-----------------------------------------
   0FBD                    3850 _handleInput:
                           3851 ;	genReceive
   0FBD E5 82              3852 	mov	a,dpl
   0FBF 90s00r7B           3853 	mov	dptr,#_handleInput_c_1_1
   0FC2 F0                 3854 	movx	@dptr,a
                           3855 ;	main.c:445: switch(mode){
                           3856 ;	genAssign
   0FC3 90s00r00           3857 	mov	dptr,#_mode
   0FC6 E0                 3858 	movx	a,@dptr
                           3859 ;	genCmpGt
                           3860 ;	genCmp
                           3861 ;	genIfxJump
                           3862 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0FC7 FA                 3863 	mov  r2,a
                           3864 ;	Peephole 177.a	removed redundant mov
   0FC8 24 FC              3865 	add	a,#0xff - 0x03
                           3866 ;	Peephole 112.b	changed ljmp to sjmp
                           3867 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0FCA 40 3B              3868 	jc	00106$
                           3869 ;	Peephole 300	removed redundant label 00109$
                           3870 ;	genJumpTab
   0FCC EA                 3871 	mov	a,r2
                           3872 ;	Peephole 254	optimized left shift
   0FCD 2A                 3873 	add	a,r2
   0FCE 2A                 3874 	add	a,r2
   0FCF 90s0FrD3           3875 	mov	dptr,#00110$
   0FD2 73                 3876 	jmp	@a+dptr
   0FD3                    3877 00110$:
   0FD3 02s0FrDF           3878 	ljmp	00101$
   0FD6 02s0FrE9           3879 	ljmp	00102$
   0FD9 02s0FrF3           3880 	ljmp	00103$
   0FDC 02s0FrFD           3881 	ljmp	00104$
                           3882 ;	main.c:446: case MAIN_MODE:
   0FDF                    3883 00101$:
                           3884 ;	main.c:447: handleMAINMode(c);
                           3885 ;	genAssign
   0FDF 90s00r7B           3886 	mov	dptr,#_handleInput_c_1_1
   0FE2 E0                 3887 	movx	a,@dptr
                           3888 ;	genCall
   0FE3 FA                 3889 	mov	r2,a
                           3890 ;	Peephole 244.c	loading dpl from a instead of r2
   0FE4 F5 82              3891 	mov	dpl,a
                           3892 ;	main.c:448: break;
                           3893 ;	main.c:449: case LCD_MODE:
                           3894 ;	Peephole 112.b	changed ljmp to sjmp
                           3895 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3896 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FE6 02s0Fr7F           3897 	ljmp	_handleMAINMode
   0FE9                    3898 00102$:
                           3899 ;	main.c:450: handleLCDMode(c);
                           3900 ;	genAssign
   0FE9 90s00r7B           3901 	mov	dptr,#_handleInput_c_1_1
   0FEC E0                 3902 	movx	a,@dptr
                           3903 ;	genCall
   0FED FA                 3904 	mov	r2,a
                           3905 ;	Peephole 244.c	loading dpl from a instead of r2
   0FEE F5 82              3906 	mov	dpl,a
                           3907 ;	main.c:451: break;
                           3908 ;	main.c:452: case EEPROM_MODE:
                           3909 ;	Peephole 112.b	changed ljmp to sjmp
                           3910 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3911 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FF0 02s01rD0           3912 	ljmp	_handleLCDMode
   0FF3                    3913 00103$:
                           3914 ;	main.c:453: handleEEPROMMode(c);
                           3915 ;	genAssign
   0FF3 90s00r7B           3916 	mov	dptr,#_handleInput_c_1_1
   0FF6 E0                 3917 	movx	a,@dptr
                           3918 ;	genCall
   0FF7 FA                 3919 	mov	r2,a
                           3920 ;	Peephole 244.c	loading dpl from a instead of r2
   0FF8 F5 82              3921 	mov	dpl,a
                           3922 ;	main.c:454: break;
                           3923 ;	main.c:455: case CLOCK_MODE:
                           3924 ;	Peephole 112.b	changed ljmp to sjmp
                           3925 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3926 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FFA 02s04rB5           3927 	ljmp	_handleEEPROMMode
   0FFD                    3928 00104$:
                           3929 ;	main.c:456: handleCLOCKMode(c);
                           3930 ;	genAssign
   0FFD 90s00r7B           3931 	mov	dptr,#_handleInput_c_1_1
   1000 E0                 3932 	movx	a,@dptr
                           3933 ;	genCall
   1001 FA                 3934 	mov	r2,a
                           3935 ;	Peephole 244.c	loading dpl from a instead of r2
   1002 F5 82              3936 	mov	dpl,a
                           3937 ;	main.c:458: }
                           3938 ;	Peephole 253.c	replaced lcall with ljmp
   1004 02s0Cr73           3939 	ljmp	_handleCLOCKMode
   1007                    3940 00106$:
   1007 22                 3941 	ret
                           3942 ;------------------------------------------------------------
                           3943 ;Allocation info for local variables in function 'main'
                           3944 ;------------------------------------------------------------
                           3945 ;c                         Allocated with name '_main_c_2_2'
                           3946 ;i                         Allocated with name '_main_i_2_2'
                           3947 ;------------------------------------------------------------
                           3948 ;	main.c:477: void main(void)
                           3949 ;	-----------------------------------------
                           3950 ;	 function main
                           3951 ;	-----------------------------------------
   1008                    3952 _main:
                           3953 ;	main.c:479: Serial_Init();
                           3954 ;	genCall
   1008 12s00r00           3955 	lcall	_Serial_Init
                           3956 ;	main.c:480: EPROM_Init();
                           3957 ;	genCall
   100B 12s00r00           3958 	lcall	_EPROM_Init
                           3959 ;	main.c:481: LCD_Init();
                           3960 ;	genCall
   100E 12s00r00           3961 	lcall	_LCD_Init
                           3962 ;	main.c:482: P1_3 = 1;
                           3963 ;	genAssign
   1011 D2 93              3964 	setb	_P1_3
                           3965 ;	main.c:484: Timer0_Init();
                           3966 ;	genCall
   1013 12s00r00           3967 	lcall	_Timer0_Init
                           3968 ;	main.c:485: mode = MAIN_MODE;
                           3969 ;	genAssign
   1016 90s00r00           3970 	mov	dptr,#_mode
                           3971 ;	Peephole 181	changed mov to clr
   1019 E4                 3972 	clr	a
   101A F0                 3973 	movx	@dptr,a
                           3974 ;	main.c:486: MainMenu();
                           3975 ;	genCall
   101B 12s0ErEB           3976 	lcall	_MainMenu
                           3977 ;	main.c:491: checkAlarms:
   101E                    3978 00101$:
                           3979 ;	main.c:492: for (i = 0; i < 3; ++i){
                           3980 ;	genAssign
   101E 90s00r7C           3981 	mov	dptr,#_main_i_2_2
                           3982 ;	Peephole 181	changed mov to clr
   1021 E4                 3983 	clr	a
   1022 F0                 3984 	movx	@dptr,a
                           3985 ;	genAssign
   1023 7A 00              3986 	mov	r2,#0x00
   1025                    3987 00119$:
                           3988 ;	genCmpLt
                           3989 ;	genCmp
   1025 BA 03 00           3990 	cjne	r2,#0x03,00141$
   1028                    3991 00141$:
                           3992 ;	genIfxJump
   1028 40 03              3993 	jc	00142$
   102A 02s11r28           3994 	ljmp	00122$
   102D                    3995 00142$:
                           3996 ;	main.c:493: if(ExpiredAlarms[i]){
                           3997 ;	genPlus
                           3998 ;	Peephole 236.g	used r2 instead of ar2
   102D EA                 3999 	mov	a,r2
   102E 24r01              4000 	add	a,#_ExpiredAlarms
   1030 FB                 4001 	mov	r3,a
                           4002 ;	Peephole 181	changed mov to clr
   1031 E4                 4003 	clr	a
   1032 34s00              4004 	addc	a,#(_ExpiredAlarms >> 8)
   1034 FC                 4005 	mov	r4,a
                           4006 ;	genPointerGet
                           4007 ;	genFarPointerGet
   1035 8B 82              4008 	mov	dpl,r3
   1037 8C 83              4009 	mov	dph,r4
   1039 E0                 4010 	movx	a,@dptr
                           4011 ;	genIfxJump
   103A 70 03              4012 	jnz	00143$
   103C 02s11r1F           4013 	ljmp	00121$
   103F                    4014 00143$:
                           4015 ;	main.c:494: printf("\r\nAlarm %d going off, you must press 'D' to disable it\r\n", i);
                           4016 ;	genCast
   103F 8A 03              4017 	mov	ar3,r2
   1041 7C 00              4018 	mov	r4,#0x00
                           4019 ;	genIpush
   1043 C0 03              4020 	push	ar3
   1045 C0 04              4021 	push	ar4
                           4022 ;	genIpush
   1047 74rEB              4023 	mov	a,#__str_66
   1049 C0 E0              4024 	push	acc
   104B 74s07              4025 	mov	a,#(__str_66 >> 8)
   104D C0 E0              4026 	push	acc
   104F 74 80              4027 	mov	a,#0x80
   1051 C0 E0              4028 	push	acc
                           4029 ;	genCall
   1053 12s00r00           4030 	lcall	_printf
   1056 E5 81              4031 	mov	a,sp
   1058 24 FB              4032 	add	a,#0xfb
   105A F5 81              4033 	mov	sp,a
                           4034 ;	main.c:495: LCD_gotoxy(0,0);
                           4035 ;	genAssign
   105C 90s00r00           4036 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4037 ;	Peephole 181	changed mov to clr
   105F E4                 4038 	clr	a
   1060 F0                 4039 	movx	@dptr,a
                           4040 ;	genCall
   1061 75 82 00           4041 	mov	dpl,#0x00
   1064 12s00r00           4042 	lcall	_LCD_gotoxy
                           4043 ;	main.c:496: LCD_Putstr("Disable Alarm!");
                           4044 ;	genCall
                           4045 ;	Peephole 182.a	used 16 bit load of DPTR
   1067 90s08r24           4046 	mov	dptr,#__str_67
   106A 75 F0 80           4047 	mov	b,#0x80
   106D 12s00r00           4048 	lcall	_LCD_Putstr
                           4049 ;	main.c:497: while(getchar() != 'D'){
                           4050 ;	genAssign
   1070 90s00r7C           4051 	mov	dptr,#_main_i_2_2
   1073 E0                 4052 	movx	a,@dptr
   1074 FB                 4053 	mov	r3,a
   1075                    4054 00102$:
                           4055 ;	genCall
   1075 C0 03              4056 	push	ar3
   1077 12s00r00           4057 	lcall	_getchar
   107A AC 82              4058 	mov	r4,dpl
   107C D0 03              4059 	pop	ar3
                           4060 ;	genCmpEq
                           4061 ;	gencjneshort
   107E BC 44 02           4062 	cjne	r4,#0x44,00144$
                           4063 ;	Peephole 112.b	changed ljmp to sjmp
   1081 80 3F              4064 	sjmp	00104$
   1083                    4065 00144$:
                           4066 ;	main.c:498: printf("\r\nAlarm %d going off, you must press 'D' to disable it\r\n", i);
                           4067 ;	genCast
   1083 8B 04              4068 	mov	ar4,r3
   1085 7D 00              4069 	mov	r5,#0x00
                           4070 ;	genIpush
   1087 C0 03              4071 	push	ar3
   1089 C0 04              4072 	push	ar4
   108B C0 05              4073 	push	ar5
                           4074 ;	genIpush
   108D 74rEB              4075 	mov	a,#__str_66
   108F C0 E0              4076 	push	acc
   1091 74s07              4077 	mov	a,#(__str_66 >> 8)
   1093 C0 E0              4078 	push	acc
   1095 74 80              4079 	mov	a,#0x80
   1097 C0 E0              4080 	push	acc
                           4081 ;	genCall
   1099 12s00r00           4082 	lcall	_printf
   109C E5 81              4083 	mov	a,sp
   109E 24 FB              4084 	add	a,#0xfb
   10A0 F5 81              4085 	mov	sp,a
   10A2 D0 03              4086 	pop	ar3
                           4087 ;	main.c:499: LCD_gotoxy(0,0);
                           4088 ;	genAssign
   10A4 90s00r00           4089 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4090 ;	Peephole 181	changed mov to clr
   10A7 E4                 4091 	clr	a
   10A8 F0                 4092 	movx	@dptr,a
                           4093 ;	genCall
   10A9 75 82 00           4094 	mov	dpl,#0x00
   10AC C0 03              4095 	push	ar3
   10AE 12s00r00           4096 	lcall	_LCD_gotoxy
   10B1 D0 03              4097 	pop	ar3
                           4098 ;	main.c:500: LCD_Putstr("Disable Alarm!");
                           4099 ;	genCall
                           4100 ;	Peephole 182.a	used 16 bit load of DPTR
   10B3 90s08r24           4101 	mov	dptr,#__str_67
   10B6 75 F0 80           4102 	mov	b,#0x80
   10B9 C0 03              4103 	push	ar3
   10BB 12s00r00           4104 	lcall	_LCD_Putstr
   10BE D0 03              4105 	pop	ar3
                           4106 ;	Peephole 112.b	changed ljmp to sjmp
   10C0 80 B3              4107 	sjmp	00102$
   10C2                    4108 00104$:
                           4109 ;	main.c:502: printf("\r\nAlarm %d disabled!\r\n", i);
                           4110 ;	genAssign
   10C2 90s00r7C           4111 	mov	dptr,#_main_i_2_2
   10C5 E0                 4112 	movx	a,@dptr
   10C6 FB                 4113 	mov	r3,a
                           4114 ;	genCast
   10C7 8B 04              4115 	mov	ar4,r3
   10C9 7D 00              4116 	mov	r5,#0x00
                           4117 ;	genIpush
   10CB C0 03              4118 	push	ar3
   10CD C0 04              4119 	push	ar4
   10CF C0 05              4120 	push	ar5
                           4121 ;	genIpush
   10D1 74r33              4122 	mov	a,#__str_68
   10D3 C0 E0              4123 	push	acc
   10D5 74s08              4124 	mov	a,#(__str_68 >> 8)
   10D7 C0 E0              4125 	push	acc
   10D9 74 80              4126 	mov	a,#0x80
   10DB C0 E0              4127 	push	acc
                           4128 ;	genCall
   10DD 12s00r00           4129 	lcall	_printf
   10E0 E5 81              4130 	mov	a,sp
   10E2 24 FB              4131 	add	a,#0xfb
   10E4 F5 81              4132 	mov	sp,a
   10E6 D0 03              4133 	pop	ar3
                           4134 ;	main.c:503: LCD_gotoxy(0,0);
                           4135 ;	genAssign
   10E8 90s00r00           4136 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4137 ;	Peephole 181	changed mov to clr
   10EB E4                 4138 	clr	a
   10EC F0                 4139 	movx	@dptr,a
                           4140 ;	genCall
   10ED 75 82 00           4141 	mov	dpl,#0x00
   10F0 C0 03              4142 	push	ar3
   10F2 12s00r00           4143 	lcall	_LCD_gotoxy
   10F5 D0 03              4144 	pop	ar3
                           4145 ;	main.c:504: LCD_Putstr("              ");
                           4146 ;	genCall
                           4147 ;	Peephole 182.a	used 16 bit load of DPTR
   10F7 90s08r4A           4148 	mov	dptr,#__str_69
   10FA 75 F0 80           4149 	mov	b,#0x80
   10FD C0 03              4150 	push	ar3
   10FF 12s00r00           4151 	lcall	_LCD_Putstr
   1102 D0 03              4152 	pop	ar3
                           4153 ;	main.c:505: ActiveAlarms[i] = 0;
                           4154 ;	genPlus
                           4155 ;	Peephole 236.g	used r3 instead of ar3
   1104 EB                 4156 	mov	a,r3
   1105 24r00              4157 	add	a,#_ActiveAlarms
   1107 F5 82              4158 	mov	dpl,a
                           4159 ;	Peephole 181	changed mov to clr
   1109 E4                 4160 	clr	a
   110A 34s00              4161 	addc	a,#(_ActiveAlarms >> 8)
   110C F5 83              4162 	mov	dph,a
                           4163 ;	genPointerSet
                           4164 ;     genFarPointerSet
                           4165 ;	Peephole 181	changed mov to clr
   110E E4                 4166 	clr	a
   110F F0                 4167 	movx	@dptr,a
                           4168 ;	main.c:506: ExpiredAlarms[i] = 0;
                           4169 ;	genPlus
                           4170 ;	Peephole 236.g	used r3 instead of ar3
   1110 EB                 4171 	mov	a,r3
   1111 24r01              4172 	add	a,#_ExpiredAlarms
   1113 F5 82              4173 	mov	dpl,a
                           4174 ;	Peephole 181	changed mov to clr
   1115 E4                 4175 	clr	a
   1116 34s00              4176 	addc	a,#(_ExpiredAlarms >> 8)
   1118 F5 83              4177 	mov	dph,a
                           4178 ;	genPointerSet
                           4179 ;     genFarPointerSet
                           4180 ;	Peephole 181	changed mov to clr
   111A E4                 4181 	clr	a
   111B F0                 4182 	movx	@dptr,a
                           4183 ;	main.c:507: goto checkAlarms;
   111C 02s10r1E           4184 	ljmp	00101$
   111F                    4185 00121$:
                           4186 ;	main.c:492: for (i = 0; i < 3; ++i){
                           4187 ;	genPlus
                           4188 ;     genPlusIncr
   111F 0A                 4189 	inc	r2
                           4190 ;	genAssign
   1120 90s00r7C           4191 	mov	dptr,#_main_i_2_2
   1123 EA                 4192 	mov	a,r2
   1124 F0                 4193 	movx	@dptr,a
   1125 02s10r25           4194 	ljmp	00119$
   1128                    4195 00122$:
                           4196 ;	main.c:510: c = getchar ();
                           4197 ;	genCall
   1128 12s00r00           4198 	lcall	_getchar
   112B AA 82              4199 	mov	r2,dpl
                           4200 ;	main.c:511: if(DisableFlag){
                           4201 ;	genIfx
                           4202 ;	genIfxJump
                           4203 ;	main.c:512: DisableFlag = false;
                           4204 ;	genAssign
                           4205 ;	Peephole 250.b	using atomic test and clear
   112D 10*00 03           4206 	jbc	_DisableFlag,00145$
   1130 02s11rAC           4207 	ljmp	00113$
   1133                    4208 00145$:
                           4209 ;	main.c:513: if(c == 'D'){
                           4210 ;	genCmpEq
                           4211 ;	gencjneshort
   1133 BA 44 02           4212 	cjne	r2,#0x44,00146$
   1136 80 03              4213 	sjmp	00147$
   1138                    4214 00146$:
   1138 02s10r1E           4215 	ljmp	00101$
   113B                    4216 00147$:
                           4217 ;	main.c:514: for (i = 0; i < 3; ++i){
                           4218 ;	genAssign
   113B 7B 00              4219 	mov	r3,#0x00
   113D                    4220 00123$:
                           4221 ;	genCmpLt
                           4222 ;	genCmp
   113D BB 03 00           4223 	cjne	r3,#0x03,00148$
   1140                    4224 00148$:
                           4225 ;	genIfxJump
   1140 40 03              4226 	jc	00149$
   1142 02s10r1E           4227 	ljmp	00101$
   1145                    4228 00149$:
                           4229 ;	main.c:515: if(ExpiredAlarms[i]){
                           4230 ;	genPlus
                           4231 ;	Peephole 236.g	used r3 instead of ar3
   1145 EB                 4232 	mov	a,r3
   1146 24r01              4233 	add	a,#_ExpiredAlarms
   1148 FC                 4234 	mov	r4,a
                           4235 ;	Peephole 181	changed mov to clr
   1149 E4                 4236 	clr	a
   114A 34s00              4237 	addc	a,#(_ExpiredAlarms >> 8)
   114C FD                 4238 	mov	r5,a
                           4239 ;	genPointerGet
                           4240 ;	genFarPointerGet
   114D 8C 82              4241 	mov	dpl,r4
   114F 8D 83              4242 	mov	dph,r5
   1151 E0                 4243 	movx	a,@dptr
                           4244 ;	genIfxJump
                           4245 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1152 60 55              4246 	jz	00125$
                           4247 ;	Peephole 300	removed redundant label 00150$
                           4248 ;	main.c:516: printf("\r\nAlarm %d disabled!\r\n", i);
                           4249 ;	genCast
   1154 8B 04              4250 	mov	ar4,r3
   1156 7D 00              4251 	mov	r5,#0x00
                           4252 ;	genIpush
   1158 C0 03              4253 	push	ar3
   115A C0 04              4254 	push	ar4
   115C C0 05              4255 	push	ar5
                           4256 ;	genIpush
   115E 74r33              4257 	mov	a,#__str_68
   1160 C0 E0              4258 	push	acc
   1162 74s08              4259 	mov	a,#(__str_68 >> 8)
   1164 C0 E0              4260 	push	acc
   1166 74 80              4261 	mov	a,#0x80
   1168 C0 E0              4262 	push	acc
                           4263 ;	genCall
   116A 12s00r00           4264 	lcall	_printf
   116D E5 81              4265 	mov	a,sp
   116F 24 FB              4266 	add	a,#0xfb
   1171 F5 81              4267 	mov	sp,a
   1173 D0 03              4268 	pop	ar3
                           4269 ;	main.c:517: LCD_gotoxy(0,0);
                           4270 ;	genAssign
   1175 90s00r00           4271 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4272 ;	Peephole 181	changed mov to clr
   1178 E4                 4273 	clr	a
   1179 F0                 4274 	movx	@dptr,a
                           4275 ;	genCall
   117A 75 82 00           4276 	mov	dpl,#0x00
   117D C0 03              4277 	push	ar3
   117F 12s00r00           4278 	lcall	_LCD_gotoxy
   1182 D0 03              4279 	pop	ar3
                           4280 ;	main.c:518: LCD_Putstr("              ");
                           4281 ;	genCall
                           4282 ;	Peephole 182.a	used 16 bit load of DPTR
   1184 90s08r4A           4283 	mov	dptr,#__str_69
   1187 75 F0 80           4284 	mov	b,#0x80
   118A C0 03              4285 	push	ar3
   118C 12s00r00           4286 	lcall	_LCD_Putstr
   118F D0 03              4287 	pop	ar3
                           4288 ;	main.c:519: ActiveAlarms[i] = 0;
                           4289 ;	genPlus
                           4290 ;	Peephole 236.g	used r3 instead of ar3
   1191 EB                 4291 	mov	a,r3
   1192 24r00              4292 	add	a,#_ActiveAlarms
   1194 F5 82              4293 	mov	dpl,a
                           4294 ;	Peephole 181	changed mov to clr
   1196 E4                 4295 	clr	a
   1197 34s00              4296 	addc	a,#(_ActiveAlarms >> 8)
   1199 F5 83              4297 	mov	dph,a
                           4298 ;	genPointerSet
                           4299 ;     genFarPointerSet
                           4300 ;	Peephole 181	changed mov to clr
   119B E4                 4301 	clr	a
   119C F0                 4302 	movx	@dptr,a
                           4303 ;	main.c:520: ExpiredAlarms[i] = 0;
                           4304 ;	genPlus
                           4305 ;	Peephole 236.g	used r3 instead of ar3
   119D EB                 4306 	mov	a,r3
   119E 24r01              4307 	add	a,#_ExpiredAlarms
   11A0 F5 82              4308 	mov	dpl,a
                           4309 ;	Peephole 181	changed mov to clr
   11A2 E4                 4310 	clr	a
   11A3 34s00              4311 	addc	a,#(_ExpiredAlarms >> 8)
   11A5 F5 83              4312 	mov	dph,a
                           4313 ;	genPointerSet
                           4314 ;     genFarPointerSet
                           4315 ;	Peephole 181	changed mov to clr
   11A7 E4                 4316 	clr	a
   11A8 F0                 4317 	movx	@dptr,a
   11A9                    4318 00125$:
                           4319 ;	main.c:514: for (i = 0; i < 3; ++i){
                           4320 ;	genPlus
                           4321 ;     genPlusIncr
   11A9 0B                 4322 	inc	r3
                           4323 ;	main.c:526: goto checkAlarms;
                           4324 ;	Peephole 112.b	changed ljmp to sjmp
   11AA 80 91              4325 	sjmp	00123$
   11AC                    4326 00113$:
                           4327 ;	main.c:530: if (c == ENTER_KEY){
                           4328 ;	genCmpEq
                           4329 ;	gencjneshort
                           4330 ;	Peephole 112.b	changed ljmp to sjmp
                           4331 ;	Peephole 198.b	optimized misc jump sequence
   11AC BA 0D 0A           4332 	cjne	r2,#0x0D,00115$
                           4333 ;	Peephole 200.b	removed redundant sjmp
                           4334 ;	Peephole 300	removed redundant label 00151$
                           4335 ;	Peephole 300	removed redundant label 00152$
                           4336 ;	main.c:531: putchar('\n');
                           4337 ;	genCall
   11AF 75 82 0A           4338 	mov	dpl,#0x0A
   11B2 C0 02              4339 	push	ar2
   11B4 12s00r00           4340 	lcall	_putchar
   11B7 D0 02              4341 	pop	ar2
   11B9                    4342 00115$:
                           4343 ;	main.c:533: putchar(c);
                           4344 ;	genCall
   11B9 8A 82              4345 	mov	dpl,r2
   11BB C0 02              4346 	push	ar2
   11BD 12s00r00           4347 	lcall	_putchar
   11C0 D0 02              4348 	pop	ar2
                           4349 ;	main.c:534: handleInput(c);
                           4350 ;	genCall
   11C2 8A 82              4351 	mov	dpl,r2
   11C4 12s0FrBD           4352 	lcall	_handleInput
   11C7 02s10r1E           4353 	ljmp	00101$
                           4354 ;	Peephole 259.b	removed redundant label 00127$ and ret
                           4355 ;
                           4356 	.area CSEG    (CODE)
                           4357 	.area CONST   (CODE)
   0000                    4358 __str_0:
   0000 0D                 4359 	.db 0x0D
   0001 0A                 4360 	.db 0x0A
   0002 45 6E 74 65 72 20  4361 	.ascii "Enter an EEPROM block number from 0-7: "
        61 6E 20 45 45 50
        52 4F 4D 20 62 6C
        6F 63 6B 20 6E 75
        6D 62 65 72 20 66
        72 6F 6D 20 30 2D
        37 3A 20
   0029 00                 4362 	.db 0x00
   002A                    4363 __str_1:
   002A 0D                 4364 	.db 0x0D
   002B 0A                 4365 	.db 0x0A
   002C 49 4E 56 41 4C 49  4366 	.ascii "INVALID: Enter an EEPROM block number from 0-7: "
        44 3A 20 45 6E 74
        65 72 20 61 6E 20
        45 45 50 52 4F 4D
        20 62 6C 6F 63 6B
        20 6E 75 6D 62 65
        72 20 66 72 6F 6D
        20 30 2D 37 3A 20
   005C 00                 4367 	.db 0x00
   005D                    4368 __str_2:
   005D 0D                 4369 	.db 0x0D
   005E 0A                 4370 	.db 0x0A
   005F 45 6E 74 65 72 20  4371 	.ascii "Enter an EEPROM Word address in hex:"
        61 6E 20 45 45 50
        52 4F 4D 20 57 6F
        72 64 20 61 64 64
        72 65 73 73 20 69
        6E 20 68 65 78 3A
   0083 00                 4372 	.db 0x00
   0084                    4373 __str_3:
   0084 0D                 4374 	.db 0x0D
   0085 0A                 4375 	.db 0x0A
   0086 49 6E 20 4C 43 44  4376 	.ascii "In LCD Mode"
        20 4D 6F 64 65
   0091 00                 4377 	.db 0x00
   0092                    4378 __str_4:
   0092 0D                 4379 	.db 0x0D
   0093 0A                 4380 	.db 0x0A
   0094 50 72 65 73 73 20  4381 	.ascii "Press 'H' for help"
        27 48 27 20 66 6F
        72 20 68 65 6C 70
   00A6 00                 4382 	.db 0x00
   00A7                    4383 __str_5:
   00A7 0D                 4384 	.db 0x0D
   00A8 0A                 4385 	.db 0x0A
   00A9 50 72 65 73 73 20  4386 	.ascii "Press 'I' to Init LCD. Must call this first"
        27 49 27 20 74 6F
        20 49 6E 69 74 20
        4C 43 44 2E 20 4D
        75 73 74 20 63 61
        6C 6C 20 74 68 69
        73 20 66 69 72 73
        74
   00D4 00                 4387 	.db 0x00
   00D5                    4388 __str_6:
   00D5 0D                 4389 	.db 0x0D
   00D6 0A                 4390 	.db 0x0A
   00D7 50 72 65 73 73 20  4391 	.ascii "Press 'g' to show gotoaddr "
        27 67 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 61 64
        64 72 20
   00F2 00                 4392 	.db 0x00
   00F3                    4393 __str_7:
   00F3 0D                 4394 	.db 0x0D
   00F4 0A                 4395 	.db 0x0A
   00F5 50 72 65 73 73 20  4396 	.ascii "Press 'x' to show gotoxy"
        27 78 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 78 79
   010D 00                 4397 	.db 0x00
   010E                    4398 __str_8:
   010E 0D                 4399 	.db 0x0D
   010F 0A                 4400 	.db 0x0A
   0110 50 72 65 73 73 20  4401 	.ascii "Press 'c' to show putch "
        27 63 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 63 68 20
   0128 00                 4402 	.db 0x00
   0129                    4403 __str_9:
   0129 0D                 4404 	.db 0x0D
   012A 0A                 4405 	.db 0x0A
   012B 50 72 65 73 73 20  4406 	.ascii "Press 's' to show putstr"
        27 73 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 73 74 72
   0143 00                 4407 	.db 0x00
   0144                    4408 __str_10:
   0144 0D                 4409 	.db 0x0D
   0145 0A                 4410 	.db 0x0A
   0146 50 72 65 73 73 20  4411 	.ascii "Press 'C' to clear the LCD display"
        27 43 27 20 74 6F
        20 63 6C 65 61 72
        20 74 68 65 20 4C
        43 44 20 64 69 73
        70 6C 61 79
   0168 00                 4412 	.db 0x00
   0169                    4413 __str_11:
   0169 0D                 4414 	.db 0x0D
   016A 0A                 4415 	.db 0x0A
   016B 50 72 65 73 73 20  4416 	.ascii "Press 'Y' to read the contents of DDRAM"
        27 59 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 44 44
        52 41 4D
   0192 00                 4417 	.db 0x00
   0193                    4418 __str_12:
   0193 0D                 4419 	.db 0x0D
   0194 0A                 4420 	.db 0x0A
   0195 50 72 65 73 73 20  4421 	.ascii "Press 'G' to read the contents of CGRAM"
        27 47 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 43 47
        52 41 4D
   01BC 00                 4422 	.db 0x00
   01BD                    4423 __str_13:
   01BD 0D                 4424 	.db 0x0D
   01BE 0A                 4425 	.db 0x0A
   01BF 50 72 65 73 73 20  4426 	.ascii "Press 'r' to return to main menu"
        27 72 27 20 74 6F
        20 72 65 74 75 72
        6E 20 74 6F 20 6D
        61 69 6E 20 6D 65
        6E 75
   01DF 0D                 4427 	.db 0x0D
   01E0 0A                 4428 	.db 0x0A
   01E1 00                 4429 	.db 0x00
   01E2                    4430 __str_14:
   01E2 0D                 4431 	.db 0x0D
   01E3 0A                 4432 	.db 0x0A
   01E4 49 6E 69 74 69 61  4433 	.ascii "Initializing LCD"
        6C 69 7A 69 6E 67
        20 4C 43 44
   01F4 0D                 4434 	.db 0x0D
   01F5 0A                 4435 	.db 0x0A
   01F6 00                 4436 	.db 0x00
   01F7                    4437 __str_15:
   01F7 0D                 4438 	.db 0x0D
   01F8 0A                 4439 	.db 0x0A
   01F9 45 6E 74 65 72 20  4440 	.ascii "Enter a hex address to go to"
        61 20 68 65 78 20
        61 64 64 72 65 73
        73 20 74 6F 20 67
        6F 20 74 6F
   0215 0D                 4441 	.db 0x0D
   0216 0A                 4442 	.db 0x0A
   0217 00                 4443 	.db 0x00
   0218                    4444 __str_16:
   0218 0D                 4445 	.db 0x0D
   0219 0A                 4446 	.db 0x0A
   021A 45 6E 74 65 72 20  4447 	.ascii "Enter a row from 0-3:"
        61 20 72 6F 77 20
        66 72 6F 6D 20 30
        2D 33 3A
   022F 00                 4448 	.db 0x00
   0230                    4449 __str_17:
   0230 0D                 4450 	.db 0x0D
   0231 0A                 4451 	.db 0x0A
   0232 45 6E 74 65 72 20  4452 	.ascii "Enter a col from 0-15:"
        61 20 63 6F 6C 20
        66 72 6F 6D 20 30
        2D 31 35 3A
   0248 00                 4453 	.db 0x00
   0249                    4454 __str_18:
   0249 0D                 4455 	.db 0x0D
   024A 0A                 4456 	.db 0x0A
   024B 4D 6F 76 65 64 20  4457 	.ascii "Moved cursor to new location (%d,%d)"
        63 75 72 73 6F 72
        20 74 6F 20 6E 65
        77 20 6C 6F 63 61
        74 69 6F 6E 20 28
        25 64 2C 25 64 29
   026F 0D                 4458 	.db 0x0D
   0270 0A                 4459 	.db 0x0A
   0271 00                 4460 	.db 0x00
   0272                    4461 __str_19:
   0272 0D                 4462 	.db 0x0D
   0273 0A                 4463 	.db 0x0A
   0274 45 6E 74 65 72 20  4464 	.ascii "Enter a character to put at current address"
        61 20 63 68 61 72
        61 63 74 65 72 20
        74 6F 20 70 75 74
        20 61 74 20 63 75
        72 72 65 6E 74 20
        61 64 64 72 65 73
        73
   029F 0D                 4465 	.db 0x0D
   02A0 0A                 4466 	.db 0x0A
   02A1 00                 4467 	.db 0x00
   02A2                    4468 __str_20:
   02A2 0D                 4469 	.db 0x0D
   02A3 45 6E 74 65 72 20  4470 	.ascii "Enter a string"
        61 20 73 74 72 69
        6E 67
   02B1 0D                 4471 	.db 0x0D
   02B2 0A                 4472 	.db 0x0A
   02B3 00                 4473 	.db 0x00
   02B4                    4474 __str_21:
   02B4 0D                 4475 	.db 0x0D
   02B5 0A                 4476 	.db 0x0A
   02B6 4C 43 44 20 44 69  4477 	.ascii "LCD Display Cleared!"
        73 70 6C 61 79 20
        43 6C 65 61 72 65
        64 21
   02CA 0D                 4478 	.db 0x0D
   02CB 0A                 4479 	.db 0x0A
   02CC 00                 4480 	.db 0x00
   02CD                    4481 __str_22:
   02CD 0D                 4482 	.db 0x0D
   02CE 0A                 4483 	.db 0x0A
   02CF 49 6E 20 45 45 50  4484 	.ascii "In EEPROM Mode"
        52 4F 4D 20 4D 6F
        64 65
   02DD 00                 4485 	.db 0x00
   02DE                    4486 __str_23:
   02DE 0D                 4487 	.db 0x0D
   02DF 0A                 4488 	.db 0x0A
   02E0 50 72 65 73 73 20  4489 	.ascii "Press 'W' to write a byte to EEPROM"
        27 57 27 20 74 6F
        20 77 72 69 74 65
        20 61 20 62 79 74
        65 20 74 6F 20 45
        45 50 52 4F 4D
   0303 00                 4490 	.db 0x00
   0304                    4491 __str_24:
   0304 0D                 4492 	.db 0x0D
   0305 0A                 4493 	.db 0x0A
   0306 50 72 65 73 73 20  4494 	.ascii "Press 'R' to read a byte from EEPROM"
        27 52 27 20 74 6F
        20 72 65 61 64 20
        61 20 62 79 74 65
        20 66 72 6F 6D 20
        45 45 50 52 4F 4D
   032A 00                 4495 	.db 0x00
   032B                    4496 __str_25:
   032B 0D                 4497 	.db 0x0D
   032C 0A                 4498 	.db 0x0A
   032D 50 72 65 73 73 20  4499 	.ascii "Press 'L' to display EEPROM data on LCD"
        27 4C 27 20 74 6F
        20 64 69 73 70 6C
        61 79 20 45 45 50
        52 4F 4D 20 64 61
        74 61 20 6F 6E 20
        4C 43 44
   0354 00                 4500 	.db 0x00
   0355                    4501 __str_26:
   0355 0D                 4502 	.db 0x0D
   0356 0A                 4503 	.db 0x0A
   0357 50 72 65 73 73 20  4504 	.ascii "Press 'D' to do a Hex Dump of EEPROM"
        27 44 27 20 74 6F
        20 64 6F 20 61 20
        48 65 78 20 44 75
        6D 70 20 6F 66 20
        45 45 50 52 4F 4D
   037B 00                 4505 	.db 0x00
   037C                    4506 __str_27:
   037C 0D                 4507 	.db 0x0D
   037D 0A                 4508 	.db 0x0A
   037E 57 72 69 74 69 6E  4509 	.ascii "Writing to EEPROM..."
        67 20 74 6F 20 45
        45 50 52 4F 4D 2E
        2E 2E
   0392 00                 4510 	.db 0x00
   0393                    4511 __str_28:
   0393 0D                 4512 	.db 0x0D
   0394 0A                 4513 	.db 0x0A
   0395 45 6E 74 65 72 20  4514 	.ascii "Enter a byte of data to write to EEPROM:"
        61 20 62 79 74 65
        20 6F 66 20 64 61
        74 61 20 74 6F 20
        77 72 69 74 65 20
        74 6F 20 45 45 50
        52 4F 4D 3A
   03BD 00                 4515 	.db 0x00
   03BE                    4516 __str_29:
   03BE 0D                 4517 	.db 0x0D
   03BF 0A                 4518 	.db 0x0A
   03C0 57 72 6F 74 65 20  4519 	.ascii "Wrote %X to block %d address 0x%X in EEPROM!"
        25 58 20 74 6F 20
        62 6C 6F 63 6B 20
        25 64 20 61 64 64
        72 65 73 73 20 30
        78 25 58 20 69 6E
        20 45 45 50 52 4F
        4D 21
   03EC 0D                 4520 	.db 0x0D
   03ED 0A                 4521 	.db 0x0A
   03EE 00                 4522 	.db 0x00
   03EF                    4523 __str_30:
   03EF 0D                 4524 	.db 0x0D
   03F0 0A                 4525 	.db 0x0A
   03F1 52 65 61 64 69 6E  4526 	.ascii "Reading from EEPROM..."
        67 20 66 72 6F 6D
        20 45 45 50 52 4F
        4D 2E 2E 2E
   0407 00                 4527 	.db 0x00
   0408                    4528 __str_31:
   0408 0D                 4529 	.db 0x0D
   0409 0A                 4530 	.db 0x0A
   040A 52 65 61 64 20 25  4531 	.ascii "Read %X from block %d address 0x%X"
        58 20 66 72 6F 6D
        20 62 6C 6F 63 6B
        20 25 64 20 61 64
        64 72 65 73 73 20
        30 78 25 58
   042C 0D                 4532 	.db 0x0D
   042D 0A                 4533 	.db 0x0A
   042E 00                 4534 	.db 0x00
   042F                    4535 __str_32:
   042F 0D                 4536 	.db 0x0D
   0430 0A                 4537 	.db 0x0A
   0431 45 6E 74 65 72 20  4538 	.ascii "Enter LCD row from 0-3:"
        4C 43 44 20 72 6F
        77 20 66 72 6F 6D
        20 30 2D 33 3A
   0448 00                 4539 	.db 0x00
   0449                    4540 __str_33:
   0449 3A 20              4541 	.ascii ": "
   044B 00                 4542 	.db 0x00
   044C                    4543 __str_34:
   044C 0D                 4544 	.db 0x0D
   044D 0A                 4545 	.db 0x0A
   044E 57 72 6F 74 65 20  4546 	.ascii "Wrote to LCD!"
        74 6F 20 4C 43 44
        21
   045B 0D                 4547 	.db 0x0D
   045C 0A                 4548 	.db 0x0A
   045D 00                 4549 	.db 0x00
   045E                    4550 __str_35:
   045E 0D                 4551 	.db 0x0D
   045F 0A                 4552 	.db 0x0A
   0460 50 65 72 66 6F 72  4553 	.ascii "Performing an EEPROM data dump"
        6D 69 6E 67 20 61
        6E 20 45 45 50 52
        4F 4D 20 64 61 74
        61 20 64 75 6D 70
   047E 0D                 4554 	.db 0x0D
   047F 0A                 4555 	.db 0x0A
   0480 00                 4556 	.db 0x00
   0481                    4557 __str_36:
   0481 0D                 4558 	.db 0x0D
   0482 0A                 4559 	.db 0x0A
   0483 45 6E 74 65 72 20  4560 	.ascii "Enter the starting block and address"
        74 68 65 20 73 74
        61 72 74 69 6E 67
        20 62 6C 6F 63 6B
        20 61 6E 64 20 61
        64 64 72 65 73 73
   04A7 00                 4561 	.db 0x00
   04A8                    4562 __str_37:
   04A8 0D                 4563 	.db 0x0D
   04A9 0A                 4564 	.db 0x0A
   04AA 45 6E 74 65 72 20  4565 	.ascii "Enter the ending block and address"
        74 68 65 20 65 6E
        64 69 6E 67 20 62
        6C 6F 63 6B 20 61
        6E 64 20 61 64 64
        72 65 73 73
   04CC 00                 4566 	.db 0x00
   04CD                    4567 __str_38:
   04CD 0D                 4568 	.db 0x0D
   04CE 0A                 4569 	.db 0x0A
   04CF 49 6E 76 61 6C 69  4570 	.ascii "Invalid addresses. End address must be after start address"
        64 20 61 64 64 72
        65 73 73 65 73 2E
        20 45 6E 64 20 61
        64 64 72 65 73 73
        20 6D 75 73 74 20
        62 65 20 61 66 74
        65 72 20 73 74 61
        72 74 20 61 64 64
        72 65 73 73
   0509 00                 4571 	.db 0x00
   050A                    4572 __str_39:
   050A 0D                 4573 	.db 0x0D
   050B 0A                 4574 	.db 0x0A
   050C 00                 4575 	.db 0x00
   050D                    4576 __str_40:
   050D 25 78 3A 20        4577 	.ascii "%x: "
   0511 00                 4578 	.db 0x00
   0512                    4579 __str_41:
   0512 25 78 20           4580 	.ascii "%x "
   0515 00                 4581 	.db 0x00
   0516                    4582 __str_42:
   0516 0D                 4583 	.db 0x0D
   0517 0A                 4584 	.db 0x0A
   0518 49 6E 20 43 6C 6F  4585 	.ascii "In Clock Mode"
        63 6B 20 4D 6F 64
        65
   0525 00                 4586 	.db 0x00
   0526                    4587 __str_43:
   0526 0D                 4588 	.db 0x0D
   0527 0A                 4589 	.db 0x0A
   0528 50 72 65 73 73 20  4590 	.ascii "Press 'T' to stop the clock"
        27 54 27 20 74 6F
        20 73 74 6F 70 20
        74 68 65 20 63 6C
        6F 63 6B
   0543 00                 4591 	.db 0x00
   0544                    4592 __str_44:
   0544 0D                 4593 	.db 0x0D
   0545 0A                 4594 	.db 0x0A
   0546 50 72 65 73 73 20  4595 	.ascii "Press 'S' to start the clock again"
        27 53 27 20 74 6F
        20 73 74 61 72 74
        20 74 68 65 20 63
        6C 6F 63 6B 20 61
        67 61 69 6E
   0568 00                 4596 	.db 0x00
   0569                    4597 __str_45:
   0569 0D                 4598 	.db 0x0D
   056A 0A                 4599 	.db 0x0A
   056B 50 72 65 73 73 20  4600 	.ascii "Press 'O' to reset the clock to 0"
        27 4F 27 20 74 6F
        20 72 65 73 65 74
        20 74 68 65 20 63
        6C 6F 63 6B 20 74
        6F 20 30
   058C 00                 4601 	.db 0x00
   058D                    4602 __str_46:
   058D 0D                 4603 	.db 0x0D
   058E 0A                 4604 	.db 0x0A
   058F 50 72 65 73 73 20  4605 	.ascii "Press 'N' to create a new alarm"
        27 4E 27 20 74 6F
        20 63 72 65 61 74
        65 20 61 20 6E 65
        77 20 61 6C 61 72
        6D
   05AE 00                 4606 	.db 0x00
   05AF                    4607 __str_47:
   05AF 0D                 4608 	.db 0x0D
   05B0 0A                 4609 	.db 0x0A
   05B1 50 72 65 73 73 20  4610 	.ascii "Press 'C' to view count for each alarm"
        27 43 27 20 74 6F
        20 76 69 65 77 20
        63 6F 75 6E 74 20
        66 6F 72 20 65 61
        63 68 20 61 6C 61
        72 6D
   05D7 00                 4611 	.db 0x00
   05D8                    4612 __str_48:
   05D8 0D                 4613 	.db 0x0D
   05D9 0A                 4614 	.db 0x0A
   05DA 50 72 65 73 73 20  4615 	.ascii "Press 'D' to disable an alarm"
        27 44 27 20 74 6F
        20 64 69 73 61 62
        6C 65 20 61 6E 20
        61 6C 61 72 6D
   05F7 00                 4616 	.db 0x00
   05F8                    4617 __str_49:
   05F8 0D                 4618 	.db 0x0D
   05F9 0A                 4619 	.db 0x0A
   05FA 50 72 65 73 73 20  4620 	.ascii "Press 'E' to reenable an alarm"
        27 45 27 20 74 6F
        20 72 65 65 6E 61
        62 6C 65 20 61 6E
        20 61 6C 61 72 6D
   0618 00                 4621 	.db 0x00
   0619                    4622 __str_50:
   0619 0D                 4623 	.db 0x0D
   061A 0A                 4624 	.db 0x0A
   061B 53 74 6F 70 70 69  4625 	.ascii "Stopping the clock"
        6E 67 20 74 68 65
        20 63 6C 6F 63 6B
   062D 00                 4626 	.db 0x00
   062E                    4627 __str_51:
   062E 0D                 4628 	.db 0x0D
   062F 0A                 4629 	.db 0x0A
   0630 53 74 61 72 74 69  4630 	.ascii "Starting the clock"
        6E 67 20 74 68 65
        20 63 6C 6F 63 6B
   0642 00                 4631 	.db 0x00
   0643                    4632 __str_52:
   0643 0D                 4633 	.db 0x0D
   0644 0A                 4634 	.db 0x0A
   0645 52 65 73 65 74 74  4635 	.ascii "Resetting the clock"
        69 6E 67 20 74 68
        65 20 63 6C 6F 63
        6B
   0658 00                 4636 	.db 0x00
   0659                    4637 __str_53:
   0659 0D                 4638 	.db 0x0D
   065A 0A                 4639 	.db 0x0A
   065B 45 6E 74 65 72 20  4640 	.ascii "Enter alarm time in seconds:"
        61 6C 61 72 6D 20
        74 69 6D 65 20 69
        6E 20 73 65 63 6F
        6E 64 73 3A
   0677 0D                 4641 	.db 0x0D
   0678 0A                 4642 	.db 0x0A
   0679 00                 4643 	.db 0x00
   067A                    4644 __str_54:
   067A 0D                 4645 	.db 0x0D
   067B 0A                 4646 	.db 0x0A
   067C 41 6C 61 72 6D 20  4647 	.ascii "Alarm %d: %u <Enabled>"
        25 64 3A 20 25 75
        20 3C 45 6E 61 62
        6C 65 64 3E
   0692 00                 4648 	.db 0x00
   0693                    4649 __str_55:
   0693 0D                 4650 	.db 0x0D
   0694 0A                 4651 	.db 0x0A
   0695 41 6C 61 72 6D 20  4652 	.ascii "Alarm %d: %u <Disabled>"
        25 64 3A 20 25 75
        20 3C 44 69 73 61
        62 6C 65 64 3E
   06AC 00                 4653 	.db 0x00
   06AD                    4654 __str_56:
   06AD 0D                 4655 	.db 0x0D
   06AE 0A                 4656 	.db 0x0A
   06AF 45 6E 74 65 72 20  4657 	.ascii "Enter an alarm number from 0-2 to disable:"
        61 6E 20 61 6C 61
        72 6D 20 6E 75 6D
        62 65 72 20 66 72
        6F 6D 20 30 2D 32
        20 74 6F 20 64 69
        73 61 62 6C 65 3A
   06D9 00                 4658 	.db 0x00
   06DA                    4659 __str_57:
   06DA 0D                 4660 	.db 0x0D
   06DB 0A                 4661 	.db 0x0A
   06DC 41 6C 61 72 6D 20  4662 	.ascii "Alarm %d disabled"
        25 64 20 64 69 73
        61 62 6C 65 64
   06ED 0D                 4663 	.db 0x0D
   06EE 0A                 4664 	.db 0x0A
   06EF 00                 4665 	.db 0x00
   06F0                    4666 __str_58:
   06F0 0D                 4667 	.db 0x0D
   06F1 0A                 4668 	.db 0x0A
   06F2 45 6E 74 65 72 20  4669 	.ascii "Enter an alarm number from 0-2 to enable:"
        61 6E 20 61 6C 61
        72 6D 20 6E 75 6D
        62 65 72 20 66 72
        6F 6D 20 30 2D 32
        20 74 6F 20 65 6E
        61 62 6C 65 3A
   071B 00                 4670 	.db 0x00
   071C                    4671 __str_59:
   071C 0D                 4672 	.db 0x0D
   071D 0A                 4673 	.db 0x0A
   071E 41 6C 61 72 6D 20  4674 	.ascii "Alarm %d enabled"
        25 64 20 65 6E 61
        62 6C 65 64
   072E 0D                 4675 	.db 0x0D
   072F 0A                 4676 	.db 0x0A
   0730 00                 4677 	.db 0x00
   0731                    4678 __str_60:
   0731 0D                 4679 	.db 0x0D
   0732 0A                 4680 	.db 0x0A
   0733 2A 2A 2A 2A 2A 2A  4681 	.ascii "***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0742 00                 4682 	.db 0x00
   0743                    4683 __str_61:
   0743 0D                 4684 	.db 0x0D
   0744 0A                 4685 	.db 0x0A
   0745 20 20 20 20 4D 65  4686 	.ascii "    Menu"
        6E 75
   074D 0D                 4687 	.db 0x0D
   074E 0A                 4688 	.db 0x0A
   074F 00                 4689 	.db 0x00
   0750                    4690 __str_62:
   0750 0D                 4691 	.db 0x0D
   0751 0A                 4692 	.db 0x0A
   0752 50 72 65 73 73 20  4693 	.ascii "Press 'H' to show the help menu"
        27 48 27 20 74 6F
        20 73 68 6F 77 20
        74 68 65 20 68 65
        6C 70 20 6D 65 6E
        75
   0771 00                 4694 	.db 0x00
   0772                    4695 __str_63:
   0772 0D                 4696 	.db 0x0D
   0773 0A                 4697 	.db 0x0A
   0774 50 72 65 73 73 20  4698 	.ascii "Press 'L' to enter LCD control mode"
        27 4C 27 20 74 6F
        20 65 6E 74 65 72
        20 4C 43 44 20 63
        6F 6E 74 72 6F 6C
        20 6D 6F 64 65
   0797 00                 4699 	.db 0x00
   0798                    4700 __str_64:
   0798 0D                 4701 	.db 0x0D
   0799 0A                 4702 	.db 0x0A
   079A 50 72 65 73 73 20  4703 	.ascii "Press 'E' to enter EEPROM control mode"
        27 45 27 20 74 6F
        20 65 6E 74 65 72
        20 45 45 50 52 4F
        4D 20 63 6F 6E 74
        72 6F 6C 20 6D 6F
        64 65
   07C0 00                 4704 	.db 0x00
   07C1                    4705 __str_65:
   07C1 0D                 4706 	.db 0x0D
   07C2 0A                 4707 	.db 0x0A
   07C3 50 72 65 73 73 20  4708 	.ascii "Press 'C' to enter Clock control mode"
        27 43 27 20 74 6F
        20 65 6E 74 65 72
        20 43 6C 6F 63 6B
        20 63 6F 6E 74 72
        6F 6C 20 6D 6F 64
        65
   07E8 0D                 4709 	.db 0x0D
   07E9 0A                 4710 	.db 0x0A
   07EA 00                 4711 	.db 0x00
   07EB                    4712 __str_66:
   07EB 0D                 4713 	.db 0x0D
   07EC 0A                 4714 	.db 0x0A
   07ED 41 6C 61 72 6D 20  4715 	.ascii "Alarm %d going off, you must press 'D' to disable it"
        25 64 20 67 6F 69
        6E 67 20 6F 66 66
        2C 20 79 6F 75 20
        6D 75 73 74 20 70
        72 65 73 73 20 27
        44 27 20 74 6F 20
        64 69 73 61 62 6C
        65 20 69 74
   0821 0D                 4716 	.db 0x0D
   0822 0A                 4717 	.db 0x0A
   0823 00                 4718 	.db 0x00
   0824                    4719 __str_67:
   0824 44 69 73 61 62 6C  4720 	.ascii "Disable Alarm!"
        65 20 41 6C 61 72
        6D 21
   0832 00                 4721 	.db 0x00
   0833                    4722 __str_68:
   0833 0D                 4723 	.db 0x0D
   0834 0A                 4724 	.db 0x0A
   0835 41 6C 61 72 6D 20  4725 	.ascii "Alarm %d disabled!"
        25 64 20 64 69 73
        61 62 6C 65 64 21
   0847 0D                 4726 	.db 0x0D
   0848 0A                 4727 	.db 0x0A
   0849 00                 4728 	.db 0x00
   084A                    4729 __str_69:
   084A 20 20 20 20 20 20  4730 	.ascii "              "
        20 20 20 20 20 20
        20 20
   0858 00                 4731 	.db 0x00
                           4732 	.area XINIT   (CODE)
   0000                    4733 __xinit__mode:
   0000 00                 4734 	.db #0x00
   0001                    4735 __xinit__ExpiredAlarms:
   0001 00                 4736 	.db #0x00
   0002 00                 4737 	.db #0x00
   0003 00                 4738 	.db #0x00
