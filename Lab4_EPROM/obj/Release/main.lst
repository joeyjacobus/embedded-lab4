                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sun Nov 06 15:57:28 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _handleInput
                             14 	.globl _ShowMenu
                             15 	.globl __sdcc_external_startup
                             16 	.globl _P5_7
                             17 	.globl _P5_6
                             18 	.globl _P5_5
                             19 	.globl _P5_4
                             20 	.globl _P5_3
                             21 	.globl _P5_2
                             22 	.globl _P5_1
                             23 	.globl _P5_0
                             24 	.globl _P4_7
                             25 	.globl _P4_6
                             26 	.globl _P4_5
                             27 	.globl _P4_4
                             28 	.globl _P4_3
                             29 	.globl _P4_2
                             30 	.globl _P4_1
                             31 	.globl _P4_0
                             32 	.globl _PX0L
                             33 	.globl _PT0L
                             34 	.globl _PX1L
                             35 	.globl _PT1L
                             36 	.globl _PLS
                             37 	.globl _PT2L
                             38 	.globl _PPCL
                             39 	.globl _EC
                             40 	.globl _CCF0
                             41 	.globl _CCF1
                             42 	.globl _CCF2
                             43 	.globl _CCF3
                             44 	.globl _CCF4
                             45 	.globl _CR
                             46 	.globl _CF
                             47 	.globl _TF2
                             48 	.globl _EXF2
                             49 	.globl _RCLK
                             50 	.globl _TCLK
                             51 	.globl _EXEN2
                             52 	.globl _TR2
                             53 	.globl _C_T2
                             54 	.globl _CP_RL2
                             55 	.globl _T2CON_7
                             56 	.globl _T2CON_6
                             57 	.globl _T2CON_5
                             58 	.globl _T2CON_4
                             59 	.globl _T2CON_3
                             60 	.globl _T2CON_2
                             61 	.globl _T2CON_1
                             62 	.globl _T2CON_0
                             63 	.globl _PT2
                             64 	.globl _ET2
                             65 	.globl _CY
                             66 	.globl _AC
                             67 	.globl _F0
                             68 	.globl _RS1
                             69 	.globl _RS0
                             70 	.globl _OV
                             71 	.globl _F1
                             72 	.globl _P
                             73 	.globl _PS
                             74 	.globl _PT1
                             75 	.globl _PX1
                             76 	.globl _PT0
                             77 	.globl _PX0
                             78 	.globl _RD
                             79 	.globl _WR
                             80 	.globl _T1
                             81 	.globl _T0
                             82 	.globl _INT1
                             83 	.globl _INT0
                             84 	.globl _TXD
                             85 	.globl _RXD
                             86 	.globl _P3_7
                             87 	.globl _P3_6
                             88 	.globl _P3_5
                             89 	.globl _P3_4
                             90 	.globl _P3_3
                             91 	.globl _P3_2
                             92 	.globl _P3_1
                             93 	.globl _P3_0
                             94 	.globl _EA
                             95 	.globl _ES
                             96 	.globl _ET1
                             97 	.globl _EX1
                             98 	.globl _ET0
                             99 	.globl _EX0
                            100 	.globl _P2_7
                            101 	.globl _P2_6
                            102 	.globl _P2_5
                            103 	.globl _P2_4
                            104 	.globl _P2_3
                            105 	.globl _P2_2
                            106 	.globl _P2_1
                            107 	.globl _P2_0
                            108 	.globl _SM0
                            109 	.globl _SM1
                            110 	.globl _SM2
                            111 	.globl _REN
                            112 	.globl _TB8
                            113 	.globl _RB8
                            114 	.globl _TI
                            115 	.globl _RI
                            116 	.globl _P1_7
                            117 	.globl _P1_6
                            118 	.globl _P1_5
                            119 	.globl _P1_4
                            120 	.globl _P1_3
                            121 	.globl _P1_2
                            122 	.globl _P1_1
                            123 	.globl _P1_0
                            124 	.globl _TF1
                            125 	.globl _TR1
                            126 	.globl _TF0
                            127 	.globl _TR0
                            128 	.globl _IE1
                            129 	.globl _IT1
                            130 	.globl _IE0
                            131 	.globl _IT0
                            132 	.globl _P0_7
                            133 	.globl _P0_6
                            134 	.globl _P0_5
                            135 	.globl _P0_4
                            136 	.globl _P0_3
                            137 	.globl _P0_2
                            138 	.globl _P0_1
                            139 	.globl _P0_0
                            140 	.globl _EECON
                            141 	.globl _KBF
                            142 	.globl _KBE
                            143 	.globl _KBLS
                            144 	.globl _BRL
                            145 	.globl _BDRCON
                            146 	.globl _T2MOD
                            147 	.globl _SPDAT
                            148 	.globl _SPSTA
                            149 	.globl _SPCON
                            150 	.globl _SADEN
                            151 	.globl _SADDR
                            152 	.globl _WDTPRG
                            153 	.globl _WDTRST
                            154 	.globl _P5
                            155 	.globl _P4
                            156 	.globl _IPH1
                            157 	.globl _IPL1
                            158 	.globl _IPH0
                            159 	.globl _IPL0
                            160 	.globl _IEN1
                            161 	.globl _IEN0
                            162 	.globl _CMOD
                            163 	.globl _CL
                            164 	.globl _CH
                            165 	.globl _CCON
                            166 	.globl _CCAPM4
                            167 	.globl _CCAPM3
                            168 	.globl _CCAPM2
                            169 	.globl _CCAPM1
                            170 	.globl _CCAPM0
                            171 	.globl _CCAP4L
                            172 	.globl _CCAP3L
                            173 	.globl _CCAP2L
                            174 	.globl _CCAP1L
                            175 	.globl _CCAP0L
                            176 	.globl _CCAP4H
                            177 	.globl _CCAP3H
                            178 	.globl _CCAP2H
                            179 	.globl _CCAP1H
                            180 	.globl _CCAP0H
                            181 	.globl _CKCKON1
                            182 	.globl _CKCKON0
                            183 	.globl _CKRL
                            184 	.globl _AUXR1
                            185 	.globl _AUXR
                            186 	.globl _TH2
                            187 	.globl _TL2
                            188 	.globl _RCAP2H
                            189 	.globl _RCAP2L
                            190 	.globl _T2CON
                            191 	.globl _B
                            192 	.globl _ACC
                            193 	.globl _PSW
                            194 	.globl _IP
                            195 	.globl _P3
                            196 	.globl _IE
                            197 	.globl _P2
                            198 	.globl _SBUF
                            199 	.globl _SCON
                            200 	.globl _P1
                            201 	.globl _TH1
                            202 	.globl _TH0
                            203 	.globl _TL1
                            204 	.globl _TL0
                            205 	.globl _TMOD
                            206 	.globl _TCON
                            207 	.globl _PCON
                            208 	.globl _DPH
                            209 	.globl _DPL
                            210 	.globl _SP
                            211 	.globl _P0
                            212 ;--------------------------------------------------------
                            213 ; special function registers
                            214 ;--------------------------------------------------------
                            215 	.area RSEG    (DATA)
                    0080    216 _P0	=	0x0080
                    0081    217 _SP	=	0x0081
                    0082    218 _DPL	=	0x0082
                    0083    219 _DPH	=	0x0083
                    0087    220 _PCON	=	0x0087
                    0088    221 _TCON	=	0x0088
                    0089    222 _TMOD	=	0x0089
                    008A    223 _TL0	=	0x008a
                    008B    224 _TL1	=	0x008b
                    008C    225 _TH0	=	0x008c
                    008D    226 _TH1	=	0x008d
                    0090    227 _P1	=	0x0090
                    0098    228 _SCON	=	0x0098
                    0099    229 _SBUF	=	0x0099
                    00A0    230 _P2	=	0x00a0
                    00A8    231 _IE	=	0x00a8
                    00B0    232 _P3	=	0x00b0
                    00B8    233 _IP	=	0x00b8
                    00D0    234 _PSW	=	0x00d0
                    00E0    235 _ACC	=	0x00e0
                    00F0    236 _B	=	0x00f0
                    00C8    237 _T2CON	=	0x00c8
                    00CA    238 _RCAP2L	=	0x00ca
                    00CB    239 _RCAP2H	=	0x00cb
                    00CC    240 _TL2	=	0x00cc
                    00CD    241 _TH2	=	0x00cd
                    008E    242 _AUXR	=	0x008e
                    00A2    243 _AUXR1	=	0x00a2
                    0097    244 _CKRL	=	0x0097
                    008F    245 _CKCKON0	=	0x008f
                    008F    246 _CKCKON1	=	0x008f
                    00FA    247 _CCAP0H	=	0x00fa
                    00FB    248 _CCAP1H	=	0x00fb
                    00FC    249 _CCAP2H	=	0x00fc
                    00FD    250 _CCAP3H	=	0x00fd
                    00FE    251 _CCAP4H	=	0x00fe
                    00EA    252 _CCAP0L	=	0x00ea
                    00EB    253 _CCAP1L	=	0x00eb
                    00EC    254 _CCAP2L	=	0x00ec
                    00ED    255 _CCAP3L	=	0x00ed
                    00EE    256 _CCAP4L	=	0x00ee
                    00DA    257 _CCAPM0	=	0x00da
                    00DB    258 _CCAPM1	=	0x00db
                    00DC    259 _CCAPM2	=	0x00dc
                    00DD    260 _CCAPM3	=	0x00dd
                    00DE    261 _CCAPM4	=	0x00de
                    00D8    262 _CCON	=	0x00d8
                    00F9    263 _CH	=	0x00f9
                    00E9    264 _CL	=	0x00e9
                    00D9    265 _CMOD	=	0x00d9
                    00A8    266 _IEN0	=	0x00a8
                    00B1    267 _IEN1	=	0x00b1
                    00B8    268 _IPL0	=	0x00b8
                    00B7    269 _IPH0	=	0x00b7
                    00B2    270 _IPL1	=	0x00b2
                    00B3    271 _IPH1	=	0x00b3
                    00C0    272 _P4	=	0x00c0
                    00D8    273 _P5	=	0x00d8
                    00A6    274 _WDTRST	=	0x00a6
                    00A7    275 _WDTPRG	=	0x00a7
                    00A9    276 _SADDR	=	0x00a9
                    00B9    277 _SADEN	=	0x00b9
                    00C3    278 _SPCON	=	0x00c3
                    00C4    279 _SPSTA	=	0x00c4
                    00C5    280 _SPDAT	=	0x00c5
                    00C9    281 _T2MOD	=	0x00c9
                    009B    282 _BDRCON	=	0x009b
                    009A    283 _BRL	=	0x009a
                    009C    284 _KBLS	=	0x009c
                    009D    285 _KBE	=	0x009d
                    009E    286 _KBF	=	0x009e
                    00D2    287 _EECON	=	0x00d2
                            288 ;--------------------------------------------------------
                            289 ; special function bits
                            290 ;--------------------------------------------------------
                            291 	.area RSEG    (DATA)
                    0080    292 _P0_0	=	0x0080
                    0081    293 _P0_1	=	0x0081
                    0082    294 _P0_2	=	0x0082
                    0083    295 _P0_3	=	0x0083
                    0084    296 _P0_4	=	0x0084
                    0085    297 _P0_5	=	0x0085
                    0086    298 _P0_6	=	0x0086
                    0087    299 _P0_7	=	0x0087
                    0088    300 _IT0	=	0x0088
                    0089    301 _IE0	=	0x0089
                    008A    302 _IT1	=	0x008a
                    008B    303 _IE1	=	0x008b
                    008C    304 _TR0	=	0x008c
                    008D    305 _TF0	=	0x008d
                    008E    306 _TR1	=	0x008e
                    008F    307 _TF1	=	0x008f
                    0090    308 _P1_0	=	0x0090
                    0091    309 _P1_1	=	0x0091
                    0092    310 _P1_2	=	0x0092
                    0093    311 _P1_3	=	0x0093
                    0094    312 _P1_4	=	0x0094
                    0095    313 _P1_5	=	0x0095
                    0096    314 _P1_6	=	0x0096
                    0097    315 _P1_7	=	0x0097
                    0098    316 _RI	=	0x0098
                    0099    317 _TI	=	0x0099
                    009A    318 _RB8	=	0x009a
                    009B    319 _TB8	=	0x009b
                    009C    320 _REN	=	0x009c
                    009D    321 _SM2	=	0x009d
                    009E    322 _SM1	=	0x009e
                    009F    323 _SM0	=	0x009f
                    00A0    324 _P2_0	=	0x00a0
                    00A1    325 _P2_1	=	0x00a1
                    00A2    326 _P2_2	=	0x00a2
                    00A3    327 _P2_3	=	0x00a3
                    00A4    328 _P2_4	=	0x00a4
                    00A5    329 _P2_5	=	0x00a5
                    00A6    330 _P2_6	=	0x00a6
                    00A7    331 _P2_7	=	0x00a7
                    00A8    332 _EX0	=	0x00a8
                    00A9    333 _ET0	=	0x00a9
                    00AA    334 _EX1	=	0x00aa
                    00AB    335 _ET1	=	0x00ab
                    00AC    336 _ES	=	0x00ac
                    00AF    337 _EA	=	0x00af
                    00B0    338 _P3_0	=	0x00b0
                    00B1    339 _P3_1	=	0x00b1
                    00B2    340 _P3_2	=	0x00b2
                    00B3    341 _P3_3	=	0x00b3
                    00B4    342 _P3_4	=	0x00b4
                    00B5    343 _P3_5	=	0x00b5
                    00B6    344 _P3_6	=	0x00b6
                    00B7    345 _P3_7	=	0x00b7
                    00B0    346 _RXD	=	0x00b0
                    00B1    347 _TXD	=	0x00b1
                    00B2    348 _INT0	=	0x00b2
                    00B3    349 _INT1	=	0x00b3
                    00B4    350 _T0	=	0x00b4
                    00B5    351 _T1	=	0x00b5
                    00B6    352 _WR	=	0x00b6
                    00B7    353 _RD	=	0x00b7
                    00B8    354 _PX0	=	0x00b8
                    00B9    355 _PT0	=	0x00b9
                    00BA    356 _PX1	=	0x00ba
                    00BB    357 _PT1	=	0x00bb
                    00BC    358 _PS	=	0x00bc
                    00D0    359 _P	=	0x00d0
                    00D1    360 _F1	=	0x00d1
                    00D2    361 _OV	=	0x00d2
                    00D3    362 _RS0	=	0x00d3
                    00D4    363 _RS1	=	0x00d4
                    00D5    364 _F0	=	0x00d5
                    00D6    365 _AC	=	0x00d6
                    00D7    366 _CY	=	0x00d7
                    00AD    367 _ET2	=	0x00ad
                    00BD    368 _PT2	=	0x00bd
                    00C8    369 _T2CON_0	=	0x00c8
                    00C9    370 _T2CON_1	=	0x00c9
                    00CA    371 _T2CON_2	=	0x00ca
                    00CB    372 _T2CON_3	=	0x00cb
                    00CC    373 _T2CON_4	=	0x00cc
                    00CD    374 _T2CON_5	=	0x00cd
                    00CE    375 _T2CON_6	=	0x00ce
                    00CF    376 _T2CON_7	=	0x00cf
                    00C8    377 _CP_RL2	=	0x00c8
                    00C9    378 _C_T2	=	0x00c9
                    00CA    379 _TR2	=	0x00ca
                    00CB    380 _EXEN2	=	0x00cb
                    00CC    381 _TCLK	=	0x00cc
                    00CD    382 _RCLK	=	0x00cd
                    00CE    383 _EXF2	=	0x00ce
                    00CF    384 _TF2	=	0x00cf
                    00DF    385 _CF	=	0x00df
                    00DE    386 _CR	=	0x00de
                    00DC    387 _CCF4	=	0x00dc
                    00DB    388 _CCF3	=	0x00db
                    00DA    389 _CCF2	=	0x00da
                    00D9    390 _CCF1	=	0x00d9
                    00D8    391 _CCF0	=	0x00d8
                    00AE    392 _EC	=	0x00ae
                    00BE    393 _PPCL	=	0x00be
                    00BD    394 _PT2L	=	0x00bd
                    00BC    395 _PLS	=	0x00bc
                    00BB    396 _PT1L	=	0x00bb
                    00BA    397 _PX1L	=	0x00ba
                    00B9    398 _PT0L	=	0x00b9
                    00B8    399 _PX0L	=	0x00b8
                    00C0    400 _P4_0	=	0x00c0
                    00C1    401 _P4_1	=	0x00c1
                    00C2    402 _P4_2	=	0x00c2
                    00C3    403 _P4_3	=	0x00c3
                    00C4    404 _P4_4	=	0x00c4
                    00C5    405 _P4_5	=	0x00c5
                    00C6    406 _P4_6	=	0x00c6
                    00C7    407 _P4_7	=	0x00c7
                    00D8    408 _P5_0	=	0x00d8
                    00D9    409 _P5_1	=	0x00d9
                    00DA    410 _P5_2	=	0x00da
                    00DB    411 _P5_3	=	0x00db
                    00DC    412 _P5_4	=	0x00dc
                    00DD    413 _P5_5	=	0x00dd
                    00DE    414 _P5_6	=	0x00de
                    00DF    415 _P5_7	=	0x00df
                            416 ;--------------------------------------------------------
                            417 ; overlayable register banks
                            418 ;--------------------------------------------------------
                            419 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     420 	.ds 8
                            421 ;--------------------------------------------------------
                            422 ; internal ram data
                            423 ;--------------------------------------------------------
                            424 	.area DSEG    (DATA)
                            425 ;--------------------------------------------------------
                            426 ; overlayable items in internal ram 
                            427 ;--------------------------------------------------------
                            428 	.area OSEG    (OVR,DATA)
                            429 ;--------------------------------------------------------
                            430 ; Stack segment in internal ram 
                            431 ;--------------------------------------------------------
                            432 	.area	SSEG	(DATA)
   0000                     433 __start__stack:
   0000                     434 	.ds	1
                            435 
                            436 ;--------------------------------------------------------
                            437 ; indirectly addressable internal ram data
                            438 ;--------------------------------------------------------
                            439 	.area ISEG    (DATA)
                            440 ;--------------------------------------------------------
                            441 ; bit data
                            442 ;--------------------------------------------------------
                            443 	.area BSEG    (BIT)
                            444 ;--------------------------------------------------------
                            445 ; paged external ram data
                            446 ;--------------------------------------------------------
                            447 	.area PSEG    (PAG,XDATA)
                            448 ;--------------------------------------------------------
                            449 ; external ram data
                            450 ;--------------------------------------------------------
                            451 	.area XSEG    (XDATA)
   0000                     452 _handleInput_c_1_1:
   0000                     453 	.ds 1
   0001                     454 _handleInput_block_1_1:
   0001                     455 	.ds 2
                            456 ;--------------------------------------------------------
                            457 ; external initialized ram data
                            458 ;--------------------------------------------------------
                            459 	.area XISEG   (XDATA)
                            460 	.area HOME    (CODE)
                            461 	.area GSINIT0 (CODE)
                            462 	.area GSINIT1 (CODE)
                            463 	.area GSINIT2 (CODE)
                            464 	.area GSINIT3 (CODE)
                            465 	.area GSINIT4 (CODE)
                            466 	.area GSINIT5 (CODE)
                            467 	.area GSINIT  (CODE)
                            468 	.area GSFINAL (CODE)
                            469 	.area CSEG    (CODE)
                            470 ;--------------------------------------------------------
                            471 ; interrupt vector 
                            472 ;--------------------------------------------------------
                            473 	.area HOME    (CODE)
   0000                     474 __interrupt_vect:
   0000 02s00r00            475 	ljmp	__sdcc_gsinit_startup
                            476 ;--------------------------------------------------------
                            477 ; global & static initialisations
                            478 ;--------------------------------------------------------
                            479 	.area HOME    (CODE)
                            480 	.area GSINIT  (CODE)
                            481 	.area GSFINAL (CODE)
                            482 	.area GSINIT  (CODE)
                            483 	.globl __sdcc_gsinit_startup
                            484 	.globl __sdcc_program_startup
                            485 	.globl __start__stack
                            486 	.globl __mcs51_genXINIT
                            487 	.globl __mcs51_genXRAMCLEAR
                            488 	.globl __mcs51_genRAMCLEAR
                            489 	.area GSFINAL (CODE)
   0000 02s00r00            490 	ljmp	__sdcc_program_startup
                            491 ;--------------------------------------------------------
                            492 ; Home
                            493 ;--------------------------------------------------------
                            494 	.area HOME    (CODE)
                            495 	.area CSEG    (CODE)
   0000                     496 __sdcc_program_startup:
   0000 12s04r8E            497 	lcall	_main
                            498 ;	return from main will lock up
   0003 80 FE               499 	sjmp .
                            500 ;--------------------------------------------------------
                            501 ; code
                            502 ;--------------------------------------------------------
                            503 	.area CSEG    (CODE)
                            504 ;------------------------------------------------------------
                            505 ;Allocation info for local variables in function '_sdcc_external_startup'
                            506 ;------------------------------------------------------------
                            507 ;------------------------------------------------------------
                            508 ;	main.c:15: _sdcc_external_startup(){
                            509 ;	-----------------------------------------
                            510 ;	 function _sdcc_external_startup
                            511 ;	-----------------------------------------
   0005                     512 __sdcc_external_startup:
                    0002    513 	ar2 = 0x02
                    0003    514 	ar3 = 0x03
                    0004    515 	ar4 = 0x04
                    0005    516 	ar5 = 0x05
                    0006    517 	ar6 = 0x06
                    0007    518 	ar7 = 0x07
                    0000    519 	ar0 = 0x00
                    0001    520 	ar1 = 0x01
                            521 ;	main.c:17: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            522 ;	genOr
   0005 43 8E 0C            523 	orl	_AUXR,#0x0C
                            524 ;	main.c:18: return 0;
                            525 ;	genRet
                            526 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            527 	mov	dptr,#0x0000
                            528 ;	Peephole 300	removed redundant label 00101$
   000B 22                  529 	ret
                            530 ;------------------------------------------------------------
                            531 ;Allocation info for local variables in function 'ShowMenu'
                            532 ;------------------------------------------------------------
                            533 ;------------------------------------------------------------
                            534 ;	main.c:25: void ShowMenu(void){
                            535 ;	-----------------------------------------
                            536 ;	 function ShowMenu
                            537 ;	-----------------------------------------
   000C                     538 _ShowMenu:
                            539 ;	main.c:26: printf("\r\n***************");
                            540 ;	genIpush
   000C 74r00               541 	mov	a,#__str_0
   000E C0 E0               542 	push	acc
   0010 74s00               543 	mov	a,#(__str_0 >> 8)
   0012 C0 E0               544 	push	acc
   0014 74 80               545 	mov	a,#0x80
   0016 C0 E0               546 	push	acc
                            547 ;	genCall
   0018 12s00r00            548 	lcall	_printf
   001B 15 81               549 	dec	sp
   001D 15 81               550 	dec	sp
   001F 15 81               551 	dec	sp
                            552 ;	main.c:27: printf("\r\n    Menu\r\n");
                            553 ;	genIpush
   0021 74r12               554 	mov	a,#__str_1
   0023 C0 E0               555 	push	acc
   0025 74s00               556 	mov	a,#(__str_1 >> 8)
   0027 C0 E0               557 	push	acc
   0029 74 80               558 	mov	a,#0x80
   002B C0 E0               559 	push	acc
                            560 ;	genCall
   002D 12s00r00            561 	lcall	_printf
   0030 15 81               562 	dec	sp
   0032 15 81               563 	dec	sp
   0034 15 81               564 	dec	sp
                            565 ;	main.c:28: printf("\r\n***************");
                            566 ;	genIpush
   0036 74r00               567 	mov	a,#__str_0
   0038 C0 E0               568 	push	acc
   003A 74s00               569 	mov	a,#(__str_0 >> 8)
   003C C0 E0               570 	push	acc
   003E 74 80               571 	mov	a,#0x80
   0040 C0 E0               572 	push	acc
                            573 ;	genCall
   0042 12s00r00            574 	lcall	_printf
   0045 15 81               575 	dec	sp
   0047 15 81               576 	dec	sp
   0049 15 81               577 	dec	sp
                            578 ;	main.c:29: printf("\r\nPress 'H' to show this menu");
                            579 ;	genIpush
   004B 74r1F               580 	mov	a,#__str_2
   004D C0 E0               581 	push	acc
   004F 74s00               582 	mov	a,#(__str_2 >> 8)
   0051 C0 E0               583 	push	acc
   0053 74 80               584 	mov	a,#0x80
   0055 C0 E0               585 	push	acc
                            586 ;	genCall
   0057 12s00r00            587 	lcall	_printf
   005A 15 81               588 	dec	sp
   005C 15 81               589 	dec	sp
   005E 15 81               590 	dec	sp
                            591 ;	main.c:30: printf("\r\nPress 'W' to write a byte to EEPROM");
                            592 ;	genIpush
   0060 74r3D               593 	mov	a,#__str_3
   0062 C0 E0               594 	push	acc
   0064 74s00               595 	mov	a,#(__str_3 >> 8)
   0066 C0 E0               596 	push	acc
   0068 74 80               597 	mov	a,#0x80
   006A C0 E0               598 	push	acc
                            599 ;	genCall
   006C 12s00r00            600 	lcall	_printf
   006F 15 81               601 	dec	sp
   0071 15 81               602 	dec	sp
   0073 15 81               603 	dec	sp
                            604 ;	main.c:31: printf("\r\nPress 'R' to read a byte from EEPROM");
                            605 ;	genIpush
   0075 74r63               606 	mov	a,#__str_4
   0077 C0 E0               607 	push	acc
   0079 74s00               608 	mov	a,#(__str_4 >> 8)
   007B C0 E0               609 	push	acc
   007D 74 80               610 	mov	a,#0x80
   007F C0 E0               611 	push	acc
                            612 ;	genCall
   0081 12s00r00            613 	lcall	_printf
   0084 15 81               614 	dec	sp
   0086 15 81               615 	dec	sp
   0088 15 81               616 	dec	sp
                            617 ;	main.c:32: printf("\r\nPress 'L' to display EEPROM data on LCD");
                            618 ;	genIpush
   008A 74r8A               619 	mov	a,#__str_5
   008C C0 E0               620 	push	acc
   008E 74s00               621 	mov	a,#(__str_5 >> 8)
   0090 C0 E0               622 	push	acc
   0092 74 80               623 	mov	a,#0x80
   0094 C0 E0               624 	push	acc
                            625 ;	genCall
   0096 12s00r00            626 	lcall	_printf
   0099 15 81               627 	dec	sp
   009B 15 81               628 	dec	sp
   009D 15 81               629 	dec	sp
                            630 ;	main.c:33: printf("\r\nPress 'C' to clear the LCD display");
                            631 ;	genIpush
   009F 74rB4               632 	mov	a,#__str_6
   00A1 C0 E0               633 	push	acc
   00A3 74s00               634 	mov	a,#(__str_6 >> 8)
   00A5 C0 E0               635 	push	acc
   00A7 74 80               636 	mov	a,#0x80
   00A9 C0 E0               637 	push	acc
                            638 ;	genCall
   00AB 12s00r00            639 	lcall	_printf
   00AE 15 81               640 	dec	sp
   00B0 15 81               641 	dec	sp
   00B2 15 81               642 	dec	sp
                            643 ;	main.c:34: printf("\r\nPress 'D' to do a Hex Dump of EEPROM");
                            644 ;	genIpush
   00B4 74rD9               645 	mov	a,#__str_7
   00B6 C0 E0               646 	push	acc
   00B8 74s00               647 	mov	a,#(__str_7 >> 8)
   00BA C0 E0               648 	push	acc
   00BC 74 80               649 	mov	a,#0x80
   00BE C0 E0               650 	push	acc
                            651 ;	genCall
   00C0 12s00r00            652 	lcall	_printf
   00C3 15 81               653 	dec	sp
   00C5 15 81               654 	dec	sp
   00C7 15 81               655 	dec	sp
                            656 ;	main.c:35: printf("\r\nPress 'Y' to read the contents of DDRAM");
                            657 ;	genIpush
   00C9 74r00               658 	mov	a,#__str_8
   00CB C0 E0               659 	push	acc
   00CD 74s01               660 	mov	a,#(__str_8 >> 8)
   00CF C0 E0               661 	push	acc
   00D1 74 80               662 	mov	a,#0x80
   00D3 C0 E0               663 	push	acc
                            664 ;	genCall
   00D5 12s00r00            665 	lcall	_printf
   00D8 15 81               666 	dec	sp
   00DA 15 81               667 	dec	sp
   00DC 15 81               668 	dec	sp
                            669 ;	main.c:36: printf("\r\nPress 'G' to read the contents of CGRAM\r\n");
                            670 ;	genIpush
   00DE 74r2A               671 	mov	a,#__str_9
   00E0 C0 E0               672 	push	acc
   00E2 74s01               673 	mov	a,#(__str_9 >> 8)
   00E4 C0 E0               674 	push	acc
   00E6 74 80               675 	mov	a,#0x80
   00E8 C0 E0               676 	push	acc
                            677 ;	genCall
   00EA 12s00r00            678 	lcall	_printf
   00ED 15 81               679 	dec	sp
   00EF 15 81               680 	dec	sp
   00F1 15 81               681 	dec	sp
                            682 ;	Peephole 300	removed redundant label 00101$
   00F3 22                  683 	ret
                            684 ;------------------------------------------------------------
                            685 ;Allocation info for local variables in function 'handleInput'
                            686 ;------------------------------------------------------------
                            687 ;c                         Allocated with name '_handleInput_c_1_1'
                            688 ;block                     Allocated with name '_handleInput_block_1_1'
                            689 ;address                   Allocated with name '_handleInput_address_1_1'
                            690 ;writeData                 Allocated with name '_handleInput_writeData_1_1'
                            691 ;Lcd_row                   Allocated with name '_handleInput_Lcd_row_1_1'
                            692 ;------------------------------------------------------------
                            693 ;	main.c:42: void handleInput(char c){
                            694 ;	-----------------------------------------
                            695 ;	 function handleInput
                            696 ;	-----------------------------------------
   00F4                     697 _handleInput:
                            698 ;	genReceive
   00F4 E5 82               699 	mov	a,dpl
   00F6 90s00r00            700 	mov	dptr,#_handleInput_c_1_1
   00F9 F0                  701 	movx	@dptr,a
                            702 ;	main.c:48: switch (c){
                            703 ;	genAssign
   00FA 90s00r00            704 	mov	dptr,#_handleInput_c_1_1
   00FD E0                  705 	movx	a,@dptr
   00FE FA                  706 	mov	r2,a
                            707 ;	genCmpEq
                            708 ;	gencjneshort
   00FF BA 43 03            709 	cjne	r2,#0x43,00135$
   0102 02s04r72            710 	ljmp	00113$
   0105                     711 00135$:
                            712 ;	genCmpEq
                            713 ;	gencjneshort
   0105 BA 44 01            714 	cjne	r2,#0x44,00136$
                            715 ;	Peephole 251.a	replaced ljmp to ret with ret
   0108 22                  716 	ret
   0109                     717 00136$:
                            718 ;	genCmpEq
                            719 ;	gencjneshort
   0109 BA 47 01            720 	cjne	r2,#0x47,00137$
                            721 ;	Peephole 251.a	replaced ljmp to ret with ret
   010C 22                  722 	ret
   010D                     723 00137$:
                            724 ;	genCmpEq
                            725 ;	gencjneshort
   010D BA 48 03            726 	cjne	r2,#0x48,00138$
   0110 02s04r8B            727 	ljmp	00117$
   0113                     728 00138$:
                            729 ;	genCmpEq
                            730 ;	gencjneshort
   0113 BA 4C 03            731 	cjne	r2,#0x4C,00139$
   0116 02s03r2C            732 	ljmp	00109$
   0119                     733 00139$:
                            734 ;	genCmpEq
                            735 ;	gencjneshort
   0119 BA 52 03            736 	cjne	r2,#0x52,00140$
   011C 02s02r46            737 	ljmp	00105$
   011F                     738 00140$:
                            739 ;	genCmpEq
                            740 ;	gencjneshort
   011F BA 57 02            741 	cjne	r2,#0x57,00141$
   0122 80 01               742 	sjmp	00142$
   0124                     743 00141$:
                            744 ;	Peephole 251.a	replaced ljmp to ret with ret
   0124 22                  745 	ret
   0125                     746 00142$:
                            747 ;	main.c:50: printf("\r\nWriting to EEPROM...");
                            748 ;	genIpush
   0125 74r56               749 	mov	a,#__str_10
   0127 C0 E0               750 	push	acc
   0129 74s01               751 	mov	a,#(__str_10 >> 8)
   012B C0 E0               752 	push	acc
   012D 74 80               753 	mov	a,#0x80
   012F C0 E0               754 	push	acc
                            755 ;	genCall
   0131 12s00r00            756 	lcall	_printf
   0134 15 81               757 	dec	sp
   0136 15 81               758 	dec	sp
   0138 15 81               759 	dec	sp
                            760 ;	main.c:51: printf("\r\nEnter an EEPROM block number from 0-7: ");
                            761 ;	genIpush
   013A 74r6D               762 	mov	a,#__str_11
   013C C0 E0               763 	push	acc
   013E 74s01               764 	mov	a,#(__str_11 >> 8)
   0140 C0 E0               765 	push	acc
   0142 74 80               766 	mov	a,#0x80
   0144 C0 E0               767 	push	acc
                            768 ;	genCall
   0146 12s00r00            769 	lcall	_printf
   0149 15 81               770 	dec	sp
   014B 15 81               771 	dec	sp
   014D 15 81               772 	dec	sp
                            773 ;	main.c:52: block = Serial_GetInteger(1);
                            774 ;	genCall
                            775 ;	Peephole 182.b	used 16 bit load of dptr
   014F 90 00 01            776 	mov	dptr,#0x0001
   0152 12s00r00            777 	lcall	_Serial_GetInteger
   0155 E5 82               778 	mov	a,dpl
   0157 85 83 F0            779 	mov	b,dph
                            780 ;	genAssign
   015A 90s00r01            781 	mov	dptr,#_handleInput_block_1_1
   015D F0                  782 	movx	@dptr,a
   015E A3                  783 	inc	dptr
   015F E5 F0               784 	mov	a,b
   0161 F0                  785 	movx	@dptr,a
                            786 ;	main.c:53: while(block > 7){
   0162                     787 00102$:
                            788 ;	genAssign
   0162 90s00r01            789 	mov	dptr,#_handleInput_block_1_1
   0165 E0                  790 	movx	a,@dptr
   0166 FA                  791 	mov	r2,a
   0167 A3                  792 	inc	dptr
   0168 E0                  793 	movx	a,@dptr
   0169 FB                  794 	mov	r3,a
                            795 ;	genCmpGt
                            796 ;	genCmp
   016A C3                  797 	clr	c
   016B 74 07               798 	mov	a,#0x07
   016D 9A                  799 	subb	a,r2
                            800 ;	Peephole 159	avoided xrl during execution
   016E 74 80               801 	mov	a,#(0x00 ^ 0x80)
   0170 8B F0               802 	mov	b,r3
   0172 63 F0 80            803 	xrl	b,#0x80
   0175 95 F0               804 	subb	a,b
                            805 ;	genIfxJump
                            806 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0177 50 2A               807 	jnc	00104$
                            808 ;	Peephole 300	removed redundant label 00143$
                            809 ;	main.c:54: printf("\r\nINVALID: Enter an EEPROM block number from 0-7: ");
                            810 ;	genIpush
   0179 74r97               811 	mov	a,#__str_12
   017B C0 E0               812 	push	acc
   017D 74s01               813 	mov	a,#(__str_12 >> 8)
   017F C0 E0               814 	push	acc
   0181 74 80               815 	mov	a,#0x80
   0183 C0 E0               816 	push	acc
                            817 ;	genCall
   0185 12s00r00            818 	lcall	_printf
   0188 15 81               819 	dec	sp
   018A 15 81               820 	dec	sp
   018C 15 81               821 	dec	sp
                            822 ;	main.c:55: block = Serial_GetInteger(1);
                            823 ;	genCall
                            824 ;	Peephole 182.b	used 16 bit load of dptr
   018E 90 00 01            825 	mov	dptr,#0x0001
   0191 12s00r00            826 	lcall	_Serial_GetInteger
   0194 E5 82               827 	mov	a,dpl
   0196 85 83 F0            828 	mov	b,dph
                            829 ;	genAssign
   0199 90s00r01            830 	mov	dptr,#_handleInput_block_1_1
   019C F0                  831 	movx	@dptr,a
   019D A3                  832 	inc	dptr
   019E E5 F0               833 	mov	a,b
   01A0 F0                  834 	movx	@dptr,a
                            835 ;	Peephole 112.b	changed ljmp to sjmp
   01A1 80 BF               836 	sjmp	00102$
   01A3                     837 00104$:
                            838 ;	main.c:58: printf("\r\nEnter an EEPROM Word address in hex:");
                            839 ;	genIpush
   01A3 C0 02               840 	push	ar2
   01A5 C0 03               841 	push	ar3
   01A7 74rCA               842 	mov	a,#__str_13
   01A9 C0 E0               843 	push	acc
   01AB 74s01               844 	mov	a,#(__str_13 >> 8)
   01AD C0 E0               845 	push	acc
   01AF 74 80               846 	mov	a,#0x80
   01B1 C0 E0               847 	push	acc
                            848 ;	genCall
   01B3 12s00r00            849 	lcall	_printf
   01B6 15 81               850 	dec	sp
   01B8 15 81               851 	dec	sp
   01BA 15 81               852 	dec	sp
   01BC D0 03               853 	pop	ar3
   01BE D0 02               854 	pop	ar2
                            855 ;	main.c:59: address = Serial_GetHex();
                            856 ;	genCall
   01C0 C0 02               857 	push	ar2
   01C2 C0 03               858 	push	ar3
   01C4 12s00r00            859 	lcall	_Serial_GetHex
   01C7 AC 82               860 	mov	r4,dpl
   01C9 D0 03               861 	pop	ar3
   01CB D0 02               862 	pop	ar2
                            863 ;	main.c:60: printf("\r\nEnter a byte of data to write to EEPROM:");
                            864 ;	genIpush
   01CD C0 02               865 	push	ar2
   01CF C0 03               866 	push	ar3
   01D1 C0 04               867 	push	ar4
   01D3 74rF1               868 	mov	a,#__str_14
   01D5 C0 E0               869 	push	acc
   01D7 74s01               870 	mov	a,#(__str_14 >> 8)
   01D9 C0 E0               871 	push	acc
   01DB 74 80               872 	mov	a,#0x80
   01DD C0 E0               873 	push	acc
                            874 ;	genCall
   01DF 12s00r00            875 	lcall	_printf
   01E2 15 81               876 	dec	sp
   01E4 15 81               877 	dec	sp
   01E6 15 81               878 	dec	sp
   01E8 D0 04               879 	pop	ar4
   01EA D0 03               880 	pop	ar3
   01EC D0 02               881 	pop	ar2
                            882 ;	main.c:61: writeData = Serial_GetHex();
                            883 ;	genCall
   01EE C0 02               884 	push	ar2
   01F0 C0 03               885 	push	ar3
   01F2 C0 04               886 	push	ar4
   01F4 12s00r00            887 	lcall	_Serial_GetHex
   01F7 AD 82               888 	mov	r5,dpl
   01F9 D0 04               889 	pop	ar4
   01FB D0 03               890 	pop	ar3
   01FD D0 02               891 	pop	ar2
                            892 ;	main.c:62: EPROM_ByteWrite(writeData, address, block);
                            893 ;	genCast
   01FF 8A 06               894 	mov	ar6,r2
                            895 ;	genAssign
   0201 90s00r00            896 	mov	dptr,#_EPROM_ByteWrite_PARM_2
   0204 EC                  897 	mov	a,r4
   0205 F0                  898 	movx	@dptr,a
                            899 ;	genAssign
   0206 90s00r00            900 	mov	dptr,#_EPROM_ByteWrite_PARM_3
   0209 EE                  901 	mov	a,r6
   020A F0                  902 	movx	@dptr,a
                            903 ;	genCall
   020B 8D 82               904 	mov	dpl,r5
   020D C0 02               905 	push	ar2
   020F C0 03               906 	push	ar3
   0211 C0 04               907 	push	ar4
   0213 C0 05               908 	push	ar5
   0215 12s00r00            909 	lcall	_EPROM_ByteWrite
   0218 D0 05               910 	pop	ar5
   021A D0 04               911 	pop	ar4
   021C D0 03               912 	pop	ar3
   021E D0 02               913 	pop	ar2
                            914 ;	main.c:63: printf("\r\nWrote %X to block %d address 0x%X in EEPROM!\r\n", writeData, block, address);
                            915 ;	genCast
   0220 7E 00               916 	mov	r6,#0x00
                            917 ;	genCast
   0222 7F 00               918 	mov	r7,#0x00
                            919 ;	genIpush
   0224 C0 04               920 	push	ar4
   0226 C0 06               921 	push	ar6
                            922 ;	genIpush
   0228 C0 02               923 	push	ar2
   022A C0 03               924 	push	ar3
                            925 ;	genIpush
   022C C0 05               926 	push	ar5
   022E C0 07               927 	push	ar7
                            928 ;	genIpush
   0230 74r1C               929 	mov	a,#__str_15
   0232 C0 E0               930 	push	acc
   0234 74s02               931 	mov	a,#(__str_15 >> 8)
   0236 C0 E0               932 	push	acc
   0238 74 80               933 	mov	a,#0x80
   023A C0 E0               934 	push	acc
                            935 ;	genCall
   023C 12s00r00            936 	lcall	_printf
   023F E5 81               937 	mov	a,sp
   0241 24 F7               938 	add	a,#0xf7
   0243 F5 81               939 	mov	sp,a
                            940 ;	main.c:64: break;
                            941 ;	Peephole 251.a	replaced ljmp to ret with ret
   0245 22                  942 	ret
                            943 ;	main.c:65: case 'R':
   0246                     944 00105$:
                            945 ;	main.c:66: printf("\r\nReading from EEPROM...");
                            946 ;	genIpush
   0246 74r4D               947 	mov	a,#__str_16
   0248 C0 E0               948 	push	acc
   024A 74s02               949 	mov	a,#(__str_16 >> 8)
   024C C0 E0               950 	push	acc
   024E 74 80               951 	mov	a,#0x80
   0250 C0 E0               952 	push	acc
                            953 ;	genCall
   0252 12s00r00            954 	lcall	_printf
   0255 15 81               955 	dec	sp
   0257 15 81               956 	dec	sp
   0259 15 81               957 	dec	sp
                            958 ;	main.c:67: printf("\r\nEnter an EEPROM block number from 0-7: ");
                            959 ;	genIpush
   025B 74r6D               960 	mov	a,#__str_11
   025D C0 E0               961 	push	acc
   025F 74s01               962 	mov	a,#(__str_11 >> 8)
   0261 C0 E0               963 	push	acc
   0263 74 80               964 	mov	a,#0x80
   0265 C0 E0               965 	push	acc
                            966 ;	genCall
   0267 12s00r00            967 	lcall	_printf
   026A 15 81               968 	dec	sp
   026C 15 81               969 	dec	sp
   026E 15 81               970 	dec	sp
                            971 ;	main.c:68: block = Serial_GetInteger(1);
                            972 ;	genCall
                            973 ;	Peephole 182.b	used 16 bit load of dptr
   0270 90 00 01            974 	mov	dptr,#0x0001
   0273 12s00r00            975 	lcall	_Serial_GetInteger
   0276 E5 82               976 	mov	a,dpl
   0278 85 83 F0            977 	mov	b,dph
                            978 ;	genAssign
   027B 90s00r01            979 	mov	dptr,#_handleInput_block_1_1
   027E F0                  980 	movx	@dptr,a
   027F A3                  981 	inc	dptr
   0280 E5 F0               982 	mov	a,b
   0282 F0                  983 	movx	@dptr,a
                            984 ;	main.c:69: while(block > 7){
   0283                     985 00106$:
                            986 ;	genAssign
   0283 90s00r01            987 	mov	dptr,#_handleInput_block_1_1
   0286 E0                  988 	movx	a,@dptr
   0287 FA                  989 	mov	r2,a
   0288 A3                  990 	inc	dptr
   0289 E0                  991 	movx	a,@dptr
   028A FB                  992 	mov	r3,a
                            993 ;	genCmpGt
                            994 ;	genCmp
   028B C3                  995 	clr	c
   028C 74 07               996 	mov	a,#0x07
   028E 9A                  997 	subb	a,r2
                            998 ;	Peephole 159	avoided xrl during execution
   028F 74 80               999 	mov	a,#(0x00 ^ 0x80)
   0291 8B F0              1000 	mov	b,r3
   0293 63 F0 80           1001 	xrl	b,#0x80
   0296 95 F0              1002 	subb	a,b
                           1003 ;	genIfxJump
                           1004 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0298 50 2A              1005 	jnc	00108$
                           1006 ;	Peephole 300	removed redundant label 00144$
                           1007 ;	main.c:70: printf("\r\nINVALID: Enter an EEPROM block number from 0-7: ");
                           1008 ;	genIpush
   029A 74r97              1009 	mov	a,#__str_12
   029C C0 E0              1010 	push	acc
   029E 74s01              1011 	mov	a,#(__str_12 >> 8)
   02A0 C0 E0              1012 	push	acc
   02A2 74 80              1013 	mov	a,#0x80
   02A4 C0 E0              1014 	push	acc
                           1015 ;	genCall
   02A6 12s00r00           1016 	lcall	_printf
   02A9 15 81              1017 	dec	sp
   02AB 15 81              1018 	dec	sp
   02AD 15 81              1019 	dec	sp
                           1020 ;	main.c:71: block = Serial_GetInteger(1);
                           1021 ;	genCall
                           1022 ;	Peephole 182.b	used 16 bit load of dptr
   02AF 90 00 01           1023 	mov	dptr,#0x0001
   02B2 12s00r00           1024 	lcall	_Serial_GetInteger
   02B5 E5 82              1025 	mov	a,dpl
   02B7 85 83 F0           1026 	mov	b,dph
                           1027 ;	genAssign
   02BA 90s00r01           1028 	mov	dptr,#_handleInput_block_1_1
   02BD F0                 1029 	movx	@dptr,a
   02BE A3                 1030 	inc	dptr
   02BF E5 F0              1031 	mov	a,b
   02C1 F0                 1032 	movx	@dptr,a
                           1033 ;	Peephole 112.b	changed ljmp to sjmp
   02C2 80 BF              1034 	sjmp	00106$
   02C4                    1035 00108$:
                           1036 ;	main.c:74: printf("\r\nEnter an EEPROM Word address in hex:");
                           1037 ;	genIpush
   02C4 C0 02              1038 	push	ar2
   02C6 C0 03              1039 	push	ar3
   02C8 74rCA              1040 	mov	a,#__str_13
   02CA C0 E0              1041 	push	acc
   02CC 74s01              1042 	mov	a,#(__str_13 >> 8)
   02CE C0 E0              1043 	push	acc
   02D0 74 80              1044 	mov	a,#0x80
   02D2 C0 E0              1045 	push	acc
                           1046 ;	genCall
   02D4 12s00r00           1047 	lcall	_printf
   02D7 15 81              1048 	dec	sp
   02D9 15 81              1049 	dec	sp
   02DB 15 81              1050 	dec	sp
   02DD D0 03              1051 	pop	ar3
   02DF D0 02              1052 	pop	ar2
                           1053 ;	main.c:75: address = Serial_GetHex();
                           1054 ;	genCall
   02E1 C0 02              1055 	push	ar2
   02E3 C0 03              1056 	push	ar3
   02E5 12s00r00           1057 	lcall	_Serial_GetHex
   02E8 AC 82              1058 	mov	r4,dpl
   02EA D0 03              1059 	pop	ar3
   02EC D0 02              1060 	pop	ar2
                           1061 ;	main.c:76: writeData = EPROM_ByteRead(address, block);
                           1062 ;	genCast
   02EE 90s00r00           1063 	mov	dptr,#_EPROM_ByteRead_PARM_2
   02F1 EA                 1064 	mov	a,r2
   02F2 F0                 1065 	movx	@dptr,a
                           1066 ;	genCall
   02F3 8C 82              1067 	mov	dpl,r4
   02F5 C0 02              1068 	push	ar2
   02F7 C0 03              1069 	push	ar3
   02F9 C0 04              1070 	push	ar4
   02FB 12s00r00           1071 	lcall	_EPROM_ByteRead
   02FE AD 82              1072 	mov	r5,dpl
   0300 D0 04              1073 	pop	ar4
   0302 D0 03              1074 	pop	ar3
   0304 D0 02              1075 	pop	ar2
                           1076 ;	main.c:77: printf("\r\nRead %X from block %d address 0x%X\r\n", writeData, block, address);
                           1077 ;	genCast
   0306 7E 00              1078 	mov	r6,#0x00
                           1079 ;	genCast
   0308 7F 00              1080 	mov	r7,#0x00
                           1081 ;	genIpush
   030A C0 04              1082 	push	ar4
   030C C0 06              1083 	push	ar6
                           1084 ;	genIpush
   030E C0 02              1085 	push	ar2
   0310 C0 03              1086 	push	ar3
                           1087 ;	genIpush
   0312 C0 05              1088 	push	ar5
   0314 C0 07              1089 	push	ar7
                           1090 ;	genIpush
   0316 74r66              1091 	mov	a,#__str_17
   0318 C0 E0              1092 	push	acc
   031A 74s02              1093 	mov	a,#(__str_17 >> 8)
   031C C0 E0              1094 	push	acc
   031E 74 80              1095 	mov	a,#0x80
   0320 C0 E0              1096 	push	acc
                           1097 ;	genCall
   0322 12s00r00           1098 	lcall	_printf
   0325 E5 81              1099 	mov	a,sp
   0327 24 F7              1100 	add	a,#0xf7
   0329 F5 81              1101 	mov	sp,a
                           1102 ;	main.c:78: break;
                           1103 ;	Peephole 251.a	replaced ljmp to ret with ret
   032B 22                 1104 	ret
                           1105 ;	main.c:79: case 'L':
   032C                    1106 00109$:
                           1107 ;	main.c:80: printf("\r\nEnter an EEPROM block number from 0-7: ");
                           1108 ;	genIpush
   032C 74r6D              1109 	mov	a,#__str_11
   032E C0 E0              1110 	push	acc
   0330 74s01              1111 	mov	a,#(__str_11 >> 8)
   0332 C0 E0              1112 	push	acc
   0334 74 80              1113 	mov	a,#0x80
   0336 C0 E0              1114 	push	acc
                           1115 ;	genCall
   0338 12s00r00           1116 	lcall	_printf
   033B 15 81              1117 	dec	sp
   033D 15 81              1118 	dec	sp
   033F 15 81              1119 	dec	sp
                           1120 ;	main.c:81: block = Serial_GetInteger(1);
                           1121 ;	genCall
                           1122 ;	Peephole 182.b	used 16 bit load of dptr
   0341 90 00 01           1123 	mov	dptr,#0x0001
   0344 12s00r00           1124 	lcall	_Serial_GetInteger
   0347 E5 82              1125 	mov	a,dpl
   0349 85 83 F0           1126 	mov	b,dph
                           1127 ;	genAssign
   034C 90s00r01           1128 	mov	dptr,#_handleInput_block_1_1
   034F F0                 1129 	movx	@dptr,a
   0350 A3                 1130 	inc	dptr
   0351 E5 F0              1131 	mov	a,b
   0353 F0                 1132 	movx	@dptr,a
                           1133 ;	main.c:82: while(block > 7){
   0354                    1134 00110$:
                           1135 ;	genAssign
   0354 90s00r01           1136 	mov	dptr,#_handleInput_block_1_1
   0357 E0                 1137 	movx	a,@dptr
   0358 FA                 1138 	mov	r2,a
   0359 A3                 1139 	inc	dptr
   035A E0                 1140 	movx	a,@dptr
   035B FB                 1141 	mov	r3,a
                           1142 ;	genCmpGt
                           1143 ;	genCmp
   035C C3                 1144 	clr	c
   035D 74 07              1145 	mov	a,#0x07
   035F 9A                 1146 	subb	a,r2
                           1147 ;	Peephole 159	avoided xrl during execution
   0360 74 80              1148 	mov	a,#(0x00 ^ 0x80)
   0362 8B F0              1149 	mov	b,r3
   0364 63 F0 80           1150 	xrl	b,#0x80
   0367 95 F0              1151 	subb	a,b
                           1152 ;	genIfxJump
                           1153 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0369 50 2A              1154 	jnc	00112$
                           1155 ;	Peephole 300	removed redundant label 00145$
                           1156 ;	main.c:83: printf("\r\nINVALID: Enter an EEPROM block number from 0-7: ");
                           1157 ;	genIpush
   036B 74r97              1158 	mov	a,#__str_12
   036D C0 E0              1159 	push	acc
   036F 74s01              1160 	mov	a,#(__str_12 >> 8)
   0371 C0 E0              1161 	push	acc
   0373 74 80              1162 	mov	a,#0x80
   0375 C0 E0              1163 	push	acc
                           1164 ;	genCall
   0377 12s00r00           1165 	lcall	_printf
   037A 15 81              1166 	dec	sp
   037C 15 81              1167 	dec	sp
   037E 15 81              1168 	dec	sp
                           1169 ;	main.c:84: block = Serial_GetInteger(1);
                           1170 ;	genCall
                           1171 ;	Peephole 182.b	used 16 bit load of dptr
   0380 90 00 01           1172 	mov	dptr,#0x0001
   0383 12s00r00           1173 	lcall	_Serial_GetInteger
   0386 E5 82              1174 	mov	a,dpl
   0388 85 83 F0           1175 	mov	b,dph
                           1176 ;	genAssign
   038B 90s00r01           1177 	mov	dptr,#_handleInput_block_1_1
   038E F0                 1178 	movx	@dptr,a
   038F A3                 1179 	inc	dptr
   0390 E5 F0              1180 	mov	a,b
   0392 F0                 1181 	movx	@dptr,a
                           1182 ;	Peephole 112.b	changed ljmp to sjmp
   0393 80 BF              1183 	sjmp	00110$
   0395                    1184 00112$:
                           1185 ;	main.c:87: printf("\r\nEnter an EEPROM Word address in hex:");
                           1186 ;	genIpush
   0395 C0 02              1187 	push	ar2
   0397 C0 03              1188 	push	ar3
   0399 74rCA              1189 	mov	a,#__str_13
   039B C0 E0              1190 	push	acc
   039D 74s01              1191 	mov	a,#(__str_13 >> 8)
   039F C0 E0              1192 	push	acc
   03A1 74 80              1193 	mov	a,#0x80
   03A3 C0 E0              1194 	push	acc
                           1195 ;	genCall
   03A5 12s00r00           1196 	lcall	_printf
   03A8 15 81              1197 	dec	sp
   03AA 15 81              1198 	dec	sp
   03AC 15 81              1199 	dec	sp
   03AE D0 03              1200 	pop	ar3
   03B0 D0 02              1201 	pop	ar2
                           1202 ;	main.c:88: address = Serial_GetHex();
                           1203 ;	genCall
   03B2 C0 02              1204 	push	ar2
   03B4 C0 03              1205 	push	ar3
   03B6 12s00r00           1206 	lcall	_Serial_GetHex
   03B9 AC 82              1207 	mov	r4,dpl
   03BB D0 03              1208 	pop	ar3
   03BD D0 02              1209 	pop	ar2
                           1210 ;	main.c:89: writeData = EPROM_ByteRead(address, block);
                           1211 ;	genCast
   03BF 90s00r00           1212 	mov	dptr,#_EPROM_ByteRead_PARM_2
   03C2 EA                 1213 	mov	a,r2
   03C3 F0                 1214 	movx	@dptr,a
                           1215 ;	genCall
   03C4 8C 82              1216 	mov	dpl,r4
   03C6 C0 02              1217 	push	ar2
   03C8 C0 03              1218 	push	ar3
   03CA C0 04              1219 	push	ar4
   03CC 12s00r00           1220 	lcall	_EPROM_ByteRead
   03CF AD 82              1221 	mov	r5,dpl
   03D1 D0 04              1222 	pop	ar4
   03D3 D0 03              1223 	pop	ar3
   03D5 D0 02              1224 	pop	ar2
                           1225 ;	main.c:91: printf("\r\nEnter LCD row from 0-3:");
                           1226 ;	genIpush
   03D7 C0 02              1227 	push	ar2
   03D9 C0 03              1228 	push	ar3
   03DB C0 04              1229 	push	ar4
   03DD C0 05              1230 	push	ar5
   03DF 74r8D              1231 	mov	a,#__str_18
   03E1 C0 E0              1232 	push	acc
   03E3 74s02              1233 	mov	a,#(__str_18 >> 8)
   03E5 C0 E0              1234 	push	acc
   03E7 74 80              1235 	mov	a,#0x80
   03E9 C0 E0              1236 	push	acc
                           1237 ;	genCall
   03EB 12s00r00           1238 	lcall	_printf
   03EE 15 81              1239 	dec	sp
   03F0 15 81              1240 	dec	sp
   03F2 15 81              1241 	dec	sp
   03F4 D0 05              1242 	pop	ar5
   03F6 D0 04              1243 	pop	ar4
   03F8 D0 03              1244 	pop	ar3
   03FA D0 02              1245 	pop	ar2
                           1246 ;	main.c:92: Lcd_row = Serial_GetInteger(1);
                           1247 ;	genCall
                           1248 ;	Peephole 182.b	used 16 bit load of dptr
   03FC 90 00 01           1249 	mov	dptr,#0x0001
   03FF C0 02              1250 	push	ar2
   0401 C0 03              1251 	push	ar3
   0403 C0 04              1252 	push	ar4
   0405 C0 05              1253 	push	ar5
   0407 12s00r00           1254 	lcall	_Serial_GetInteger
   040A AE 82              1255 	mov	r6,dpl
   040C AF 83              1256 	mov	r7,dph
   040E D0 05              1257 	pop	ar5
   0410 D0 04              1258 	pop	ar4
   0412 D0 03              1259 	pop	ar3
   0414 D0 02              1260 	pop	ar2
                           1261 ;	genCast
                           1262 ;	main.c:94: LCD_gotoxy(Lcd_row, 0);
                           1263 ;	genAssign
   0416 90s00r00           1264 	mov	dptr,#_LCD_gotoxy_PARM_2
                           1265 ;	Peephole 181	changed mov to clr
   0419 E4                 1266 	clr	a
   041A F0                 1267 	movx	@dptr,a
                           1268 ;	genCall
   041B 8E 82              1269 	mov	dpl,r6
   041D C0 02              1270 	push	ar2
   041F C0 03              1271 	push	ar3
   0421 C0 04              1272 	push	ar4
   0423 C0 05              1273 	push	ar5
   0425 12s00r00           1274 	lcall	_LCD_gotoxy
   0428 D0 05              1275 	pop	ar5
   042A D0 04              1276 	pop	ar4
   042C D0 03              1277 	pop	ar3
   042E D0 02              1278 	pop	ar2
                           1279 ;	main.c:95: LCD_Putch(block + '0');
                           1280 ;	genCast
                           1281 ;	genPlus
                           1282 ;     genPlusIncr
   0430 74 30              1283 	mov	a,#0x30
                           1284 ;	Peephole 236.a	used r2 instead of ar2
   0432 2A                 1285 	add	a,r2
                           1286 ;	genCall
   0433 FA                 1287 	mov	r2,a
                           1288 ;	Peephole 244.c	loading dpl from a instead of r2
   0434 F5 82              1289 	mov	dpl,a
   0436 C0 04              1290 	push	ar4
   0438 C0 05              1291 	push	ar5
   043A 12s00r00           1292 	lcall	_LCD_Putch
   043D D0 05              1293 	pop	ar5
   043F D0 04              1294 	pop	ar4
                           1295 ;	main.c:96: LCD_Puthex(address);
                           1296 ;	genCall
   0441 8C 82              1297 	mov	dpl,r4
   0443 C0 05              1298 	push	ar5
   0445 12s00r00           1299 	lcall	_LCD_Puthex
   0448 D0 05              1300 	pop	ar5
                           1301 ;	main.c:97: LCD_Putstr(": ");
                           1302 ;	genCall
                           1303 ;	Peephole 182.a	used 16 bit load of DPTR
   044A 90s02rA7           1304 	mov	dptr,#__str_19
   044D 75 F0 80           1305 	mov	b,#0x80
   0450 C0 05              1306 	push	ar5
   0452 12s00r00           1307 	lcall	_LCD_Putstr
   0455 D0 05              1308 	pop	ar5
                           1309 ;	main.c:98: LCD_Puthex(writeData);
                           1310 ;	genCall
   0457 8D 82              1311 	mov	dpl,r5
   0459 12s00r00           1312 	lcall	_LCD_Puthex
                           1313 ;	main.c:100: printf("\r\nWrote to LCD!\r\n");
                           1314 ;	genIpush
   045C 74rAA              1315 	mov	a,#__str_20
   045E C0 E0              1316 	push	acc
   0460 74s02              1317 	mov	a,#(__str_20 >> 8)
   0462 C0 E0              1318 	push	acc
   0464 74 80              1319 	mov	a,#0x80
   0466 C0 E0              1320 	push	acc
                           1321 ;	genCall
   0468 12s00r00           1322 	lcall	_printf
   046B 15 81              1323 	dec	sp
   046D 15 81              1324 	dec	sp
   046F 15 81              1325 	dec	sp
                           1326 ;	main.c:101: break;
                           1327 ;	main.c:102: case 'C':
                           1328 ;	Peephole 112.b	changed ljmp to sjmp
                           1329 ;	Peephole 251.b	replaced sjmp to ret with ret
   0471 22                 1330 	ret
   0472                    1331 00113$:
                           1332 ;	main.c:103: LCD_ClearScreen();
                           1333 ;	genCall
   0472 12s00r00           1334 	lcall	_LCD_ClearScreen
                           1335 ;	main.c:104: printf("\r\nLCD Display Cleared!\r\n");
                           1336 ;	genIpush
   0475 74rBC              1337 	mov	a,#__str_21
   0477 C0 E0              1338 	push	acc
   0479 74s02              1339 	mov	a,#(__str_21 >> 8)
   047B C0 E0              1340 	push	acc
   047D 74 80              1341 	mov	a,#0x80
   047F C0 E0              1342 	push	acc
                           1343 ;	genCall
   0481 12s00r00           1344 	lcall	_printf
   0484 15 81              1345 	dec	sp
   0486 15 81              1346 	dec	sp
   0488 15 81              1347 	dec	sp
                           1348 ;	main.c:105: break;
                           1349 ;	main.c:112: case 'H':
                           1350 ;	Peephole 112.b	changed ljmp to sjmp
                           1351 ;	Peephole 251.b	replaced sjmp to ret with ret
   048A 22                 1352 	ret
   048B                    1353 00117$:
                           1354 ;	main.c:113: ShowMenu();
                           1355 ;	genCall
                           1356 ;	main.c:117: }
                           1357 ;	Peephole 253.b	replaced lcall/ret with ljmp
   048B 02s00r0C           1358 	ljmp	_ShowMenu
                           1359 ;
                           1360 ;------------------------------------------------------------
                           1361 ;Allocation info for local variables in function 'main'
                           1362 ;------------------------------------------------------------
                           1363 ;c                         Allocated with name '_main_c_2_2'
                           1364 ;------------------------------------------------------------
                           1365 ;	main.c:123: void main(void)
                           1366 ;	-----------------------------------------
                           1367 ;	 function main
                           1368 ;	-----------------------------------------
   048E                    1369 _main:
                           1370 ;	main.c:125: Serial_Init();
                           1371 ;	genCall
   048E 12s00r00           1372 	lcall	_Serial_Init
                           1373 ;	main.c:126: EPROM_Init();
                           1374 ;	genCall
   0491 12s00r00           1375 	lcall	_EPROM_Init
                           1376 ;	main.c:127: LCD_Init();
                           1377 ;	genCall
   0494 12s00r00           1378 	lcall	_LCD_Init
                           1379 ;	main.c:128: P1_3 = 1;
                           1380 ;	genAssign
   0497 D2 93              1381 	setb	_P1_3
                           1382 ;	main.c:131: ShowMenu();
                           1383 ;	genCall
   0499 12s00r0C           1384 	lcall	_ShowMenu
                           1385 ;	main.c:132: while(1){
   049C                    1386 00104$:
                           1387 ;	main.c:134: c = getchar ();
                           1388 ;	genCall
   049C 12s00r00           1389 	lcall	_getchar
   049F AA 82              1390 	mov	r2,dpl
                           1391 ;	main.c:135: if (c == ENTER_KEY){
                           1392 ;	genCmpEq
                           1393 ;	gencjneshort
                           1394 ;	Peephole 112.b	changed ljmp to sjmp
                           1395 ;	Peephole 198.b	optimized misc jump sequence
   04A1 BA 0D 0A           1396 	cjne	r2,#0x0D,00102$
                           1397 ;	Peephole 200.b	removed redundant sjmp
                           1398 ;	Peephole 300	removed redundant label 00110$
                           1399 ;	Peephole 300	removed redundant label 00111$
                           1400 ;	main.c:136: putchar('\n');
                           1401 ;	genCall
   04A4 75 82 0A           1402 	mov	dpl,#0x0A
   04A7 C0 02              1403 	push	ar2
   04A9 12s00r00           1404 	lcall	_putchar
   04AC D0 02              1405 	pop	ar2
   04AE                    1406 00102$:
                           1407 ;	main.c:138: putchar(c);
                           1408 ;	genCall
   04AE 8A 82              1409 	mov	dpl,r2
   04B0 C0 02              1410 	push	ar2
   04B2 12s00r00           1411 	lcall	_putchar
   04B5 D0 02              1412 	pop	ar2
                           1413 ;	main.c:139: handleInput(c);
                           1414 ;	genCall
   04B7 8A 82              1415 	mov	dpl,r2
   04B9 12s00rF4           1416 	lcall	_handleInput
                           1417 ;	Peephole 112.b	changed ljmp to sjmp
   04BC 80 DE              1418 	sjmp	00104$
                           1419 ;	Peephole 259.a	removed redundant label 00106$ and ret
                           1420 ;
                           1421 	.area CSEG    (CODE)
                           1422 	.area CONST   (CODE)
   0000                    1423 __str_0:
   0000 0D                 1424 	.db 0x0D
   0001 0A                 1425 	.db 0x0A
   0002 2A 2A 2A 2A 2A 2A  1426 	.ascii "***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0011 00                 1427 	.db 0x00
   0012                    1428 __str_1:
   0012 0D                 1429 	.db 0x0D
   0013 0A                 1430 	.db 0x0A
   0014 20 20 20 20 4D 65  1431 	.ascii "    Menu"
        6E 75
   001C 0D                 1432 	.db 0x0D
   001D 0A                 1433 	.db 0x0A
   001E 00                 1434 	.db 0x00
   001F                    1435 __str_2:
   001F 0D                 1436 	.db 0x0D
   0020 0A                 1437 	.db 0x0A
   0021 50 72 65 73 73 20  1438 	.ascii "Press 'H' to show this menu"
        27 48 27 20 74 6F
        20 73 68 6F 77 20
        74 68 69 73 20 6D
        65 6E 75
   003C 00                 1439 	.db 0x00
   003D                    1440 __str_3:
   003D 0D                 1441 	.db 0x0D
   003E 0A                 1442 	.db 0x0A
   003F 50 72 65 73 73 20  1443 	.ascii "Press 'W' to write a byte to EEPROM"
        27 57 27 20 74 6F
        20 77 72 69 74 65
        20 61 20 62 79 74
        65 20 74 6F 20 45
        45 50 52 4F 4D
   0062 00                 1444 	.db 0x00
   0063                    1445 __str_4:
   0063 0D                 1446 	.db 0x0D
   0064 0A                 1447 	.db 0x0A
   0065 50 72 65 73 73 20  1448 	.ascii "Press 'R' to read a byte from EEPROM"
        27 52 27 20 74 6F
        20 72 65 61 64 20
        61 20 62 79 74 65
        20 66 72 6F 6D 20
        45 45 50 52 4F 4D
   0089 00                 1449 	.db 0x00
   008A                    1450 __str_5:
   008A 0D                 1451 	.db 0x0D
   008B 0A                 1452 	.db 0x0A
   008C 50 72 65 73 73 20  1453 	.ascii "Press 'L' to display EEPROM data on LCD"
        27 4C 27 20 74 6F
        20 64 69 73 70 6C
        61 79 20 45 45 50
        52 4F 4D 20 64 61
        74 61 20 6F 6E 20
        4C 43 44
   00B3 00                 1454 	.db 0x00
   00B4                    1455 __str_6:
   00B4 0D                 1456 	.db 0x0D
   00B5 0A                 1457 	.db 0x0A
   00B6 50 72 65 73 73 20  1458 	.ascii "Press 'C' to clear the LCD display"
        27 43 27 20 74 6F
        20 63 6C 65 61 72
        20 74 68 65 20 4C
        43 44 20 64 69 73
        70 6C 61 79
   00D8 00                 1459 	.db 0x00
   00D9                    1460 __str_7:
   00D9 0D                 1461 	.db 0x0D
   00DA 0A                 1462 	.db 0x0A
   00DB 50 72 65 73 73 20  1463 	.ascii "Press 'D' to do a Hex Dump of EEPROM"
        27 44 27 20 74 6F
        20 64 6F 20 61 20
        48 65 78 20 44 75
        6D 70 20 6F 66 20
        45 45 50 52 4F 4D
   00FF 00                 1464 	.db 0x00
   0100                    1465 __str_8:
   0100 0D                 1466 	.db 0x0D
   0101 0A                 1467 	.db 0x0A
   0102 50 72 65 73 73 20  1468 	.ascii "Press 'Y' to read the contents of DDRAM"
        27 59 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 44 44
        52 41 4D
   0129 00                 1469 	.db 0x00
   012A                    1470 __str_9:
   012A 0D                 1471 	.db 0x0D
   012B 0A                 1472 	.db 0x0A
   012C 50 72 65 73 73 20  1473 	.ascii "Press 'G' to read the contents of CGRAM"
        27 47 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 43 47
        52 41 4D
   0153 0D                 1474 	.db 0x0D
   0154 0A                 1475 	.db 0x0A
   0155 00                 1476 	.db 0x00
   0156                    1477 __str_10:
   0156 0D                 1478 	.db 0x0D
   0157 0A                 1479 	.db 0x0A
   0158 57 72 69 74 69 6E  1480 	.ascii "Writing to EEPROM..."
        67 20 74 6F 20 45
        45 50 52 4F 4D 2E
        2E 2E
   016C 00                 1481 	.db 0x00
   016D                    1482 __str_11:
   016D 0D                 1483 	.db 0x0D
   016E 0A                 1484 	.db 0x0A
   016F 45 6E 74 65 72 20  1485 	.ascii "Enter an EEPROM block number from 0-7: "
        61 6E 20 45 45 50
        52 4F 4D 20 62 6C
        6F 63 6B 20 6E 75
        6D 62 65 72 20 66
        72 6F 6D 20 30 2D
        37 3A 20
   0196 00                 1486 	.db 0x00
   0197                    1487 __str_12:
   0197 0D                 1488 	.db 0x0D
   0198 0A                 1489 	.db 0x0A
   0199 49 4E 56 41 4C 49  1490 	.ascii "INVALID: Enter an EEPROM block number from 0-7: "
        44 3A 20 45 6E 74
        65 72 20 61 6E 20
        45 45 50 52 4F 4D
        20 62 6C 6F 63 6B
        20 6E 75 6D 62 65
        72 20 66 72 6F 6D
        20 30 2D 37 3A 20
   01C9 00                 1491 	.db 0x00
   01CA                    1492 __str_13:
   01CA 0D                 1493 	.db 0x0D
   01CB 0A                 1494 	.db 0x0A
   01CC 45 6E 74 65 72 20  1495 	.ascii "Enter an EEPROM Word address in hex:"
        61 6E 20 45 45 50
        52 4F 4D 20 57 6F
        72 64 20 61 64 64
        72 65 73 73 20 69
        6E 20 68 65 78 3A
   01F0 00                 1496 	.db 0x00
   01F1                    1497 __str_14:
   01F1 0D                 1498 	.db 0x0D
   01F2 0A                 1499 	.db 0x0A
   01F3 45 6E 74 65 72 20  1500 	.ascii "Enter a byte of data to write to EEPROM:"
        61 20 62 79 74 65
        20 6F 66 20 64 61
        74 61 20 74 6F 20
        77 72 69 74 65 20
        74 6F 20 45 45 50
        52 4F 4D 3A
   021B 00                 1501 	.db 0x00
   021C                    1502 __str_15:
   021C 0D                 1503 	.db 0x0D
   021D 0A                 1504 	.db 0x0A
   021E 57 72 6F 74 65 20  1505 	.ascii "Wrote %X to block %d address 0x%X in EEPROM!"
        25 58 20 74 6F 20
        62 6C 6F 63 6B 20
        25 64 20 61 64 64
        72 65 73 73 20 30
        78 25 58 20 69 6E
        20 45 45 50 52 4F
        4D 21
   024A 0D                 1506 	.db 0x0D
   024B 0A                 1507 	.db 0x0A
   024C 00                 1508 	.db 0x00
   024D                    1509 __str_16:
   024D 0D                 1510 	.db 0x0D
   024E 0A                 1511 	.db 0x0A
   024F 52 65 61 64 69 6E  1512 	.ascii "Reading from EEPROM..."
        67 20 66 72 6F 6D
        20 45 45 50 52 4F
        4D 2E 2E 2E
   0265 00                 1513 	.db 0x00
   0266                    1514 __str_17:
   0266 0D                 1515 	.db 0x0D
   0267 0A                 1516 	.db 0x0A
   0268 52 65 61 64 20 25  1517 	.ascii "Read %X from block %d address 0x%X"
        58 20 66 72 6F 6D
        20 62 6C 6F 63 6B
        20 25 64 20 61 64
        64 72 65 73 73 20
        30 78 25 58
   028A 0D                 1518 	.db 0x0D
   028B 0A                 1519 	.db 0x0A
   028C 00                 1520 	.db 0x00
   028D                    1521 __str_18:
   028D 0D                 1522 	.db 0x0D
   028E 0A                 1523 	.db 0x0A
   028F 45 6E 74 65 72 20  1524 	.ascii "Enter LCD row from 0-3:"
        4C 43 44 20 72 6F
        77 20 66 72 6F 6D
        20 30 2D 33 3A
   02A6 00                 1525 	.db 0x00
   02A7                    1526 __str_19:
   02A7 3A 20              1527 	.ascii ": "
   02A9 00                 1528 	.db 0x00
   02AA                    1529 __str_20:
   02AA 0D                 1530 	.db 0x0D
   02AB 0A                 1531 	.db 0x0A
   02AC 57 72 6F 74 65 20  1532 	.ascii "Wrote to LCD!"
        74 6F 20 4C 43 44
        21
   02B9 0D                 1533 	.db 0x0D
   02BA 0A                 1534 	.db 0x0A
   02BB 00                 1535 	.db 0x00
   02BC                    1536 __str_21:
   02BC 0D                 1537 	.db 0x0D
   02BD 0A                 1538 	.db 0x0A
   02BE 4C 43 44 20 44 69  1539 	.ascii "LCD Display Cleared!"
        73 70 6C 61 79 20
        43 6C 65 61 72 65
        64 21
   02D2 0D                 1540 	.db 0x0D
   02D3 0A                 1541 	.db 0x0A
   02D4 00                 1542 	.db 0x00
                           1543 	.area XINIT   (CODE)
