                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sun Nov 13 18:34:39 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _handleInput
                             14 	.globl _handleCGMode
                             15 	.globl _CG_Menu
                             16 	.globl _handlePCFMode
                             17 	.globl _PCF_Menu
                             18 	.globl _getBlockAndAddress
                             19 	.globl __sdcc_external_startup
                             20 	.globl _P5_7
                             21 	.globl _P5_6
                             22 	.globl _P5_5
                             23 	.globl _P5_4
                             24 	.globl _P5_3
                             25 	.globl _P5_2
                             26 	.globl _P5_1
                             27 	.globl _P5_0
                             28 	.globl _P4_7
                             29 	.globl _P4_6
                             30 	.globl _P4_5
                             31 	.globl _P4_4
                             32 	.globl _P4_3
                             33 	.globl _P4_2
                             34 	.globl _P4_1
                             35 	.globl _P4_0
                             36 	.globl _PX0L
                             37 	.globl _PT0L
                             38 	.globl _PX1L
                             39 	.globl _PT1L
                             40 	.globl _PLS
                             41 	.globl _PT2L
                             42 	.globl _PPCL
                             43 	.globl _EC
                             44 	.globl _CCF0
                             45 	.globl _CCF1
                             46 	.globl _CCF2
                             47 	.globl _CCF3
                             48 	.globl _CCF4
                             49 	.globl _CR
                             50 	.globl _CF
                             51 	.globl _TF2
                             52 	.globl _EXF2
                             53 	.globl _RCLK
                             54 	.globl _TCLK
                             55 	.globl _EXEN2
                             56 	.globl _TR2
                             57 	.globl _C_T2
                             58 	.globl _CP_RL2
                             59 	.globl _T2CON_7
                             60 	.globl _T2CON_6
                             61 	.globl _T2CON_5
                             62 	.globl _T2CON_4
                             63 	.globl _T2CON_3
                             64 	.globl _T2CON_2
                             65 	.globl _T2CON_1
                             66 	.globl _T2CON_0
                             67 	.globl _PT2
                             68 	.globl _ET2
                             69 	.globl _CY
                             70 	.globl _AC
                             71 	.globl _F0
                             72 	.globl _RS1
                             73 	.globl _RS0
                             74 	.globl _OV
                             75 	.globl _F1
                             76 	.globl _P
                             77 	.globl _PS
                             78 	.globl _PT1
                             79 	.globl _PX1
                             80 	.globl _PT0
                             81 	.globl _PX0
                             82 	.globl _RD
                             83 	.globl _WR
                             84 	.globl _T1
                             85 	.globl _T0
                             86 	.globl _INT1
                             87 	.globl _INT0
                             88 	.globl _TXD
                             89 	.globl _RXD
                             90 	.globl _P3_7
                             91 	.globl _P3_6
                             92 	.globl _P3_5
                             93 	.globl _P3_4
                             94 	.globl _P3_3
                             95 	.globl _P3_2
                             96 	.globl _P3_1
                             97 	.globl _P3_0
                             98 	.globl _EA
                             99 	.globl _ES
                            100 	.globl _ET1
                            101 	.globl _EX1
                            102 	.globl _ET0
                            103 	.globl _EX0
                            104 	.globl _P2_7
                            105 	.globl _P2_6
                            106 	.globl _P2_5
                            107 	.globl _P2_4
                            108 	.globl _P2_3
                            109 	.globl _P2_2
                            110 	.globl _P2_1
                            111 	.globl _P2_0
                            112 	.globl _SM0
                            113 	.globl _SM1
                            114 	.globl _SM2
                            115 	.globl _REN
                            116 	.globl _TB8
                            117 	.globl _RB8
                            118 	.globl _TI
                            119 	.globl _RI
                            120 	.globl _P1_7
                            121 	.globl _P1_6
                            122 	.globl _P1_5
                            123 	.globl _P1_4
                            124 	.globl _P1_3
                            125 	.globl _P1_2
                            126 	.globl _P1_1
                            127 	.globl _P1_0
                            128 	.globl _TF1
                            129 	.globl _TR1
                            130 	.globl _TF0
                            131 	.globl _TR0
                            132 	.globl _IE1
                            133 	.globl _IT1
                            134 	.globl _IE0
                            135 	.globl _IT0
                            136 	.globl _P0_7
                            137 	.globl _P0_6
                            138 	.globl _P0_5
                            139 	.globl _P0_4
                            140 	.globl _P0_3
                            141 	.globl _P0_2
                            142 	.globl _P0_1
                            143 	.globl _P0_0
                            144 	.globl _EECON
                            145 	.globl _KBF
                            146 	.globl _KBE
                            147 	.globl _KBLS
                            148 	.globl _BRL
                            149 	.globl _BDRCON
                            150 	.globl _T2MOD
                            151 	.globl _SPDAT
                            152 	.globl _SPSTA
                            153 	.globl _SPCON
                            154 	.globl _SADEN
                            155 	.globl _SADDR
                            156 	.globl _WDTPRG
                            157 	.globl _WDTRST
                            158 	.globl _P5
                            159 	.globl _P4
                            160 	.globl _IPH1
                            161 	.globl _IPL1
                            162 	.globl _IPH0
                            163 	.globl _IPL0
                            164 	.globl _IEN1
                            165 	.globl _IEN0
                            166 	.globl _CMOD
                            167 	.globl _CL
                            168 	.globl _CH
                            169 	.globl _CCON
                            170 	.globl _CCAPM4
                            171 	.globl _CCAPM3
                            172 	.globl _CCAPM2
                            173 	.globl _CCAPM1
                            174 	.globl _CCAPM0
                            175 	.globl _CCAP4L
                            176 	.globl _CCAP3L
                            177 	.globl _CCAP2L
                            178 	.globl _CCAP1L
                            179 	.globl _CCAP0L
                            180 	.globl _CCAP4H
                            181 	.globl _CCAP3H
                            182 	.globl _CCAP2H
                            183 	.globl _CCAP1H
                            184 	.globl _CCAP0H
                            185 	.globl _CKCKON1
                            186 	.globl _CKCKON0
                            187 	.globl _CKRL
                            188 	.globl _AUXR1
                            189 	.globl _AUXR
                            190 	.globl _TH2
                            191 	.globl _TL2
                            192 	.globl _RCAP2H
                            193 	.globl _RCAP2L
                            194 	.globl _T2CON
                            195 	.globl _B
                            196 	.globl _ACC
                            197 	.globl _PSW
                            198 	.globl _IP
                            199 	.globl _P3
                            200 	.globl _IE
                            201 	.globl _P2
                            202 	.globl _SBUF
                            203 	.globl _SCON
                            204 	.globl _P1
                            205 	.globl _TH1
                            206 	.globl _TH0
                            207 	.globl _TL1
                            208 	.globl _TL0
                            209 	.globl _TMOD
                            210 	.globl _TCON
                            211 	.globl _PCON
                            212 	.globl _DPH
                            213 	.globl _DPL
                            214 	.globl _SP
                            215 	.globl _P0
                            216 	.globl _ExpiredAlarms
                            217 	.globl _mode
                            218 	.globl _getBlockAndAddress_PARM_2
                            219 	.globl _DisableFlag
                            220 	.globl _LCD_Menu
                            221 	.globl _handleLCDMode
                            222 	.globl _EEPROM_Menu
                            223 	.globl _handleEEPROMMode
                            224 	.globl _CLOCK_Menu
                            225 	.globl _handleCLOCKMode
                            226 	.globl _MainMenu
                            227 	.globl _handleMAINMode
                            228 ;--------------------------------------------------------
                            229 ; special function registers
                            230 ;--------------------------------------------------------
                            231 	.area RSEG    (DATA)
                    0080    232 _P0	=	0x0080
                    0081    233 _SP	=	0x0081
                    0082    234 _DPL	=	0x0082
                    0083    235 _DPH	=	0x0083
                    0087    236 _PCON	=	0x0087
                    0088    237 _TCON	=	0x0088
                    0089    238 _TMOD	=	0x0089
                    008A    239 _TL0	=	0x008a
                    008B    240 _TL1	=	0x008b
                    008C    241 _TH0	=	0x008c
                    008D    242 _TH1	=	0x008d
                    0090    243 _P1	=	0x0090
                    0098    244 _SCON	=	0x0098
                    0099    245 _SBUF	=	0x0099
                    00A0    246 _P2	=	0x00a0
                    00A8    247 _IE	=	0x00a8
                    00B0    248 _P3	=	0x00b0
                    00B8    249 _IP	=	0x00b8
                    00D0    250 _PSW	=	0x00d0
                    00E0    251 _ACC	=	0x00e0
                    00F0    252 _B	=	0x00f0
                    00C8    253 _T2CON	=	0x00c8
                    00CA    254 _RCAP2L	=	0x00ca
                    00CB    255 _RCAP2H	=	0x00cb
                    00CC    256 _TL2	=	0x00cc
                    00CD    257 _TH2	=	0x00cd
                    008E    258 _AUXR	=	0x008e
                    00A2    259 _AUXR1	=	0x00a2
                    0097    260 _CKRL	=	0x0097
                    008F    261 _CKCKON0	=	0x008f
                    008F    262 _CKCKON1	=	0x008f
                    00FA    263 _CCAP0H	=	0x00fa
                    00FB    264 _CCAP1H	=	0x00fb
                    00FC    265 _CCAP2H	=	0x00fc
                    00FD    266 _CCAP3H	=	0x00fd
                    00FE    267 _CCAP4H	=	0x00fe
                    00EA    268 _CCAP0L	=	0x00ea
                    00EB    269 _CCAP1L	=	0x00eb
                    00EC    270 _CCAP2L	=	0x00ec
                    00ED    271 _CCAP3L	=	0x00ed
                    00EE    272 _CCAP4L	=	0x00ee
                    00DA    273 _CCAPM0	=	0x00da
                    00DB    274 _CCAPM1	=	0x00db
                    00DC    275 _CCAPM2	=	0x00dc
                    00DD    276 _CCAPM3	=	0x00dd
                    00DE    277 _CCAPM4	=	0x00de
                    00D8    278 _CCON	=	0x00d8
                    00F9    279 _CH	=	0x00f9
                    00E9    280 _CL	=	0x00e9
                    00D9    281 _CMOD	=	0x00d9
                    00A8    282 _IEN0	=	0x00a8
                    00B1    283 _IEN1	=	0x00b1
                    00B8    284 _IPL0	=	0x00b8
                    00B7    285 _IPH0	=	0x00b7
                    00B2    286 _IPL1	=	0x00b2
                    00B3    287 _IPH1	=	0x00b3
                    00C0    288 _P4	=	0x00c0
                    00D8    289 _P5	=	0x00d8
                    00A6    290 _WDTRST	=	0x00a6
                    00A7    291 _WDTPRG	=	0x00a7
                    00A9    292 _SADDR	=	0x00a9
                    00B9    293 _SADEN	=	0x00b9
                    00C3    294 _SPCON	=	0x00c3
                    00C4    295 _SPSTA	=	0x00c4
                    00C5    296 _SPDAT	=	0x00c5
                    00C9    297 _T2MOD	=	0x00c9
                    009B    298 _BDRCON	=	0x009b
                    009A    299 _BRL	=	0x009a
                    009C    300 _KBLS	=	0x009c
                    009D    301 _KBE	=	0x009d
                    009E    302 _KBF	=	0x009e
                    00D2    303 _EECON	=	0x00d2
                            304 ;--------------------------------------------------------
                            305 ; special function bits
                            306 ;--------------------------------------------------------
                            307 	.area RSEG    (DATA)
                    0080    308 _P0_0	=	0x0080
                    0081    309 _P0_1	=	0x0081
                    0082    310 _P0_2	=	0x0082
                    0083    311 _P0_3	=	0x0083
                    0084    312 _P0_4	=	0x0084
                    0085    313 _P0_5	=	0x0085
                    0086    314 _P0_6	=	0x0086
                    0087    315 _P0_7	=	0x0087
                    0088    316 _IT0	=	0x0088
                    0089    317 _IE0	=	0x0089
                    008A    318 _IT1	=	0x008a
                    008B    319 _IE1	=	0x008b
                    008C    320 _TR0	=	0x008c
                    008D    321 _TF0	=	0x008d
                    008E    322 _TR1	=	0x008e
                    008F    323 _TF1	=	0x008f
                    0090    324 _P1_0	=	0x0090
                    0091    325 _P1_1	=	0x0091
                    0092    326 _P1_2	=	0x0092
                    0093    327 _P1_3	=	0x0093
                    0094    328 _P1_4	=	0x0094
                    0095    329 _P1_5	=	0x0095
                    0096    330 _P1_6	=	0x0096
                    0097    331 _P1_7	=	0x0097
                    0098    332 _RI	=	0x0098
                    0099    333 _TI	=	0x0099
                    009A    334 _RB8	=	0x009a
                    009B    335 _TB8	=	0x009b
                    009C    336 _REN	=	0x009c
                    009D    337 _SM2	=	0x009d
                    009E    338 _SM1	=	0x009e
                    009F    339 _SM0	=	0x009f
                    00A0    340 _P2_0	=	0x00a0
                    00A1    341 _P2_1	=	0x00a1
                    00A2    342 _P2_2	=	0x00a2
                    00A3    343 _P2_3	=	0x00a3
                    00A4    344 _P2_4	=	0x00a4
                    00A5    345 _P2_5	=	0x00a5
                    00A6    346 _P2_6	=	0x00a6
                    00A7    347 _P2_7	=	0x00a7
                    00A8    348 _EX0	=	0x00a8
                    00A9    349 _ET0	=	0x00a9
                    00AA    350 _EX1	=	0x00aa
                    00AB    351 _ET1	=	0x00ab
                    00AC    352 _ES	=	0x00ac
                    00AF    353 _EA	=	0x00af
                    00B0    354 _P3_0	=	0x00b0
                    00B1    355 _P3_1	=	0x00b1
                    00B2    356 _P3_2	=	0x00b2
                    00B3    357 _P3_3	=	0x00b3
                    00B4    358 _P3_4	=	0x00b4
                    00B5    359 _P3_5	=	0x00b5
                    00B6    360 _P3_6	=	0x00b6
                    00B7    361 _P3_7	=	0x00b7
                    00B0    362 _RXD	=	0x00b0
                    00B1    363 _TXD	=	0x00b1
                    00B2    364 _INT0	=	0x00b2
                    00B3    365 _INT1	=	0x00b3
                    00B4    366 _T0	=	0x00b4
                    00B5    367 _T1	=	0x00b5
                    00B6    368 _WR	=	0x00b6
                    00B7    369 _RD	=	0x00b7
                    00B8    370 _PX0	=	0x00b8
                    00B9    371 _PT0	=	0x00b9
                    00BA    372 _PX1	=	0x00ba
                    00BB    373 _PT1	=	0x00bb
                    00BC    374 _PS	=	0x00bc
                    00D0    375 _P	=	0x00d0
                    00D1    376 _F1	=	0x00d1
                    00D2    377 _OV	=	0x00d2
                    00D3    378 _RS0	=	0x00d3
                    00D4    379 _RS1	=	0x00d4
                    00D5    380 _F0	=	0x00d5
                    00D6    381 _AC	=	0x00d6
                    00D7    382 _CY	=	0x00d7
                    00AD    383 _ET2	=	0x00ad
                    00BD    384 _PT2	=	0x00bd
                    00C8    385 _T2CON_0	=	0x00c8
                    00C9    386 _T2CON_1	=	0x00c9
                    00CA    387 _T2CON_2	=	0x00ca
                    00CB    388 _T2CON_3	=	0x00cb
                    00CC    389 _T2CON_4	=	0x00cc
                    00CD    390 _T2CON_5	=	0x00cd
                    00CE    391 _T2CON_6	=	0x00ce
                    00CF    392 _T2CON_7	=	0x00cf
                    00C8    393 _CP_RL2	=	0x00c8
                    00C9    394 _C_T2	=	0x00c9
                    00CA    395 _TR2	=	0x00ca
                    00CB    396 _EXEN2	=	0x00cb
                    00CC    397 _TCLK	=	0x00cc
                    00CD    398 _RCLK	=	0x00cd
                    00CE    399 _EXF2	=	0x00ce
                    00CF    400 _TF2	=	0x00cf
                    00DF    401 _CF	=	0x00df
                    00DE    402 _CR	=	0x00de
                    00DC    403 _CCF4	=	0x00dc
                    00DB    404 _CCF3	=	0x00db
                    00DA    405 _CCF2	=	0x00da
                    00D9    406 _CCF1	=	0x00d9
                    00D8    407 _CCF0	=	0x00d8
                    00AE    408 _EC	=	0x00ae
                    00BE    409 _PPCL	=	0x00be
                    00BD    410 _PT2L	=	0x00bd
                    00BC    411 _PLS	=	0x00bc
                    00BB    412 _PT1L	=	0x00bb
                    00BA    413 _PX1L	=	0x00ba
                    00B9    414 _PT0L	=	0x00b9
                    00B8    415 _PX0L	=	0x00b8
                    00C0    416 _P4_0	=	0x00c0
                    00C1    417 _P4_1	=	0x00c1
                    00C2    418 _P4_2	=	0x00c2
                    00C3    419 _P4_3	=	0x00c3
                    00C4    420 _P4_4	=	0x00c4
                    00C5    421 _P4_5	=	0x00c5
                    00C6    422 _P4_6	=	0x00c6
                    00C7    423 _P4_7	=	0x00c7
                    00D8    424 _P5_0	=	0x00d8
                    00D9    425 _P5_1	=	0x00d9
                    00DA    426 _P5_2	=	0x00da
                    00DB    427 _P5_3	=	0x00db
                    00DC    428 _P5_4	=	0x00dc
                    00DD    429 _P5_5	=	0x00dd
                    00DE    430 _P5_6	=	0x00de
                    00DF    431 _P5_7	=	0x00df
                            432 ;--------------------------------------------------------
                            433 ; overlayable register banks
                            434 ;--------------------------------------------------------
                            435 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     436 	.ds 8
                            437 ;--------------------------------------------------------
                            438 ; internal ram data
                            439 ;--------------------------------------------------------
                            440 	.area DSEG    (DATA)
                            441 ;--------------------------------------------------------
                            442 ; overlayable items in internal ram 
                            443 ;--------------------------------------------------------
                            444 	.area OSEG    (OVR,DATA)
                            445 ;--------------------------------------------------------
                            446 ; Stack segment in internal ram 
                            447 ;--------------------------------------------------------
                            448 	.area	SSEG	(DATA)
   0000                     449 __start__stack:
   0000                     450 	.ds	1
                            451 
                            452 ;--------------------------------------------------------
                            453 ; indirectly addressable internal ram data
                            454 ;--------------------------------------------------------
                            455 	.area ISEG    (DATA)
                            456 ;--------------------------------------------------------
                            457 ; bit data
                            458 ;--------------------------------------------------------
                            459 	.area BSEG    (BIT)
   0000                     460 _DisableFlag::
   0000                     461 	.ds 1
                            462 ;--------------------------------------------------------
                            463 ; paged external ram data
                            464 ;--------------------------------------------------------
                            465 	.area PSEG    (PAG,XDATA)
                            466 ;--------------------------------------------------------
                            467 ; external ram data
                            468 ;--------------------------------------------------------
                            469 	.area XSEG    (XDATA)
   0000                     470 _getBlockAndAddress_PARM_2:
   0000                     471 	.ds 3
   0003                     472 _getBlockAndAddress_address_1_1:
   0003                     473 	.ds 3
   0006                     474 _handlePCFMode_c_1_1:
   0006                     475 	.ds 1
   0007                     476 _handleCGMode_c_1_1:
   0007                     477 	.ds 1
   0008                     478 _handleCGMode_addr_1_1:
   0008                     479 	.ds 1
   0009                     480 _handleLCDMode_c_1_1:
   0009                     481 	.ds 1
   000A                     482 _handleLCDMode_row_1_1:
   000A                     483 	.ds 2
   000C                     484 _handleLCDMode_col_1_1:
   000C                     485 	.ds 2
   000E                     486 _handleLCDMode_str_1_1:
   000E                     487 	.ds 100
   0072                     488 _handleLCDMode_start_addr_1_1:
   0072                     489 	.ds 2
   0074                     490 _handleEEPROMMode_c_1_1:
   0074                     491 	.ds 1
   0075                     492 _handleEEPROMMode_block_1_1:
   0075                     493 	.ds 1
   0076                     494 _handleEEPROMMode_end_block_1_1:
   0076                     495 	.ds 1
   0077                     496 _handleEEPROMMode_address_1_1:
   0077                     497 	.ds 1
   0078                     498 _handleEEPROMMode_end_address_1_1:
   0078                     499 	.ds 1
   0079                     500 _handleEEPROMMode_start_addr_1_1:
   0079                     501 	.ds 2
   007B                     502 _handleEEPROMMode_end_addr_1_1:
   007B                     503 	.ds 2
   007D                     504 _handleCLOCKMode_c_1_1:
   007D                     505 	.ds 1
   007E                     506 _handleCLOCKMode_i_1_1:
   007E                     507 	.ds 1
   007F                     508 _handleMAINMode_c_1_1:
   007F                     509 	.ds 1
   0080                     510 _handleInput_c_1_1:
   0080                     511 	.ds 1
   0081                     512 _main_i_2_2:
   0081                     513 	.ds 1
                            514 ;--------------------------------------------------------
                            515 ; external initialized ram data
                            516 ;--------------------------------------------------------
                            517 	.area XISEG   (XDATA)
   0000                     518 _mode::
   0000                     519 	.ds 1
   0001                     520 _ExpiredAlarms::
   0001                     521 	.ds 3
                            522 	.area HOME    (CODE)
                            523 	.area GSINIT0 (CODE)
                            524 	.area GSINIT1 (CODE)
                            525 	.area GSINIT2 (CODE)
                            526 	.area GSINIT3 (CODE)
                            527 	.area GSINIT4 (CODE)
                            528 	.area GSINIT5 (CODE)
                            529 	.area GSINIT  (CODE)
                            530 	.area GSFINAL (CODE)
                            531 	.area CSEG    (CODE)
                            532 ;--------------------------------------------------------
                            533 ; interrupt vector 
                            534 ;--------------------------------------------------------
                            535 	.area HOME    (CODE)
   0000                     536 __interrupt_vect:
   0000 02s00r00            537 	ljmp	__sdcc_gsinit_startup
   0003 32                  538 	reti
   0004                     539 	.ds	7
   000B 02s00r00            540 	ljmp	_timer0
   000E                     541 	.ds	5
   0013 02s00r00            542 	ljmp	_ext1
                            543 ;--------------------------------------------------------
                            544 ; global & static initialisations
                            545 ;--------------------------------------------------------
                            546 	.area HOME    (CODE)
                            547 	.area GSINIT  (CODE)
                            548 	.area GSFINAL (CODE)
                            549 	.area GSINIT  (CODE)
                            550 	.globl __sdcc_gsinit_startup
                            551 	.globl __sdcc_program_startup
                            552 	.globl __start__stack
                            553 	.globl __mcs51_genXINIT
                            554 	.globl __mcs51_genXRAMCLEAR
                            555 	.globl __mcs51_genRAMCLEAR
                            556 ;	main.c:38: bool DisableFlag = false;
                            557 ;	genAssign
   0000 C2*00               558 	clr	_DisableFlag
                            559 	.area GSFINAL (CODE)
   0000 02s00r00            560 	ljmp	__sdcc_program_startup
                            561 ;--------------------------------------------------------
                            562 ; Home
                            563 ;--------------------------------------------------------
                            564 	.area HOME    (CODE)
                            565 	.area CSEG    (CODE)
   0000                     566 __sdcc_program_startup:
   0000 12s13r1F            567 	lcall	_main
                            568 ;	return from main will lock up
   0003 80 FE               569 	sjmp .
                            570 ;--------------------------------------------------------
                            571 ; code
                            572 ;--------------------------------------------------------
                            573 	.area CSEG    (CODE)
                            574 ;------------------------------------------------------------
                            575 ;Allocation info for local variables in function '_sdcc_external_startup'
                            576 ;------------------------------------------------------------
                            577 ;------------------------------------------------------------
                            578 ;	main.c:54: _sdcc_external_startup(){
                            579 ;	-----------------------------------------
                            580 ;	 function _sdcc_external_startup
                            581 ;	-----------------------------------------
   0005                     582 __sdcc_external_startup:
                    0002    583 	ar2 = 0x02
                    0003    584 	ar3 = 0x03
                    0004    585 	ar4 = 0x04
                    0005    586 	ar5 = 0x05
                    0006    587 	ar6 = 0x06
                    0007    588 	ar7 = 0x07
                    0000    589 	ar0 = 0x00
                    0001    590 	ar1 = 0x01
                            591 ;	main.c:56: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            592 ;	genOr
   0005 43 8E 0C            593 	orl	_AUXR,#0x0C
                            594 ;	main.c:57: return 0;
                            595 ;	genRet
                            596 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            597 	mov	dptr,#0x0000
                            598 ;	Peephole 300	removed redundant label 00101$
   000B 22                  599 	ret
                            600 ;------------------------------------------------------------
                            601 ;Allocation info for local variables in function 'getBlockAndAddress'
                            602 ;------------------------------------------------------------
                            603 ;block                     Allocated with name '_getBlockAndAddress_PARM_2'
                            604 ;address                   Allocated with name '_getBlockAndAddress_address_1_1'
                            605 ;------------------------------------------------------------
                            606 ;	main.c:61: void getBlockAndAddress(uint8_t *address, uint8_t *block){
                            607 ;	-----------------------------------------
                            608 ;	 function getBlockAndAddress
                            609 ;	-----------------------------------------
   000C                     610 _getBlockAndAddress:
                            611 ;	genReceive
   000C AA F0               612 	mov	r2,b
   000E AB 83               613 	mov	r3,dph
   0010 E5 82               614 	mov	a,dpl
   0012 90s00r03            615 	mov	dptr,#_getBlockAndAddress_address_1_1
   0015 F0                  616 	movx	@dptr,a
   0016 A3                  617 	inc	dptr
   0017 EB                  618 	mov	a,r3
   0018 F0                  619 	movx	@dptr,a
   0019 A3                  620 	inc	dptr
   001A EA                  621 	mov	a,r2
   001B F0                  622 	movx	@dptr,a
                            623 ;	main.c:62: printf("\r\nEnter an EEPROM block number from 0-7: ");
                            624 ;	genIpush
   001C 74r00               625 	mov	a,#__str_0
   001E C0 E0               626 	push	acc
   0020 74s00               627 	mov	a,#(__str_0 >> 8)
   0022 C0 E0               628 	push	acc
   0024 74 80               629 	mov	a,#0x80
   0026 C0 E0               630 	push	acc
                            631 ;	genCall
   0028 12s00r00            632 	lcall	_printf
   002B 15 81               633 	dec	sp
   002D 15 81               634 	dec	sp
   002F 15 81               635 	dec	sp
                            636 ;	main.c:63: *block = Serial_GetInteger(1);
                            637 ;	genAssign
   0031 90s00r00            638 	mov	dptr,#_getBlockAndAddress_PARM_2
   0034 E0                  639 	movx	a,@dptr
   0035 FA                  640 	mov	r2,a
   0036 A3                  641 	inc	dptr
   0037 E0                  642 	movx	a,@dptr
   0038 FB                  643 	mov	r3,a
   0039 A3                  644 	inc	dptr
   003A E0                  645 	movx	a,@dptr
   003B FC                  646 	mov	r4,a
                            647 ;	genCall
                            648 ;	Peephole 182.b	used 16 bit load of dptr
   003C 90 00 01            649 	mov	dptr,#0x0001
   003F C0 02               650 	push	ar2
   0041 C0 03               651 	push	ar3
   0043 C0 04               652 	push	ar4
   0045 12s00r00            653 	lcall	_Serial_GetInteger
   0048 AD 82               654 	mov	r5,dpl
   004A AE 83               655 	mov	r6,dph
   004C D0 04               656 	pop	ar4
   004E D0 03               657 	pop	ar3
   0050 D0 02               658 	pop	ar2
                            659 ;	genCast
                            660 ;	genPointerSet
                            661 ;	genGenPointerSet
   0052 8A 82               662 	mov	dpl,r2
   0054 8B 83               663 	mov	dph,r3
   0056 8C F0               664 	mov	b,r4
   0058 ED                  665 	mov	a,r5
   0059 12s00r00            666 	lcall	__gptrput
                            667 ;	main.c:64: while(*block > 7){
   005C                     668 00101$:
                            669 ;	genPointerGet
                            670 ;	genGenPointerGet
   005C 8A 82               671 	mov	dpl,r2
   005E 8B 83               672 	mov	dph,r3
   0060 8C F0               673 	mov	b,r4
   0062 12s00r00            674 	lcall	__gptrget
                            675 ;	genCmpGt
                            676 ;	genCmp
                            677 ;	genIfxJump
                            678 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            679 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0065 FD                  680 	mov  r5,a
                            681 ;	Peephole 177.a	removed redundant mov
   0066 24 F8               682 	add	a,#0xff - 0x07
   0068 50 43               683 	jnc	00103$
                            684 ;	Peephole 300	removed redundant label 00108$
                            685 ;	main.c:65: printf("\r\nINVALID: Enter an EEPROM block number from 0-7: ");
                            686 ;	genIpush
   006A C0 02               687 	push	ar2
   006C C0 03               688 	push	ar3
   006E C0 04               689 	push	ar4
   0070 74r2A               690 	mov	a,#__str_1
   0072 C0 E0               691 	push	acc
   0074 74s00               692 	mov	a,#(__str_1 >> 8)
   0076 C0 E0               693 	push	acc
   0078 74 80               694 	mov	a,#0x80
   007A C0 E0               695 	push	acc
                            696 ;	genCall
   007C 12s00r00            697 	lcall	_printf
   007F 15 81               698 	dec	sp
   0081 15 81               699 	dec	sp
   0083 15 81               700 	dec	sp
   0085 D0 04               701 	pop	ar4
   0087 D0 03               702 	pop	ar3
   0089 D0 02               703 	pop	ar2
                            704 ;	main.c:66: *block = Serial_GetInteger(1);
                            705 ;	genCall
                            706 ;	Peephole 182.b	used 16 bit load of dptr
   008B 90 00 01            707 	mov	dptr,#0x0001
   008E C0 02               708 	push	ar2
   0090 C0 03               709 	push	ar3
   0092 C0 04               710 	push	ar4
   0094 12s00r00            711 	lcall	_Serial_GetInteger
   0097 AD 82               712 	mov	r5,dpl
   0099 AE 83               713 	mov	r6,dph
   009B D0 04               714 	pop	ar4
   009D D0 03               715 	pop	ar3
   009F D0 02               716 	pop	ar2
                            717 ;	genCast
                            718 ;	genPointerSet
                            719 ;	genGenPointerSet
   00A1 8A 82               720 	mov	dpl,r2
   00A3 8B 83               721 	mov	dph,r3
   00A5 8C F0               722 	mov	b,r4
   00A7 ED                  723 	mov	a,r5
   00A8 12s00r00            724 	lcall	__gptrput
                            725 ;	Peephole 112.b	changed ljmp to sjmp
   00AB 80 AF               726 	sjmp	00101$
   00AD                     727 00103$:
                            728 ;	main.c:69: printf("\r\nEnter an EEPROM Word address in hex:");
                            729 ;	genIpush
   00AD 74r5D               730 	mov	a,#__str_2
   00AF C0 E0               731 	push	acc
   00B1 74s00               732 	mov	a,#(__str_2 >> 8)
   00B3 C0 E0               733 	push	acc
   00B5 74 80               734 	mov	a,#0x80
   00B7 C0 E0               735 	push	acc
                            736 ;	genCall
   00B9 12s00r00            737 	lcall	_printf
   00BC 15 81               738 	dec	sp
   00BE 15 81               739 	dec	sp
   00C0 15 81               740 	dec	sp
                            741 ;	main.c:70: *address = Serial_GetHex();
                            742 ;	genAssign
   00C2 90s00r03            743 	mov	dptr,#_getBlockAndAddress_address_1_1
   00C5 E0                  744 	movx	a,@dptr
   00C6 FA                  745 	mov	r2,a
   00C7 A3                  746 	inc	dptr
   00C8 E0                  747 	movx	a,@dptr
   00C9 FB                  748 	mov	r3,a
   00CA A3                  749 	inc	dptr
   00CB E0                  750 	movx	a,@dptr
   00CC FC                  751 	mov	r4,a
                            752 ;	genCall
   00CD C0 02               753 	push	ar2
   00CF C0 03               754 	push	ar3
   00D1 C0 04               755 	push	ar4
   00D3 12s00r00            756 	lcall	_Serial_GetHex
   00D6 AD 82               757 	mov	r5,dpl
   00D8 D0 04               758 	pop	ar4
   00DA D0 03               759 	pop	ar3
   00DC D0 02               760 	pop	ar2
                            761 ;	genPointerSet
                            762 ;	genGenPointerSet
   00DE 8A 82               763 	mov	dpl,r2
   00E0 8B 83               764 	mov	dph,r3
   00E2 8C F0               765 	mov	b,r4
   00E4 ED                  766 	mov	a,r5
                            767 ;	Peephole 253.b	replaced lcall/ret with ljmp
   00E5 02s00r00            768 	ljmp	__gptrput
                            769 ;
                            770 ;------------------------------------------------------------
                            771 ;Allocation info for local variables in function 'PCF_Menu'
                            772 ;------------------------------------------------------------
                            773 ;------------------------------------------------------------
                            774 ;	main.c:74: void PCF_Menu(void){
                            775 ;	-----------------------------------------
                            776 ;	 function PCF_Menu
                            777 ;	-----------------------------------------
   00E8                     778 _PCF_Menu:
                            779 ;	main.c:75: printf("\r\nIn Custom Character Mode");
                            780 ;	genIpush
   00E8 74r84               781 	mov	a,#__str_3
   00EA C0 E0               782 	push	acc
   00EC 74s00               783 	mov	a,#(__str_3 >> 8)
   00EE C0 E0               784 	push	acc
   00F0 74 80               785 	mov	a,#0x80
   00F2 C0 E0               786 	push	acc
                            787 ;	genCall
   00F4 12s00r00            788 	lcall	_printf
   00F7 15 81               789 	dec	sp
   00F9 15 81               790 	dec	sp
   00FB 15 81               791 	dec	sp
                            792 ;	main.c:76: printf("\r\nPress 'H' for help");
                            793 ;	genIpush
   00FD 74r9F               794 	mov	a,#__str_4
   00FF C0 E0               795 	push	acc
   0101 74s00               796 	mov	a,#(__str_4 >> 8)
   0103 C0 E0               797 	push	acc
   0105 74 80               798 	mov	a,#0x80
   0107 C0 E0               799 	push	acc
                            800 ;	genCall
   0109 12s00r00            801 	lcall	_printf
   010C 15 81               802 	dec	sp
   010E 15 81               803 	dec	sp
   0110 15 81               804 	dec	sp
                            805 ;	main.c:77: printf("\r\nPress 'O' to set pin to output low");
                            806 ;	genIpush
   0112 74rB4               807 	mov	a,#__str_5
   0114 C0 E0               808 	push	acc
   0116 74s00               809 	mov	a,#(__str_5 >> 8)
   0118 C0 E0               810 	push	acc
   011A 74 80               811 	mov	a,#0x80
   011C C0 E0               812 	push	acc
                            813 ;	genCall
   011E 12s00r00            814 	lcall	_printf
   0121 15 81               815 	dec	sp
   0123 15 81               816 	dec	sp
   0125 15 81               817 	dec	sp
                            818 ;	main.c:78: printf("\r\nPress 'I' to set pin to input/output value high");
                            819 ;	genIpush
   0127 74rD9               820 	mov	a,#__str_6
   0129 C0 E0               821 	push	acc
   012B 74s00               822 	mov	a,#(__str_6 >> 8)
   012D C0 E0               823 	push	acc
   012F 74 80               824 	mov	a,#0x80
   0131 C0 E0               825 	push	acc
                            826 ;	genCall
   0133 12s00r00            827 	lcall	_printf
   0136 15 81               828 	dec	sp
   0138 15 81               829 	dec	sp
   013A 15 81               830 	dec	sp
                            831 ;	main.c:79: printf("\r\nPress 'S' to view status of the pins");
                            832 ;	genIpush
   013C 74r0B               833 	mov	a,#__str_7
   013E C0 E0               834 	push	acc
   0140 74s01               835 	mov	a,#(__str_7 >> 8)
   0142 C0 E0               836 	push	acc
   0144 74 80               837 	mov	a,#0x80
   0146 C0 E0               838 	push	acc
                            839 ;	genCall
   0148 12s00r00            840 	lcall	_printf
   014B 15 81               841 	dec	sp
   014D 15 81               842 	dec	sp
   014F 15 81               843 	dec	sp
                            844 ;	main.c:80: printf("\r\nPress 'r' to return to main menu\r\n");
                            845 ;	genIpush
   0151 74r32               846 	mov	a,#__str_8
   0153 C0 E0               847 	push	acc
   0155 74s01               848 	mov	a,#(__str_8 >> 8)
   0157 C0 E0               849 	push	acc
   0159 74 80               850 	mov	a,#0x80
   015B C0 E0               851 	push	acc
                            852 ;	genCall
   015D 12s00r00            853 	lcall	_printf
   0160 15 81               854 	dec	sp
   0162 15 81               855 	dec	sp
   0164 15 81               856 	dec	sp
                            857 ;	Peephole 300	removed redundant label 00101$
   0166 22                  858 	ret
                            859 ;------------------------------------------------------------
                            860 ;Allocation info for local variables in function 'handlePCFMode'
                            861 ;------------------------------------------------------------
                            862 ;c                         Allocated with name '_handlePCFMode_c_1_1'
                            863 ;pin                       Allocated with name '_handlePCFMode_pin_1_1'
                            864 ;------------------------------------------------------------
                            865 ;	main.c:84: void handlePCFMode(char c){
                            866 ;	-----------------------------------------
                            867 ;	 function handlePCFMode
                            868 ;	-----------------------------------------
   0167                     869 _handlePCFMode:
                            870 ;	genReceive
   0167 E5 82               871 	mov	a,dpl
   0169 90s00r06            872 	mov	dptr,#_handlePCFMode_c_1_1
   016C F0                  873 	movx	@dptr,a
                            874 ;	main.c:86: switch(c){
                            875 ;	genAssign
   016D 90s00r06            876 	mov	dptr,#_handlePCFMode_c_1_1
   0170 E0                  877 	movx	a,@dptr
   0171 FA                  878 	mov	r2,a
                            879 ;	genCmpEq
                            880 ;	gencjneshort
   0172 BA 48 03            881 	cjne	r2,#0x48,00120$
   0175 02s02r3C            882 	ljmp	00108$
   0178                     883 00120$:
                            884 ;	genCmpEq
                            885 ;	gencjneshort
   0178 BA 49 02            886 	cjne	r2,#0x49,00121$
                            887 ;	Peephole 112.b	changed ljmp to sjmp
   017B 80 53               888 	sjmp	00104$
   017D                     889 00121$:
                            890 ;	genCmpEq
                            891 ;	gencjneshort
   017D BA 4F 02            892 	cjne	r2,#0x4F,00122$
                            893 ;	Peephole 112.b	changed ljmp to sjmp
   0180 80 11               894 	sjmp	00101$
   0182                     895 00122$:
                            896 ;	genCmpEq
                            897 ;	gencjneshort
   0182 BA 52 02            898 	cjne	r2,#0x52,00123$
                            899 ;	Peephole 112.b	changed ljmp to sjmp
   0185 80 6E               900 	sjmp	00106$
   0187                     901 00123$:
                            902 ;	genCmpEq
                            903 ;	gencjneshort
   0187 BA 53 02            904 	cjne	r2,#0x53,00124$
                            905 ;	Peephole 112.b	changed ljmp to sjmp
   018A 80 66               906 	sjmp	00105$
   018C                     907 00124$:
                            908 ;	genCmpEq
                            909 ;	gencjneshort
   018C BA 72 03            910 	cjne	r2,#0x72,00125$
   018F 02s02r34            911 	ljmp	00107$
   0192                     912 00125$:
                            913 ;	Peephole 251.a	replaced ljmp to ret with ret
   0192 22                  914 	ret
                            915 ;	main.c:87: case 'O':
   0193                     916 00101$:
                            917 ;	main.c:88: printf("\r\nEnter a pin from 0-7 to set as output low: ");
                            918 ;	genIpush
   0193 74r57               919 	mov	a,#__str_9
   0195 C0 E0               920 	push	acc
   0197 74s01               921 	mov	a,#(__str_9 >> 8)
   0199 C0 E0               922 	push	acc
   019B 74 80               923 	mov	a,#0x80
   019D C0 E0               924 	push	acc
                            925 ;	genCall
   019F 12s00r00            926 	lcall	_printf
   01A2 15 81               927 	dec	sp
   01A4 15 81               928 	dec	sp
   01A6 15 81               929 	dec	sp
                            930 ;	main.c:89: pin = Serial_GetInteger(1);
                            931 ;	genCall
                            932 ;	Peephole 182.b	used 16 bit load of dptr
   01A8 90 00 01            933 	mov	dptr,#0x0001
   01AB 12s00r00            934 	lcall	_Serial_GetInteger
   01AE AA 82               935 	mov	r2,dpl
   01B0 AB 83               936 	mov	r3,dph
                            937 ;	genCast
                            938 ;	main.c:90: if (pin == 1){
                            939 ;	genCmpEq
                            940 ;	gencjneshort
                            941 ;	Peephole 112.b	changed ljmp to sjmp
                            942 ;	Peephole 198.b	optimized misc jump sequence
   01B2 BA 01 16            943 	cjne	r2,#0x01,00103$
                            944 ;	Peephole 200.b	removed redundant sjmp
                            945 ;	Peephole 300	removed redundant label 00126$
                            946 ;	Peephole 300	removed redundant label 00127$
                            947 ;	main.c:91: printf("\r\nSorry, can't change pin 1 to output low.\r\n");
                            948 ;	genIpush
   01B5 74r85               949 	mov	a,#__str_10
   01B7 C0 E0               950 	push	acc
   01B9 74s01               951 	mov	a,#(__str_10 >> 8)
   01BB C0 E0               952 	push	acc
   01BD 74 80               953 	mov	a,#0x80
   01BF C0 E0               954 	push	acc
                            955 ;	genCall
   01C1 12s00r00            956 	lcall	_printf
   01C4 15 81               957 	dec	sp
   01C6 15 81               958 	dec	sp
   01C8 15 81               959 	dec	sp
                            960 ;	main.c:92: return;
                            961 ;	genRet
                            962 ;	Peephole 251.a	replaced ljmp to ret with ret
   01CA 22                  963 	ret
   01CB                     964 00103$:
                            965 ;	main.c:94: PCF_SetOutputLow(pin);
                            966 ;	genCall
   01CB 8A 82               967 	mov	dpl,r2
                            968 ;	main.c:95: break;
                            969 ;	Peephole 251.a	replaced ljmp to ret with ret
                            970 ;	Peephole 253.a	replaced lcall/ret with ljmp
   01CD 02s00r00            971 	ljmp	_PCF_SetOutputLow
                            972 ;	main.c:96: case 'I':
   01D0                     973 00104$:
                            974 ;	main.c:97: printf("\r\nEnter a pin from 0-7 to set as input/output value high: ");
                            975 ;	genIpush
   01D0 74rB2               976 	mov	a,#__str_11
   01D2 C0 E0               977 	push	acc
   01D4 74s01               978 	mov	a,#(__str_11 >> 8)
   01D6 C0 E0               979 	push	acc
   01D8 74 80               980 	mov	a,#0x80
   01DA C0 E0               981 	push	acc
                            982 ;	genCall
   01DC 12s00r00            983 	lcall	_printf
   01DF 15 81               984 	dec	sp
   01E1 15 81               985 	dec	sp
   01E3 15 81               986 	dec	sp
                            987 ;	main.c:98: pin = Serial_GetInteger(1);
                            988 ;	genCall
                            989 ;	Peephole 182.b	used 16 bit load of dptr
   01E5 90 00 01            990 	mov	dptr,#0x0001
   01E8 12s00r00            991 	lcall	_Serial_GetInteger
                            992 ;	genCast
                            993 ;	main.c:99: PCF_SetInputOutput(pin);
                            994 ;	genCall
   01EB AA 82               995 	mov	r2,dpl
   01ED AB 83               996 	mov	r3,dph
                            997 ;	Peephole 177.d	removed redundant move
                            998 ;	main.c:100: break;
                            999 ;	main.c:101: case 'S':
                           1000 ;	Peephole 112.b	changed ljmp to sjmp
                           1001 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1002 ;	Peephole 253.a	replaced lcall/ret with ljmp
   01EF 02s00r00           1003 	ljmp	_PCF_SetInputOutput
   01F2                    1004 00105$:
                           1005 ;	main.c:102: PCF_PrintState();
                           1006 ;	genCall
                           1007 ;	main.c:103: break;
                           1008 ;	main.c:104: case 'R':
                           1009 ;	Peephole 112.b	changed ljmp to sjmp
                           1010 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1011 ;	Peephole 253.a	replaced lcall/ret with ljmp
   01F2 02s00r00           1012 	ljmp	_PCF_PrintState
   01F5                    1013 00106$:
                           1014 ;	main.c:105: EA = 0;
                           1015 ;	genAssign
   01F5 C2 AF              1016 	clr	_EA
                           1017 ;	main.c:106: printf("/r/nCounter reset\r\n");
                           1018 ;	genIpush
   01F7 74rED              1019 	mov	a,#__str_12
   01F9 C0 E0              1020 	push	acc
   01FB 74s01              1021 	mov	a,#(__str_12 >> 8)
   01FD C0 E0              1022 	push	acc
   01FF 74 80              1023 	mov	a,#0x80
   0201 C0 E0              1024 	push	acc
                           1025 ;	genCall
   0203 12s00r00           1026 	lcall	_printf
   0206 15 81              1027 	dec	sp
   0208 15 81              1028 	dec	sp
   020A 15 81              1029 	dec	sp
                           1030 ;	main.c:107: ButtonCount = 0;
                           1031 ;	genAssign
   020C 90s00r00           1032 	mov	dptr,#_ButtonCount
                           1033 ;	Peephole 181	changed mov to clr
                           1034 ;	main.c:108: LCD_gotoxy(3,0);
                           1035 ;	genAssign
                           1036 ;	Peephole 181	changed mov to clr
                           1037 ;	Peephole 219.a	removed redundant clear
   020F E4                 1038 	clr	a
   0210 F0                 1039 	movx	@dptr,a
   0211 90s00r00           1040 	mov	dptr,#_LCD_gotoxy_PARM_2
   0214 F0                 1041 	movx	@dptr,a
                           1042 ;	genCall
   0215 75 82 03           1043 	mov	dpl,#0x03
   0218 12s00r00           1044 	lcall	_LCD_gotoxy
                           1045 ;	main.c:109: LCD_Putch(ButtonCount + 0x30);  //Output decimal value
                           1046 ;	genAssign
   021B 90s00r00           1047 	mov	dptr,#_ButtonCount
   021E E0                 1048 	movx	a,@dptr
                           1049 ;	genPlus
                           1050 ;     genPlusIncr
                           1051 ;	Peephole 236.a	used r2 instead of ar2
                           1052 ;	Peephole 214	reduced some extra moves
                           1053 ;	genCall
                           1054 ;	Peephole 215	removed some moves
   021F 24 30              1055 	add	a,#0x30
   0221 FA                 1056 	mov	r2,a
                           1057 ;	Peephole 244.c	loading dpl from a instead of r2
   0222 F5 82              1058 	mov	dpl,a
   0224 12s00r00           1059 	lcall	_LCD_Putch
                           1060 ;	main.c:110: PCF_OutputCount(ButtonCount);
                           1061 ;	genAssign
   0227 90s00r00           1062 	mov	dptr,#_ButtonCount
   022A E0                 1063 	movx	a,@dptr
                           1064 ;	genCall
   022B FA                 1065 	mov	r2,a
                           1066 ;	Peephole 244.c	loading dpl from a instead of r2
   022C F5 82              1067 	mov	dpl,a
   022E 12s00r00           1068 	lcall	_PCF_OutputCount
                           1069 ;	main.c:111: EA = 1;
                           1070 ;	genAssign
   0231 D2 AF              1071 	setb	_EA
                           1072 ;	main.c:112: break;
                           1073 ;	main.c:113: case 'r':
                           1074 ;	Peephole 112.b	changed ljmp to sjmp
                           1075 ;	Peephole 251.b	replaced sjmp to ret with ret
   0233 22                 1076 	ret
   0234                    1077 00107$:
                           1078 ;	main.c:114: mode = MAIN_MODE;
                           1079 ;	genAssign
   0234 90s00r00           1080 	mov	dptr,#_mode
                           1081 ;	Peephole 181	changed mov to clr
   0237 E4                 1082 	clr	a
   0238 F0                 1083 	movx	@dptr,a
                           1084 ;	main.c:115: MainMenu();
                           1085 ;	genCall
                           1086 ;	main.c:116: break;
                           1087 ;	main.c:117: case 'H':
                           1088 ;	Peephole 112.b	changed ljmp to sjmp
                           1089 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1090 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0239 02s11rA2           1091 	ljmp	_MainMenu
   023C                    1092 00108$:
                           1093 ;	main.c:118: PCF_Menu();
                           1094 ;	genCall
                           1095 ;	main.c:122: }
                           1096 ;	Peephole 253.b	replaced lcall/ret with ljmp
   023C 02s00rE8           1097 	ljmp	_PCF_Menu
                           1098 ;
                           1099 ;------------------------------------------------------------
                           1100 ;Allocation info for local variables in function 'CG_Menu'
                           1101 ;------------------------------------------------------------
                           1102 ;------------------------------------------------------------
                           1103 ;	main.c:127: void CG_Menu(void){
                           1104 ;	-----------------------------------------
                           1105 ;	 function CG_Menu
                           1106 ;	-----------------------------------------
   023F                    1107 _CG_Menu:
                           1108 ;	main.c:128: printf("\r\nIn Custom Character Mode");
                           1109 ;	genIpush
   023F 74r84              1110 	mov	a,#__str_3
   0241 C0 E0              1111 	push	acc
   0243 74s00              1112 	mov	a,#(__str_3 >> 8)
   0245 C0 E0              1113 	push	acc
   0247 74 80              1114 	mov	a,#0x80
   0249 C0 E0              1115 	push	acc
                           1116 ;	genCall
   024B 12s00r00           1117 	lcall	_printf
   024E 15 81              1118 	dec	sp
   0250 15 81              1119 	dec	sp
   0252 15 81              1120 	dec	sp
                           1121 ;	main.c:129: printf("\r\nPress 'H' for help");
                           1122 ;	genIpush
   0254 74r9F              1123 	mov	a,#__str_4
   0256 C0 E0              1124 	push	acc
   0258 74s00              1125 	mov	a,#(__str_4 >> 8)
   025A C0 E0              1126 	push	acc
   025C 74 80              1127 	mov	a,#0x80
   025E C0 E0              1128 	push	acc
                           1129 ;	genCall
   0260 12s00r00           1130 	lcall	_printf
   0263 15 81              1131 	dec	sp
   0265 15 81              1132 	dec	sp
   0267 15 81              1133 	dec	sp
                           1134 ;	main.c:130: printf("\r\nPress 'T' to test to custom code");
                           1135 ;	genIpush
   0269 74r01              1136 	mov	a,#__str_13
   026B C0 E0              1137 	push	acc
   026D 74s02              1138 	mov	a,#(__str_13 >> 8)
   026F C0 E0              1139 	push	acc
   0271 74 80              1140 	mov	a,#0x80
   0273 C0 E0              1141 	push	acc
                           1142 ;	genCall
   0275 12s00r00           1143 	lcall	_printf
   0278 15 81              1144 	dec	sp
   027A 15 81              1145 	dec	sp
   027C 15 81              1146 	dec	sp
                           1147 ;	main.c:131: printf("\r\nPress 'N' to add a new character");
                           1148 ;	genIpush
   027E 74r24              1149 	mov	a,#__str_14
   0280 C0 E0              1150 	push	acc
   0282 74s02              1151 	mov	a,#(__str_14 >> 8)
   0284 C0 E0              1152 	push	acc
   0286 74 80              1153 	mov	a,#0x80
   0288 C0 E0              1154 	push	acc
                           1155 ;	genCall
   028A 12s00r00           1156 	lcall	_printf
   028D 15 81              1157 	dec	sp
   028F 15 81              1158 	dec	sp
   0291 15 81              1159 	dec	sp
                           1160 ;	main.c:132: printf("\r\nPress 'S' to print a custom character");
                           1161 ;	genIpush
   0293 74r47              1162 	mov	a,#__str_15
   0295 C0 E0              1163 	push	acc
   0297 74s02              1164 	mov	a,#(__str_15 >> 8)
   0299 C0 E0              1165 	push	acc
   029B 74 80              1166 	mov	a,#0x80
   029D C0 E0              1167 	push	acc
                           1168 ;	genCall
   029F 12s00r00           1169 	lcall	_printf
   02A2 15 81              1170 	dec	sp
   02A4 15 81              1171 	dec	sp
   02A6 15 81              1172 	dec	sp
                           1173 ;	main.c:133: printf("\r\nPress 'F' to draw a flag to LCD");
                           1174 ;	genIpush
   02A8 74r6F              1175 	mov	a,#__str_16
   02AA C0 E0              1176 	push	acc
   02AC 74s02              1177 	mov	a,#(__str_16 >> 8)
   02AE C0 E0              1178 	push	acc
   02B0 74 80              1179 	mov	a,#0x80
   02B2 C0 E0              1180 	push	acc
                           1181 ;	genCall
   02B4 12s00r00           1182 	lcall	_printf
   02B7 15 81              1183 	dec	sp
   02B9 15 81              1184 	dec	sp
   02BB 15 81              1185 	dec	sp
                           1186 ;	main.c:134: printf("\r\nPress 'r' to return to main menu\r\n");
                           1187 ;	genIpush
   02BD 74r32              1188 	mov	a,#__str_8
   02BF C0 E0              1189 	push	acc
   02C1 74s01              1190 	mov	a,#(__str_8 >> 8)
   02C3 C0 E0              1191 	push	acc
   02C5 74 80              1192 	mov	a,#0x80
   02C7 C0 E0              1193 	push	acc
                           1194 ;	genCall
   02C9 12s00r00           1195 	lcall	_printf
   02CC 15 81              1196 	dec	sp
   02CE 15 81              1197 	dec	sp
   02D0 15 81              1198 	dec	sp
                           1199 ;	Peephole 300	removed redundant label 00101$
   02D2 22                 1200 	ret
                           1201 ;------------------------------------------------------------
                           1202 ;Allocation info for local variables in function 'handleCGMode'
                           1203 ;------------------------------------------------------------
                           1204 ;c                         Allocated with name '_handleCGMode_c_1_1'
                           1205 ;addr                      Allocated with name '_handleCGMode_addr_1_1'
                           1206 ;------------------------------------------------------------
                           1207 ;	main.c:138: void handleCGMode(char c){
                           1208 ;	-----------------------------------------
                           1209 ;	 function handleCGMode
                           1210 ;	-----------------------------------------
   02D3                    1211 _handleCGMode:
                           1212 ;	genReceive
   02D3 E5 82              1213 	mov	a,dpl
   02D5 90s00r07           1214 	mov	dptr,#_handleCGMode_c_1_1
   02D8 F0                 1215 	movx	@dptr,a
                           1216 ;	main.c:140: switch(c){
                           1217 ;	genAssign
   02D9 90s00r07           1218 	mov	dptr,#_handleCGMode_c_1_1
   02DC E0                 1219 	movx	a,@dptr
   02DD FA                 1220 	mov	r2,a
                           1221 ;	genCmpEq
                           1222 ;	gencjneshort
   02DE BA 46 03           1223 	cjne	r2,#0x46,00122$
   02E1 02s03r86           1224 	ljmp	00107$
   02E4                    1225 00122$:
                           1226 ;	genCmpEq
                           1227 ;	gencjneshort
   02E4 BA 48 03           1228 	cjne	r2,#0x48,00123$
   02E7 02s03r91           1229 	ljmp	00109$
   02EA                    1230 00123$:
                           1231 ;	genCmpEq
                           1232 ;	gencjneshort
   02EA BA 4E 02           1233 	cjne	r2,#0x4E,00124$
                           1234 ;	Peephole 112.b	changed ljmp to sjmp
   02ED 80 26              1235 	sjmp	00102$
   02EF                    1236 00124$:
                           1237 ;	genCmpEq
                           1238 ;	gencjneshort
   02EF BA 53 02           1239 	cjne	r2,#0x53,00125$
                           1240 ;	Peephole 112.b	changed ljmp to sjmp
   02F2 80 24              1241 	sjmp	00103$
   02F4                    1242 00125$:
                           1243 ;	genCmpEq
                           1244 ;	gencjneshort
   02F4 BA 54 02           1245 	cjne	r2,#0x54,00126$
                           1246 ;	Peephole 112.b	changed ljmp to sjmp
   02F7 80 07              1247 	sjmp	00101$
   02F9                    1248 00126$:
                           1249 ;	genCmpEq
                           1250 ;	gencjneshort
   02F9 BA 72 03           1251 	cjne	r2,#0x72,00127$
   02FC 02s03r89           1252 	ljmp	00108$
   02FF                    1253 00127$:
                           1254 ;	Peephole 251.a	replaced ljmp to ret with ret
   02FF 22                 1255 	ret
                           1256 ;	main.c:141: case 'T':
   0300                    1257 00101$:
                           1258 ;	main.c:142: TestWrite();
                           1259 ;	genCall
   0300 12s00r00           1260 	lcall	_TestWrite
                           1261 ;	main.c:143: LCD_gotoxy(0,3);
                           1262 ;	genAssign
   0303 90s00r00           1263 	mov	dptr,#_LCD_gotoxy_PARM_2
   0306 74 03              1264 	mov	a,#0x03
   0308 F0                 1265 	movx	@dptr,a
                           1266 ;	genCall
   0309 75 82 00           1267 	mov	dpl,#0x00
   030C 12s00r00           1268 	lcall	_LCD_gotoxy
                           1269 ;	main.c:144: LCD_Putch(0x00);
                           1270 ;	genCall
   030F 75 82 00           1271 	mov	dpl,#0x00
                           1272 ;	main.c:145: break;
                           1273 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1274 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0312 02s00r00           1275 	ljmp	_LCD_Putch
                           1276 ;	main.c:146: case 'N':
   0315                    1277 00102$:
                           1278 ;	main.c:147: Custom_New();
                           1279 ;	genCall
                           1280 ;	main.c:148: break;
                           1281 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1282 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0315 02s00r00           1283 	ljmp	_Custom_New
                           1284 ;	main.c:149: case 'S':
   0318                    1285 00103$:
                           1286 ;	main.c:150: printf("\r\nEnter an address from 0-7:");
                           1287 ;	genIpush
   0318 74r91              1288 	mov	a,#__str_17
   031A C0 E0              1289 	push	acc
   031C 74s02              1290 	mov	a,#(__str_17 >> 8)
   031E C0 E0              1291 	push	acc
   0320 74 80              1292 	mov	a,#0x80
   0322 C0 E0              1293 	push	acc
                           1294 ;	genCall
   0324 12s00r00           1295 	lcall	_printf
   0327 15 81              1296 	dec	sp
   0329 15 81              1297 	dec	sp
   032B 15 81              1298 	dec	sp
                           1299 ;	main.c:151: addr = Serial_GetInteger(2);
                           1300 ;	genCall
                           1301 ;	Peephole 182.b	used 16 bit load of dptr
   032D 90 00 02           1302 	mov	dptr,#0x0002
   0330 12s00r00           1303 	lcall	_Serial_GetInteger
   0333 AA 82              1304 	mov	r2,dpl
   0335 AB 83              1305 	mov	r3,dph
                           1306 ;	genCast
   0337 90s00r08           1307 	mov	dptr,#_handleCGMode_addr_1_1
   033A EA                 1308 	mov	a,r2
   033B F0                 1309 	movx	@dptr,a
                           1310 ;	main.c:152: while( addr > 7){
   033C                    1311 00104$:
                           1312 ;	genAssign
   033C 90s00r08           1313 	mov	dptr,#_handleCGMode_addr_1_1
   033F E0                 1314 	movx	a,@dptr
                           1315 ;	genCmpGt
                           1316 ;	genCmp
                           1317 ;	genIfxJump
                           1318 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1319 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0340 FA                 1320 	mov  r2,a
                           1321 ;	Peephole 177.a	removed redundant mov
   0341 24 F8              1322 	add	a,#0xff - 0x07
   0343 50 26              1323 	jnc	00106$
                           1324 ;	Peephole 300	removed redundant label 00128$
                           1325 ;	main.c:153: printf("\r\nEnter an address from 0-7:");
                           1326 ;	genIpush
   0345 74r91              1327 	mov	a,#__str_17
   0347 C0 E0              1328 	push	acc
   0349 74s02              1329 	mov	a,#(__str_17 >> 8)
   034B C0 E0              1330 	push	acc
   034D 74 80              1331 	mov	a,#0x80
   034F C0 E0              1332 	push	acc
                           1333 ;	genCall
   0351 12s00r00           1334 	lcall	_printf
   0354 15 81              1335 	dec	sp
   0356 15 81              1336 	dec	sp
   0358 15 81              1337 	dec	sp
                           1338 ;	main.c:154: addr = Serial_GetInteger(2);
                           1339 ;	genCall
                           1340 ;	Peephole 182.b	used 16 bit load of dptr
   035A 90 00 02           1341 	mov	dptr,#0x0002
   035D 12s00r00           1342 	lcall	_Serial_GetInteger
   0360 AB 82              1343 	mov	r3,dpl
   0362 AC 83              1344 	mov	r4,dph
                           1345 ;	genCast
   0364 90s00r08           1346 	mov	dptr,#_handleCGMode_addr_1_1
   0367 EB                 1347 	mov	a,r3
   0368 F0                 1348 	movx	@dptr,a
                           1349 ;	Peephole 112.b	changed ljmp to sjmp
   0369 80 D1              1350 	sjmp	00104$
   036B                    1351 00106$:
                           1352 ;	main.c:156: Custom_Show(addr);
                           1353 ;	genCall
   036B 8A 82              1354 	mov	dpl,r2
   036D 12s00r00           1355 	lcall	_Custom_Show
                           1356 ;	main.c:157: printf("\r\nWrote custom character to LCD\r\n");
                           1357 ;	genIpush
   0370 74rAE              1358 	mov	a,#__str_18
   0372 C0 E0              1359 	push	acc
   0374 74s02              1360 	mov	a,#(__str_18 >> 8)
   0376 C0 E0              1361 	push	acc
   0378 74 80              1362 	mov	a,#0x80
   037A C0 E0              1363 	push	acc
                           1364 ;	genCall
   037C 12s00r00           1365 	lcall	_printf
   037F 15 81              1366 	dec	sp
   0381 15 81              1367 	dec	sp
   0383 15 81              1368 	dec	sp
                           1369 ;	main.c:158: break;
                           1370 ;	main.c:159: case 'F':
                           1371 ;	Peephole 112.b	changed ljmp to sjmp
                           1372 ;	Peephole 251.b	replaced sjmp to ret with ret
   0385 22                 1373 	ret
   0386                    1374 00107$:
                           1375 ;	main.c:160: Custom_DrawFlag();
                           1376 ;	genCall
                           1377 ;	main.c:161: break;
                           1378 ;	main.c:162: case 'r':
                           1379 ;	Peephole 112.b	changed ljmp to sjmp
                           1380 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1381 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0386 02s00r00           1382 	ljmp	_Custom_DrawFlag
   0389                    1383 00108$:
                           1384 ;	main.c:163: mode = MAIN_MODE;
                           1385 ;	genAssign
   0389 90s00r00           1386 	mov	dptr,#_mode
                           1387 ;	Peephole 181	changed mov to clr
   038C E4                 1388 	clr	a
   038D F0                 1389 	movx	@dptr,a
                           1390 ;	main.c:164: MainMenu();
                           1391 ;	genCall
                           1392 ;	main.c:165: break;
                           1393 ;	main.c:166: case 'H':
                           1394 ;	Peephole 112.b	changed ljmp to sjmp
                           1395 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1396 ;	Peephole 253.a	replaced lcall/ret with ljmp
   038E 02s11rA2           1397 	ljmp	_MainMenu
   0391                    1398 00109$:
                           1399 ;	main.c:167: CG_Menu();
                           1400 ;	genCall
                           1401 ;	main.c:171: }
                           1402 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0391 02s02r3F           1403 	ljmp	_CG_Menu
                           1404 ;
                           1405 ;------------------------------------------------------------
                           1406 ;Allocation info for local variables in function 'LCD_Menu'
                           1407 ;------------------------------------------------------------
                           1408 ;------------------------------------------------------------
                           1409 ;	main.c:176: void LCD_Menu(void){
                           1410 ;	-----------------------------------------
                           1411 ;	 function LCD_Menu
                           1412 ;	-----------------------------------------
   0394                    1413 _LCD_Menu:
                           1414 ;	main.c:177: printf("\r\nIn LCD Mode");
                           1415 ;	genIpush
   0394 74rD0              1416 	mov	a,#__str_19
   0396 C0 E0              1417 	push	acc
   0398 74s02              1418 	mov	a,#(__str_19 >> 8)
   039A C0 E0              1419 	push	acc
   039C 74 80              1420 	mov	a,#0x80
   039E C0 E0              1421 	push	acc
                           1422 ;	genCall
   03A0 12s00r00           1423 	lcall	_printf
   03A3 15 81              1424 	dec	sp
   03A5 15 81              1425 	dec	sp
   03A7 15 81              1426 	dec	sp
                           1427 ;	main.c:178: printf("\r\nPress 'H' for help");
                           1428 ;	genIpush
   03A9 74r9F              1429 	mov	a,#__str_4
   03AB C0 E0              1430 	push	acc
   03AD 74s00              1431 	mov	a,#(__str_4 >> 8)
   03AF C0 E0              1432 	push	acc
   03B1 74 80              1433 	mov	a,#0x80
   03B3 C0 E0              1434 	push	acc
                           1435 ;	genCall
   03B5 12s00r00           1436 	lcall	_printf
   03B8 15 81              1437 	dec	sp
   03BA 15 81              1438 	dec	sp
   03BC 15 81              1439 	dec	sp
                           1440 ;	main.c:179: printf("\r\nPress 'I' to Init LCD. Must call this first");
                           1441 ;	genIpush
   03BE 74rDE              1442 	mov	a,#__str_20
   03C0 C0 E0              1443 	push	acc
   03C2 74s02              1444 	mov	a,#(__str_20 >> 8)
   03C4 C0 E0              1445 	push	acc
   03C6 74 80              1446 	mov	a,#0x80
   03C8 C0 E0              1447 	push	acc
                           1448 ;	genCall
   03CA 12s00r00           1449 	lcall	_printf
   03CD 15 81              1450 	dec	sp
   03CF 15 81              1451 	dec	sp
   03D1 15 81              1452 	dec	sp
                           1453 ;	main.c:180: printf("\r\nPress 'g' to show gotoaddr ");
                           1454 ;	genIpush
   03D3 74r0C              1455 	mov	a,#__str_21
   03D5 C0 E0              1456 	push	acc
   03D7 74s03              1457 	mov	a,#(__str_21 >> 8)
   03D9 C0 E0              1458 	push	acc
   03DB 74 80              1459 	mov	a,#0x80
   03DD C0 E0              1460 	push	acc
                           1461 ;	genCall
   03DF 12s00r00           1462 	lcall	_printf
   03E2 15 81              1463 	dec	sp
   03E4 15 81              1464 	dec	sp
   03E6 15 81              1465 	dec	sp
                           1466 ;	main.c:181: printf("\r\nPress 'x' to show gotoxy");
                           1467 ;	genIpush
   03E8 74r2A              1468 	mov	a,#__str_22
   03EA C0 E0              1469 	push	acc
   03EC 74s03              1470 	mov	a,#(__str_22 >> 8)
   03EE C0 E0              1471 	push	acc
   03F0 74 80              1472 	mov	a,#0x80
   03F2 C0 E0              1473 	push	acc
                           1474 ;	genCall
   03F4 12s00r00           1475 	lcall	_printf
   03F7 15 81              1476 	dec	sp
   03F9 15 81              1477 	dec	sp
   03FB 15 81              1478 	dec	sp
                           1479 ;	main.c:182: printf("\r\nPress 'c' to show putch ");
                           1480 ;	genIpush
   03FD 74r45              1481 	mov	a,#__str_23
   03FF C0 E0              1482 	push	acc
   0401 74s03              1483 	mov	a,#(__str_23 >> 8)
   0403 C0 E0              1484 	push	acc
   0405 74 80              1485 	mov	a,#0x80
   0407 C0 E0              1486 	push	acc
                           1487 ;	genCall
   0409 12s00r00           1488 	lcall	_printf
   040C 15 81              1489 	dec	sp
   040E 15 81              1490 	dec	sp
   0410 15 81              1491 	dec	sp
                           1492 ;	main.c:183: printf("\r\nPress 's' to show putstr");
                           1493 ;	genIpush
   0412 74r60              1494 	mov	a,#__str_24
   0414 C0 E0              1495 	push	acc
   0416 74s03              1496 	mov	a,#(__str_24 >> 8)
   0418 C0 E0              1497 	push	acc
   041A 74 80              1498 	mov	a,#0x80
   041C C0 E0              1499 	push	acc
                           1500 ;	genCall
   041E 12s00r00           1501 	lcall	_printf
   0421 15 81              1502 	dec	sp
   0423 15 81              1503 	dec	sp
   0425 15 81              1504 	dec	sp
                           1505 ;	main.c:184: printf("\r\nPress 'C' to clear the LCD display");
                           1506 ;	genIpush
   0427 74r7B              1507 	mov	a,#__str_25
   0429 C0 E0              1508 	push	acc
   042B 74s03              1509 	mov	a,#(__str_25 >> 8)
   042D C0 E0              1510 	push	acc
   042F 74 80              1511 	mov	a,#0x80
   0431 C0 E0              1512 	push	acc
                           1513 ;	genCall
   0433 12s00r00           1514 	lcall	_printf
   0436 15 81              1515 	dec	sp
   0438 15 81              1516 	dec	sp
   043A 15 81              1517 	dec	sp
                           1518 ;	main.c:185: printf("\r\nPress 'Y' to read the contents of DDRAM");
                           1519 ;	genIpush
   043C 74rA0              1520 	mov	a,#__str_26
   043E C0 E0              1521 	push	acc
   0440 74s03              1522 	mov	a,#(__str_26 >> 8)
   0442 C0 E0              1523 	push	acc
   0444 74 80              1524 	mov	a,#0x80
   0446 C0 E0              1525 	push	acc
                           1526 ;	genCall
   0448 12s00r00           1527 	lcall	_printf
   044B 15 81              1528 	dec	sp
   044D 15 81              1529 	dec	sp
   044F 15 81              1530 	dec	sp
                           1531 ;	main.c:186: printf("\r\nPress 'G' to read the contents of CGRAM");
                           1532 ;	genIpush
   0451 74rCA              1533 	mov	a,#__str_27
   0453 C0 E0              1534 	push	acc
   0455 74s03              1535 	mov	a,#(__str_27 >> 8)
   0457 C0 E0              1536 	push	acc
   0459 74 80              1537 	mov	a,#0x80
   045B C0 E0              1538 	push	acc
                           1539 ;	genCall
   045D 12s00r00           1540 	lcall	_printf
   0460 15 81              1541 	dec	sp
   0462 15 81              1542 	dec	sp
   0464 15 81              1543 	dec	sp
                           1544 ;	main.c:187: printf("\r\nPress 'r' to return to main menu\r\n");
                           1545 ;	genIpush
   0466 74r32              1546 	mov	a,#__str_8
   0468 C0 E0              1547 	push	acc
   046A 74s01              1548 	mov	a,#(__str_8 >> 8)
   046C C0 E0              1549 	push	acc
   046E 74 80              1550 	mov	a,#0x80
   0470 C0 E0              1551 	push	acc
                           1552 ;	genCall
   0472 12s00r00           1553 	lcall	_printf
   0475 15 81              1554 	dec	sp
   0477 15 81              1555 	dec	sp
   0479 15 81              1556 	dec	sp
                           1557 ;	Peephole 300	removed redundant label 00101$
   047B 22                 1558 	ret
                           1559 ;------------------------------------------------------------
                           1560 ;Allocation info for local variables in function 'handleLCDMode'
                           1561 ;------------------------------------------------------------
                           1562 ;c                         Allocated with name '_handleLCDMode_c_1_1'
                           1563 ;row                       Allocated with name '_handleLCDMode_row_1_1'
                           1564 ;col                       Allocated with name '_handleLCDMode_col_1_1'
                           1565 ;address                   Allocated with name '_handleLCDMode_address_1_1'
                           1566 ;str                       Allocated with name '_handleLCDMode_str_1_1'
                           1567 ;i                         Allocated with name '_handleLCDMode_i_1_1'
                           1568 ;lcdData                   Allocated with name '_handleLCDMode_lcdData_1_1'
                           1569 ;start_addr                Allocated with name '_handleLCDMode_start_addr_1_1'
                           1570 ;------------------------------------------------------------
                           1571 ;	main.c:191: void handleLCDMode(char c){
                           1572 ;	-----------------------------------------
                           1573 ;	 function handleLCDMode
                           1574 ;	-----------------------------------------
   047C                    1575 _handleLCDMode:
                           1576 ;	genReceive
   047C E5 82              1577 	mov	a,dpl
   047E 90s00r09           1578 	mov	dptr,#_handleLCDMode_c_1_1
   0481 F0                 1579 	movx	@dptr,a
                           1580 ;	main.c:199: switch(c){
                           1581 ;	genAssign
   0482 90s00r09           1582 	mov	dptr,#_handleLCDMode_c_1_1
   0485 E0                 1583 	movx	a,@dptr
   0486 FA                 1584 	mov	r2,a
                           1585 ;	genCmpEq
                           1586 ;	gencjneshort
   0487 BA 43 03           1587 	cjne	r2,#0x43,00178$
   048A 02s06rB2           1588 	ljmp	00117$
   048D                    1589 00178$:
                           1590 ;	genCmpEq
                           1591 ;	gencjneshort
   048D BA 47 03           1592 	cjne	r2,#0x47,00179$
   0490 02s09r13           1593 	ljmp	00119$
   0493                    1594 00179$:
                           1595 ;	genCmpEq
                           1596 ;	gencjneshort
   0493 BA 48 03           1597 	cjne	r2,#0x48,00180$
   0496 02s0Ar04           1598 	ljmp	00124$
   0499                    1599 00180$:
                           1600 ;	genCmpEq
                           1601 ;	gencjneshort
   0499 BA 49 02           1602 	cjne	r2,#0x49,00181$
                           1603 ;	Peephole 112.b	changed ljmp to sjmp
   049C 80 23              1604 	sjmp	00101$
   049E                    1605 00181$:
                           1606 ;	genCmpEq
                           1607 ;	gencjneshort
   049E BA 59 03           1608 	cjne	r2,#0x59,00182$
   04A1 02s06rD9           1609 	ljmp	00118$
   04A4                    1610 00182$:
                           1611 ;	genCmpEq
                           1612 ;	gencjneshort
   04A4 BA 63 03           1613 	cjne	r2,#0x63,00183$
   04A7 02s06r0A           1614 	ljmp	00110$
   04AA                    1615 00183$:
                           1616 ;	genCmpEq
                           1617 ;	gencjneshort
   04AA BA 67 02           1618 	cjne	r2,#0x67,00184$
                           1619 ;	Peephole 112.b	changed ljmp to sjmp
   04AD 80 2A              1620 	sjmp	00102$
   04AF                    1621 00184$:
                           1622 ;	genCmpEq
                           1623 ;	gencjneshort
   04AF BA 72 03           1624 	cjne	r2,#0x72,00185$
   04B2 02s09rFC           1625 	ljmp	00123$
   04B5                    1626 00185$:
                           1627 ;	genCmpEq
                           1628 ;	gencjneshort
   04B5 BA 73 03           1629 	cjne	r2,#0x73,00186$
   04B8 02s06r38           1630 	ljmp	00111$
   04BB                    1631 00186$:
                           1632 ;	genCmpEq
                           1633 ;	gencjneshort
   04BB BA 78 02           1634 	cjne	r2,#0x78,00187$
                           1635 ;	Peephole 112.b	changed ljmp to sjmp
   04BE 80 36              1636 	sjmp	00103$
   04C0                    1637 00187$:
                           1638 ;	Peephole 251.a	replaced ljmp to ret with ret
   04C0 22                 1639 	ret
                           1640 ;	main.c:200: case 'I':
   04C1                    1641 00101$:
                           1642 ;	main.c:201: printf("\r\nInitializing LCD\r\n");
                           1643 ;	genIpush
   04C1 74rF4              1644 	mov	a,#__str_28
   04C3 C0 E0              1645 	push	acc
   04C5 74s03              1646 	mov	a,#(__str_28 >> 8)
   04C7 C0 E0              1647 	push	acc
   04C9 74 80              1648 	mov	a,#0x80
   04CB C0 E0              1649 	push	acc
                           1650 ;	genCall
   04CD 12s00r00           1651 	lcall	_printf
   04D0 15 81              1652 	dec	sp
   04D2 15 81              1653 	dec	sp
   04D4 15 81              1654 	dec	sp
                           1655 ;	main.c:202: LCD_Init();
                           1656 ;	genCall
                           1657 ;	main.c:203: break;
                           1658 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1659 ;	Peephole 253.a	replaced lcall/ret with ljmp
   04D6 02s00r00           1660 	ljmp	_LCD_Init
                           1661 ;	main.c:204: case 'g':
   04D9                    1662 00102$:
                           1663 ;	main.c:205: printf("\r\nEnter a hex address to go to\r\n");
                           1664 ;	genIpush
   04D9 74r09              1665 	mov	a,#__str_29
   04DB C0 E0              1666 	push	acc
   04DD 74s04              1667 	mov	a,#(__str_29 >> 8)
   04DF C0 E0              1668 	push	acc
   04E1 74 80              1669 	mov	a,#0x80
   04E3 C0 E0              1670 	push	acc
                           1671 ;	genCall
   04E5 12s00r00           1672 	lcall	_printf
   04E8 15 81              1673 	dec	sp
   04EA 15 81              1674 	dec	sp
   04EC 15 81              1675 	dec	sp
                           1676 ;	main.c:206: address = Serial_GetHex();
                           1677 ;	genCall
   04EE 12s00r00           1678 	lcall	_Serial_GetHex
                           1679 ;	main.c:207: LCD_gotoaddr(address);
                           1680 ;	genCall
   04F1 AA 82              1681 	mov  r2,dpl
                           1682 ;	Peephole 177.a	removed redundant mov
                           1683 ;	main.c:208: break;
                           1684 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1685 ;	Peephole 253.a	replaced lcall/ret with ljmp
   04F3 02s00r00           1686 	ljmp	_LCD_gotoaddr
                           1687 ;	main.c:209: case 'x':
   04F6                    1688 00103$:
                           1689 ;	main.c:210: printf ("\r\nEnter a row from 0-3:");
                           1690 ;	genIpush
   04F6 74r2A              1691 	mov	a,#__str_30
   04F8 C0 E0              1692 	push	acc
   04FA 74s04              1693 	mov	a,#(__str_30 >> 8)
   04FC C0 E0              1694 	push	acc
   04FE 74 80              1695 	mov	a,#0x80
   0500 C0 E0              1696 	push	acc
                           1697 ;	genCall
   0502 12s00r00           1698 	lcall	_printf
   0505 15 81              1699 	dec	sp
   0507 15 81              1700 	dec	sp
   0509 15 81              1701 	dec	sp
                           1702 ;	main.c:211: row = Serial_GetInteger(3);
                           1703 ;	genCall
                           1704 ;	Peephole 182.b	used 16 bit load of dptr
   050B 90 00 03           1705 	mov	dptr,#0x0003
   050E 12s00r00           1706 	lcall	_Serial_GetInteger
   0511 E5 82              1707 	mov	a,dpl
   0513 85 83 F0           1708 	mov	b,dph
                           1709 ;	genAssign
   0516 90s00r0A           1710 	mov	dptr,#_handleLCDMode_row_1_1
   0519 F0                 1711 	movx	@dptr,a
   051A A3                 1712 	inc	dptr
   051B E5 F0              1713 	mov	a,b
   051D F0                 1714 	movx	@dptr,a
                           1715 ;	main.c:212: while(row > 3){
   051E                    1716 00104$:
                           1717 ;	genAssign
   051E 90s00r0A           1718 	mov	dptr,#_handleLCDMode_row_1_1
   0521 E0                 1719 	movx	a,@dptr
   0522 FA                 1720 	mov	r2,a
   0523 A3                 1721 	inc	dptr
   0524 E0                 1722 	movx	a,@dptr
   0525 FB                 1723 	mov	r3,a
                           1724 ;	genCmpGt
                           1725 ;	genCmp
   0526 C3                 1726 	clr	c
   0527 74 03              1727 	mov	a,#0x03
   0529 9A                 1728 	subb	a,r2
                           1729 ;	Peephole 159	avoided xrl during execution
   052A 74 80              1730 	mov	a,#(0x00 ^ 0x80)
   052C 8B F0              1731 	mov	b,r3
   052E 63 F0 80           1732 	xrl	b,#0x80
   0531 95 F0              1733 	subb	a,b
                           1734 ;	genIfxJump
                           1735 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0533 50 2A              1736 	jnc	00106$
                           1737 ;	Peephole 300	removed redundant label 00188$
                           1738 ;	main.c:213: printf ("\r\nEnter a row from 0-3:");
                           1739 ;	genIpush
   0535 74r2A              1740 	mov	a,#__str_30
   0537 C0 E0              1741 	push	acc
   0539 74s04              1742 	mov	a,#(__str_30 >> 8)
   053B C0 E0              1743 	push	acc
   053D 74 80              1744 	mov	a,#0x80
   053F C0 E0              1745 	push	acc
                           1746 ;	genCall
   0541 12s00r00           1747 	lcall	_printf
   0544 15 81              1748 	dec	sp
   0546 15 81              1749 	dec	sp
   0548 15 81              1750 	dec	sp
                           1751 ;	main.c:214: row = Serial_GetInteger(3);
                           1752 ;	genCall
                           1753 ;	Peephole 182.b	used 16 bit load of dptr
   054A 90 00 03           1754 	mov	dptr,#0x0003
   054D 12s00r00           1755 	lcall	_Serial_GetInteger
   0550 E5 82              1756 	mov	a,dpl
   0552 85 83 F0           1757 	mov	b,dph
                           1758 ;	genAssign
   0555 90s00r0A           1759 	mov	dptr,#_handleLCDMode_row_1_1
   0558 F0                 1760 	movx	@dptr,a
   0559 A3                 1761 	inc	dptr
   055A E5 F0              1762 	mov	a,b
   055C F0                 1763 	movx	@dptr,a
                           1764 ;	Peephole 112.b	changed ljmp to sjmp
   055D 80 BF              1765 	sjmp	00104$
   055F                    1766 00106$:
                           1767 ;	main.c:217: printf ("\r\nEnter a col from 0-15:");
                           1768 ;	genIpush
   055F 74r42              1769 	mov	a,#__str_31
   0561 C0 E0              1770 	push	acc
   0563 74s04              1771 	mov	a,#(__str_31 >> 8)
   0565 C0 E0              1772 	push	acc
   0567 74 80              1773 	mov	a,#0x80
   0569 C0 E0              1774 	push	acc
                           1775 ;	genCall
   056B 12s00r00           1776 	lcall	_printf
   056E 15 81              1777 	dec	sp
   0570 15 81              1778 	dec	sp
   0572 15 81              1779 	dec	sp
                           1780 ;	main.c:218: col = Serial_GetInteger(3) ;
                           1781 ;	genCall
                           1782 ;	Peephole 182.b	used 16 bit load of dptr
   0574 90 00 03           1783 	mov	dptr,#0x0003
   0577 12s00r00           1784 	lcall	_Serial_GetInteger
   057A E5 82              1785 	mov	a,dpl
   057C 85 83 F0           1786 	mov	b,dph
                           1787 ;	genAssign
   057F 90s00r0C           1788 	mov	dptr,#_handleLCDMode_col_1_1
   0582 F0                 1789 	movx	@dptr,a
   0583 A3                 1790 	inc	dptr
   0584 E5 F0              1791 	mov	a,b
   0586 F0                 1792 	movx	@dptr,a
                           1793 ;	main.c:219: while(col > 15){
   0587                    1794 00107$:
                           1795 ;	genAssign
   0587 90s00r0C           1796 	mov	dptr,#_handleLCDMode_col_1_1
   058A E0                 1797 	movx	a,@dptr
   058B FA                 1798 	mov	r2,a
   058C A3                 1799 	inc	dptr
   058D E0                 1800 	movx	a,@dptr
   058E FB                 1801 	mov	r3,a
                           1802 ;	genCmpGt
                           1803 ;	genCmp
   058F C3                 1804 	clr	c
   0590 74 0F              1805 	mov	a,#0x0F
   0592 9A                 1806 	subb	a,r2
                           1807 ;	Peephole 159	avoided xrl during execution
   0593 74 80              1808 	mov	a,#(0x00 ^ 0x80)
   0595 8B F0              1809 	mov	b,r3
   0597 63 F0 80           1810 	xrl	b,#0x80
   059A 95 F0              1811 	subb	a,b
                           1812 ;	genIfxJump
                           1813 ;	Peephole 108.a	removed ljmp by inverse jump logic
   059C 50 2A              1814 	jnc	00109$
                           1815 ;	Peephole 300	removed redundant label 00189$
                           1816 ;	main.c:220: printf ("\r\nEnter a col from 0-15:");
                           1817 ;	genIpush
   059E 74r42              1818 	mov	a,#__str_31
   05A0 C0 E0              1819 	push	acc
   05A2 74s04              1820 	mov	a,#(__str_31 >> 8)
   05A4 C0 E0              1821 	push	acc
   05A6 74 80              1822 	mov	a,#0x80
   05A8 C0 E0              1823 	push	acc
                           1824 ;	genCall
   05AA 12s00r00           1825 	lcall	_printf
   05AD 15 81              1826 	dec	sp
   05AF 15 81              1827 	dec	sp
   05B1 15 81              1828 	dec	sp
                           1829 ;	main.c:221: col = Serial_GetInteger(3);
                           1830 ;	genCall
                           1831 ;	Peephole 182.b	used 16 bit load of dptr
   05B3 90 00 03           1832 	mov	dptr,#0x0003
   05B6 12s00r00           1833 	lcall	_Serial_GetInteger
   05B9 E5 82              1834 	mov	a,dpl
   05BB 85 83 F0           1835 	mov	b,dph
                           1836 ;	genAssign
   05BE 90s00r0C           1837 	mov	dptr,#_handleLCDMode_col_1_1
   05C1 F0                 1838 	movx	@dptr,a
   05C2 A3                 1839 	inc	dptr
   05C3 E5 F0              1840 	mov	a,b
   05C5 F0                 1841 	movx	@dptr,a
                           1842 ;	Peephole 112.b	changed ljmp to sjmp
   05C6 80 BF              1843 	sjmp	00107$
   05C8                    1844 00109$:
                           1845 ;	main.c:224: LCD_gotoxy(row, col);
                           1846 ;	genAssign
   05C8 90s00r0A           1847 	mov	dptr,#_handleLCDMode_row_1_1
   05CB E0                 1848 	movx	a,@dptr
   05CC FC                 1849 	mov	r4,a
   05CD A3                 1850 	inc	dptr
   05CE E0                 1851 	movx	a,@dptr
   05CF FD                 1852 	mov	r5,a
                           1853 ;	genCast
   05D0 8C 06              1854 	mov	ar6,r4
                           1855 ;	genCast
   05D2 90s00r00           1856 	mov	dptr,#_LCD_gotoxy_PARM_2
   05D5 EA                 1857 	mov	a,r2
   05D6 F0                 1858 	movx	@dptr,a
                           1859 ;	genCall
   05D7 8E 82              1860 	mov	dpl,r6
   05D9 C0 02              1861 	push	ar2
   05DB C0 03              1862 	push	ar3
   05DD C0 04              1863 	push	ar4
   05DF C0 05              1864 	push	ar5
   05E1 12s00r00           1865 	lcall	_LCD_gotoxy
   05E4 D0 05              1866 	pop	ar5
   05E6 D0 04              1867 	pop	ar4
   05E8 D0 03              1868 	pop	ar3
   05EA D0 02              1869 	pop	ar2
                           1870 ;	main.c:225: printf("\r\nMoved cursor to new location (%d,%d)\r\n", row, col);
                           1871 ;	genIpush
   05EC C0 02              1872 	push	ar2
   05EE C0 03              1873 	push	ar3
                           1874 ;	genIpush
   05F0 C0 04              1875 	push	ar4
   05F2 C0 05              1876 	push	ar5
                           1877 ;	genIpush
   05F4 74r5B              1878 	mov	a,#__str_32
   05F6 C0 E0              1879 	push	acc
   05F8 74s04              1880 	mov	a,#(__str_32 >> 8)
   05FA C0 E0              1881 	push	acc
   05FC 74 80              1882 	mov	a,#0x80
   05FE C0 E0              1883 	push	acc
                           1884 ;	genCall
   0600 12s00r00           1885 	lcall	_printf
   0603 E5 81              1886 	mov	a,sp
   0605 24 F9              1887 	add	a,#0xf9
   0607 F5 81              1888 	mov	sp,a
                           1889 ;	main.c:226: break;
                           1890 ;	Peephole 251.a	replaced ljmp to ret with ret
   0609 22                 1891 	ret
                           1892 ;	main.c:227: case 'c':
   060A                    1893 00110$:
                           1894 ;	main.c:228: printf("\r\nEnter a character to put at current address\r\n");
                           1895 ;	genIpush
   060A 74r84              1896 	mov	a,#__str_33
   060C C0 E0              1897 	push	acc
   060E 74s04              1898 	mov	a,#(__str_33 >> 8)
   0610 C0 E0              1899 	push	acc
   0612 74 80              1900 	mov	a,#0x80
   0614 C0 E0              1901 	push	acc
                           1902 ;	genCall
   0616 12s00r00           1903 	lcall	_printf
   0619 15 81              1904 	dec	sp
   061B 15 81              1905 	dec	sp
   061D 15 81              1906 	dec	sp
                           1907 ;	main.c:230: LCD_Putch(getchar());
                           1908 ;	genCall
   061F 12s00r00           1909 	lcall	_getchar
                           1910 ;	genCall
   0622 AA 82              1911 	mov  r2,dpl
                           1912 ;	Peephole 177.a	removed redundant mov
   0624 12s00r00           1913 	lcall	_LCD_Putch
                           1914 ;	main.c:231: address = LCD_ReadAddr();
                           1915 ;	genCall
   0627 12s00r00           1916 	lcall	_LCD_ReadAddr
   062A AA 82              1917 	mov	r2,dpl
                           1918 ;	main.c:232: TimerRedraw();
                           1919 ;	genCall
   062C C0 02              1920 	push	ar2
   062E 12s00r00           1921 	lcall	_TimerRedraw
   0631 D0 02              1922 	pop	ar2
                           1923 ;	main.c:233: LCD_gotoaddr(address);
                           1924 ;	genCall
   0633 8A 82              1925 	mov	dpl,r2
                           1926 ;	main.c:235: break;
                           1927 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1928 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0635 02s00r00           1929 	ljmp	_LCD_gotoaddr
                           1930 ;	main.c:236: case 's':
   0638                    1931 00111$:
                           1932 ;	main.c:237: printf("\r\Enter a string\r\n");
                           1933 ;	genIpush
   0638 74rB4              1934 	mov	a,#__str_34
   063A C0 E0              1935 	push	acc
   063C 74s04              1936 	mov	a,#(__str_34 >> 8)
   063E C0 E0              1937 	push	acc
   0640 74 80              1938 	mov	a,#0x80
   0642 C0 E0              1939 	push	acc
                           1940 ;	genCall
   0644 12s00r00           1941 	lcall	_printf
   0647 15 81              1942 	dec	sp
   0649 15 81              1943 	dec	sp
   064B 15 81              1944 	dec	sp
                           1945 ;	main.c:239: while(i < 100){
                           1946 ;	genAssign
   064D 7A 00              1947 	mov	r2,#0x00
   064F                    1948 00114$:
                           1949 ;	genCmpLt
                           1950 ;	genCmp
   064F BA 64 00           1951 	cjne	r2,#0x64,00190$
   0652                    1952 00190$:
                           1953 ;	genIfxJump
                           1954 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0652 50 44              1955 	jnc	00116$
                           1956 ;	Peephole 300	removed redundant label 00191$
                           1957 ;	main.c:240: str[i] = getchar();
                           1958 ;	genPlus
                           1959 ;	Peephole 236.g	used r2 instead of ar2
   0654 EA                 1960 	mov	a,r2
   0655 24r0E              1961 	add	a,#_handleLCDMode_str_1_1
   0657 FB                 1962 	mov	r3,a
                           1963 ;	Peephole 181	changed mov to clr
   0658 E4                 1964 	clr	a
   0659 34s00              1965 	addc	a,#(_handleLCDMode_str_1_1 >> 8)
   065B FC                 1966 	mov	r4,a
                           1967 ;	genCall
   065C C0 02              1968 	push	ar2
   065E C0 03              1969 	push	ar3
   0660 C0 04              1970 	push	ar4
   0662 12s00r00           1971 	lcall	_getchar
   0665 AD 82              1972 	mov	r5,dpl
   0667 D0 04              1973 	pop	ar4
   0669 D0 03              1974 	pop	ar3
   066B D0 02              1975 	pop	ar2
                           1976 ;	genPointerSet
                           1977 ;     genFarPointerSet
   066D 8B 82              1978 	mov	dpl,r3
   066F 8C 83              1979 	mov	dph,r4
   0671 ED                 1980 	mov	a,r5
   0672 F0                 1981 	movx	@dptr,a
                           1982 ;	main.c:241: putchar(str[i]);
                           1983 ;	genCall
   0673 8D 82              1984 	mov	dpl,r5
   0675 C0 02              1985 	push	ar2
   0677 C0 03              1986 	push	ar3
   0679 C0 04              1987 	push	ar4
   067B 12s00r00           1988 	lcall	_putchar
   067E D0 04              1989 	pop	ar4
   0680 D0 03              1990 	pop	ar3
   0682 D0 02              1991 	pop	ar2
                           1992 ;	main.c:242: if (str[i] == ENTER_KEY){
                           1993 ;	genPointerGet
                           1994 ;	genFarPointerGet
   0684 8B 82              1995 	mov	dpl,r3
   0686 8C 83              1996 	mov	dph,r4
   0688 E0                 1997 	movx	a,@dptr
   0689 FD                 1998 	mov	r5,a
                           1999 ;	genCmpEq
                           2000 ;	gencjneshort
                           2001 ;	Peephole 112.b	changed ljmp to sjmp
                           2002 ;	Peephole 198.b	optimized misc jump sequence
   068A BD 0D 08           2003 	cjne	r5,#0x0D,00113$
                           2004 ;	Peephole 200.b	removed redundant sjmp
                           2005 ;	Peephole 300	removed redundant label 00192$
                           2006 ;	Peephole 300	removed redundant label 00193$
                           2007 ;	main.c:243: str[i] = '\0';
                           2008 ;	genPointerSet
                           2009 ;     genFarPointerSet
   068D 8B 82              2010 	mov	dpl,r3
   068F 8C 83              2011 	mov	dph,r4
                           2012 ;	Peephole 181	changed mov to clr
   0691 E4                 2013 	clr	a
   0692 F0                 2014 	movx	@dptr,a
                           2015 ;	main.c:244: break;
                           2016 ;	Peephole 112.b	changed ljmp to sjmp
   0693 80 03              2017 	sjmp	00116$
   0695                    2018 00113$:
                           2019 ;	main.c:246: i++;
                           2020 ;	genPlus
                           2021 ;     genPlusIncr
   0695 0A                 2022 	inc	r2
                           2023 ;	Peephole 112.b	changed ljmp to sjmp
   0696 80 B7              2024 	sjmp	00114$
   0698                    2025 00116$:
                           2026 ;	main.c:248: LCD_Putstr(str);
                           2027 ;	genCall
                           2028 ;	Peephole 182.a	used 16 bit load of DPTR
   0698 90s00r0E           2029 	mov	dptr,#_handleLCDMode_str_1_1
   069B 75 F0 00           2030 	mov	b,#0x00
   069E 12s00r00           2031 	lcall	_LCD_Putstr
                           2032 ;	main.c:249: address = LCD_ReadAddr();
                           2033 ;	genCall
   06A1 12s00r00           2034 	lcall	_LCD_ReadAddr
   06A4 AA 82              2035 	mov	r2,dpl
                           2036 ;	main.c:250: TimerRedraw();
                           2037 ;	genCall
   06A6 C0 02              2038 	push	ar2
   06A8 12s00r00           2039 	lcall	_TimerRedraw
   06AB D0 02              2040 	pop	ar2
                           2041 ;	main.c:251: LCD_gotoaddr(address);
                           2042 ;	genCall
   06AD 8A 82              2043 	mov	dpl,r2
                           2044 ;	main.c:252: break;
                           2045 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2046 ;	Peephole 253.a	replaced lcall/ret with ljmp
   06AF 02s00r00           2047 	ljmp	_LCD_gotoaddr
                           2048 ;	main.c:253: case 'C':
   06B2                    2049 00117$:
                           2050 ;	main.c:254: LCD_ClearScreen();
                           2051 ;	genCall
   06B2 12s00r00           2052 	lcall	_LCD_ClearScreen
                           2053 ;	main.c:255: TimerRedraw();
                           2054 ;	genCall
   06B5 12s00r00           2055 	lcall	_TimerRedraw
                           2056 ;	main.c:256: LCD_gotoxy(0,0);    //Start at 0,0
                           2057 ;	genAssign
   06B8 90s00r00           2058 	mov	dptr,#_LCD_gotoxy_PARM_2
                           2059 ;	Peephole 181	changed mov to clr
   06BB E4                 2060 	clr	a
   06BC F0                 2061 	movx	@dptr,a
                           2062 ;	genCall
   06BD 75 82 00           2063 	mov	dpl,#0x00
   06C0 12s00r00           2064 	lcall	_LCD_gotoxy
                           2065 ;	main.c:257: printf("\r\nLCD Display Cleared!\r\n");
                           2066 ;	genIpush
   06C3 74rC6              2067 	mov	a,#__str_35
   06C5 C0 E0              2068 	push	acc
   06C7 74s04              2069 	mov	a,#(__str_35 >> 8)
   06C9 C0 E0              2070 	push	acc
   06CB 74 80              2071 	mov	a,#0x80
   06CD C0 E0              2072 	push	acc
                           2073 ;	genCall
   06CF 12s00r00           2074 	lcall	_printf
   06D2 15 81              2075 	dec	sp
   06D4 15 81              2076 	dec	sp
   06D6 15 81              2077 	dec	sp
                           2078 ;	main.c:258: break;
                           2079 ;	Peephole 251.a	replaced ljmp to ret with ret
   06D8 22                 2080 	ret
                           2081 ;	main.c:259: case 'Y':
   06D9                    2082 00118$:
                           2083 ;	main.c:260: printf("\r\n");
                           2084 ;	genIpush
   06D9 74rDF              2085 	mov	a,#__str_36
   06DB C0 E0              2086 	push	acc
   06DD 74s04              2087 	mov	a,#(__str_36 >> 8)
   06DF C0 E0              2088 	push	acc
   06E1 74 80              2089 	mov	a,#0x80
   06E3 C0 E0              2090 	push	acc
                           2091 ;	genCall
   06E5 12s00r00           2092 	lcall	_printf
   06E8 15 81              2093 	dec	sp
   06EA 15 81              2094 	dec	sp
   06EC 15 81              2095 	dec	sp
                           2096 ;	main.c:263: printf("%x: ", start_addr);
                           2097 ;	genIpush
   06EE 74 80              2098 	mov	a,#0x80
   06F0 C0 E0              2099 	push	acc
                           2100 ;	Peephole 181	changed mov to clr
   06F2 E4                 2101 	clr	a
   06F3 C0 E0              2102 	push	acc
                           2103 ;	genIpush
   06F5 74rE2              2104 	mov	a,#__str_37
   06F7 C0 E0              2105 	push	acc
   06F9 74s04              2106 	mov	a,#(__str_37 >> 8)
   06FB C0 E0              2107 	push	acc
   06FD 74 80              2108 	mov	a,#0x80
   06FF C0 E0              2109 	push	acc
                           2110 ;	genCall
   0701 12s00r00           2111 	lcall	_printf
   0704 E5 81              2112 	mov	a,sp
   0706 24 FB              2113 	add	a,#0xfb
   0708 F5 81              2114 	mov	sp,a
                           2115 ;	main.c:264: for (i = 0; i < 16; ++i){
                           2116 ;	genAssign
   070A 7A 80              2117 	mov	r2,#0x80
   070C 7B 00              2118 	mov	r3,#0x00
                           2119 ;	genAssign
   070E 7C 10              2120 	mov	r4,#0x10
   0710                    2121 00129$:
                           2122 ;	main.c:265: LCD_SetDDRAMAddress(start_addr);
                           2123 ;	genCast
   0710 8A 05              2124 	mov	ar5,r2
                           2125 ;	genCall
   0712 8D 82              2126 	mov	dpl,r5
   0714 C0 02              2127 	push	ar2
   0716 C0 03              2128 	push	ar3
   0718 C0 04              2129 	push	ar4
   071A 12s00r00           2130 	lcall	_LCD_SetDDRAMAddress
   071D D0 04              2131 	pop	ar4
   071F D0 03              2132 	pop	ar3
   0721 D0 02              2133 	pop	ar2
                           2134 ;	main.c:266: lcdData = LCD_ReadRAM();
                           2135 ;	genCall
   0723 C0 02              2136 	push	ar2
   0725 C0 03              2137 	push	ar3
   0727 C0 04              2138 	push	ar4
   0729 12s00r00           2139 	lcall	_LCD_ReadRAM
   072C AD 82              2140 	mov	r5,dpl
   072E D0 04              2141 	pop	ar4
   0730 D0 03              2142 	pop	ar3
   0732 D0 02              2143 	pop	ar2
                           2144 ;	main.c:267: printf("%x ", lcdData);
                           2145 ;	genCast
   0734 7E 00              2146 	mov	r6,#0x00
                           2147 ;	genIpush
   0736 C0 02              2148 	push	ar2
   0738 C0 03              2149 	push	ar3
   073A C0 04              2150 	push	ar4
   073C C0 05              2151 	push	ar5
   073E C0 06              2152 	push	ar6
                           2153 ;	genIpush
   0740 74rE7              2154 	mov	a,#__str_38
   0742 C0 E0              2155 	push	acc
   0744 74s04              2156 	mov	a,#(__str_38 >> 8)
   0746 C0 E0              2157 	push	acc
   0748 74 80              2158 	mov	a,#0x80
   074A C0 E0              2159 	push	acc
                           2160 ;	genCall
   074C 12s00r00           2161 	lcall	_printf
   074F E5 81              2162 	mov	a,sp
   0751 24 FB              2163 	add	a,#0xfb
   0753 F5 81              2164 	mov	sp,a
   0755 D0 04              2165 	pop	ar4
   0757 D0 03              2166 	pop	ar3
   0759 D0 02              2167 	pop	ar2
                           2168 ;	main.c:268: start_addr++;
                           2169 ;	genPlus
                           2170 ;     genPlusIncr
   075B 0A                 2171 	inc	r2
   075C BA 00 01           2172 	cjne	r2,#0x00,00194$
   075F 0B                 2173 	inc	r3
   0760                    2174 00194$:
                           2175 ;	genDjnz
                           2176 ;	Peephole 112.b	changed ljmp to sjmp
                           2177 ;	Peephole 205	optimized misc jump sequence
   0760 DC AE              2178 	djnz	r4,00129$
                           2179 ;	Peephole 300	removed redundant label 00195$
                           2180 ;	Peephole 300	removed redundant label 00196$
                           2181 ;	main.c:264: for (i = 0; i < 16; ++i){
                           2182 ;	main.c:270: printf("\r\n");
                           2183 ;	genIpush
   0762 74rDF              2184 	mov	a,#__str_36
   0764 C0 E0              2185 	push	acc
   0766 74s04              2186 	mov	a,#(__str_36 >> 8)
   0768 C0 E0              2187 	push	acc
   076A 74 80              2188 	mov	a,#0x80
   076C C0 E0              2189 	push	acc
                           2190 ;	genCall
   076E 12s00r00           2191 	lcall	_printf
   0771 15 81              2192 	dec	sp
   0773 15 81              2193 	dec	sp
   0775 15 81              2194 	dec	sp
                           2195 ;	main.c:273: printf("%x: ", start_addr);
                           2196 ;	genIpush
   0777 74 C0              2197 	mov	a,#0xC0
   0779 C0 E0              2198 	push	acc
                           2199 ;	Peephole 181	changed mov to clr
   077B E4                 2200 	clr	a
   077C C0 E0              2201 	push	acc
                           2202 ;	genIpush
   077E 74rE2              2203 	mov	a,#__str_37
   0780 C0 E0              2204 	push	acc
   0782 74s04              2205 	mov	a,#(__str_37 >> 8)
   0784 C0 E0              2206 	push	acc
   0786 74 80              2207 	mov	a,#0x80
   0788 C0 E0              2208 	push	acc
                           2209 ;	genCall
   078A 12s00r00           2210 	lcall	_printf
   078D E5 81              2211 	mov	a,sp
   078F 24 FB              2212 	add	a,#0xfb
   0791 F5 81              2213 	mov	sp,a
                           2214 ;	main.c:274: for (i = 0; i < 16; ++i){
                           2215 ;	genAssign
   0793 7A C0              2216 	mov	r2,#0xC0
   0795 7B 00              2217 	mov	r3,#0x00
                           2218 ;	genAssign
   0797 7C 10              2219 	mov	r4,#0x10
   0799                    2220 00132$:
                           2221 ;	main.c:275: LCD_SetDDRAMAddress(start_addr);
                           2222 ;	genCast
   0799 8A 05              2223 	mov	ar5,r2
                           2224 ;	genCall
   079B 8D 82              2225 	mov	dpl,r5
   079D C0 02              2226 	push	ar2
   079F C0 03              2227 	push	ar3
   07A1 C0 04              2228 	push	ar4
   07A3 12s00r00           2229 	lcall	_LCD_SetDDRAMAddress
   07A6 D0 04              2230 	pop	ar4
   07A8 D0 03              2231 	pop	ar3
   07AA D0 02              2232 	pop	ar2
                           2233 ;	main.c:276: lcdData = LCD_ReadRAM();
                           2234 ;	genCall
   07AC C0 02              2235 	push	ar2
   07AE C0 03              2236 	push	ar3
   07B0 C0 04              2237 	push	ar4
   07B2 12s00r00           2238 	lcall	_LCD_ReadRAM
   07B5 AD 82              2239 	mov	r5,dpl
   07B7 D0 04              2240 	pop	ar4
   07B9 D0 03              2241 	pop	ar3
   07BB D0 02              2242 	pop	ar2
                           2243 ;	main.c:277: printf("%x ", lcdData);
                           2244 ;	genCast
   07BD 7E 00              2245 	mov	r6,#0x00
                           2246 ;	genIpush
   07BF C0 02              2247 	push	ar2
   07C1 C0 03              2248 	push	ar3
   07C3 C0 04              2249 	push	ar4
   07C5 C0 05              2250 	push	ar5
   07C7 C0 06              2251 	push	ar6
                           2252 ;	genIpush
   07C9 74rE7              2253 	mov	a,#__str_38
   07CB C0 E0              2254 	push	acc
   07CD 74s04              2255 	mov	a,#(__str_38 >> 8)
   07CF C0 E0              2256 	push	acc
   07D1 74 80              2257 	mov	a,#0x80
   07D3 C0 E0              2258 	push	acc
                           2259 ;	genCall
   07D5 12s00r00           2260 	lcall	_printf
   07D8 E5 81              2261 	mov	a,sp
   07DA 24 FB              2262 	add	a,#0xfb
   07DC F5 81              2263 	mov	sp,a
   07DE D0 04              2264 	pop	ar4
   07E0 D0 03              2265 	pop	ar3
   07E2 D0 02              2266 	pop	ar2
                           2267 ;	main.c:278: start_addr++;
                           2268 ;	genPlus
                           2269 ;     genPlusIncr
   07E4 0A                 2270 	inc	r2
   07E5 BA 00 01           2271 	cjne	r2,#0x00,00197$
   07E8 0B                 2272 	inc	r3
   07E9                    2273 00197$:
                           2274 ;	genDjnz
                           2275 ;	Peephole 112.b	changed ljmp to sjmp
                           2276 ;	Peephole 205	optimized misc jump sequence
   07E9 DC AE              2277 	djnz	r4,00132$
                           2278 ;	Peephole 300	removed redundant label 00198$
                           2279 ;	Peephole 300	removed redundant label 00199$
                           2280 ;	main.c:274: for (i = 0; i < 16; ++i){
                           2281 ;	main.c:280: printf("\r\n");
                           2282 ;	genIpush
   07EB 74rDF              2283 	mov	a,#__str_36
   07ED C0 E0              2284 	push	acc
   07EF 74s04              2285 	mov	a,#(__str_36 >> 8)
   07F1 C0 E0              2286 	push	acc
   07F3 74 80              2287 	mov	a,#0x80
   07F5 C0 E0              2288 	push	acc
                           2289 ;	genCall
   07F7 12s00r00           2290 	lcall	_printf
   07FA 15 81              2291 	dec	sp
   07FC 15 81              2292 	dec	sp
   07FE 15 81              2293 	dec	sp
                           2294 ;	main.c:283: printf("%x: ", start_addr);
                           2295 ;	genIpush
   0800 74 90              2296 	mov	a,#0x90
   0802 C0 E0              2297 	push	acc
                           2298 ;	Peephole 181	changed mov to clr
   0804 E4                 2299 	clr	a
   0805 C0 E0              2300 	push	acc
                           2301 ;	genIpush
   0807 74rE2              2302 	mov	a,#__str_37
   0809 C0 E0              2303 	push	acc
   080B 74s04              2304 	mov	a,#(__str_37 >> 8)
   080D C0 E0              2305 	push	acc
   080F 74 80              2306 	mov	a,#0x80
   0811 C0 E0              2307 	push	acc
                           2308 ;	genCall
   0813 12s00r00           2309 	lcall	_printf
   0816 E5 81              2310 	mov	a,sp
   0818 24 FB              2311 	add	a,#0xfb
   081A F5 81              2312 	mov	sp,a
                           2313 ;	main.c:284: for (i = 0; i < 16; ++i){
                           2314 ;	genAssign
   081C 7A 90              2315 	mov	r2,#0x90
   081E 7B 00              2316 	mov	r3,#0x00
                           2317 ;	genAssign
   0820 7C 10              2318 	mov	r4,#0x10
   0822                    2319 00135$:
                           2320 ;	main.c:285: LCD_SetDDRAMAddress(start_addr);
                           2321 ;	genCast
   0822 8A 05              2322 	mov	ar5,r2
                           2323 ;	genCall
   0824 8D 82              2324 	mov	dpl,r5
   0826 C0 02              2325 	push	ar2
   0828 C0 03              2326 	push	ar3
   082A C0 04              2327 	push	ar4
   082C 12s00r00           2328 	lcall	_LCD_SetDDRAMAddress
   082F D0 04              2329 	pop	ar4
   0831 D0 03              2330 	pop	ar3
   0833 D0 02              2331 	pop	ar2
                           2332 ;	main.c:286: lcdData = LCD_ReadRAM();
                           2333 ;	genCall
   0835 C0 02              2334 	push	ar2
   0837 C0 03              2335 	push	ar3
   0839 C0 04              2336 	push	ar4
   083B 12s00r00           2337 	lcall	_LCD_ReadRAM
   083E AD 82              2338 	mov	r5,dpl
   0840 D0 04              2339 	pop	ar4
   0842 D0 03              2340 	pop	ar3
   0844 D0 02              2341 	pop	ar2
                           2342 ;	main.c:287: printf("%x ", lcdData);
                           2343 ;	genCast
   0846 7E 00              2344 	mov	r6,#0x00
                           2345 ;	genIpush
   0848 C0 02              2346 	push	ar2
   084A C0 03              2347 	push	ar3
   084C C0 04              2348 	push	ar4
   084E C0 05              2349 	push	ar5
   0850 C0 06              2350 	push	ar6
                           2351 ;	genIpush
   0852 74rE7              2352 	mov	a,#__str_38
   0854 C0 E0              2353 	push	acc
   0856 74s04              2354 	mov	a,#(__str_38 >> 8)
   0858 C0 E0              2355 	push	acc
   085A 74 80              2356 	mov	a,#0x80
   085C C0 E0              2357 	push	acc
                           2358 ;	genCall
   085E 12s00r00           2359 	lcall	_printf
   0861 E5 81              2360 	mov	a,sp
   0863 24 FB              2361 	add	a,#0xfb
   0865 F5 81              2362 	mov	sp,a
   0867 D0 04              2363 	pop	ar4
   0869 D0 03              2364 	pop	ar3
   086B D0 02              2365 	pop	ar2
                           2366 ;	main.c:288: start_addr++;
                           2367 ;	genPlus
                           2368 ;     genPlusIncr
   086D 0A                 2369 	inc	r2
   086E BA 00 01           2370 	cjne	r2,#0x00,00200$
   0871 0B                 2371 	inc	r3
   0872                    2372 00200$:
                           2373 ;	genDjnz
                           2374 ;	Peephole 112.b	changed ljmp to sjmp
                           2375 ;	Peephole 205	optimized misc jump sequence
   0872 DC AE              2376 	djnz	r4,00135$
                           2377 ;	Peephole 300	removed redundant label 00201$
                           2378 ;	Peephole 300	removed redundant label 00202$
                           2379 ;	main.c:284: for (i = 0; i < 16; ++i){
                           2380 ;	main.c:290: printf("\r\n");
                           2381 ;	genIpush
   0874 74rDF              2382 	mov	a,#__str_36
   0876 C0 E0              2383 	push	acc
   0878 74s04              2384 	mov	a,#(__str_36 >> 8)
   087A C0 E0              2385 	push	acc
   087C 74 80              2386 	mov	a,#0x80
   087E C0 E0              2387 	push	acc
                           2388 ;	genCall
   0880 12s00r00           2389 	lcall	_printf
   0883 15 81              2390 	dec	sp
   0885 15 81              2391 	dec	sp
   0887 15 81              2392 	dec	sp
                           2393 ;	main.c:293: printf("%x: ", start_addr);
                           2394 ;	genIpush
   0889 74 D0              2395 	mov	a,#0xD0
   088B C0 E0              2396 	push	acc
                           2397 ;	Peephole 181	changed mov to clr
   088D E4                 2398 	clr	a
   088E C0 E0              2399 	push	acc
                           2400 ;	genIpush
   0890 74rE2              2401 	mov	a,#__str_37
   0892 C0 E0              2402 	push	acc
   0894 74s04              2403 	mov	a,#(__str_37 >> 8)
   0896 C0 E0              2404 	push	acc
   0898 74 80              2405 	mov	a,#0x80
   089A C0 E0              2406 	push	acc
                           2407 ;	genCall
   089C 12s00r00           2408 	lcall	_printf
   089F E5 81              2409 	mov	a,sp
   08A1 24 FB              2410 	add	a,#0xfb
   08A3 F5 81              2411 	mov	sp,a
                           2412 ;	main.c:294: for (i = 0; i < 16; ++i){
                           2413 ;	genAssign
   08A5 7A D0              2414 	mov	r2,#0xD0
   08A7 7B 00              2415 	mov	r3,#0x00
                           2416 ;	genAssign
   08A9 7C 10              2417 	mov	r4,#0x10
   08AB                    2418 00138$:
                           2419 ;	main.c:295: LCD_SetDDRAMAddress(start_addr);
                           2420 ;	genCast
   08AB 8A 05              2421 	mov	ar5,r2
                           2422 ;	genCall
   08AD 8D 82              2423 	mov	dpl,r5
   08AF C0 02              2424 	push	ar2
   08B1 C0 03              2425 	push	ar3
   08B3 C0 04              2426 	push	ar4
   08B5 12s00r00           2427 	lcall	_LCD_SetDDRAMAddress
   08B8 D0 04              2428 	pop	ar4
   08BA D0 03              2429 	pop	ar3
   08BC D0 02              2430 	pop	ar2
                           2431 ;	main.c:296: lcdData = LCD_ReadRAM();
                           2432 ;	genCall
   08BE C0 02              2433 	push	ar2
   08C0 C0 03              2434 	push	ar3
   08C2 C0 04              2435 	push	ar4
   08C4 12s00r00           2436 	lcall	_LCD_ReadRAM
   08C7 AD 82              2437 	mov	r5,dpl
   08C9 D0 04              2438 	pop	ar4
   08CB D0 03              2439 	pop	ar3
   08CD D0 02              2440 	pop	ar2
                           2441 ;	main.c:297: printf("%x ", lcdData);
                           2442 ;	genCast
   08CF 7E 00              2443 	mov	r6,#0x00
                           2444 ;	genIpush
   08D1 C0 02              2445 	push	ar2
   08D3 C0 03              2446 	push	ar3
   08D5 C0 04              2447 	push	ar4
   08D7 C0 05              2448 	push	ar5
   08D9 C0 06              2449 	push	ar6
                           2450 ;	genIpush
   08DB 74rE7              2451 	mov	a,#__str_38
   08DD C0 E0              2452 	push	acc
   08DF 74s04              2453 	mov	a,#(__str_38 >> 8)
   08E1 C0 E0              2454 	push	acc
   08E3 74 80              2455 	mov	a,#0x80
   08E5 C0 E0              2456 	push	acc
                           2457 ;	genCall
   08E7 12s00r00           2458 	lcall	_printf
   08EA E5 81              2459 	mov	a,sp
   08EC 24 FB              2460 	add	a,#0xfb
   08EE F5 81              2461 	mov	sp,a
   08F0 D0 04              2462 	pop	ar4
   08F2 D0 03              2463 	pop	ar3
   08F4 D0 02              2464 	pop	ar2
                           2465 ;	main.c:298: start_addr++;
                           2466 ;	genPlus
                           2467 ;     genPlusIncr
   08F6 0A                 2468 	inc	r2
   08F7 BA 00 01           2469 	cjne	r2,#0x00,00203$
   08FA 0B                 2470 	inc	r3
   08FB                    2471 00203$:
                           2472 ;	genDjnz
                           2473 ;	Peephole 112.b	changed ljmp to sjmp
                           2474 ;	Peephole 205	optimized misc jump sequence
   08FB DC AE              2475 	djnz	r4,00138$
                           2476 ;	Peephole 300	removed redundant label 00204$
                           2477 ;	Peephole 300	removed redundant label 00205$
                           2478 ;	main.c:294: for (i = 0; i < 16; ++i){
                           2479 ;	main.c:300: printf("\r\n");
                           2480 ;	genIpush
   08FD 74rDF              2481 	mov	a,#__str_36
   08FF C0 E0              2482 	push	acc
   0901 74s04              2483 	mov	a,#(__str_36 >> 8)
   0903 C0 E0              2484 	push	acc
   0905 74 80              2485 	mov	a,#0x80
   0907 C0 E0              2486 	push	acc
                           2487 ;	genCall
   0909 12s00r00           2488 	lcall	_printf
   090C 15 81              2489 	dec	sp
   090E 15 81              2490 	dec	sp
   0910 15 81              2491 	dec	sp
                           2492 ;	main.c:303: break;
                           2493 ;	Peephole 251.a	replaced ljmp to ret with ret
   0912 22                 2494 	ret
                           2495 ;	main.c:304: case 'G':
   0913                    2496 00119$:
                           2497 ;	main.c:305: printf("\r\n");
                           2498 ;	genIpush
   0913 74rDF              2499 	mov	a,#__str_36
   0915 C0 E0              2500 	push	acc
   0917 74s04              2501 	mov	a,#(__str_36 >> 8)
   0919 C0 E0              2502 	push	acc
   091B 74 80              2503 	mov	a,#0x80
   091D C0 E0              2504 	push	acc
                           2505 ;	genCall
   091F 12s00r00           2506 	lcall	_printf
   0922 15 81              2507 	dec	sp
   0924 15 81              2508 	dec	sp
   0926 15 81              2509 	dec	sp
                           2510 ;	main.c:307: EA = 0;     //Disable interrupts temporarily. Shared globals
                           2511 ;	genAssign
   0928 C2 AF              2512 	clr	_EA
                           2513 ;	main.c:308: Saved_Address = LCD_ReadAddr();
                           2514 ;	genCall
   092A 12s00r00           2515 	lcall	_LCD_ReadAddr
   092D E5 82              2516 	mov	a,dpl
                           2517 ;	genAssign
   092F 90s00r00           2518 	mov	dptr,#_Saved_Address
   0932 F0                 2519 	movx	@dptr,a
                           2520 ;	main.c:309: CG_Accessed = true;
                           2521 ;	genAssign
   0933 D2*00              2522 	setb	_CG_Accessed
                           2523 ;	main.c:310: EA = 1;
                           2524 ;	genAssign
   0935 D2 AF              2525 	setb	_EA
                           2526 ;	main.c:313: start_addr = 0x40;
                           2527 ;	genAssign
   0937 90s00r72           2528 	mov	dptr,#_handleLCDMode_start_addr_1_1
   093A 74 40              2529 	mov	a,#0x40
   093C F0                 2530 	movx	@dptr,a
   093D E4                 2531 	clr	a
   093E A3                 2532 	inc	dptr
   093F F0                 2533 	movx	@dptr,a
                           2534 ;	main.c:315: while (start_addr < 0x80){
   0940                    2535 00120$:
                           2536 ;	genAssign
   0940 90s00r72           2537 	mov	dptr,#_handleLCDMode_start_addr_1_1
   0943 E0                 2538 	movx	a,@dptr
   0944 FA                 2539 	mov	r2,a
   0945 A3                 2540 	inc	dptr
   0946 E0                 2541 	movx	a,@dptr
   0947 FB                 2542 	mov	r3,a
                           2543 ;	genCmpLt
                           2544 ;	genCmp
   0948 C3                 2545 	clr	c
   0949 EA                 2546 	mov	a,r2
   094A 94 80              2547 	subb	a,#0x80
   094C EB                 2548 	mov	a,r3
   094D 94 00              2549 	subb	a,#0x00
                           2550 ;	genIfxJump
   094F 40 03              2551 	jc	00206$
   0951 02s09rE9           2552 	ljmp	00122$
   0954                    2553 00206$:
                           2554 ;	main.c:316: printf("%x: ", start_addr);
                           2555 ;	genIpush
   0954 C0 02              2556 	push	ar2
   0956 C0 03              2557 	push	ar3
   0958 C0 02              2558 	push	ar2
   095A C0 03              2559 	push	ar3
                           2560 ;	genIpush
   095C 74rE2              2561 	mov	a,#__str_37
   095E C0 E0              2562 	push	acc
   0960 74s04              2563 	mov	a,#(__str_37 >> 8)
   0962 C0 E0              2564 	push	acc
   0964 74 80              2565 	mov	a,#0x80
   0966 C0 E0              2566 	push	acc
                           2567 ;	genCall
   0968 12s00r00           2568 	lcall	_printf
   096B E5 81              2569 	mov	a,sp
   096D 24 FB              2570 	add	a,#0xfb
   096F F5 81              2571 	mov	sp,a
   0971 D0 03              2572 	pop	ar3
   0973 D0 02              2573 	pop	ar2
                           2574 ;	main.c:318: for (i = 0; i < 16; ++i){
                           2575 ;	genAssign
                           2576 ;	genAssign
   0975 7C 10              2577 	mov	r4,#0x10
   0977                    2578 00141$:
                           2579 ;	main.c:319: LCD_SetCGRAMAddress(start_addr);
                           2580 ;	genCast
   0977 8A 05              2581 	mov	ar5,r2
                           2582 ;	genCall
   0979 8D 82              2583 	mov	dpl,r5
   097B C0 02              2584 	push	ar2
   097D C0 03              2585 	push	ar3
   097F C0 04              2586 	push	ar4
   0981 12s00r00           2587 	lcall	_LCD_SetCGRAMAddress
   0984 D0 04              2588 	pop	ar4
   0986 D0 03              2589 	pop	ar3
   0988 D0 02              2590 	pop	ar2
                           2591 ;	main.c:320: lcdData = LCD_ReadRAM();
                           2592 ;	genCall
   098A C0 02              2593 	push	ar2
   098C C0 03              2594 	push	ar3
   098E C0 04              2595 	push	ar4
   0990 12s00r00           2596 	lcall	_LCD_ReadRAM
   0993 AD 82              2597 	mov	r5,dpl
   0995 D0 04              2598 	pop	ar4
   0997 D0 03              2599 	pop	ar3
   0999 D0 02              2600 	pop	ar2
                           2601 ;	main.c:321: printf("%x ", lcdData);
                           2602 ;	genCast
   099B 7E 00              2603 	mov	r6,#0x00
                           2604 ;	genIpush
   099D C0 02              2605 	push	ar2
   099F C0 03              2606 	push	ar3
   09A1 C0 04              2607 	push	ar4
   09A3 C0 05              2608 	push	ar5
   09A5 C0 06              2609 	push	ar6
                           2610 ;	genIpush
   09A7 74rE7              2611 	mov	a,#__str_38
   09A9 C0 E0              2612 	push	acc
   09AB 74s04              2613 	mov	a,#(__str_38 >> 8)
   09AD C0 E0              2614 	push	acc
   09AF 74 80              2615 	mov	a,#0x80
   09B1 C0 E0              2616 	push	acc
                           2617 ;	genCall
   09B3 12s00r00           2618 	lcall	_printf
   09B6 E5 81              2619 	mov	a,sp
   09B8 24 FB              2620 	add	a,#0xfb
   09BA F5 81              2621 	mov	sp,a
   09BC D0 04              2622 	pop	ar4
   09BE D0 03              2623 	pop	ar3
   09C0 D0 02              2624 	pop	ar2
                           2625 ;	main.c:322: start_addr++;
                           2626 ;	genPlus
                           2627 ;     genPlusIncr
   09C2 0A                 2628 	inc	r2
   09C3 BA 00 01           2629 	cjne	r2,#0x00,00207$
   09C6 0B                 2630 	inc	r3
   09C7                    2631 00207$:
                           2632 ;	genDjnz
                           2633 ;	Peephole 112.b	changed ljmp to sjmp
                           2634 ;	Peephole 205	optimized misc jump sequence
   09C7 DC AE              2635 	djnz	r4,00141$
                           2636 ;	Peephole 300	removed redundant label 00208$
                           2637 ;	Peephole 300	removed redundant label 00209$
                           2638 ;	main.c:318: for (i = 0; i < 16; ++i){
                           2639 ;	main.c:324: printf("\r\n");
                           2640 ;	genAssign
   09C9 90s00r72           2641 	mov	dptr,#_handleLCDMode_start_addr_1_1
   09CC EA                 2642 	mov	a,r2
   09CD F0                 2643 	movx	@dptr,a
   09CE A3                 2644 	inc	dptr
   09CF EB                 2645 	mov	a,r3
   09D0 F0                 2646 	movx	@dptr,a
                           2647 ;	genIpush
   09D1 74rDF              2648 	mov	a,#__str_36
   09D3 C0 E0              2649 	push	acc
   09D5 74s04              2650 	mov	a,#(__str_36 >> 8)
   09D7 C0 E0              2651 	push	acc
   09D9 74 80              2652 	mov	a,#0x80
   09DB C0 E0              2653 	push	acc
                           2654 ;	genCall
   09DD 12s00r00           2655 	lcall	_printf
   09E0 15 81              2656 	dec	sp
   09E2 15 81              2657 	dec	sp
   09E4 15 81              2658 	dec	sp
   09E6 02s09r40           2659 	ljmp	00120$
   09E9                    2660 00122$:
                           2661 ;	main.c:327: LCD_SetDDRAMAddress(Saved_Address);
                           2662 ;	genAssign
   09E9 90s00r00           2663 	mov	dptr,#_Saved_Address
   09EC E0                 2664 	movx	a,@dptr
                           2665 ;	genCall
   09ED FA                 2666 	mov	r2,a
                           2667 ;	Peephole 244.c	loading dpl from a instead of r2
   09EE F5 82              2668 	mov	dpl,a
   09F0 12s00r00           2669 	lcall	_LCD_SetDDRAMAddress
                           2670 ;	main.c:328: EA = 0;
                           2671 ;	genAssign
   09F3 C2 AF              2672 	clr	_EA
                           2673 ;	main.c:329: CG_Accessed = false;
                           2674 ;	genAssign
   09F5 C2*00              2675 	clr	_CG_Accessed
                           2676 ;	main.c:330: EA = 1;
                           2677 ;	genAssign
   09F7 D2 AF              2678 	setb	_EA
                           2679 ;	main.c:331: TimerRedraw();
                           2680 ;	genCall
                           2681 ;	main.c:332: break;
                           2682 ;	main.c:333: case 'r':
                           2683 ;	Peephole 112.b	changed ljmp to sjmp
                           2684 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2685 ;	Peephole 253.a	replaced lcall/ret with ljmp
   09F9 02s00r00           2686 	ljmp	_TimerRedraw
   09FC                    2687 00123$:
                           2688 ;	main.c:334: mode = MAIN_MODE;
                           2689 ;	genAssign
   09FC 90s00r00           2690 	mov	dptr,#_mode
                           2691 ;	Peephole 181	changed mov to clr
   09FF E4                 2692 	clr	a
   0A00 F0                 2693 	movx	@dptr,a
                           2694 ;	main.c:335: MainMenu();
                           2695 ;	genCall
                           2696 ;	main.c:336: break;
                           2697 ;	main.c:337: case 'H':
                           2698 ;	Peephole 112.b	changed ljmp to sjmp
                           2699 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2700 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0A01 02s11rA2           2701 	ljmp	_MainMenu
   0A04                    2702 00124$:
                           2703 ;	main.c:338: LCD_Menu();
                           2704 ;	genCall
                           2705 ;	main.c:342: }
                           2706 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0A04 02s03r94           2707 	ljmp	_LCD_Menu
                           2708 ;
                           2709 ;------------------------------------------------------------
                           2710 ;Allocation info for local variables in function 'EEPROM_Menu'
                           2711 ;------------------------------------------------------------
                           2712 ;------------------------------------------------------------
                           2713 ;	main.c:345: void EEPROM_Menu(void){
                           2714 ;	-----------------------------------------
                           2715 ;	 function EEPROM_Menu
                           2716 ;	-----------------------------------------
   0A07                    2717 _EEPROM_Menu:
                           2718 ;	main.c:346: printf("\r\nIn EEPROM Mode");
                           2719 ;	genIpush
   0A07 74rEB              2720 	mov	a,#__str_39
   0A09 C0 E0              2721 	push	acc
   0A0B 74s04              2722 	mov	a,#(__str_39 >> 8)
   0A0D C0 E0              2723 	push	acc
   0A0F 74 80              2724 	mov	a,#0x80
   0A11 C0 E0              2725 	push	acc
                           2726 ;	genCall
   0A13 12s00r00           2727 	lcall	_printf
   0A16 15 81              2728 	dec	sp
   0A18 15 81              2729 	dec	sp
   0A1A 15 81              2730 	dec	sp
                           2731 ;	main.c:347: printf("\r\nPress 'H' for help");
                           2732 ;	genIpush
   0A1C 74r9F              2733 	mov	a,#__str_4
   0A1E C0 E0              2734 	push	acc
   0A20 74s00              2735 	mov	a,#(__str_4 >> 8)
   0A22 C0 E0              2736 	push	acc
   0A24 74 80              2737 	mov	a,#0x80
   0A26 C0 E0              2738 	push	acc
                           2739 ;	genCall
   0A28 12s00r00           2740 	lcall	_printf
   0A2B 15 81              2741 	dec	sp
   0A2D 15 81              2742 	dec	sp
   0A2F 15 81              2743 	dec	sp
                           2744 ;	main.c:348: printf("\r\nPress 'W' to write a byte to EEPROM");
                           2745 ;	genIpush
   0A31 74rFC              2746 	mov	a,#__str_40
   0A33 C0 E0              2747 	push	acc
   0A35 74s04              2748 	mov	a,#(__str_40 >> 8)
   0A37 C0 E0              2749 	push	acc
   0A39 74 80              2750 	mov	a,#0x80
   0A3B C0 E0              2751 	push	acc
                           2752 ;	genCall
   0A3D 12s00r00           2753 	lcall	_printf
   0A40 15 81              2754 	dec	sp
   0A42 15 81              2755 	dec	sp
   0A44 15 81              2756 	dec	sp
                           2757 ;	main.c:349: printf("\r\nPress 'R' to read a byte from EEPROM");
                           2758 ;	genIpush
   0A46 74r22              2759 	mov	a,#__str_41
   0A48 C0 E0              2760 	push	acc
   0A4A 74s05              2761 	mov	a,#(__str_41 >> 8)
   0A4C C0 E0              2762 	push	acc
   0A4E 74 80              2763 	mov	a,#0x80
   0A50 C0 E0              2764 	push	acc
                           2765 ;	genCall
   0A52 12s00r00           2766 	lcall	_printf
   0A55 15 81              2767 	dec	sp
   0A57 15 81              2768 	dec	sp
   0A59 15 81              2769 	dec	sp
                           2770 ;	main.c:350: printf("\r\nPress 'L' to display EEPROM data on LCD");
                           2771 ;	genIpush
   0A5B 74r49              2772 	mov	a,#__str_42
   0A5D C0 E0              2773 	push	acc
   0A5F 74s05              2774 	mov	a,#(__str_42 >> 8)
   0A61 C0 E0              2775 	push	acc
   0A63 74 80              2776 	mov	a,#0x80
   0A65 C0 E0              2777 	push	acc
                           2778 ;	genCall
   0A67 12s00r00           2779 	lcall	_printf
   0A6A 15 81              2780 	dec	sp
   0A6C 15 81              2781 	dec	sp
   0A6E 15 81              2782 	dec	sp
                           2783 ;	main.c:351: printf("\r\nPress 'D' to do a Hex Dump of EEPROM");
                           2784 ;	genIpush
   0A70 74r73              2785 	mov	a,#__str_43
   0A72 C0 E0              2786 	push	acc
   0A74 74s05              2787 	mov	a,#(__str_43 >> 8)
   0A76 C0 E0              2788 	push	acc
   0A78 74 80              2789 	mov	a,#0x80
   0A7A C0 E0              2790 	push	acc
                           2791 ;	genCall
   0A7C 12s00r00           2792 	lcall	_printf
   0A7F 15 81              2793 	dec	sp
   0A81 15 81              2794 	dec	sp
   0A83 15 81              2795 	dec	sp
                           2796 ;	main.c:352: printf("\r\nPress 'r' to return to main menu\r\n");
                           2797 ;	genIpush
   0A85 74r32              2798 	mov	a,#__str_8
   0A87 C0 E0              2799 	push	acc
   0A89 74s01              2800 	mov	a,#(__str_8 >> 8)
   0A8B C0 E0              2801 	push	acc
   0A8D 74 80              2802 	mov	a,#0x80
   0A8F C0 E0              2803 	push	acc
                           2804 ;	genCall
   0A91 12s00r00           2805 	lcall	_printf
   0A94 15 81              2806 	dec	sp
   0A96 15 81              2807 	dec	sp
   0A98 15 81              2808 	dec	sp
                           2809 ;	Peephole 300	removed redundant label 00101$
   0A9A 22                 2810 	ret
                           2811 ;------------------------------------------------------------
                           2812 ;Allocation info for local variables in function 'handleEEPROMMode'
                           2813 ;------------------------------------------------------------
                           2814 ;c                         Allocated with name '_handleEEPROMMode_c_1_1'
                           2815 ;block                     Allocated with name '_handleEEPROMMode_block_1_1'
                           2816 ;end_block                 Allocated with name '_handleEEPROMMode_end_block_1_1'
                           2817 ;address                   Allocated with name '_handleEEPROMMode_address_1_1'
                           2818 ;end_address               Allocated with name '_handleEEPROMMode_end_address_1_1'
                           2819 ;i                         Allocated with name '_handleEEPROMMode_i_1_1'
                           2820 ;lcdData                   Allocated with name '_handleEEPROMMode_lcdData_1_1'
                           2821 ;Lcd_row                   Allocated with name '_handleEEPROMMode_Lcd_row_1_1'
                           2822 ;start_addr                Allocated with name '_handleEEPROMMode_start_addr_1_1'
                           2823 ;end_addr                  Allocated with name '_handleEEPROMMode_end_addr_1_1'
                           2824 ;------------------------------------------------------------
                           2825 ;	main.c:355: void handleEEPROMMode(char c){
                           2826 ;	-----------------------------------------
                           2827 ;	 function handleEEPROMMode
                           2828 ;	-----------------------------------------
   0A9B                    2829 _handleEEPROMMode:
                           2830 ;	genReceive
   0A9B E5 82              2831 	mov	a,dpl
   0A9D 90s00r74           2832 	mov	dptr,#_handleEEPROMMode_c_1_1
   0AA0 F0                 2833 	movx	@dptr,a
                           2834 ;	main.c:365: switch(c){
                           2835 ;	genAssign
   0AA1 90s00r74           2836 	mov	dptr,#_handleEEPROMMode_c_1_1
   0AA4 E0                 2837 	movx	a,@dptr
   0AA5 FA                 2838 	mov	r2,a
                           2839 ;	genCmpEq
                           2840 ;	gencjneshort
   0AA6 BA 44 03           2841 	cjne	r2,#0x44,00135$
   0AA9 02s0Cr79           2842 	ljmp	00104$
   0AAC                    2843 00135$:
                           2844 ;	genCmpEq
                           2845 ;	gencjneshort
   0AAC BA 48 03           2846 	cjne	r2,#0x48,00136$
   0AAF 02s0Er54           2847 	ljmp	00117$
   0AB2                    2848 00136$:
                           2849 ;	genCmpEq
                           2850 ;	gencjneshort
   0AB2 BA 4C 03           2851 	cjne	r2,#0x4C,00137$
   0AB5 02s0BrD2           2852 	ljmp	00103$
   0AB8                    2853 00137$:
                           2854 ;	genCmpEq
                           2855 ;	gencjneshort
   0AB8 BA 52 03           2856 	cjne	r2,#0x52,00138$
   0ABB 02s0Br5F           2857 	ljmp	00102$
   0ABE                    2858 00138$:
                           2859 ;	genCmpEq
                           2860 ;	gencjneshort
   0ABE BA 57 02           2861 	cjne	r2,#0x57,00139$
                           2862 ;	Peephole 112.b	changed ljmp to sjmp
   0AC1 80 07              2863 	sjmp	00101$
   0AC3                    2864 00139$:
                           2865 ;	genCmpEq
                           2866 ;	gencjneshort
   0AC3 BA 72 03           2867 	cjne	r2,#0x72,00140$
   0AC6 02s0Er4C           2868 	ljmp	00116$
   0AC9                    2869 00140$:
                           2870 ;	Peephole 251.a	replaced ljmp to ret with ret
   0AC9 22                 2871 	ret
                           2872 ;	main.c:366: case 'W':
   0ACA                    2873 00101$:
                           2874 ;	main.c:367: printf("\r\nWriting to EEPROM...");
                           2875 ;	genIpush
   0ACA 74r9A              2876 	mov	a,#__str_44
   0ACC C0 E0              2877 	push	acc
   0ACE 74s05              2878 	mov	a,#(__str_44 >> 8)
   0AD0 C0 E0              2879 	push	acc
   0AD2 74 80              2880 	mov	a,#0x80
   0AD4 C0 E0              2881 	push	acc
                           2882 ;	genCall
   0AD6 12s00r00           2883 	lcall	_printf
   0AD9 15 81              2884 	dec	sp
   0ADB 15 81              2885 	dec	sp
   0ADD 15 81              2886 	dec	sp
                           2887 ;	main.c:368: getBlockAndAddress(&address, &block);
                           2888 ;	genCast
   0ADF 90s00r00           2889 	mov	dptr,#_getBlockAndAddress_PARM_2
   0AE2 74r75              2890 	mov	a,#_handleEEPROMMode_block_1_1
   0AE4 F0                 2891 	movx	@dptr,a
   0AE5 A3                 2892 	inc	dptr
   0AE6 74s00              2893 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0AE8 F0                 2894 	movx	@dptr,a
   0AE9 A3                 2895 	inc	dptr
   0AEA 74 00              2896 	mov	a,#0x0
   0AEC F0                 2897 	movx	@dptr,a
                           2898 ;	genCall
                           2899 ;	Peephole 182.a	used 16 bit load of DPTR
   0AED 90s00r77           2900 	mov	dptr,#_handleEEPROMMode_address_1_1
   0AF0 75 F0 00           2901 	mov	b,#0x00
   0AF3 12s00r0C           2902 	lcall	_getBlockAndAddress
                           2903 ;	main.c:369: printf("\r\nEnter a byte of data to write to EEPROM:");
                           2904 ;	genIpush
   0AF6 74rB1              2905 	mov	a,#__str_45
   0AF8 C0 E0              2906 	push	acc
   0AFA 74s05              2907 	mov	a,#(__str_45 >> 8)
   0AFC C0 E0              2908 	push	acc
   0AFE 74 80              2909 	mov	a,#0x80
   0B00 C0 E0              2910 	push	acc
                           2911 ;	genCall
   0B02 12s00r00           2912 	lcall	_printf
   0B05 15 81              2913 	dec	sp
   0B07 15 81              2914 	dec	sp
   0B09 15 81              2915 	dec	sp
                           2916 ;	main.c:370: lcdData = Serial_GetHex();
                           2917 ;	genCall
   0B0B 12s00r00           2918 	lcall	_Serial_GetHex
   0B0E AA 82              2919 	mov	r2,dpl
                           2920 ;	main.c:371: EPROM_ByteWrite(lcdData, address, block);
                           2921 ;	genAssign
   0B10 90s00r77           2922 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B13 E0                 2923 	movx	a,@dptr
   0B14 FB                 2924 	mov	r3,a
                           2925 ;	genAssign
   0B15 90s00r75           2926 	mov	dptr,#_handleEEPROMMode_block_1_1
   0B18 E0                 2927 	movx	a,@dptr
   0B19 FC                 2928 	mov	r4,a
                           2929 ;	genAssign
   0B1A 90s00r00           2930 	mov	dptr,#_EPROM_ByteWrite_PARM_2
   0B1D EB                 2931 	mov	a,r3
   0B1E F0                 2932 	movx	@dptr,a
                           2933 ;	genAssign
   0B1F 90s00r00           2934 	mov	dptr,#_EPROM_ByteWrite_PARM_3
   0B22 EC                 2935 	mov	a,r4
   0B23 F0                 2936 	movx	@dptr,a
                           2937 ;	genCall
   0B24 8A 82              2938 	mov	dpl,r2
   0B26 C0 02              2939 	push	ar2
   0B28 12s00r00           2940 	lcall	_EPROM_ByteWrite
   0B2B D0 02              2941 	pop	ar2
                           2942 ;	main.c:372: printf("\r\nWrote %X to block %d address 0x%X in EEPROM!\r\n", lcdData, block, address);
                           2943 ;	genAssign
   0B2D 90s00r77           2944 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B30 E0                 2945 	movx	a,@dptr
   0B31 FB                 2946 	mov	r3,a
                           2947 ;	genCast
   0B32 7C 00              2948 	mov	r4,#0x00
                           2949 ;	genAssign
   0B34 90s00r75           2950 	mov	dptr,#_handleEEPROMMode_block_1_1
   0B37 E0                 2951 	movx	a,@dptr
   0B38 FD                 2952 	mov	r5,a
                           2953 ;	genCast
   0B39 7E 00              2954 	mov	r6,#0x00
                           2955 ;	genCast
   0B3B 7F 00              2956 	mov	r7,#0x00
                           2957 ;	genIpush
   0B3D C0 03              2958 	push	ar3
   0B3F C0 04              2959 	push	ar4
                           2960 ;	genIpush
   0B41 C0 05              2961 	push	ar5
   0B43 C0 06              2962 	push	ar6
                           2963 ;	genIpush
   0B45 C0 02              2964 	push	ar2
   0B47 C0 07              2965 	push	ar7
                           2966 ;	genIpush
   0B49 74rDC              2967 	mov	a,#__str_46
   0B4B C0 E0              2968 	push	acc
   0B4D 74s05              2969 	mov	a,#(__str_46 >> 8)
   0B4F C0 E0              2970 	push	acc
   0B51 74 80              2971 	mov	a,#0x80
   0B53 C0 E0              2972 	push	acc
                           2973 ;	genCall
   0B55 12s00r00           2974 	lcall	_printf
   0B58 E5 81              2975 	mov	a,sp
   0B5A 24 F7              2976 	add	a,#0xf7
   0B5C F5 81              2977 	mov	sp,a
                           2978 ;	main.c:373: break;
                           2979 ;	Peephole 251.a	replaced ljmp to ret with ret
   0B5E 22                 2980 	ret
                           2981 ;	main.c:374: case 'R':
   0B5F                    2982 00102$:
                           2983 ;	main.c:375: printf("\r\nReading from EEPROM...");
                           2984 ;	genIpush
   0B5F 74r0D              2985 	mov	a,#__str_47
   0B61 C0 E0              2986 	push	acc
   0B63 74s06              2987 	mov	a,#(__str_47 >> 8)
   0B65 C0 E0              2988 	push	acc
   0B67 74 80              2989 	mov	a,#0x80
   0B69 C0 E0              2990 	push	acc
                           2991 ;	genCall
   0B6B 12s00r00           2992 	lcall	_printf
   0B6E 15 81              2993 	dec	sp
   0B70 15 81              2994 	dec	sp
   0B72 15 81              2995 	dec	sp
                           2996 ;	main.c:376: getBlockAndAddress(&address, &block);
                           2997 ;	genCast
   0B74 90s00r00           2998 	mov	dptr,#_getBlockAndAddress_PARM_2
   0B77 74r75              2999 	mov	a,#_handleEEPROMMode_block_1_1
   0B79 F0                 3000 	movx	@dptr,a
   0B7A A3                 3001 	inc	dptr
   0B7B 74s00              3002 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0B7D F0                 3003 	movx	@dptr,a
   0B7E A3                 3004 	inc	dptr
   0B7F 74 00              3005 	mov	a,#0x0
   0B81 F0                 3006 	movx	@dptr,a
                           3007 ;	genCall
                           3008 ;	Peephole 182.a	used 16 bit load of DPTR
   0B82 90s00r77           3009 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B85 75 F0 00           3010 	mov	b,#0x00
   0B88 12s00r0C           3011 	lcall	_getBlockAndAddress
                           3012 ;	main.c:378: lcdData = EPROM_ByteRead(address, block);
                           3013 ;	genAssign
   0B8B 90s00r77           3014 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B8E E0                 3015 	movx	a,@dptr
   0B8F FA                 3016 	mov	r2,a
                           3017 ;	genAssign
   0B90 90s00r75           3018 	mov	dptr,#_handleEEPROMMode_block_1_1
   0B93 E0                 3019 	movx	a,@dptr
                           3020 ;	genAssign
   0B94 FB                 3021 	mov	r3,a
   0B95 90s00r00           3022 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           3023 ;	Peephole 100	removed redundant mov
   0B98 F0                 3024 	movx	@dptr,a
                           3025 ;	genCall
   0B99 8A 82              3026 	mov	dpl,r2
   0B9B 12s00r00           3027 	lcall	_EPROM_ByteRead
   0B9E AA 82              3028 	mov	r2,dpl
                           3029 ;	main.c:379: printf("\r\nRead %X from block %d address 0x%X\r\n", lcdData, block, address);
                           3030 ;	genAssign
   0BA0 90s00r77           3031 	mov	dptr,#_handleEEPROMMode_address_1_1
   0BA3 E0                 3032 	movx	a,@dptr
   0BA4 FB                 3033 	mov	r3,a
                           3034 ;	genCast
   0BA5 7C 00              3035 	mov	r4,#0x00
                           3036 ;	genAssign
   0BA7 90s00r75           3037 	mov	dptr,#_handleEEPROMMode_block_1_1
   0BAA E0                 3038 	movx	a,@dptr
   0BAB FD                 3039 	mov	r5,a
                           3040 ;	genCast
   0BAC 7E 00              3041 	mov	r6,#0x00
                           3042 ;	genCast
   0BAE 7F 00              3043 	mov	r7,#0x00
                           3044 ;	genIpush
   0BB0 C0 03              3045 	push	ar3
   0BB2 C0 04              3046 	push	ar4
                           3047 ;	genIpush
   0BB4 C0 05              3048 	push	ar5
   0BB6 C0 06              3049 	push	ar6
                           3050 ;	genIpush
   0BB8 C0 02              3051 	push	ar2
   0BBA C0 07              3052 	push	ar7
                           3053 ;	genIpush
   0BBC 74r26              3054 	mov	a,#__str_48
   0BBE C0 E0              3055 	push	acc
   0BC0 74s06              3056 	mov	a,#(__str_48 >> 8)
   0BC2 C0 E0              3057 	push	acc
   0BC4 74 80              3058 	mov	a,#0x80
   0BC6 C0 E0              3059 	push	acc
                           3060 ;	genCall
   0BC8 12s00r00           3061 	lcall	_printf
   0BCB E5 81              3062 	mov	a,sp
   0BCD 24 F7              3063 	add	a,#0xf7
   0BCF F5 81              3064 	mov	sp,a
                           3065 ;	main.c:380: break;
                           3066 ;	Peephole 251.a	replaced ljmp to ret with ret
   0BD1 22                 3067 	ret
                           3068 ;	main.c:381: case 'L':
   0BD2                    3069 00103$:
                           3070 ;	main.c:382: getBlockAndAddress(&address, &block);
                           3071 ;	genCast
   0BD2 90s00r00           3072 	mov	dptr,#_getBlockAndAddress_PARM_2
   0BD5 74r75              3073 	mov	a,#_handleEEPROMMode_block_1_1
   0BD7 F0                 3074 	movx	@dptr,a
   0BD8 A3                 3075 	inc	dptr
   0BD9 74s00              3076 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0BDB F0                 3077 	movx	@dptr,a
   0BDC A3                 3078 	inc	dptr
   0BDD 74 00              3079 	mov	a,#0x0
   0BDF F0                 3080 	movx	@dptr,a
                           3081 ;	genCall
                           3082 ;	Peephole 182.a	used 16 bit load of DPTR
   0BE0 90s00r77           3083 	mov	dptr,#_handleEEPROMMode_address_1_1
   0BE3 75 F0 00           3084 	mov	b,#0x00
   0BE6 12s00r0C           3085 	lcall	_getBlockAndAddress
                           3086 ;	main.c:384: lcdData = EPROM_ByteRead(address, block);
                           3087 ;	genAssign
   0BE9 90s00r77           3088 	mov	dptr,#_handleEEPROMMode_address_1_1
   0BEC E0                 3089 	movx	a,@dptr
   0BED FA                 3090 	mov	r2,a
                           3091 ;	genAssign
   0BEE 90s00r75           3092 	mov	dptr,#_handleEEPROMMode_block_1_1
   0BF1 E0                 3093 	movx	a,@dptr
                           3094 ;	genAssign
   0BF2 FB                 3095 	mov	r3,a
   0BF3 90s00r00           3096 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           3097 ;	Peephole 100	removed redundant mov
   0BF6 F0                 3098 	movx	@dptr,a
                           3099 ;	genCall
   0BF7 8A 82              3100 	mov	dpl,r2
   0BF9 12s00r00           3101 	lcall	_EPROM_ByteRead
   0BFC AA 82              3102 	mov	r2,dpl
                           3103 ;	main.c:386: printf("\r\nEnter LCD row from 0-3:");
                           3104 ;	genIpush
   0BFE C0 02              3105 	push	ar2
   0C00 74r4D              3106 	mov	a,#__str_49
   0C02 C0 E0              3107 	push	acc
   0C04 74s06              3108 	mov	a,#(__str_49 >> 8)
   0C06 C0 E0              3109 	push	acc
   0C08 74 80              3110 	mov	a,#0x80
   0C0A C0 E0              3111 	push	acc
                           3112 ;	genCall
   0C0C 12s00r00           3113 	lcall	_printf
   0C0F 15 81              3114 	dec	sp
   0C11 15 81              3115 	dec	sp
   0C13 15 81              3116 	dec	sp
   0C15 D0 02              3117 	pop	ar2
                           3118 ;	main.c:387: Lcd_row = Serial_GetInteger(1);
                           3119 ;	genCall
                           3120 ;	Peephole 182.b	used 16 bit load of dptr
   0C17 90 00 01           3121 	mov	dptr,#0x0001
   0C1A C0 02              3122 	push	ar2
   0C1C 12s00r00           3123 	lcall	_Serial_GetInteger
   0C1F AB 82              3124 	mov	r3,dpl
   0C21 AC 83              3125 	mov	r4,dph
   0C23 D0 02              3126 	pop	ar2
                           3127 ;	genCast
                           3128 ;	main.c:389: LCD_gotoxy(Lcd_row, 0);
                           3129 ;	genAssign
   0C25 90s00r00           3130 	mov	dptr,#_LCD_gotoxy_PARM_2
                           3131 ;	Peephole 181	changed mov to clr
   0C28 E4                 3132 	clr	a
   0C29 F0                 3133 	movx	@dptr,a
                           3134 ;	genCall
   0C2A 8B 82              3135 	mov	dpl,r3
   0C2C C0 02              3136 	push	ar2
   0C2E 12s00r00           3137 	lcall	_LCD_gotoxy
   0C31 D0 02              3138 	pop	ar2
                           3139 ;	main.c:390: LCD_Putch(block + '0');
                           3140 ;	genAssign
   0C33 90s00r75           3141 	mov	dptr,#_handleEEPROMMode_block_1_1
   0C36 E0                 3142 	movx	a,@dptr
                           3143 ;	genPlus
                           3144 ;     genPlusIncr
                           3145 ;	Peephole 236.a	used r3 instead of ar3
                           3146 ;	Peephole 214	reduced some extra moves
                           3147 ;	genCall
                           3148 ;	Peephole 215	removed some moves
   0C37 24 30              3149 	add	a,#0x30
   0C39 FB                 3150 	mov	r3,a
                           3151 ;	Peephole 244.c	loading dpl from a instead of r3
   0C3A F5 82              3152 	mov	dpl,a
   0C3C C0 02              3153 	push	ar2
   0C3E 12s00r00           3154 	lcall	_LCD_Putch
   0C41 D0 02              3155 	pop	ar2
                           3156 ;	main.c:391: LCD_Puthex(address);
                           3157 ;	genAssign
   0C43 90s00r77           3158 	mov	dptr,#_handleEEPROMMode_address_1_1
   0C46 E0                 3159 	movx	a,@dptr
                           3160 ;	genCall
   0C47 FB                 3161 	mov	r3,a
                           3162 ;	Peephole 244.c	loading dpl from a instead of r3
   0C48 F5 82              3163 	mov	dpl,a
   0C4A C0 02              3164 	push	ar2
   0C4C 12s00r00           3165 	lcall	_LCD_Puthex
   0C4F D0 02              3166 	pop	ar2
                           3167 ;	main.c:392: LCD_Putstr(": ");
                           3168 ;	genCall
                           3169 ;	Peephole 182.a	used 16 bit load of DPTR
   0C51 90s06r67           3170 	mov	dptr,#__str_50
   0C54 75 F0 80           3171 	mov	b,#0x80
   0C57 C0 02              3172 	push	ar2
   0C59 12s00r00           3173 	lcall	_LCD_Putstr
   0C5C D0 02              3174 	pop	ar2
                           3175 ;	main.c:393: LCD_Puthex(lcdData);
                           3176 ;	genCall
   0C5E 8A 82              3177 	mov	dpl,r2
   0C60 12s00r00           3178 	lcall	_LCD_Puthex
                           3179 ;	main.c:395: printf("\r\nWrote to LCD!\r\n");
                           3180 ;	genIpush
   0C63 74r6A              3181 	mov	a,#__str_51
   0C65 C0 E0              3182 	push	acc
   0C67 74s06              3183 	mov	a,#(__str_51 >> 8)
   0C69 C0 E0              3184 	push	acc
   0C6B 74 80              3185 	mov	a,#0x80
   0C6D C0 E0              3186 	push	acc
                           3187 ;	genCall
   0C6F 12s00r00           3188 	lcall	_printf
   0C72 15 81              3189 	dec	sp
   0C74 15 81              3190 	dec	sp
   0C76 15 81              3191 	dec	sp
                           3192 ;	main.c:396: break;
                           3193 ;	Peephole 251.a	replaced ljmp to ret with ret
   0C78 22                 3194 	ret
                           3195 ;	main.c:398: case 'D':
   0C79                    3196 00104$:
                           3197 ;	main.c:399: printf("\r\nPerforming an EEPROM data dump\r\n");
                           3198 ;	genIpush
   0C79 74r7C              3199 	mov	a,#__str_52
   0C7B C0 E0              3200 	push	acc
   0C7D 74s06              3201 	mov	a,#(__str_52 >> 8)
   0C7F C0 E0              3202 	push	acc
   0C81 74 80              3203 	mov	a,#0x80
   0C83 C0 E0              3204 	push	acc
                           3205 ;	genCall
   0C85 12s00r00           3206 	lcall	_printf
   0C88 15 81              3207 	dec	sp
   0C8A 15 81              3208 	dec	sp
   0C8C 15 81              3209 	dec	sp
                           3210 ;	main.c:400: printf("\r\nEnter the starting block and address");
                           3211 ;	genIpush
   0C8E 74r9F              3212 	mov	a,#__str_53
   0C90 C0 E0              3213 	push	acc
   0C92 74s06              3214 	mov	a,#(__str_53 >> 8)
   0C94 C0 E0              3215 	push	acc
   0C96 74 80              3216 	mov	a,#0x80
   0C98 C0 E0              3217 	push	acc
                           3218 ;	genCall
   0C9A 12s00r00           3219 	lcall	_printf
   0C9D 15 81              3220 	dec	sp
   0C9F 15 81              3221 	dec	sp
   0CA1 15 81              3222 	dec	sp
                           3223 ;	main.c:401: getBlockAndAddress(&address, &block);
                           3224 ;	genCast
   0CA3 90s00r00           3225 	mov	dptr,#_getBlockAndAddress_PARM_2
   0CA6 74r75              3226 	mov	a,#_handleEEPROMMode_block_1_1
   0CA8 F0                 3227 	movx	@dptr,a
   0CA9 A3                 3228 	inc	dptr
   0CAA 74s00              3229 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0CAC F0                 3230 	movx	@dptr,a
   0CAD A3                 3231 	inc	dptr
   0CAE 74 00              3232 	mov	a,#0x0
   0CB0 F0                 3233 	movx	@dptr,a
                           3234 ;	genCall
                           3235 ;	Peephole 182.a	used 16 bit load of DPTR
   0CB1 90s00r77           3236 	mov	dptr,#_handleEEPROMMode_address_1_1
   0CB4 75 F0 00           3237 	mov	b,#0x00
   0CB7 12s00r0C           3238 	lcall	_getBlockAndAddress
                           3239 ;	main.c:402: printf("\r\nEnter the ending block and address");
                           3240 ;	genIpush
   0CBA 74rC6              3241 	mov	a,#__str_54
   0CBC C0 E0              3242 	push	acc
   0CBE 74s06              3243 	mov	a,#(__str_54 >> 8)
   0CC0 C0 E0              3244 	push	acc
   0CC2 74 80              3245 	mov	a,#0x80
   0CC4 C0 E0              3246 	push	acc
                           3247 ;	genCall
   0CC6 12s00r00           3248 	lcall	_printf
   0CC9 15 81              3249 	dec	sp
   0CCB 15 81              3250 	dec	sp
   0CCD 15 81              3251 	dec	sp
                           3252 ;	main.c:403: getBlockAndAddress(&end_address, &end_block);
                           3253 ;	genCast
   0CCF 90s00r00           3254 	mov	dptr,#_getBlockAndAddress_PARM_2
   0CD2 74r76              3255 	mov	a,#_handleEEPROMMode_end_block_1_1
   0CD4 F0                 3256 	movx	@dptr,a
   0CD5 A3                 3257 	inc	dptr
   0CD6 74s00              3258 	mov	a,#(_handleEEPROMMode_end_block_1_1 >> 8)
   0CD8 F0                 3259 	movx	@dptr,a
   0CD9 A3                 3260 	inc	dptr
   0CDA 74 00              3261 	mov	a,#0x0
   0CDC F0                 3262 	movx	@dptr,a
                           3263 ;	genCall
                           3264 ;	Peephole 182.a	used 16 bit load of DPTR
   0CDD 90s00r78           3265 	mov	dptr,#_handleEEPROMMode_end_address_1_1
   0CE0 75 F0 00           3266 	mov	b,#0x00
   0CE3 12s00r0C           3267 	lcall	_getBlockAndAddress
                           3268 ;	main.c:404: start_addr =( block << 8) | address;
                           3269 ;	genAssign
   0CE6 90s00r75           3270 	mov	dptr,#_handleEEPROMMode_block_1_1
   0CE9 E0                 3271 	movx	a,@dptr
   0CEA FA                 3272 	mov	r2,a
                           3273 ;	genCast
                           3274 ;	genLeftShift
                           3275 ;	genLeftShiftLiteral
                           3276 ;	genlshTwo
                           3277 ;	peephole 177.e	removed redundant move
   0CEB 8A 03              3278 	mov	ar3,r2
   0CED 7A 00              3279 	mov	r2,#0x00
                           3280 ;	genAssign
   0CEF 90s00r77           3281 	mov	dptr,#_handleEEPROMMode_address_1_1
   0CF2 E0                 3282 	movx	a,@dptr
                           3283 ;	genCast
                           3284 ;	genOr
   0CF3 FC                 3285 	mov	r4,a
   0CF4 7D 00              3286 	mov	r5,#0x00
                           3287 ;	Peephole 177.d	removed redundant move
   0CF6 42 02              3288 	orl	ar2,a
   0CF8 ED                 3289 	mov	a,r5
   0CF9 42 03              3290 	orl	ar3,a
                           3291 ;	genAssign
   0CFB 90s00r79           3292 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0CFE EA                 3293 	mov	a,r2
   0CFF F0                 3294 	movx	@dptr,a
   0D00 A3                 3295 	inc	dptr
   0D01 EB                 3296 	mov	a,r3
   0D02 F0                 3297 	movx	@dptr,a
                           3298 ;	main.c:405: end_addr = (end_block << 8) | end_address;
                           3299 ;	genAssign
   0D03 90s00r76           3300 	mov	dptr,#_handleEEPROMMode_end_block_1_1
   0D06 E0                 3301 	movx	a,@dptr
   0D07 FC                 3302 	mov	r4,a
                           3303 ;	genCast
                           3304 ;	genLeftShift
                           3305 ;	genLeftShiftLiteral
                           3306 ;	genlshTwo
                           3307 ;	peephole 177.e	removed redundant move
   0D08 8C 05              3308 	mov	ar5,r4
   0D0A 7C 00              3309 	mov	r4,#0x00
                           3310 ;	genAssign
   0D0C 90s00r78           3311 	mov	dptr,#_handleEEPROMMode_end_address_1_1
   0D0F E0                 3312 	movx	a,@dptr
                           3313 ;	genCast
                           3314 ;	genOr
   0D10 FE                 3315 	mov	r6,a
   0D11 7F 00              3316 	mov	r7,#0x00
                           3317 ;	Peephole 177.d	removed redundant move
   0D13 42 04              3318 	orl	ar4,a
   0D15 EF                 3319 	mov	a,r7
   0D16 42 05              3320 	orl	ar5,a
                           3321 ;	genAssign
   0D18 90s00r7B           3322 	mov	dptr,#_handleEEPROMMode_end_addr_1_1
   0D1B EC                 3323 	mov	a,r4
   0D1C F0                 3324 	movx	@dptr,a
   0D1D A3                 3325 	inc	dptr
   0D1E ED                 3326 	mov	a,r5
   0D1F F0                 3327 	movx	@dptr,a
                           3328 ;	main.c:406: if (start_addr > end_addr){
                           3329 ;	genAssign
                           3330 ;	genAssign
                           3331 ;	genCmpGt
                           3332 ;	genCmp
   0D20 C3                 3333 	clr	c
   0D21 EC                 3334 	mov	a,r4
   0D22 9A                 3335 	subb	a,r2
   0D23 ED                 3336 	mov	a,r5
   0D24 9B                 3337 	subb	a,r3
                           3338 ;	genIfxJump
                           3339 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0D25 50 16              3340 	jnc	00106$
                           3341 ;	Peephole 300	removed redundant label 00141$
                           3342 ;	main.c:407: printf("\r\nInvalid addresses. End address must be after start address");
                           3343 ;	genIpush
   0D27 74rEB              3344 	mov	a,#__str_55
   0D29 C0 E0              3345 	push	acc
   0D2B 74s06              3346 	mov	a,#(__str_55 >> 8)
   0D2D C0 E0              3347 	push	acc
   0D2F 74 80              3348 	mov	a,#0x80
   0D31 C0 E0              3349 	push	acc
                           3350 ;	genCall
   0D33 12s00r00           3351 	lcall	_printf
   0D36 15 81              3352 	dec	sp
   0D38 15 81              3353 	dec	sp
   0D3A 15 81              3354 	dec	sp
                           3355 ;	main.c:408: return;
                           3356 ;	genRet
                           3357 ;	Peephole 251.a	replaced ljmp to ret with ret
   0D3C 22                 3358 	ret
   0D3D                    3359 00106$:
                           3360 ;	main.c:410: printf("\r\n");
                           3361 ;	genIpush
   0D3D 74rDF              3362 	mov	a,#__str_36
   0D3F C0 E0              3363 	push	acc
   0D41 74s04              3364 	mov	a,#(__str_36 >> 8)
   0D43 C0 E0              3365 	push	acc
   0D45 74 80              3366 	mov	a,#0x80
   0D47 C0 E0              3367 	push	acc
                           3368 ;	genCall
   0D49 12s00r00           3369 	lcall	_printf
   0D4C 15 81              3370 	dec	sp
   0D4E 15 81              3371 	dec	sp
   0D50 15 81              3372 	dec	sp
                           3373 ;	main.c:411: while(start_addr <= end_addr){
                           3374 ;	genAssign
   0D52 90s00r7B           3375 	mov	dptr,#_handleEEPROMMode_end_addr_1_1
   0D55 E0                 3376 	movx	a,@dptr
   0D56 FA                 3377 	mov	r2,a
   0D57 A3                 3378 	inc	dptr
   0D58 E0                 3379 	movx	a,@dptr
   0D59 FB                 3380 	mov	r3,a
                           3381 ;	genAssign
   0D5A 8A 04              3382 	mov	ar4,r2
   0D5C 8B 05              3383 	mov	ar5,r3
   0D5E                    3384 00113$:
                           3385 ;	genAssign
   0D5E 90s00r79           3386 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0D61 E0                 3387 	movx	a,@dptr
   0D62 FE                 3388 	mov	r6,a
   0D63 A3                 3389 	inc	dptr
   0D64 E0                 3390 	movx	a,@dptr
   0D65 FF                 3391 	mov	r7,a
                           3392 ;	genCmpGt
                           3393 ;	genCmp
   0D66 C3                 3394 	clr	c
   0D67 EC                 3395 	mov	a,r4
   0D68 9E                 3396 	subb	a,r6
   0D69 ED                 3397 	mov	a,r5
   0D6A 9F                 3398 	subb	a,r7
                           3399 ;	genIfxJump
   0D6B 50 01              3400 	jnc	00142$
                           3401 ;	Peephole 251.a	replaced ljmp to ret with ret
   0D6D 22                 3402 	ret
   0D6E                    3403 00142$:
                           3404 ;	main.c:412: printf("%x: ", start_addr);
                           3405 ;	genIpush
   0D6E C0 02              3406 	push	ar2
   0D70 C0 03              3407 	push	ar3
   0D72 C0 04              3408 	push	ar4
   0D74 C0 05              3409 	push	ar5
   0D76 C0 06              3410 	push	ar6
   0D78 C0 07              3411 	push	ar7
   0D7A C0 06              3412 	push	ar6
   0D7C C0 07              3413 	push	ar7
                           3414 ;	genIpush
   0D7E 74rE2              3415 	mov	a,#__str_37
   0D80 C0 E0              3416 	push	acc
   0D82 74s04              3417 	mov	a,#(__str_37 >> 8)
   0D84 C0 E0              3418 	push	acc
   0D86 74 80              3419 	mov	a,#0x80
   0D88 C0 E0              3420 	push	acc
                           3421 ;	genCall
   0D8A 12s00r00           3422 	lcall	_printf
   0D8D E5 81              3423 	mov	a,sp
   0D8F 24 FB              3424 	add	a,#0xfb
   0D91 F5 81              3425 	mov	sp,a
   0D93 D0 07              3426 	pop	ar7
   0D95 D0 06              3427 	pop	ar6
   0D97 D0 05              3428 	pop	ar5
   0D99 D0 04              3429 	pop	ar4
   0D9B D0 03              3430 	pop	ar3
   0D9D D0 02              3431 	pop	ar2
                           3432 ;	main.c:414: for (i = 0; i < 16; ++i){
                           3433 ;	genAssign
                           3434 ;	genAssign
   0D9F 78 00              3435 	mov	r0,#0x00
   0DA1                    3436 00109$:
                           3437 ;	genCmpLt
                           3438 ;	genCmp
   0DA1 B8 10 00           3439 	cjne	r0,#0x10,00143$
   0DA4                    3440 00143$:
                           3441 ;	genIfxJump
                           3442 ;	Peephole 112.b	changed ljmp to sjmp
                           3443 ;	Peephole 160.b	removed sjmp by inverse jump logic
   0DA4 50 76              3444 	jnc	00134$
                           3445 ;	Peephole 300	removed redundant label 00144$
                           3446 ;	main.c:415: lcdData = EPROM_ByteRead(start_addr & 0xFF, start_addr >> 8);
                           3447 ;	genIpush
   0DA6 C0 04              3448 	push	ar4
   0DA8 C0 05              3449 	push	ar5
                           3450 ;	genAnd
   0DAA 8E 01              3451 	mov	ar1,r6
   0DAC 7C 00              3452 	mov	r4,#0x00
                           3453 ;	genCast
                           3454 ;	genGetByte
   0DAE 90s00r00           3455 	mov	dptr,#_EPROM_ByteRead_PARM_2
   0DB1 EF                 3456 	mov	a,r7
   0DB2 F0                 3457 	movx	@dptr,a
                           3458 ;	genCall
   0DB3 89 82              3459 	mov	dpl,r1
   0DB5 C0 02              3460 	push	ar2
   0DB7 C0 03              3461 	push	ar3
   0DB9 C0 05              3462 	push	ar5
   0DBB C0 06              3463 	push	ar6
   0DBD C0 07              3464 	push	ar7
   0DBF C0 00              3465 	push	ar0
   0DC1 12s00r00           3466 	lcall	_EPROM_ByteRead
   0DC4 AC 82              3467 	mov	r4,dpl
   0DC6 D0 00              3468 	pop	ar0
   0DC8 D0 07              3469 	pop	ar7
   0DCA D0 06              3470 	pop	ar6
   0DCC D0 05              3471 	pop	ar5
   0DCE D0 03              3472 	pop	ar3
   0DD0 D0 02              3473 	pop	ar2
                           3474 ;	main.c:416: printf("%x ", lcdData);
                           3475 ;	genCast
   0DD2 7D 00              3476 	mov	r5,#0x00
                           3477 ;	genIpush
   0DD4 C0 02              3478 	push	ar2
   0DD6 C0 03              3479 	push	ar3
   0DD8 C0 04              3480 	push	ar4
   0DDA C0 05              3481 	push	ar5
   0DDC C0 06              3482 	push	ar6
   0DDE C0 07              3483 	push	ar7
   0DE0 C0 00              3484 	push	ar0
   0DE2 C0 04              3485 	push	ar4
   0DE4 C0 05              3486 	push	ar5
                           3487 ;	genIpush
   0DE6 74rE7              3488 	mov	a,#__str_38
   0DE8 C0 E0              3489 	push	acc
   0DEA 74s04              3490 	mov	a,#(__str_38 >> 8)
   0DEC C0 E0              3491 	push	acc
   0DEE 74 80              3492 	mov	a,#0x80
   0DF0 C0 E0              3493 	push	acc
                           3494 ;	genCall
   0DF2 12s00r00           3495 	lcall	_printf
   0DF5 E5 81              3496 	mov	a,sp
   0DF7 24 FB              3497 	add	a,#0xfb
   0DF9 F5 81              3498 	mov	sp,a
   0DFB D0 00              3499 	pop	ar0
   0DFD D0 07              3500 	pop	ar7
   0DFF D0 06              3501 	pop	ar6
   0E01 D0 05              3502 	pop	ar5
   0E03 D0 04              3503 	pop	ar4
   0E05 D0 03              3504 	pop	ar3
   0E07 D0 02              3505 	pop	ar2
                           3506 ;	main.c:417: start_addr++;
                           3507 ;	genPlus
                           3508 ;     genPlusIncr
   0E09 0E                 3509 	inc	r6
   0E0A BE 00 01           3510 	cjne	r6,#0x00,00145$
   0E0D 0F                 3511 	inc	r7
   0E0E                    3512 00145$:
                           3513 ;	main.c:418: if(start_addr > end_addr){
                           3514 ;	genCmpGt
                           3515 ;	genCmp
   0E0E C3                 3516 	clr	c
   0E0F EA                 3517 	mov	a,r2
   0E10 9E                 3518 	subb	a,r6
   0E11 EB                 3519 	mov	a,r3
   0E12 9F                 3520 	subb	a,r7
                           3521 ;	genIpop
                           3522 ;	genIfx
                           3523 ;	genIfxJump
                           3524 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           3525 ;	Peephole 129.c	optimized condition
   0E13 D0 05              3526 	pop	ar5
   0E15 D0 04              3527 	pop	ar4
   0E17 40 03              3528 	jc	00134$
                           3529 ;	Peephole 300	removed redundant label 00146$
                           3530 ;	main.c:414: for (i = 0; i < 16; ++i){
                           3531 ;	genPlus
                           3532 ;     genPlusIncr
   0E19 08                 3533 	inc	r0
                           3534 ;	Peephole 112.b	changed ljmp to sjmp
   0E1A 80 85              3535 	sjmp	00109$
   0E1C                    3536 00134$:
                           3537 ;	genAssign
   0E1C 90s00r79           3538 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0E1F EE                 3539 	mov	a,r6
   0E20 F0                 3540 	movx	@dptr,a
   0E21 A3                 3541 	inc	dptr
   0E22 EF                 3542 	mov	a,r7
   0E23 F0                 3543 	movx	@dptr,a
                           3544 ;	main.c:422: printf("\r\n");
                           3545 ;	genIpush
   0E24 C0 02              3546 	push	ar2
   0E26 C0 03              3547 	push	ar3
   0E28 C0 04              3548 	push	ar4
   0E2A C0 05              3549 	push	ar5
   0E2C 74rDF              3550 	mov	a,#__str_36
   0E2E C0 E0              3551 	push	acc
   0E30 74s04              3552 	mov	a,#(__str_36 >> 8)
   0E32 C0 E0              3553 	push	acc
   0E34 74 80              3554 	mov	a,#0x80
   0E36 C0 E0              3555 	push	acc
                           3556 ;	genCall
   0E38 12s00r00           3557 	lcall	_printf
   0E3B 15 81              3558 	dec	sp
   0E3D 15 81              3559 	dec	sp
   0E3F 15 81              3560 	dec	sp
   0E41 D0 05              3561 	pop	ar5
   0E43 D0 04              3562 	pop	ar4
   0E45 D0 03              3563 	pop	ar3
   0E47 D0 02              3564 	pop	ar2
   0E49 02s0Dr5E           3565 	ljmp	00113$
                           3566 ;	main.c:426: case 'r':
   0E4C                    3567 00116$:
                           3568 ;	main.c:427: mode = MAIN_MODE;
                           3569 ;	genAssign
   0E4C 90s00r00           3570 	mov	dptr,#_mode
                           3571 ;	Peephole 181	changed mov to clr
   0E4F E4                 3572 	clr	a
   0E50 F0                 3573 	movx	@dptr,a
                           3574 ;	main.c:428: MainMenu();
                           3575 ;	genCall
                           3576 ;	main.c:429: break;
                           3577 ;	main.c:430: case 'H':
                           3578 ;	Peephole 112.b	changed ljmp to sjmp
                           3579 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3580 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E51 02s11rA2           3581 	ljmp	_MainMenu
   0E54                    3582 00117$:
                           3583 ;	main.c:431: EEPROM_Menu();
                           3584 ;	genCall
                           3585 ;	main.c:435: }
                           3586 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0E54 02s0Ar07           3587 	ljmp	_EEPROM_Menu
                           3588 ;
                           3589 ;------------------------------------------------------------
                           3590 ;Allocation info for local variables in function 'CLOCK_Menu'
                           3591 ;------------------------------------------------------------
                           3592 ;------------------------------------------------------------
                           3593 ;	main.c:439: void CLOCK_Menu(void){
                           3594 ;	-----------------------------------------
                           3595 ;	 function CLOCK_Menu
                           3596 ;	-----------------------------------------
   0E57                    3597 _CLOCK_Menu:
                           3598 ;	main.c:440: printf("\r\nIn Clock Mode");
                           3599 ;	genIpush
   0E57 74r28              3600 	mov	a,#__str_56
   0E59 C0 E0              3601 	push	acc
   0E5B 74s07              3602 	mov	a,#(__str_56 >> 8)
   0E5D C0 E0              3603 	push	acc
   0E5F 74 80              3604 	mov	a,#0x80
   0E61 C0 E0              3605 	push	acc
                           3606 ;	genCall
   0E63 12s00r00           3607 	lcall	_printf
   0E66 15 81              3608 	dec	sp
   0E68 15 81              3609 	dec	sp
   0E6A 15 81              3610 	dec	sp
                           3611 ;	main.c:441: printf("\r\nPress 'H' for help");
                           3612 ;	genIpush
   0E6C 74r9F              3613 	mov	a,#__str_4
   0E6E C0 E0              3614 	push	acc
   0E70 74s00              3615 	mov	a,#(__str_4 >> 8)
   0E72 C0 E0              3616 	push	acc
   0E74 74 80              3617 	mov	a,#0x80
   0E76 C0 E0              3618 	push	acc
                           3619 ;	genCall
   0E78 12s00r00           3620 	lcall	_printf
   0E7B 15 81              3621 	dec	sp
   0E7D 15 81              3622 	dec	sp
   0E7F 15 81              3623 	dec	sp
                           3624 ;	main.c:442: printf("\r\nPress 'T' to stop the clock");
                           3625 ;	genIpush
   0E81 74r38              3626 	mov	a,#__str_57
   0E83 C0 E0              3627 	push	acc
   0E85 74s07              3628 	mov	a,#(__str_57 >> 8)
   0E87 C0 E0              3629 	push	acc
   0E89 74 80              3630 	mov	a,#0x80
   0E8B C0 E0              3631 	push	acc
                           3632 ;	genCall
   0E8D 12s00r00           3633 	lcall	_printf
   0E90 15 81              3634 	dec	sp
   0E92 15 81              3635 	dec	sp
   0E94 15 81              3636 	dec	sp
                           3637 ;	main.c:443: printf("\r\nPress 'S' to start the clock again");
                           3638 ;	genIpush
   0E96 74r56              3639 	mov	a,#__str_58
   0E98 C0 E0              3640 	push	acc
   0E9A 74s07              3641 	mov	a,#(__str_58 >> 8)
   0E9C C0 E0              3642 	push	acc
   0E9E 74 80              3643 	mov	a,#0x80
   0EA0 C0 E0              3644 	push	acc
                           3645 ;	genCall
   0EA2 12s00r00           3646 	lcall	_printf
   0EA5 15 81              3647 	dec	sp
   0EA7 15 81              3648 	dec	sp
   0EA9 15 81              3649 	dec	sp
                           3650 ;	main.c:444: printf("\r\nPress 'O' to reset the clock to 0");
                           3651 ;	genIpush
   0EAB 74r7B              3652 	mov	a,#__str_59
   0EAD C0 E0              3653 	push	acc
   0EAF 74s07              3654 	mov	a,#(__str_59 >> 8)
   0EB1 C0 E0              3655 	push	acc
   0EB3 74 80              3656 	mov	a,#0x80
   0EB5 C0 E0              3657 	push	acc
                           3658 ;	genCall
   0EB7 12s00r00           3659 	lcall	_printf
   0EBA 15 81              3660 	dec	sp
   0EBC 15 81              3661 	dec	sp
   0EBE 15 81              3662 	dec	sp
                           3663 ;	main.c:445: printf("\r\nPress 'N' to create a new alarm");
                           3664 ;	genIpush
   0EC0 74r9F              3665 	mov	a,#__str_60
   0EC2 C0 E0              3666 	push	acc
   0EC4 74s07              3667 	mov	a,#(__str_60 >> 8)
   0EC6 C0 E0              3668 	push	acc
   0EC8 74 80              3669 	mov	a,#0x80
   0ECA C0 E0              3670 	push	acc
                           3671 ;	genCall
   0ECC 12s00r00           3672 	lcall	_printf
   0ECF 15 81              3673 	dec	sp
   0ED1 15 81              3674 	dec	sp
   0ED3 15 81              3675 	dec	sp
                           3676 ;	main.c:446: printf("\r\nPress 'C' to view count for each alarm");
                           3677 ;	genIpush
   0ED5 74rC1              3678 	mov	a,#__str_61
   0ED7 C0 E0              3679 	push	acc
   0ED9 74s07              3680 	mov	a,#(__str_61 >> 8)
   0EDB C0 E0              3681 	push	acc
   0EDD 74 80              3682 	mov	a,#0x80
   0EDF C0 E0              3683 	push	acc
                           3684 ;	genCall
   0EE1 12s00r00           3685 	lcall	_printf
   0EE4 15 81              3686 	dec	sp
   0EE6 15 81              3687 	dec	sp
   0EE8 15 81              3688 	dec	sp
                           3689 ;	main.c:447: printf("\r\nPress 'D' to disable an alarm");
                           3690 ;	genIpush
   0EEA 74rEA              3691 	mov	a,#__str_62
   0EEC C0 E0              3692 	push	acc
   0EEE 74s07              3693 	mov	a,#(__str_62 >> 8)
   0EF0 C0 E0              3694 	push	acc
   0EF2 74 80              3695 	mov	a,#0x80
   0EF4 C0 E0              3696 	push	acc
                           3697 ;	genCall
   0EF6 12s00r00           3698 	lcall	_printf
   0EF9 15 81              3699 	dec	sp
   0EFB 15 81              3700 	dec	sp
   0EFD 15 81              3701 	dec	sp
                           3702 ;	main.c:448: printf("\r\nPress 'E' to reenable an alarm");
                           3703 ;	genIpush
   0EFF 74r0A              3704 	mov	a,#__str_63
   0F01 C0 E0              3705 	push	acc
   0F03 74s08              3706 	mov	a,#(__str_63 >> 8)
   0F05 C0 E0              3707 	push	acc
   0F07 74 80              3708 	mov	a,#0x80
   0F09 C0 E0              3709 	push	acc
                           3710 ;	genCall
   0F0B 12s00r00           3711 	lcall	_printf
   0F0E 15 81              3712 	dec	sp
   0F10 15 81              3713 	dec	sp
   0F12 15 81              3714 	dec	sp
                           3715 ;	main.c:449: printf("\r\nPress 'r' to return to main menu\r\n");
                           3716 ;	genIpush
   0F14 74r32              3717 	mov	a,#__str_8
   0F16 C0 E0              3718 	push	acc
   0F18 74s01              3719 	mov	a,#(__str_8 >> 8)
   0F1A C0 E0              3720 	push	acc
   0F1C 74 80              3721 	mov	a,#0x80
   0F1E C0 E0              3722 	push	acc
                           3723 ;	genCall
   0F20 12s00r00           3724 	lcall	_printf
   0F23 15 81              3725 	dec	sp
   0F25 15 81              3726 	dec	sp
   0F27 15 81              3727 	dec	sp
                           3728 ;	Peephole 300	removed redundant label 00101$
   0F29 22                 3729 	ret
                           3730 ;------------------------------------------------------------
                           3731 ;Allocation info for local variables in function 'handleCLOCKMode'
                           3732 ;------------------------------------------------------------
                           3733 ;c                         Allocated with name '_handleCLOCKMode_c_1_1'
                           3734 ;alarm_duration            Allocated with name '_handleCLOCKMode_alarm_duration_1_1'
                           3735 ;i                         Allocated with name '_handleCLOCKMode_i_1_1'
                           3736 ;------------------------------------------------------------
                           3737 ;	main.c:453: void handleCLOCKMode(char c){
                           3738 ;	-----------------------------------------
                           3739 ;	 function handleCLOCKMode
                           3740 ;	-----------------------------------------
   0F2A                    3741 _handleCLOCKMode:
                           3742 ;	genReceive
   0F2A E5 82              3743 	mov	a,dpl
   0F2C 90s00r7D           3744 	mov	dptr,#_handleCLOCKMode_c_1_1
   0F2F F0                 3745 	movx	@dptr,a
                           3746 ;	main.c:456: switch(c){
                           3747 ;	genAssign
   0F30 90s00r7D           3748 	mov	dptr,#_handleCLOCKMode_c_1_1
   0F33 E0                 3749 	movx	a,@dptr
   0F34 FA                 3750 	mov	r2,a
                           3751 ;	genCmpEq
                           3752 ;	gencjneshort
   0F35 BA 43 03           3753 	cjne	r2,#0x43,00147$
   0F38 02s0FrD2           3754 	ljmp	00140$
   0F3B                    3755 00147$:
                           3756 ;	genCmpEq
                           3757 ;	gencjneshort
   0F3B BA 44 03           3758 	cjne	r2,#0x44,00148$
   0F3E 02s10r79           3759 	ljmp	00109$
   0F41                    3760 00148$:
                           3761 ;	genCmpEq
                           3762 ;	gencjneshort
   0F41 BA 45 03           3763 	cjne	r2,#0x45,00149$
   0F44 02s10rFA           3764 	ljmp	00113$
   0F47                    3765 00149$:
                           3766 ;	genCmpEq
                           3767 ;	gencjneshort
   0F47 BA 48 03           3768 	cjne	r2,#0x48,00150$
   0F4A 02s11r9F           3769 	ljmp	00120$
   0F4D                    3770 00150$:
                           3771 ;	genCmpEq
                           3772 ;	gencjneshort
   0F4D BA 4E 02           3773 	cjne	r2,#0x4E,00151$
                           3774 ;	Peephole 112.b	changed ljmp to sjmp
   0F50 80 5E              3775 	sjmp	00104$
   0F52                    3776 00151$:
                           3777 ;	genCmpEq
                           3778 ;	gencjneshort
   0F52 BA 4F 02           3779 	cjne	r2,#0x4F,00152$
                           3780 ;	Peephole 112.b	changed ljmp to sjmp
   0F55 80 41              3781 	sjmp	00103$
   0F57                    3782 00152$:
                           3783 ;	genCmpEq
                           3784 ;	gencjneshort
   0F57 BA 53 02           3785 	cjne	r2,#0x53,00153$
                           3786 ;	Peephole 112.b	changed ljmp to sjmp
   0F5A 80 24              3787 	sjmp	00102$
   0F5C                    3788 00153$:
                           3789 ;	genCmpEq
                           3790 ;	gencjneshort
   0F5C BA 54 02           3791 	cjne	r2,#0x54,00154$
                           3792 ;	Peephole 112.b	changed ljmp to sjmp
   0F5F 80 07              3793 	sjmp	00101$
   0F61                    3794 00154$:
                           3795 ;	genCmpEq
                           3796 ;	gencjneshort
   0F61 BA 72 03           3797 	cjne	r2,#0x72,00155$
   0F64 02s11r97           3798 	ljmp	00119$
   0F67                    3799 00155$:
                           3800 ;	Peephole 251.a	replaced ljmp to ret with ret
   0F67 22                 3801 	ret
                           3802 ;	main.c:457: case 'T':
   0F68                    3803 00101$:
                           3804 ;	main.c:458: printf("\r\nStopping the clock");
                           3805 ;	genIpush
   0F68 74r2B              3806 	mov	a,#__str_64
   0F6A C0 E0              3807 	push	acc
   0F6C 74s08              3808 	mov	a,#(__str_64 >> 8)
   0F6E C0 E0              3809 	push	acc
   0F70 74 80              3810 	mov	a,#0x80
   0F72 C0 E0              3811 	push	acc
                           3812 ;	genCall
   0F74 12s00r00           3813 	lcall	_printf
   0F77 15 81              3814 	dec	sp
   0F79 15 81              3815 	dec	sp
   0F7B 15 81              3816 	dec	sp
                           3817 ;	main.c:459: Clock_Stop();
                           3818 ;	genCall
                           3819 ;	main.c:460: break;
                           3820 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3821 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0F7D 02s00r00           3822 	ljmp	_Clock_Stop
                           3823 ;	main.c:461: case 'S':
   0F80                    3824 00102$:
                           3825 ;	main.c:462: printf("\r\nStarting the clock");
                           3826 ;	genIpush
   0F80 74r40              3827 	mov	a,#__str_65
   0F82 C0 E0              3828 	push	acc
   0F84 74s08              3829 	mov	a,#(__str_65 >> 8)
   0F86 C0 E0              3830 	push	acc
   0F88 74 80              3831 	mov	a,#0x80
   0F8A C0 E0              3832 	push	acc
                           3833 ;	genCall
   0F8C 12s00r00           3834 	lcall	_printf
   0F8F 15 81              3835 	dec	sp
   0F91 15 81              3836 	dec	sp
   0F93 15 81              3837 	dec	sp
                           3838 ;	main.c:463: Clock_Start();
                           3839 ;	genCall
                           3840 ;	main.c:464: break;
                           3841 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3842 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0F95 02s00r00           3843 	ljmp	_Clock_Start
                           3844 ;	main.c:465: case 'O':
   0F98                    3845 00103$:
                           3846 ;	main.c:466: printf("\r\nResetting the clock");
                           3847 ;	genIpush
   0F98 74r55              3848 	mov	a,#__str_66
   0F9A C0 E0              3849 	push	acc
   0F9C 74s08              3850 	mov	a,#(__str_66 >> 8)
   0F9E C0 E0              3851 	push	acc
   0FA0 74 80              3852 	mov	a,#0x80
   0FA2 C0 E0              3853 	push	acc
                           3854 ;	genCall
   0FA4 12s00r00           3855 	lcall	_printf
   0FA7 15 81              3856 	dec	sp
   0FA9 15 81              3857 	dec	sp
   0FAB 15 81              3858 	dec	sp
                           3859 ;	main.c:467: Clock_Reset();
                           3860 ;	genCall
                           3861 ;	main.c:468: break;
                           3862 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3863 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FAD 02s00r00           3864 	ljmp	_Clock_Reset
                           3865 ;	main.c:469: case 'N':
   0FB0                    3866 00104$:
                           3867 ;	main.c:470: printf("\r\nEnter alarm time in seconds:\r\n");
                           3868 ;	genIpush
   0FB0 74r6B              3869 	mov	a,#__str_67
   0FB2 C0 E0              3870 	push	acc
   0FB4 74s08              3871 	mov	a,#(__str_67 >> 8)
   0FB6 C0 E0              3872 	push	acc
   0FB8 74 80              3873 	mov	a,#0x80
   0FBA C0 E0              3874 	push	acc
                           3875 ;	genCall
   0FBC 12s00r00           3876 	lcall	_printf
   0FBF 15 81              3877 	dec	sp
   0FC1 15 81              3878 	dec	sp
   0FC3 15 81              3879 	dec	sp
                           3880 ;	main.c:471: alarm_duration = Serial_GetInteger(5);
                           3881 ;	genCall
                           3882 ;	Peephole 182.b	used 16 bit load of dptr
   0FC5 90 00 05           3883 	mov	dptr,#0x0005
   0FC8 12s00r00           3884 	lcall	_Serial_GetInteger
                           3885 ;	main.c:472: Clock_NewAlarm(alarm_duration);
                           3886 ;	genCall
   0FCB AA 82              3887 	mov	r2,dpl
                           3888 ;	Peephole 177.d	removed redundant move
   0FCD AB 83              3889 	mov  r3,dph
                           3890 ;	Peephole 177.a	removed redundant mov
                           3891 ;	main.c:473: break;
                           3892 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3893 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FCF 02s00r00           3894 	ljmp	_Clock_NewAlarm
                           3895 ;	main.c:475: for (i = 0; i < 3; ++i){
   0FD2                    3896 00140$:
                           3897 ;	genAssign
   0FD2 7A 00              3898 	mov	r2,#0x00
   0FD4                    3899 00123$:
                           3900 ;	genCmpLt
                           3901 ;	genCmp
   0FD4 BA 03 00           3902 	cjne	r2,#0x03,00156$
   0FD7                    3903 00156$:
                           3904 ;	genIfxJump
   0FD7 40 03              3905 	jc	00157$
   0FD9 02s10r63           3906 	ljmp	00126$
   0FDC                    3907 00157$:
                           3908 ;	main.c:476: if (ActiveAlarms[i])
                           3909 ;	genPlus
                           3910 ;	Peephole 236.g	used r2 instead of ar2
   0FDC EA                 3911 	mov	a,r2
   0FDD 24r00              3912 	add	a,#_ActiveAlarms
   0FDF FB                 3913 	mov	r3,a
                           3914 ;	Peephole 181	changed mov to clr
   0FE0 E4                 3915 	clr	a
   0FE1 34s00              3916 	addc	a,#(_ActiveAlarms >> 8)
   0FE3 FC                 3917 	mov	r4,a
                           3918 ;	genPointerGet
                           3919 ;	genFarPointerGet
   0FE4 8B 82              3920 	mov	dpl,r3
   0FE6 8C 83              3921 	mov	dph,r4
   0FE8 E0                 3922 	movx	a,@dptr
                           3923 ;	genIfxJump
                           3924 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0FE9 60 3B              3925 	jz	00107$
                           3926 ;	Peephole 300	removed redundant label 00158$
                           3927 ;	main.c:477: printf("\r\nAlarm %d: %u <Enabled>", i, AlarmCount[i]);
                           3928 ;	genMult
                           3929 ;	genMultOneByte
   0FEB EA                 3930 	mov	a,r2
   0FEC 75 F0 02           3931 	mov	b,#0x02
   0FEF A4                 3932 	mul	ab
                           3933 ;	genPlus
   0FF0 24r00              3934 	add	a,#_AlarmCount
   0FF2 F5 82              3935 	mov	dpl,a
   0FF4 74s00              3936 	mov	a,#(_AlarmCount >> 8)
   0FF6 35 F0              3937 	addc	a,b
   0FF8 F5 83              3938 	mov	dph,a
                           3939 ;	genPointerGet
                           3940 ;	genFarPointerGet
   0FFA E0                 3941 	movx	a,@dptr
   0FFB FB                 3942 	mov	r3,a
   0FFC A3                 3943 	inc	dptr
   0FFD E0                 3944 	movx	a,@dptr
   0FFE FC                 3945 	mov	r4,a
                           3946 ;	genCast
   0FFF 8A 05              3947 	mov	ar5,r2
   1001 7E 00              3948 	mov	r6,#0x00
                           3949 ;	genIpush
   1003 C0 02              3950 	push	ar2
   1005 C0 03              3951 	push	ar3
   1007 C0 04              3952 	push	ar4
                           3953 ;	genIpush
   1009 C0 05              3954 	push	ar5
   100B C0 06              3955 	push	ar6
                           3956 ;	genIpush
   100D 74r8C              3957 	mov	a,#__str_68
   100F C0 E0              3958 	push	acc
   1011 74s08              3959 	mov	a,#(__str_68 >> 8)
   1013 C0 E0              3960 	push	acc
   1015 74 80              3961 	mov	a,#0x80
   1017 C0 E0              3962 	push	acc
                           3963 ;	genCall
   1019 12s00r00           3964 	lcall	_printf
   101C E5 81              3965 	mov	a,sp
   101E 24 F9              3966 	add	a,#0xf9
   1020 F5 81              3967 	mov	sp,a
   1022 D0 02              3968 	pop	ar2
                           3969 ;	Peephole 112.b	changed ljmp to sjmp
   1024 80 39              3970 	sjmp	00125$
   1026                    3971 00107$:
                           3972 ;	main.c:479: printf("\r\nAlarm %d: %u <Disabled>", i, AlarmCount[i]);
                           3973 ;	genMult
                           3974 ;	genMultOneByte
   1026 EA                 3975 	mov	a,r2
   1027 75 F0 02           3976 	mov	b,#0x02
   102A A4                 3977 	mul	ab
                           3978 ;	genPlus
   102B 24r00              3979 	add	a,#_AlarmCount
   102D F5 82              3980 	mov	dpl,a
   102F 74s00              3981 	mov	a,#(_AlarmCount >> 8)
   1031 35 F0              3982 	addc	a,b
   1033 F5 83              3983 	mov	dph,a
                           3984 ;	genPointerGet
                           3985 ;	genFarPointerGet
   1035 E0                 3986 	movx	a,@dptr
   1036 FB                 3987 	mov	r3,a
   1037 A3                 3988 	inc	dptr
   1038 E0                 3989 	movx	a,@dptr
   1039 FC                 3990 	mov	r4,a
                           3991 ;	genCast
   103A 8A 05              3992 	mov	ar5,r2
   103C 7E 00              3993 	mov	r6,#0x00
                           3994 ;	genIpush
   103E C0 02              3995 	push	ar2
   1040 C0 03              3996 	push	ar3
   1042 C0 04              3997 	push	ar4
                           3998 ;	genIpush
   1044 C0 05              3999 	push	ar5
   1046 C0 06              4000 	push	ar6
                           4001 ;	genIpush
   1048 74rA5              4002 	mov	a,#__str_69
   104A C0 E0              4003 	push	acc
   104C 74s08              4004 	mov	a,#(__str_69 >> 8)
   104E C0 E0              4005 	push	acc
   1050 74 80              4006 	mov	a,#0x80
   1052 C0 E0              4007 	push	acc
                           4008 ;	genCall
   1054 12s00r00           4009 	lcall	_printf
   1057 E5 81              4010 	mov	a,sp
   1059 24 F9              4011 	add	a,#0xf9
   105B F5 81              4012 	mov	sp,a
   105D D0 02              4013 	pop	ar2
   105F                    4014 00125$:
                           4015 ;	main.c:475: for (i = 0; i < 3; ++i){
                           4016 ;	genPlus
                           4017 ;     genPlusIncr
   105F 0A                 4018 	inc	r2
   1060 02s0FrD4           4019 	ljmp	00123$
   1063                    4020 00126$:
                           4021 ;	main.c:481: printf("\r\n");
                           4022 ;	genIpush
   1063 74rDF              4023 	mov	a,#__str_36
   1065 C0 E0              4024 	push	acc
   1067 74s04              4025 	mov	a,#(__str_36 >> 8)
   1069 C0 E0              4026 	push	acc
   106B 74 80              4027 	mov	a,#0x80
   106D C0 E0              4028 	push	acc
                           4029 ;	genCall
   106F 12s00r00           4030 	lcall	_printf
   1072 15 81              4031 	dec	sp
   1074 15 81              4032 	dec	sp
   1076 15 81              4033 	dec	sp
                           4034 ;	main.c:482: break;
                           4035 ;	Peephole 251.a	replaced ljmp to ret with ret
   1078 22                 4036 	ret
                           4037 ;	main.c:483: case 'D':
   1079                    4038 00109$:
                           4039 ;	main.c:484: printf("\r\nEnter an alarm number from 0-2 to disable:");
                           4040 ;	genIpush
   1079 74rBF              4041 	mov	a,#__str_70
   107B C0 E0              4042 	push	acc
   107D 74s08              4043 	mov	a,#(__str_70 >> 8)
   107F C0 E0              4044 	push	acc
   1081 74 80              4045 	mov	a,#0x80
   1083 C0 E0              4046 	push	acc
                           4047 ;	genCall
   1085 12s00r00           4048 	lcall	_printf
   1088 15 81              4049 	dec	sp
   108A 15 81              4050 	dec	sp
   108C 15 81              4051 	dec	sp
                           4052 ;	main.c:485: i = Serial_GetInteger(1);
                           4053 ;	genCall
                           4054 ;	Peephole 182.b	used 16 bit load of dptr
   108E 90 00 01           4055 	mov	dptr,#0x0001
   1091 12s00r00           4056 	lcall	_Serial_GetInteger
   1094 AA 82              4057 	mov	r2,dpl
   1096 AB 83              4058 	mov	r3,dph
                           4059 ;	genCast
   1098 90s00r7E           4060 	mov	dptr,#_handleCLOCKMode_i_1_1
   109B EA                 4061 	mov	a,r2
   109C F0                 4062 	movx	@dptr,a
                           4063 ;	main.c:486: while(i > 2){
   109D                    4064 00110$:
                           4065 ;	genAssign
   109D 90s00r7E           4066 	mov	dptr,#_handleCLOCKMode_i_1_1
   10A0 E0                 4067 	movx	a,@dptr
                           4068 ;	genCmpGt
                           4069 ;	genCmp
                           4070 ;	genIfxJump
                           4071 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           4072 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   10A1 FA                 4073 	mov  r2,a
                           4074 ;	Peephole 177.a	removed redundant mov
   10A2 24 FD              4075 	add	a,#0xff - 0x02
   10A4 50 26              4076 	jnc	00112$
                           4077 ;	Peephole 300	removed redundant label 00159$
                           4078 ;	main.c:487: printf("\r\nEnter an alarm number from 0-2 to disable:");
                           4079 ;	genIpush
   10A6 74rBF              4080 	mov	a,#__str_70
   10A8 C0 E0              4081 	push	acc
   10AA 74s08              4082 	mov	a,#(__str_70 >> 8)
   10AC C0 E0              4083 	push	acc
   10AE 74 80              4084 	mov	a,#0x80
   10B0 C0 E0              4085 	push	acc
                           4086 ;	genCall
   10B2 12s00r00           4087 	lcall	_printf
   10B5 15 81              4088 	dec	sp
   10B7 15 81              4089 	dec	sp
   10B9 15 81              4090 	dec	sp
                           4091 ;	main.c:488: i = Serial_GetInteger(1);
                           4092 ;	genCall
                           4093 ;	Peephole 182.b	used 16 bit load of dptr
   10BB 90 00 01           4094 	mov	dptr,#0x0001
   10BE 12s00r00           4095 	lcall	_Serial_GetInteger
   10C1 AB 82              4096 	mov	r3,dpl
   10C3 AC 83              4097 	mov	r4,dph
                           4098 ;	genCast
   10C5 90s00r7E           4099 	mov	dptr,#_handleCLOCKMode_i_1_1
   10C8 EB                 4100 	mov	a,r3
   10C9 F0                 4101 	movx	@dptr,a
                           4102 ;	Peephole 112.b	changed ljmp to sjmp
   10CA 80 D1              4103 	sjmp	00110$
   10CC                    4104 00112$:
                           4105 ;	main.c:490: printf("\r\nAlarm %d disabled\r\n", i);
                           4106 ;	genCast
   10CC 8A 03              4107 	mov	ar3,r2
   10CE 7C 00              4108 	mov	r4,#0x00
                           4109 ;	genIpush
   10D0 C0 02              4110 	push	ar2
   10D2 C0 03              4111 	push	ar3
   10D4 C0 04              4112 	push	ar4
                           4113 ;	genIpush
   10D6 74rEC              4114 	mov	a,#__str_71
   10D8 C0 E0              4115 	push	acc
   10DA 74s08              4116 	mov	a,#(__str_71 >> 8)
   10DC C0 E0              4117 	push	acc
   10DE 74 80              4118 	mov	a,#0x80
   10E0 C0 E0              4119 	push	acc
                           4120 ;	genCall
   10E2 12s00r00           4121 	lcall	_printf
   10E5 E5 81              4122 	mov	a,sp
   10E7 24 FB              4123 	add	a,#0xfb
   10E9 F5 81              4124 	mov	sp,a
   10EB D0 02              4125 	pop	ar2
                           4126 ;	main.c:491: ActiveAlarms[i] = 0;
                           4127 ;	genPlus
                           4128 ;	Peephole 236.g	used r2 instead of ar2
   10ED EA                 4129 	mov	a,r2
   10EE 24r00              4130 	add	a,#_ActiveAlarms
   10F0 F5 82              4131 	mov	dpl,a
                           4132 ;	Peephole 181	changed mov to clr
   10F2 E4                 4133 	clr	a
   10F3 34s00              4134 	addc	a,#(_ActiveAlarms >> 8)
   10F5 F5 83              4135 	mov	dph,a
                           4136 ;	genPointerSet
                           4137 ;     genFarPointerSet
                           4138 ;	Peephole 181	changed mov to clr
   10F7 E4                 4139 	clr	a
   10F8 F0                 4140 	movx	@dptr,a
                           4141 ;	main.c:492: break;
                           4142 ;	Peephole 251.a	replaced ljmp to ret with ret
   10F9 22                 4143 	ret
                           4144 ;	main.c:493: case 'E':
   10FA                    4145 00113$:
                           4146 ;	main.c:494: printf("\r\nEnter an alarm number from 0-2 to enable:");
                           4147 ;	genIpush
   10FA 74r02              4148 	mov	a,#__str_72
   10FC C0 E0              4149 	push	acc
   10FE 74s09              4150 	mov	a,#(__str_72 >> 8)
   1100 C0 E0              4151 	push	acc
   1102 74 80              4152 	mov	a,#0x80
   1104 C0 E0              4153 	push	acc
                           4154 ;	genCall
   1106 12s00r00           4155 	lcall	_printf
   1109 15 81              4156 	dec	sp
   110B 15 81              4157 	dec	sp
   110D 15 81              4158 	dec	sp
                           4159 ;	main.c:495: i = Serial_GetInteger(1);
                           4160 ;	genCall
                           4161 ;	Peephole 182.b	used 16 bit load of dptr
   110F 90 00 01           4162 	mov	dptr,#0x0001
   1112 12s00r00           4163 	lcall	_Serial_GetInteger
   1115 AA 82              4164 	mov	r2,dpl
   1117 AB 83              4165 	mov	r3,dph
                           4166 ;	genCast
   1119 90s00r7E           4167 	mov	dptr,#_handleCLOCKMode_i_1_1
   111C EA                 4168 	mov	a,r2
   111D F0                 4169 	movx	@dptr,a
                           4170 ;	main.c:496: while(i > 2){
   111E                    4171 00114$:
                           4172 ;	genAssign
   111E 90s00r7E           4173 	mov	dptr,#_handleCLOCKMode_i_1_1
   1121 E0                 4174 	movx	a,@dptr
                           4175 ;	genCmpGt
                           4176 ;	genCmp
                           4177 ;	genIfxJump
                           4178 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           4179 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   1122 FA                 4180 	mov  r2,a
                           4181 ;	Peephole 177.a	removed redundant mov
   1123 24 FD              4182 	add	a,#0xff - 0x02
   1125 50 26              4183 	jnc	00116$
                           4184 ;	Peephole 300	removed redundant label 00160$
                           4185 ;	main.c:497: printf("\r\nEnter an alarm number from 0-2 to enable:");
                           4186 ;	genIpush
   1127 74r02              4187 	mov	a,#__str_72
   1129 C0 E0              4188 	push	acc
   112B 74s09              4189 	mov	a,#(__str_72 >> 8)
   112D C0 E0              4190 	push	acc
   112F 74 80              4191 	mov	a,#0x80
   1131 C0 E0              4192 	push	acc
                           4193 ;	genCall
   1133 12s00r00           4194 	lcall	_printf
   1136 15 81              4195 	dec	sp
   1138 15 81              4196 	dec	sp
   113A 15 81              4197 	dec	sp
                           4198 ;	main.c:498: i = Serial_GetInteger(1);
                           4199 ;	genCall
                           4200 ;	Peephole 182.b	used 16 bit load of dptr
   113C 90 00 01           4201 	mov	dptr,#0x0001
   113F 12s00r00           4202 	lcall	_Serial_GetInteger
   1142 AB 82              4203 	mov	r3,dpl
   1144 AC 83              4204 	mov	r4,dph
                           4205 ;	genCast
   1146 90s00r7E           4206 	mov	dptr,#_handleCLOCKMode_i_1_1
   1149 EB                 4207 	mov	a,r3
   114A F0                 4208 	movx	@dptr,a
                           4209 ;	Peephole 112.b	changed ljmp to sjmp
   114B 80 D1              4210 	sjmp	00114$
   114D                    4211 00116$:
                           4212 ;	main.c:500: printf("\r\nAlarm %d enabled\r\n", i);
                           4213 ;	genCast
   114D 8A 03              4214 	mov	ar3,r2
   114F 7C 00              4215 	mov	r4,#0x00
                           4216 ;	genIpush
   1151 C0 02              4217 	push	ar2
   1153 C0 03              4218 	push	ar3
   1155 C0 04              4219 	push	ar4
                           4220 ;	genIpush
   1157 74r2E              4221 	mov	a,#__str_73
   1159 C0 E0              4222 	push	acc
   115B 74s09              4223 	mov	a,#(__str_73 >> 8)
   115D C0 E0              4224 	push	acc
   115F 74 80              4225 	mov	a,#0x80
   1161 C0 E0              4226 	push	acc
                           4227 ;	genCall
   1163 12s00r00           4228 	lcall	_printf
   1166 E5 81              4229 	mov	a,sp
   1168 24 FB              4230 	add	a,#0xfb
   116A F5 81              4231 	mov	sp,a
   116C D0 02              4232 	pop	ar2
                           4233 ;	main.c:501: if (AlarmCount[i] != 0)
                           4234 ;	genMult
                           4235 ;	genMultOneByte
   116E EA                 4236 	mov	a,r2
   116F 75 F0 02           4237 	mov	b,#0x02
   1172 A4                 4238 	mul	ab
                           4239 ;	genPlus
   1173 24r00              4240 	add	a,#_AlarmCount
   1175 F5 82              4241 	mov	dpl,a
   1177 74s00              4242 	mov	a,#(_AlarmCount >> 8)
   1179 35 F0              4243 	addc	a,b
   117B F5 83              4244 	mov	dph,a
                           4245 ;	genPointerGet
                           4246 ;	genFarPointerGet
   117D E0                 4247 	movx	a,@dptr
   117E FB                 4248 	mov	r3,a
   117F A3                 4249 	inc	dptr
   1180 E0                 4250 	movx	a,@dptr
   1181 FC                 4251 	mov	r4,a
                           4252 ;	genCmpEq
                           4253 ;	gencjneshort
   1182 BB 00 04           4254 	cjne	r3,#0x00,00161$
   1185 BC 00 01           4255 	cjne	r4,#0x00,00161$
                           4256 ;	Peephole 112.b	changed ljmp to sjmp
                           4257 ;	Peephole 251.b	replaced sjmp to ret with ret
   1188 22                 4258 	ret
   1189                    4259 00161$:
                           4260 ;	main.c:502: ActiveAlarms[i] = 1;
                           4261 ;	genPlus
                           4262 ;	Peephole 236.g	used r2 instead of ar2
   1189 EA                 4263 	mov	a,r2
   118A 24r00              4264 	add	a,#_ActiveAlarms
   118C F5 82              4265 	mov	dpl,a
                           4266 ;	Peephole 181	changed mov to clr
   118E E4                 4267 	clr	a
   118F 34s00              4268 	addc	a,#(_ActiveAlarms >> 8)
   1191 F5 83              4269 	mov	dph,a
                           4270 ;	genPointerSet
                           4271 ;     genFarPointerSet
   1193 74 01              4272 	mov	a,#0x01
   1195 F0                 4273 	movx	@dptr,a
                           4274 ;	main.c:503: break;
                           4275 ;	main.c:504: case 'r':
                           4276 ;	Peephole 112.b	changed ljmp to sjmp
                           4277 ;	Peephole 251.b	replaced sjmp to ret with ret
   1196 22                 4278 	ret
   1197                    4279 00119$:
                           4280 ;	main.c:505: mode = MAIN_MODE;
                           4281 ;	genAssign
   1197 90s00r00           4282 	mov	dptr,#_mode
                           4283 ;	Peephole 181	changed mov to clr
   119A E4                 4284 	clr	a
   119B F0                 4285 	movx	@dptr,a
                           4286 ;	main.c:506: MainMenu();
                           4287 ;	genCall
                           4288 ;	main.c:507: break;
                           4289 ;	main.c:508: case 'H':
                           4290 ;	Peephole 112.b	changed ljmp to sjmp
                           4291 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4292 ;	Peephole 253.a	replaced lcall/ret with ljmp
   119C 02s11rA2           4293 	ljmp	_MainMenu
   119F                    4294 00120$:
                           4295 ;	main.c:509: CLOCK_Menu();
                           4296 ;	genCall
                           4297 ;	main.c:513: }
                           4298 ;	Peephole 253.b	replaced lcall/ret with ljmp
   119F 02s0Er57           4299 	ljmp	_CLOCK_Menu
                           4300 ;
                           4301 ;------------------------------------------------------------
                           4302 ;Allocation info for local variables in function 'MainMenu'
                           4303 ;------------------------------------------------------------
                           4304 ;------------------------------------------------------------
                           4305 ;	main.c:517: void MainMenu(void){
                           4306 ;	-----------------------------------------
                           4307 ;	 function MainMenu
                           4308 ;	-----------------------------------------
   11A2                    4309 _MainMenu:
                           4310 ;	main.c:518: printf("\r\n***************");
                           4311 ;	genIpush
   11A2 74r43              4312 	mov	a,#__str_74
   11A4 C0 E0              4313 	push	acc
   11A6 74s09              4314 	mov	a,#(__str_74 >> 8)
   11A8 C0 E0              4315 	push	acc
   11AA 74 80              4316 	mov	a,#0x80
   11AC C0 E0              4317 	push	acc
                           4318 ;	genCall
   11AE 12s00r00           4319 	lcall	_printf
   11B1 15 81              4320 	dec	sp
   11B3 15 81              4321 	dec	sp
   11B5 15 81              4322 	dec	sp
                           4323 ;	main.c:519: printf("\r\n    Menu\r\n");
                           4324 ;	genIpush
   11B7 74r55              4325 	mov	a,#__str_75
   11B9 C0 E0              4326 	push	acc
   11BB 74s09              4327 	mov	a,#(__str_75 >> 8)
   11BD C0 E0              4328 	push	acc
   11BF 74 80              4329 	mov	a,#0x80
   11C1 C0 E0              4330 	push	acc
                           4331 ;	genCall
   11C3 12s00r00           4332 	lcall	_printf
   11C6 15 81              4333 	dec	sp
   11C8 15 81              4334 	dec	sp
   11CA 15 81              4335 	dec	sp
                           4336 ;	main.c:520: printf("\r\n***************");
                           4337 ;	genIpush
   11CC 74r43              4338 	mov	a,#__str_74
   11CE C0 E0              4339 	push	acc
   11D0 74s09              4340 	mov	a,#(__str_74 >> 8)
   11D2 C0 E0              4341 	push	acc
   11D4 74 80              4342 	mov	a,#0x80
   11D6 C0 E0              4343 	push	acc
                           4344 ;	genCall
   11D8 12s00r00           4345 	lcall	_printf
   11DB 15 81              4346 	dec	sp
   11DD 15 81              4347 	dec	sp
   11DF 15 81              4348 	dec	sp
                           4349 ;	main.c:521: printf("\r\nPress 'H' to show the help menu");
                           4350 ;	genIpush
   11E1 74r62              4351 	mov	a,#__str_76
   11E3 C0 E0              4352 	push	acc
   11E5 74s09              4353 	mov	a,#(__str_76 >> 8)
   11E7 C0 E0              4354 	push	acc
   11E9 74 80              4355 	mov	a,#0x80
   11EB C0 E0              4356 	push	acc
                           4357 ;	genCall
   11ED 12s00r00           4358 	lcall	_printf
   11F0 15 81              4359 	dec	sp
   11F2 15 81              4360 	dec	sp
   11F4 15 81              4361 	dec	sp
                           4362 ;	main.c:522: printf("\r\nPress 'L' to enter LCD control mode");
                           4363 ;	genIpush
   11F6 74r84              4364 	mov	a,#__str_77
   11F8 C0 E0              4365 	push	acc
   11FA 74s09              4366 	mov	a,#(__str_77 >> 8)
   11FC C0 E0              4367 	push	acc
   11FE 74 80              4368 	mov	a,#0x80
   1200 C0 E0              4369 	push	acc
                           4370 ;	genCall
   1202 12s00r00           4371 	lcall	_printf
   1205 15 81              4372 	dec	sp
   1207 15 81              4373 	dec	sp
   1209 15 81              4374 	dec	sp
                           4375 ;	main.c:523: printf("\r\nPress 'E' to enter EEPROM control mode");
                           4376 ;	genIpush
   120B 74rAA              4377 	mov	a,#__str_78
   120D C0 E0              4378 	push	acc
   120F 74s09              4379 	mov	a,#(__str_78 >> 8)
   1211 C0 E0              4380 	push	acc
   1213 74 80              4381 	mov	a,#0x80
   1215 C0 E0              4382 	push	acc
                           4383 ;	genCall
   1217 12s00r00           4384 	lcall	_printf
   121A 15 81              4385 	dec	sp
   121C 15 81              4386 	dec	sp
   121E 15 81              4387 	dec	sp
                           4388 ;	main.c:524: printf("\r\nPress 'C' to enter Clock control mode");
                           4389 ;	genIpush
   1220 74rD3              4390 	mov	a,#__str_79
   1222 C0 E0              4391 	push	acc
   1224 74s09              4392 	mov	a,#(__str_79 >> 8)
   1226 C0 E0              4393 	push	acc
   1228 74 80              4394 	mov	a,#0x80
   122A C0 E0              4395 	push	acc
                           4396 ;	genCall
   122C 12s00r00           4397 	lcall	_printf
   122F 15 81              4398 	dec	sp
   1231 15 81              4399 	dec	sp
   1233 15 81              4400 	dec	sp
                           4401 ;	main.c:525: printf("\r\nPress 'G' to enter Custom Code control mode");
                           4402 ;	genIpush
   1235 74rFB              4403 	mov	a,#__str_80
   1237 C0 E0              4404 	push	acc
   1239 74s09              4405 	mov	a,#(__str_80 >> 8)
   123B C0 E0              4406 	push	acc
   123D 74 80              4407 	mov	a,#0x80
   123F C0 E0              4408 	push	acc
                           4409 ;	genCall
   1241 12s00r00           4410 	lcall	_printf
   1244 15 81              4411 	dec	sp
   1246 15 81              4412 	dec	sp
   1248 15 81              4413 	dec	sp
                           4414 ;	main.c:526: printf("\r\nPress 'P' to enter PCF I/O expander control mode\r\n");
                           4415 ;	genIpush
   124A 74r29              4416 	mov	a,#__str_81
   124C C0 E0              4417 	push	acc
   124E 74s0A              4418 	mov	a,#(__str_81 >> 8)
   1250 C0 E0              4419 	push	acc
   1252 74 80              4420 	mov	a,#0x80
   1254 C0 E0              4421 	push	acc
                           4422 ;	genCall
   1256 12s00r00           4423 	lcall	_printf
   1259 15 81              4424 	dec	sp
   125B 15 81              4425 	dec	sp
   125D 15 81              4426 	dec	sp
                           4427 ;	Peephole 300	removed redundant label 00101$
   125F 22                 4428 	ret
                           4429 ;------------------------------------------------------------
                           4430 ;Allocation info for local variables in function 'handleMAINMode'
                           4431 ;------------------------------------------------------------
                           4432 ;c                         Allocated with name '_handleMAINMode_c_1_1'
                           4433 ;------------------------------------------------------------
                           4434 ;	main.c:529: void handleMAINMode(char c){
                           4435 ;	-----------------------------------------
                           4436 ;	 function handleMAINMode
                           4437 ;	-----------------------------------------
   1260                    4438 _handleMAINMode:
                           4439 ;	genReceive
   1260 E5 82              4440 	mov	a,dpl
   1262 90s00r7F           4441 	mov	dptr,#_handleMAINMode_c_1_1
   1265 F0                 4442 	movx	@dptr,a
                           4443 ;	main.c:530: switch(c){
                           4444 ;	genAssign
   1266 90s00r7F           4445 	mov	dptr,#_handleMAINMode_c_1_1
   1269 E0                 4446 	movx	a,@dptr
   126A FA                 4447 	mov	r2,a
                           4448 ;	genCmpEq
                           4449 ;	gencjneshort
   126B BA 43 02           4450 	cjne	r2,#0x43,00117$
                           4451 ;	Peephole 112.b	changed ljmp to sjmp
   126E 80 2E              4452 	sjmp	00104$
   1270                    4453 00117$:
                           4454 ;	genCmpEq
                           4455 ;	gencjneshort
   1270 BA 45 02           4456 	cjne	r2,#0x45,00118$
                           4457 ;	Peephole 112.b	changed ljmp to sjmp
   1273 80 20              4458 	sjmp	00103$
   1275                    4459 00118$:
                           4460 ;	genCmpEq
                           4461 ;	gencjneshort
   1275 BA 47 02           4462 	cjne	r2,#0x47,00119$
                           4463 ;	Peephole 112.b	changed ljmp to sjmp
   1278 80 2D              4464 	sjmp	00105$
   127A                    4465 00119$:
                           4466 ;	genCmpEq
                           4467 ;	gencjneshort
   127A BA 48 02           4468 	cjne	r2,#0x48,00120$
                           4469 ;	Peephole 112.b	changed ljmp to sjmp
   127D 80 0A              4470 	sjmp	00101$
   127F                    4471 00120$:
                           4472 ;	genCmpEq
                           4473 ;	gencjneshort
   127F BA 4C 02           4474 	cjne	r2,#0x4C,00121$
                           4475 ;	Peephole 112.b	changed ljmp to sjmp
   1282 80 08              4476 	sjmp	00102$
   1284                    4477 00121$:
                           4478 ;	genCmpEq
                           4479 ;	gencjneshort
                           4480 ;	Peephole 112.b	changed ljmp to sjmp
                           4481 ;	main.c:531: case 'H':
                           4482 ;	Peephole 112.b	changed ljmp to sjmp
                           4483 ;	Peephole 198.b	optimized misc jump sequence
   1284 BA 50 32           4484 	cjne	r2,#0x50,00109$
   1287 80 27              4485 	sjmp	00106$
                           4486 ;	Peephole 300	removed redundant label 00122$
   1289                    4487 00101$:
                           4488 ;	main.c:532: MainMenu();
                           4489 ;	genCall
                           4490 ;	main.c:533: break;
                           4491 ;	main.c:534: case 'L':
                           4492 ;	Peephole 112.b	changed ljmp to sjmp
                           4493 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4494 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1289 02s11rA2           4495 	ljmp	_MainMenu
   128C                    4496 00102$:
                           4497 ;	main.c:535: mode = LCD_MODE;
                           4498 ;	genAssign
   128C 90s00r00           4499 	mov	dptr,#_mode
   128F 74 01              4500 	mov	a,#0x01
   1291 F0                 4501 	movx	@dptr,a
                           4502 ;	main.c:536: LCD_Menu();
                           4503 ;	genCall
                           4504 ;	main.c:537: break;
                           4505 ;	main.c:538: case 'E':
                           4506 ;	Peephole 112.b	changed ljmp to sjmp
                           4507 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4508 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1292 02s03r94           4509 	ljmp	_LCD_Menu
   1295                    4510 00103$:
                           4511 ;	main.c:539: mode = EEPROM_MODE;
                           4512 ;	genAssign
   1295 90s00r00           4513 	mov	dptr,#_mode
   1298 74 02              4514 	mov	a,#0x02
   129A F0                 4515 	movx	@dptr,a
                           4516 ;	main.c:540: EEPROM_Menu();
                           4517 ;	genCall
                           4518 ;	main.c:541: break;
                           4519 ;	main.c:542: case 'C':
                           4520 ;	Peephole 112.b	changed ljmp to sjmp
                           4521 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4522 ;	Peephole 253.a	replaced lcall/ret with ljmp
   129B 02s0Ar07           4523 	ljmp	_EEPROM_Menu
   129E                    4524 00104$:
                           4525 ;	main.c:543: mode = CLOCK_MODE;
                           4526 ;	genAssign
   129E 90s00r00           4527 	mov	dptr,#_mode
   12A1 74 03              4528 	mov	a,#0x03
   12A3 F0                 4529 	movx	@dptr,a
                           4530 ;	main.c:544: CLOCK_Menu();
                           4531 ;	genCall
                           4532 ;	main.c:545: break;
                           4533 ;	main.c:546: case 'G':
                           4534 ;	Peephole 112.b	changed ljmp to sjmp
                           4535 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4536 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12A4 02s0Er57           4537 	ljmp	_CLOCK_Menu
   12A7                    4538 00105$:
                           4539 ;	main.c:547: mode = CG_MODE;
                           4540 ;	genAssign
   12A7 90s00r00           4541 	mov	dptr,#_mode
   12AA 74 04              4542 	mov	a,#0x04
   12AC F0                 4543 	movx	@dptr,a
                           4544 ;	main.c:548: CG_Menu();
                           4545 ;	genCall
                           4546 ;	main.c:549: break;
                           4547 ;	main.c:550: case 'P':
                           4548 ;	Peephole 112.b	changed ljmp to sjmp
                           4549 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4550 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12AD 02s02r3F           4551 	ljmp	_CG_Menu
   12B0                    4552 00106$:
                           4553 ;	main.c:551: mode = PCF_MODE;
                           4554 ;	genAssign
   12B0 90s00r00           4555 	mov	dptr,#_mode
   12B3 74 05              4556 	mov	a,#0x05
   12B5 F0                 4557 	movx	@dptr,a
                           4558 ;	main.c:552: PCF_Menu();
                           4559 ;	genCall
                           4560 ;	main.c:555: }
                           4561 ;	Peephole 253.c	replaced lcall with ljmp
   12B6 02s00rE8           4562 	ljmp	_PCF_Menu
   12B9                    4563 00109$:
   12B9 22                 4564 	ret
                           4565 ;------------------------------------------------------------
                           4566 ;Allocation info for local variables in function 'handleInput'
                           4567 ;------------------------------------------------------------
                           4568 ;c                         Allocated with name '_handleInput_c_1_1'
                           4569 ;------------------------------------------------------------
                           4570 ;	main.c:562: void handleInput(char c){
                           4571 ;	-----------------------------------------
                           4572 ;	 function handleInput
                           4573 ;	-----------------------------------------
   12BA                    4574 _handleInput:
                           4575 ;	genReceive
   12BA E5 82              4576 	mov	a,dpl
   12BC 90s00r80           4577 	mov	dptr,#_handleInput_c_1_1
   12BF F0                 4578 	movx	@dptr,a
                           4579 ;	main.c:563: switch(mode){
                           4580 ;	genAssign
   12C0 90s00r00           4581 	mov	dptr,#_mode
   12C3 E0                 4582 	movx	a,@dptr
                           4583 ;	genCmpGt
                           4584 ;	genCmp
                           4585 ;	genIfxJump
                           4586 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   12C4 FA                 4587 	mov  r2,a
                           4588 ;	Peephole 177.a	removed redundant mov
   12C5 24 FA              4589 	add	a,#0xff - 0x05
                           4590 ;	Peephole 112.b	changed ljmp to sjmp
                           4591 ;	Peephole 160.a	removed sjmp by inverse jump logic
   12C7 40 55              4592 	jc	00108$
                           4593 ;	Peephole 300	removed redundant label 00111$
                           4594 ;	genJumpTab
   12C9 EA                 4595 	mov	a,r2
                           4596 ;	Peephole 254	optimized left shift
   12CA 2A                 4597 	add	a,r2
   12CB 2A                 4598 	add	a,r2
   12CC 90s12rD0           4599 	mov	dptr,#00112$
   12CF 73                 4600 	jmp	@a+dptr
   12D0                    4601 00112$:
   12D0 02s12rE2           4602 	ljmp	00101$
   12D3 02s12rEC           4603 	ljmp	00102$
   12D6 02s12rF6           4604 	ljmp	00103$
   12D9 02s13r00           4605 	ljmp	00104$
   12DC 02s13r0A           4606 	ljmp	00105$
   12DF 02s13r14           4607 	ljmp	00106$
                           4608 ;	main.c:564: case MAIN_MODE:
   12E2                    4609 00101$:
                           4610 ;	main.c:565: handleMAINMode(c);
                           4611 ;	genAssign
   12E2 90s00r80           4612 	mov	dptr,#_handleInput_c_1_1
   12E5 E0                 4613 	movx	a,@dptr
                           4614 ;	genCall
   12E6 FA                 4615 	mov	r2,a
                           4616 ;	Peephole 244.c	loading dpl from a instead of r2
   12E7 F5 82              4617 	mov	dpl,a
                           4618 ;	main.c:566: break;
                           4619 ;	main.c:567: case LCD_MODE:
                           4620 ;	Peephole 112.b	changed ljmp to sjmp
                           4621 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4622 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12E9 02s12r60           4623 	ljmp	_handleMAINMode
   12EC                    4624 00102$:
                           4625 ;	main.c:568: handleLCDMode(c);
                           4626 ;	genAssign
   12EC 90s00r80           4627 	mov	dptr,#_handleInput_c_1_1
   12EF E0                 4628 	movx	a,@dptr
                           4629 ;	genCall
   12F0 FA                 4630 	mov	r2,a
                           4631 ;	Peephole 244.c	loading dpl from a instead of r2
   12F1 F5 82              4632 	mov	dpl,a
                           4633 ;	main.c:569: break;
                           4634 ;	main.c:570: case EEPROM_MODE:
                           4635 ;	Peephole 112.b	changed ljmp to sjmp
                           4636 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4637 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12F3 02s04r7C           4638 	ljmp	_handleLCDMode
   12F6                    4639 00103$:
                           4640 ;	main.c:571: handleEEPROMMode(c);
                           4641 ;	genAssign
   12F6 90s00r80           4642 	mov	dptr,#_handleInput_c_1_1
   12F9 E0                 4643 	movx	a,@dptr
                           4644 ;	genCall
   12FA FA                 4645 	mov	r2,a
                           4646 ;	Peephole 244.c	loading dpl from a instead of r2
   12FB F5 82              4647 	mov	dpl,a
                           4648 ;	main.c:572: break;
                           4649 ;	main.c:573: case CLOCK_MODE:
                           4650 ;	Peephole 112.b	changed ljmp to sjmp
                           4651 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4652 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12FD 02s0Ar9B           4653 	ljmp	_handleEEPROMMode
   1300                    4654 00104$:
                           4655 ;	main.c:574: handleCLOCKMode(c);
                           4656 ;	genAssign
   1300 90s00r80           4657 	mov	dptr,#_handleInput_c_1_1
   1303 E0                 4658 	movx	a,@dptr
                           4659 ;	genCall
   1304 FA                 4660 	mov	r2,a
                           4661 ;	Peephole 244.c	loading dpl from a instead of r2
   1305 F5 82              4662 	mov	dpl,a
                           4663 ;	main.c:575: break;
                           4664 ;	main.c:576: case CG_MODE:
                           4665 ;	Peephole 112.b	changed ljmp to sjmp
                           4666 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4667 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1307 02s0Fr2A           4668 	ljmp	_handleCLOCKMode
   130A                    4669 00105$:
                           4670 ;	main.c:577: handleCGMode(c);
                           4671 ;	genAssign
   130A 90s00r80           4672 	mov	dptr,#_handleInput_c_1_1
   130D E0                 4673 	movx	a,@dptr
                           4674 ;	genCall
   130E FA                 4675 	mov	r2,a
                           4676 ;	Peephole 244.c	loading dpl from a instead of r2
   130F F5 82              4677 	mov	dpl,a
                           4678 ;	main.c:578: break;
                           4679 ;	main.c:579: case PCF_MODE:
                           4680 ;	Peephole 112.b	changed ljmp to sjmp
                           4681 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4682 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1311 02s02rD3           4683 	ljmp	_handleCGMode
   1314                    4684 00106$:
                           4685 ;	main.c:580: handlePCFMode(c);
                           4686 ;	genAssign
   1314 90s00r80           4687 	mov	dptr,#_handleInput_c_1_1
   1317 E0                 4688 	movx	a,@dptr
                           4689 ;	genCall
   1318 FA                 4690 	mov	r2,a
                           4691 ;	Peephole 244.c	loading dpl from a instead of r2
   1319 F5 82              4692 	mov	dpl,a
                           4693 ;	main.c:582: }
                           4694 ;	Peephole 253.c	replaced lcall with ljmp
   131B 02s01r67           4695 	ljmp	_handlePCFMode
   131E                    4696 00108$:
   131E 22                 4697 	ret
                           4698 ;------------------------------------------------------------
                           4699 ;Allocation info for local variables in function 'main'
                           4700 ;------------------------------------------------------------
                           4701 ;c                         Allocated with name '_main_c_2_2'
                           4702 ;i                         Allocated with name '_main_i_2_2'
                           4703 ;------------------------------------------------------------
                           4704 ;	main.c:588: void main(void)
                           4705 ;	-----------------------------------------
                           4706 ;	 function main
                           4707 ;	-----------------------------------------
   131F                    4708 _main:
                           4709 ;	main.c:590: Serial_Init();
                           4710 ;	genCall
   131F 12s00r00           4711 	lcall	_Serial_Init
                           4712 ;	main.c:591: EPROM_Init();
                           4713 ;	genCall
   1322 12s00r00           4714 	lcall	_EPROM_Init
                           4715 ;	main.c:592: PCF_Init();
                           4716 ;	genCall
   1325 12s00r00           4717 	lcall	_PCF_Init
                           4718 ;	main.c:593: LCD_Init();
                           4719 ;	genCall
   1328 12s00r00           4720 	lcall	_LCD_Init
                           4721 ;	main.c:594: P1_3 = 1;
                           4722 ;	genAssign
   132B D2 93              4723 	setb	_P1_3
                           4724 ;	main.c:596: Timer0_Init();
                           4725 ;	genCall
   132D 12s00r00           4726 	lcall	_Timer0_Init
                           4727 ;	main.c:597: mode = MAIN_MODE;
                           4728 ;	genAssign
   1330 90s00r00           4729 	mov	dptr,#_mode
                           4730 ;	Peephole 181	changed mov to clr
                           4731 ;	main.c:598: LCD_gotoxy(0,0);    //Start at 0,0
                           4732 ;	genAssign
                           4733 ;	Peephole 181	changed mov to clr
                           4734 ;	Peephole 219.a	removed redundant clear
   1333 E4                 4735 	clr	a
   1334 F0                 4736 	movx	@dptr,a
   1335 90s00r00           4737 	mov	dptr,#_LCD_gotoxy_PARM_2
   1338 F0                 4738 	movx	@dptr,a
                           4739 ;	genCall
   1339 75 82 00           4740 	mov	dpl,#0x00
   133C 12s00r00           4741 	lcall	_LCD_gotoxy
                           4742 ;	main.c:599: MainMenu();
                           4743 ;	genCall
   133F 12s11rA2           4744 	lcall	_MainMenu
                           4745 ;	main.c:604: checkAlarms:
   1342                    4746 00101$:
                           4747 ;	main.c:605: for (i = 0; i < 3; ++i){
                           4748 ;	genAssign
   1342 90s00r81           4749 	mov	dptr,#_main_i_2_2
                           4750 ;	Peephole 181	changed mov to clr
   1345 E4                 4751 	clr	a
   1346 F0                 4752 	movx	@dptr,a
                           4753 ;	genAssign
   1347 7A 00              4754 	mov	r2,#0x00
   1349                    4755 00119$:
                           4756 ;	genCmpLt
                           4757 ;	genCmp
   1349 BA 03 00           4758 	cjne	r2,#0x03,00141$
   134C                    4759 00141$:
                           4760 ;	genIfxJump
   134C 40 03              4761 	jc	00142$
   134E 02s14r4C           4762 	ljmp	00122$
   1351                    4763 00142$:
                           4764 ;	main.c:606: if(ExpiredAlarms[i]){
                           4765 ;	genPlus
                           4766 ;	Peephole 236.g	used r2 instead of ar2
   1351 EA                 4767 	mov	a,r2
   1352 24r01              4768 	add	a,#_ExpiredAlarms
   1354 FB                 4769 	mov	r3,a
                           4770 ;	Peephole 181	changed mov to clr
   1355 E4                 4771 	clr	a
   1356 34s00              4772 	addc	a,#(_ExpiredAlarms >> 8)
   1358 FC                 4773 	mov	r4,a
                           4774 ;	genPointerGet
                           4775 ;	genFarPointerGet
   1359 8B 82              4776 	mov	dpl,r3
   135B 8C 83              4777 	mov	dph,r4
   135D E0                 4778 	movx	a,@dptr
                           4779 ;	genIfxJump
   135E 70 03              4780 	jnz	00143$
   1360 02s14r43           4781 	ljmp	00121$
   1363                    4782 00143$:
                           4783 ;	main.c:607: printf("\r\nAlarm %d going off, you must press 'D' to disable it\r\n", i);
                           4784 ;	genCast
   1363 8A 03              4785 	mov	ar3,r2
   1365 7C 00              4786 	mov	r4,#0x00
                           4787 ;	genIpush
   1367 C0 03              4788 	push	ar3
   1369 C0 04              4789 	push	ar4
                           4790 ;	genIpush
   136B 74r5E              4791 	mov	a,#__str_82
   136D C0 E0              4792 	push	acc
   136F 74s0A              4793 	mov	a,#(__str_82 >> 8)
   1371 C0 E0              4794 	push	acc
   1373 74 80              4795 	mov	a,#0x80
   1375 C0 E0              4796 	push	acc
                           4797 ;	genCall
   1377 12s00r00           4798 	lcall	_printf
   137A E5 81              4799 	mov	a,sp
   137C 24 FB              4800 	add	a,#0xfb
   137E F5 81              4801 	mov	sp,a
                           4802 ;	main.c:608: LCD_gotoxy(0,0);
                           4803 ;	genAssign
   1380 90s00r00           4804 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4805 ;	Peephole 181	changed mov to clr
   1383 E4                 4806 	clr	a
   1384 F0                 4807 	movx	@dptr,a
                           4808 ;	genCall
   1385 75 82 00           4809 	mov	dpl,#0x00
   1388 12s00r00           4810 	lcall	_LCD_gotoxy
                           4811 ;	main.c:609: LCD_Putstr("Disable Alarm!");
                           4812 ;	genCall
                           4813 ;	Peephole 182.a	used 16 bit load of DPTR
   138B 90s0Ar97           4814 	mov	dptr,#__str_83
   138E 75 F0 80           4815 	mov	b,#0x80
   1391 12s00r00           4816 	lcall	_LCD_Putstr
                           4817 ;	main.c:610: while(getchar() != 'D'){
                           4818 ;	genAssign
   1394 90s00r81           4819 	mov	dptr,#_main_i_2_2
   1397 E0                 4820 	movx	a,@dptr
   1398 FB                 4821 	mov	r3,a
   1399                    4822 00102$:
                           4823 ;	genCall
   1399 C0 03              4824 	push	ar3
   139B 12s00r00           4825 	lcall	_getchar
   139E AC 82              4826 	mov	r4,dpl
   13A0 D0 03              4827 	pop	ar3
                           4828 ;	genCmpEq
                           4829 ;	gencjneshort
   13A2 BC 44 02           4830 	cjne	r4,#0x44,00144$
                           4831 ;	Peephole 112.b	changed ljmp to sjmp
   13A5 80 3F              4832 	sjmp	00104$
   13A7                    4833 00144$:
                           4834 ;	main.c:611: printf("\r\nAlarm %d going off, you must press 'D' to disable it\r\n", i);
                           4835 ;	genCast
   13A7 8B 04              4836 	mov	ar4,r3
   13A9 7D 00              4837 	mov	r5,#0x00
                           4838 ;	genIpush
   13AB C0 03              4839 	push	ar3
   13AD C0 04              4840 	push	ar4
   13AF C0 05              4841 	push	ar5
                           4842 ;	genIpush
   13B1 74r5E              4843 	mov	a,#__str_82
   13B3 C0 E0              4844 	push	acc
   13B5 74s0A              4845 	mov	a,#(__str_82 >> 8)
   13B7 C0 E0              4846 	push	acc
   13B9 74 80              4847 	mov	a,#0x80
   13BB C0 E0              4848 	push	acc
                           4849 ;	genCall
   13BD 12s00r00           4850 	lcall	_printf
   13C0 E5 81              4851 	mov	a,sp
   13C2 24 FB              4852 	add	a,#0xfb
   13C4 F5 81              4853 	mov	sp,a
   13C6 D0 03              4854 	pop	ar3
                           4855 ;	main.c:612: LCD_gotoxy(0,0);
                           4856 ;	genAssign
   13C8 90s00r00           4857 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4858 ;	Peephole 181	changed mov to clr
   13CB E4                 4859 	clr	a
   13CC F0                 4860 	movx	@dptr,a
                           4861 ;	genCall
   13CD 75 82 00           4862 	mov	dpl,#0x00
   13D0 C0 03              4863 	push	ar3
   13D2 12s00r00           4864 	lcall	_LCD_gotoxy
   13D5 D0 03              4865 	pop	ar3
                           4866 ;	main.c:613: LCD_Putstr("Disable Alarm!");
                           4867 ;	genCall
                           4868 ;	Peephole 182.a	used 16 bit load of DPTR
   13D7 90s0Ar97           4869 	mov	dptr,#__str_83
   13DA 75 F0 80           4870 	mov	b,#0x80
   13DD C0 03              4871 	push	ar3
   13DF 12s00r00           4872 	lcall	_LCD_Putstr
   13E2 D0 03              4873 	pop	ar3
                           4874 ;	Peephole 112.b	changed ljmp to sjmp
   13E4 80 B3              4875 	sjmp	00102$
   13E6                    4876 00104$:
                           4877 ;	main.c:615: printf("\r\nAlarm %d disabled!\r\n", i);
                           4878 ;	genAssign
   13E6 90s00r81           4879 	mov	dptr,#_main_i_2_2
   13E9 E0                 4880 	movx	a,@dptr
   13EA FB                 4881 	mov	r3,a
                           4882 ;	genCast
   13EB 8B 04              4883 	mov	ar4,r3
   13ED 7D 00              4884 	mov	r5,#0x00
                           4885 ;	genIpush
   13EF C0 03              4886 	push	ar3
   13F1 C0 04              4887 	push	ar4
   13F3 C0 05              4888 	push	ar5
                           4889 ;	genIpush
   13F5 74rA6              4890 	mov	a,#__str_84
   13F7 C0 E0              4891 	push	acc
   13F9 74s0A              4892 	mov	a,#(__str_84 >> 8)
   13FB C0 E0              4893 	push	acc
   13FD 74 80              4894 	mov	a,#0x80
   13FF C0 E0              4895 	push	acc
                           4896 ;	genCall
   1401 12s00r00           4897 	lcall	_printf
   1404 E5 81              4898 	mov	a,sp
   1406 24 FB              4899 	add	a,#0xfb
   1408 F5 81              4900 	mov	sp,a
   140A D0 03              4901 	pop	ar3
                           4902 ;	main.c:616: LCD_gotoxy(0,0);
                           4903 ;	genAssign
   140C 90s00r00           4904 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4905 ;	Peephole 181	changed mov to clr
   140F E4                 4906 	clr	a
   1410 F0                 4907 	movx	@dptr,a
                           4908 ;	genCall
   1411 75 82 00           4909 	mov	dpl,#0x00
   1414 C0 03              4910 	push	ar3
   1416 12s00r00           4911 	lcall	_LCD_gotoxy
   1419 D0 03              4912 	pop	ar3
                           4913 ;	main.c:617: LCD_Putstr("              ");
                           4914 ;	genCall
                           4915 ;	Peephole 182.a	used 16 bit load of DPTR
   141B 90s0ArBD           4916 	mov	dptr,#__str_85
   141E 75 F0 80           4917 	mov	b,#0x80
   1421 C0 03              4918 	push	ar3
   1423 12s00r00           4919 	lcall	_LCD_Putstr
   1426 D0 03              4920 	pop	ar3
                           4921 ;	main.c:618: ActiveAlarms[i] = 0;
                           4922 ;	genPlus
                           4923 ;	Peephole 236.g	used r3 instead of ar3
   1428 EB                 4924 	mov	a,r3
   1429 24r00              4925 	add	a,#_ActiveAlarms
   142B F5 82              4926 	mov	dpl,a
                           4927 ;	Peephole 181	changed mov to clr
   142D E4                 4928 	clr	a
   142E 34s00              4929 	addc	a,#(_ActiveAlarms >> 8)
   1430 F5 83              4930 	mov	dph,a
                           4931 ;	genPointerSet
                           4932 ;     genFarPointerSet
                           4933 ;	Peephole 181	changed mov to clr
   1432 E4                 4934 	clr	a
   1433 F0                 4935 	movx	@dptr,a
                           4936 ;	main.c:619: ExpiredAlarms[i] = 0;
                           4937 ;	genPlus
                           4938 ;	Peephole 236.g	used r3 instead of ar3
   1434 EB                 4939 	mov	a,r3
   1435 24r01              4940 	add	a,#_ExpiredAlarms
   1437 F5 82              4941 	mov	dpl,a
                           4942 ;	Peephole 181	changed mov to clr
   1439 E4                 4943 	clr	a
   143A 34s00              4944 	addc	a,#(_ExpiredAlarms >> 8)
   143C F5 83              4945 	mov	dph,a
                           4946 ;	genPointerSet
                           4947 ;     genFarPointerSet
                           4948 ;	Peephole 181	changed mov to clr
   143E E4                 4949 	clr	a
   143F F0                 4950 	movx	@dptr,a
                           4951 ;	main.c:620: goto checkAlarms;
   1440 02s13r42           4952 	ljmp	00101$
   1443                    4953 00121$:
                           4954 ;	main.c:605: for (i = 0; i < 3; ++i){
                           4955 ;	genPlus
                           4956 ;     genPlusIncr
   1443 0A                 4957 	inc	r2
                           4958 ;	genAssign
   1444 90s00r81           4959 	mov	dptr,#_main_i_2_2
   1447 EA                 4960 	mov	a,r2
   1448 F0                 4961 	movx	@dptr,a
   1449 02s13r49           4962 	ljmp	00119$
   144C                    4963 00122$:
                           4964 ;	main.c:623: c = getchar ();
                           4965 ;	genCall
   144C 12s00r00           4966 	lcall	_getchar
   144F AA 82              4967 	mov	r2,dpl
                           4968 ;	main.c:624: if(DisableFlag){
                           4969 ;	genIfx
                           4970 ;	genIfxJump
                           4971 ;	main.c:625: DisableFlag = false;
                           4972 ;	genAssign
                           4973 ;	Peephole 250.b	using atomic test and clear
   1451 10*00 03           4974 	jbc	_DisableFlag,00145$
   1454 02s14rD0           4975 	ljmp	00113$
   1457                    4976 00145$:
                           4977 ;	main.c:626: if(c == 'D'){
                           4978 ;	genCmpEq
                           4979 ;	gencjneshort
   1457 BA 44 02           4980 	cjne	r2,#0x44,00146$
   145A 80 03              4981 	sjmp	00147$
   145C                    4982 00146$:
   145C 02s13r42           4983 	ljmp	00101$
   145F                    4984 00147$:
                           4985 ;	main.c:627: for (i = 0; i < 3; ++i){
                           4986 ;	genAssign
   145F 7B 00              4987 	mov	r3,#0x00
   1461                    4988 00123$:
                           4989 ;	genCmpLt
                           4990 ;	genCmp
   1461 BB 03 00           4991 	cjne	r3,#0x03,00148$
   1464                    4992 00148$:
                           4993 ;	genIfxJump
   1464 40 03              4994 	jc	00149$
   1466 02s13r42           4995 	ljmp	00101$
   1469                    4996 00149$:
                           4997 ;	main.c:628: if(ExpiredAlarms[i]){
                           4998 ;	genPlus
                           4999 ;	Peephole 236.g	used r3 instead of ar3
   1469 EB                 5000 	mov	a,r3
   146A 24r01              5001 	add	a,#_ExpiredAlarms
   146C FC                 5002 	mov	r4,a
                           5003 ;	Peephole 181	changed mov to clr
   146D E4                 5004 	clr	a
   146E 34s00              5005 	addc	a,#(_ExpiredAlarms >> 8)
   1470 FD                 5006 	mov	r5,a
                           5007 ;	genPointerGet
                           5008 ;	genFarPointerGet
   1471 8C 82              5009 	mov	dpl,r4
   1473 8D 83              5010 	mov	dph,r5
   1475 E0                 5011 	movx	a,@dptr
                           5012 ;	genIfxJump
                           5013 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1476 60 55              5014 	jz	00125$
                           5015 ;	Peephole 300	removed redundant label 00150$
                           5016 ;	main.c:629: printf("\r\nAlarm %d disabled!\r\n", i);
                           5017 ;	genCast
   1478 8B 04              5018 	mov	ar4,r3
   147A 7D 00              5019 	mov	r5,#0x00
                           5020 ;	genIpush
   147C C0 03              5021 	push	ar3
   147E C0 04              5022 	push	ar4
   1480 C0 05              5023 	push	ar5
                           5024 ;	genIpush
   1482 74rA6              5025 	mov	a,#__str_84
   1484 C0 E0              5026 	push	acc
   1486 74s0A              5027 	mov	a,#(__str_84 >> 8)
   1488 C0 E0              5028 	push	acc
   148A 74 80              5029 	mov	a,#0x80
   148C C0 E0              5030 	push	acc
                           5031 ;	genCall
   148E 12s00r00           5032 	lcall	_printf
   1491 E5 81              5033 	mov	a,sp
   1493 24 FB              5034 	add	a,#0xfb
   1495 F5 81              5035 	mov	sp,a
   1497 D0 03              5036 	pop	ar3
                           5037 ;	main.c:630: LCD_gotoxy(0,0);
                           5038 ;	genAssign
   1499 90s00r00           5039 	mov	dptr,#_LCD_gotoxy_PARM_2
                           5040 ;	Peephole 181	changed mov to clr
   149C E4                 5041 	clr	a
   149D F0                 5042 	movx	@dptr,a
                           5043 ;	genCall
   149E 75 82 00           5044 	mov	dpl,#0x00
   14A1 C0 03              5045 	push	ar3
   14A3 12s00r00           5046 	lcall	_LCD_gotoxy
   14A6 D0 03              5047 	pop	ar3
                           5048 ;	main.c:631: LCD_Putstr("              ");
                           5049 ;	genCall
                           5050 ;	Peephole 182.a	used 16 bit load of DPTR
   14A8 90s0ArBD           5051 	mov	dptr,#__str_85
   14AB 75 F0 80           5052 	mov	b,#0x80
   14AE C0 03              5053 	push	ar3
   14B0 12s00r00           5054 	lcall	_LCD_Putstr
   14B3 D0 03              5055 	pop	ar3
                           5056 ;	main.c:632: ActiveAlarms[i] = 0;
                           5057 ;	genPlus
                           5058 ;	Peephole 236.g	used r3 instead of ar3
   14B5 EB                 5059 	mov	a,r3
   14B6 24r00              5060 	add	a,#_ActiveAlarms
   14B8 F5 82              5061 	mov	dpl,a
                           5062 ;	Peephole 181	changed mov to clr
   14BA E4                 5063 	clr	a
   14BB 34s00              5064 	addc	a,#(_ActiveAlarms >> 8)
   14BD F5 83              5065 	mov	dph,a
                           5066 ;	genPointerSet
                           5067 ;     genFarPointerSet
                           5068 ;	Peephole 181	changed mov to clr
   14BF E4                 5069 	clr	a
   14C0 F0                 5070 	movx	@dptr,a
                           5071 ;	main.c:633: ExpiredAlarms[i] = 0;
                           5072 ;	genPlus
                           5073 ;	Peephole 236.g	used r3 instead of ar3
   14C1 EB                 5074 	mov	a,r3
   14C2 24r01              5075 	add	a,#_ExpiredAlarms
   14C4 F5 82              5076 	mov	dpl,a
                           5077 ;	Peephole 181	changed mov to clr
   14C6 E4                 5078 	clr	a
   14C7 34s00              5079 	addc	a,#(_ExpiredAlarms >> 8)
   14C9 F5 83              5080 	mov	dph,a
                           5081 ;	genPointerSet
                           5082 ;     genFarPointerSet
                           5083 ;	Peephole 181	changed mov to clr
   14CB E4                 5084 	clr	a
   14CC F0                 5085 	movx	@dptr,a
   14CD                    5086 00125$:
                           5087 ;	main.c:627: for (i = 0; i < 3; ++i){
                           5088 ;	genPlus
                           5089 ;     genPlusIncr
   14CD 0B                 5090 	inc	r3
                           5091 ;	main.c:639: goto checkAlarms;
                           5092 ;	Peephole 112.b	changed ljmp to sjmp
   14CE 80 91              5093 	sjmp	00123$
   14D0                    5094 00113$:
                           5095 ;	main.c:643: if (c == ENTER_KEY){
                           5096 ;	genCmpEq
                           5097 ;	gencjneshort
                           5098 ;	Peephole 112.b	changed ljmp to sjmp
                           5099 ;	Peephole 198.b	optimized misc jump sequence
   14D0 BA 0D 0A           5100 	cjne	r2,#0x0D,00115$
                           5101 ;	Peephole 200.b	removed redundant sjmp
                           5102 ;	Peephole 300	removed redundant label 00151$
                           5103 ;	Peephole 300	removed redundant label 00152$
                           5104 ;	main.c:644: putchar('\n');
                           5105 ;	genCall
   14D3 75 82 0A           5106 	mov	dpl,#0x0A
   14D6 C0 02              5107 	push	ar2
   14D8 12s00r00           5108 	lcall	_putchar
   14DB D0 02              5109 	pop	ar2
   14DD                    5110 00115$:
                           5111 ;	main.c:646: putchar(c);
                           5112 ;	genCall
   14DD 8A 82              5113 	mov	dpl,r2
   14DF C0 02              5114 	push	ar2
   14E1 12s00r00           5115 	lcall	_putchar
   14E4 D0 02              5116 	pop	ar2
                           5117 ;	main.c:647: handleInput(c);
                           5118 ;	genCall
   14E6 8A 82              5119 	mov	dpl,r2
   14E8 12s12rBA           5120 	lcall	_handleInput
   14EB 02s13r42           5121 	ljmp	00101$
                           5122 ;	Peephole 259.b	removed redundant label 00127$ and ret
                           5123 ;
                           5124 	.area CSEG    (CODE)
                           5125 	.area CONST   (CODE)
   0000                    5126 __str_0:
   0000 0D                 5127 	.db 0x0D
   0001 0A                 5128 	.db 0x0A
   0002 45 6E 74 65 72 20  5129 	.ascii "Enter an EEPROM block number from 0-7: "
        61 6E 20 45 45 50
        52 4F 4D 20 62 6C
        6F 63 6B 20 6E 75
        6D 62 65 72 20 66
        72 6F 6D 20 30 2D
        37 3A 20
   0029 00                 5130 	.db 0x00
   002A                    5131 __str_1:
   002A 0D                 5132 	.db 0x0D
   002B 0A                 5133 	.db 0x0A
   002C 49 4E 56 41 4C 49  5134 	.ascii "INVALID: Enter an EEPROM block number from 0-7: "
        44 3A 20 45 6E 74
        65 72 20 61 6E 20
        45 45 50 52 4F 4D
        20 62 6C 6F 63 6B
        20 6E 75 6D 62 65
        72 20 66 72 6F 6D
        20 30 2D 37 3A 20
   005C 00                 5135 	.db 0x00
   005D                    5136 __str_2:
   005D 0D                 5137 	.db 0x0D
   005E 0A                 5138 	.db 0x0A
   005F 45 6E 74 65 72 20  5139 	.ascii "Enter an EEPROM Word address in hex:"
        61 6E 20 45 45 50
        52 4F 4D 20 57 6F
        72 64 20 61 64 64
        72 65 73 73 20 69
        6E 20 68 65 78 3A
   0083 00                 5140 	.db 0x00
   0084                    5141 __str_3:
   0084 0D                 5142 	.db 0x0D
   0085 0A                 5143 	.db 0x0A
   0086 49 6E 20 43 75 73  5144 	.ascii "In Custom Character Mode"
        74 6F 6D 20 43 68
        61 72 61 63 74 65
        72 20 4D 6F 64 65
   009E 00                 5145 	.db 0x00
   009F                    5146 __str_4:
   009F 0D                 5147 	.db 0x0D
   00A0 0A                 5148 	.db 0x0A
   00A1 50 72 65 73 73 20  5149 	.ascii "Press 'H' for help"
        27 48 27 20 66 6F
        72 20 68 65 6C 70
   00B3 00                 5150 	.db 0x00
   00B4                    5151 __str_5:
   00B4 0D                 5152 	.db 0x0D
   00B5 0A                 5153 	.db 0x0A
   00B6 50 72 65 73 73 20  5154 	.ascii "Press 'O' to set pin to output low"
        27 4F 27 20 74 6F
        20 73 65 74 20 70
        69 6E 20 74 6F 20
        6F 75 74 70 75 74
        20 6C 6F 77
   00D8 00                 5155 	.db 0x00
   00D9                    5156 __str_6:
   00D9 0D                 5157 	.db 0x0D
   00DA 0A                 5158 	.db 0x0A
   00DB 50 72 65 73 73 20  5159 	.ascii "Press 'I' to set pin to input/output value high"
        27 49 27 20 74 6F
        20 73 65 74 20 70
        69 6E 20 74 6F 20
        69 6E 70 75 74 2F
        6F 75 74 70 75 74
        20 76 61 6C 75 65
        20 68 69 67 68
   010A 00                 5160 	.db 0x00
   010B                    5161 __str_7:
   010B 0D                 5162 	.db 0x0D
   010C 0A                 5163 	.db 0x0A
   010D 50 72 65 73 73 20  5164 	.ascii "Press 'S' to view status of the pins"
        27 53 27 20 74 6F
        20 76 69 65 77 20
        73 74 61 74 75 73
        20 6F 66 20 74 68
        65 20 70 69 6E 73
   0131 00                 5165 	.db 0x00
   0132                    5166 __str_8:
   0132 0D                 5167 	.db 0x0D
   0133 0A                 5168 	.db 0x0A
   0134 50 72 65 73 73 20  5169 	.ascii "Press 'r' to return to main menu"
        27 72 27 20 74 6F
        20 72 65 74 75 72
        6E 20 74 6F 20 6D
        61 69 6E 20 6D 65
        6E 75
   0154 0D                 5170 	.db 0x0D
   0155 0A                 5171 	.db 0x0A
   0156 00                 5172 	.db 0x00
   0157                    5173 __str_9:
   0157 0D                 5174 	.db 0x0D
   0158 0A                 5175 	.db 0x0A
   0159 45 6E 74 65 72 20  5176 	.ascii "Enter a pin from 0-7 to set as output low: "
        61 20 70 69 6E 20
        66 72 6F 6D 20 30
        2D 37 20 74 6F 20
        73 65 74 20 61 73
        20 6F 75 74 70 75
        74 20 6C 6F 77 3A
        20
   0184 00                 5177 	.db 0x00
   0185                    5178 __str_10:
   0185 0D                 5179 	.db 0x0D
   0186 0A                 5180 	.db 0x0A
   0187 53 6F 72 72 79 2C  5181 	.ascii "Sorry, can't change pin 1 to output low."
        20 63 61 6E 27 74
        20 63 68 61 6E 67
        65 20 70 69 6E 20
        31 20 74 6F 20 6F
        75 74 70 75 74 20
        6C 6F 77 2E
   01AF 0D                 5182 	.db 0x0D
   01B0 0A                 5183 	.db 0x0A
   01B1 00                 5184 	.db 0x00
   01B2                    5185 __str_11:
   01B2 0D                 5186 	.db 0x0D
   01B3 0A                 5187 	.db 0x0A
   01B4 45 6E 74 65 72 20  5188 	.ascii "Enter a pin from 0-7 to set as input/output value high: "
        61 20 70 69 6E 20
        66 72 6F 6D 20 30
        2D 37 20 74 6F 20
        73 65 74 20 61 73
        20 69 6E 70 75 74
        2F 6F 75 74 70 75
        74 20 76 61 6C 75
        65 20 68 69 67 68
        3A 20
   01EC 00                 5189 	.db 0x00
   01ED                    5190 __str_12:
   01ED 2F 72 2F 6E 43 6F  5191 	.ascii "/r/nCounter reset"
        75 6E 74 65 72 20
        72 65 73 65 74
   01FE 0D                 5192 	.db 0x0D
   01FF 0A                 5193 	.db 0x0A
   0200 00                 5194 	.db 0x00
   0201                    5195 __str_13:
   0201 0D                 5196 	.db 0x0D
   0202 0A                 5197 	.db 0x0A
   0203 50 72 65 73 73 20  5198 	.ascii "Press 'T' to test to custom code"
        27 54 27 20 74 6F
        20 74 65 73 74 20
        74 6F 20 63 75 73
        74 6F 6D 20 63 6F
        64 65
   0223 00                 5199 	.db 0x00
   0224                    5200 __str_14:
   0224 0D                 5201 	.db 0x0D
   0225 0A                 5202 	.db 0x0A
   0226 50 72 65 73 73 20  5203 	.ascii "Press 'N' to add a new character"
        27 4E 27 20 74 6F
        20 61 64 64 20 61
        20 6E 65 77 20 63
        68 61 72 61 63 74
        65 72
   0246 00                 5204 	.db 0x00
   0247                    5205 __str_15:
   0247 0D                 5206 	.db 0x0D
   0248 0A                 5207 	.db 0x0A
   0249 50 72 65 73 73 20  5208 	.ascii "Press 'S' to print a custom character"
        27 53 27 20 74 6F
        20 70 72 69 6E 74
        20 61 20 63 75 73
        74 6F 6D 20 63 68
        61 72 61 63 74 65
        72
   026E 00                 5209 	.db 0x00
   026F                    5210 __str_16:
   026F 0D                 5211 	.db 0x0D
   0270 0A                 5212 	.db 0x0A
   0271 50 72 65 73 73 20  5213 	.ascii "Press 'F' to draw a flag to LCD"
        27 46 27 20 74 6F
        20 64 72 61 77 20
        61 20 66 6C 61 67
        20 74 6F 20 4C 43
        44
   0290 00                 5214 	.db 0x00
   0291                    5215 __str_17:
   0291 0D                 5216 	.db 0x0D
   0292 0A                 5217 	.db 0x0A
   0293 45 6E 74 65 72 20  5218 	.ascii "Enter an address from 0-7:"
        61 6E 20 61 64 64
        72 65 73 73 20 66
        72 6F 6D 20 30 2D
        37 3A
   02AD 00                 5219 	.db 0x00
   02AE                    5220 __str_18:
   02AE 0D                 5221 	.db 0x0D
   02AF 0A                 5222 	.db 0x0A
   02B0 57 72 6F 74 65 20  5223 	.ascii "Wrote custom character to LCD"
        63 75 73 74 6F 6D
        20 63 68 61 72 61
        63 74 65 72 20 74
        6F 20 4C 43 44
   02CD 0D                 5224 	.db 0x0D
   02CE 0A                 5225 	.db 0x0A
   02CF 00                 5226 	.db 0x00
   02D0                    5227 __str_19:
   02D0 0D                 5228 	.db 0x0D
   02D1 0A                 5229 	.db 0x0A
   02D2 49 6E 20 4C 43 44  5230 	.ascii "In LCD Mode"
        20 4D 6F 64 65
   02DD 00                 5231 	.db 0x00
   02DE                    5232 __str_20:
   02DE 0D                 5233 	.db 0x0D
   02DF 0A                 5234 	.db 0x0A
   02E0 50 72 65 73 73 20  5235 	.ascii "Press 'I' to Init LCD. Must call this first"
        27 49 27 20 74 6F
        20 49 6E 69 74 20
        4C 43 44 2E 20 4D
        75 73 74 20 63 61
        6C 6C 20 74 68 69
        73 20 66 69 72 73
        74
   030B 00                 5236 	.db 0x00
   030C                    5237 __str_21:
   030C 0D                 5238 	.db 0x0D
   030D 0A                 5239 	.db 0x0A
   030E 50 72 65 73 73 20  5240 	.ascii "Press 'g' to show gotoaddr "
        27 67 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 61 64
        64 72 20
   0329 00                 5241 	.db 0x00
   032A                    5242 __str_22:
   032A 0D                 5243 	.db 0x0D
   032B 0A                 5244 	.db 0x0A
   032C 50 72 65 73 73 20  5245 	.ascii "Press 'x' to show gotoxy"
        27 78 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 78 79
   0344 00                 5246 	.db 0x00
   0345                    5247 __str_23:
   0345 0D                 5248 	.db 0x0D
   0346 0A                 5249 	.db 0x0A
   0347 50 72 65 73 73 20  5250 	.ascii "Press 'c' to show putch "
        27 63 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 63 68 20
   035F 00                 5251 	.db 0x00
   0360                    5252 __str_24:
   0360 0D                 5253 	.db 0x0D
   0361 0A                 5254 	.db 0x0A
   0362 50 72 65 73 73 20  5255 	.ascii "Press 's' to show putstr"
        27 73 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 73 74 72
   037A 00                 5256 	.db 0x00
   037B                    5257 __str_25:
   037B 0D                 5258 	.db 0x0D
   037C 0A                 5259 	.db 0x0A
   037D 50 72 65 73 73 20  5260 	.ascii "Press 'C' to clear the LCD display"
        27 43 27 20 74 6F
        20 63 6C 65 61 72
        20 74 68 65 20 4C
        43 44 20 64 69 73
        70 6C 61 79
   039F 00                 5261 	.db 0x00
   03A0                    5262 __str_26:
   03A0 0D                 5263 	.db 0x0D
   03A1 0A                 5264 	.db 0x0A
   03A2 50 72 65 73 73 20  5265 	.ascii "Press 'Y' to read the contents of DDRAM"
        27 59 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 44 44
        52 41 4D
   03C9 00                 5266 	.db 0x00
   03CA                    5267 __str_27:
   03CA 0D                 5268 	.db 0x0D
   03CB 0A                 5269 	.db 0x0A
   03CC 50 72 65 73 73 20  5270 	.ascii "Press 'G' to read the contents of CGRAM"
        27 47 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 43 47
        52 41 4D
   03F3 00                 5271 	.db 0x00
   03F4                    5272 __str_28:
   03F4 0D                 5273 	.db 0x0D
   03F5 0A                 5274 	.db 0x0A
   03F6 49 6E 69 74 69 61  5275 	.ascii "Initializing LCD"
        6C 69 7A 69 6E 67
        20 4C 43 44
   0406 0D                 5276 	.db 0x0D
   0407 0A                 5277 	.db 0x0A
   0408 00                 5278 	.db 0x00
   0409                    5279 __str_29:
   0409 0D                 5280 	.db 0x0D
   040A 0A                 5281 	.db 0x0A
   040B 45 6E 74 65 72 20  5282 	.ascii "Enter a hex address to go to"
        61 20 68 65 78 20
        61 64 64 72 65 73
        73 20 74 6F 20 67
        6F 20 74 6F
   0427 0D                 5283 	.db 0x0D
   0428 0A                 5284 	.db 0x0A
   0429 00                 5285 	.db 0x00
   042A                    5286 __str_30:
   042A 0D                 5287 	.db 0x0D
   042B 0A                 5288 	.db 0x0A
   042C 45 6E 74 65 72 20  5289 	.ascii "Enter a row from 0-3:"
        61 20 72 6F 77 20
        66 72 6F 6D 20 30
        2D 33 3A
   0441 00                 5290 	.db 0x00
   0442                    5291 __str_31:
   0442 0D                 5292 	.db 0x0D
   0443 0A                 5293 	.db 0x0A
   0444 45 6E 74 65 72 20  5294 	.ascii "Enter a col from 0-15:"
        61 20 63 6F 6C 20
        66 72 6F 6D 20 30
        2D 31 35 3A
   045A 00                 5295 	.db 0x00
   045B                    5296 __str_32:
   045B 0D                 5297 	.db 0x0D
   045C 0A                 5298 	.db 0x0A
   045D 4D 6F 76 65 64 20  5299 	.ascii "Moved cursor to new location (%d,%d)"
        63 75 72 73 6F 72
        20 74 6F 20 6E 65
        77 20 6C 6F 63 61
        74 69 6F 6E 20 28
        25 64 2C 25 64 29
   0481 0D                 5300 	.db 0x0D
   0482 0A                 5301 	.db 0x0A
   0483 00                 5302 	.db 0x00
   0484                    5303 __str_33:
   0484 0D                 5304 	.db 0x0D
   0485 0A                 5305 	.db 0x0A
   0486 45 6E 74 65 72 20  5306 	.ascii "Enter a character to put at current address"
        61 20 63 68 61 72
        61 63 74 65 72 20
        74 6F 20 70 75 74
        20 61 74 20 63 75
        72 72 65 6E 74 20
        61 64 64 72 65 73
        73
   04B1 0D                 5307 	.db 0x0D
   04B2 0A                 5308 	.db 0x0A
   04B3 00                 5309 	.db 0x00
   04B4                    5310 __str_34:
   04B4 0D                 5311 	.db 0x0D
   04B5 45 6E 74 65 72 20  5312 	.ascii "Enter a string"
        61 20 73 74 72 69
        6E 67
   04C3 0D                 5313 	.db 0x0D
   04C4 0A                 5314 	.db 0x0A
   04C5 00                 5315 	.db 0x00
   04C6                    5316 __str_35:
   04C6 0D                 5317 	.db 0x0D
   04C7 0A                 5318 	.db 0x0A
   04C8 4C 43 44 20 44 69  5319 	.ascii "LCD Display Cleared!"
        73 70 6C 61 79 20
        43 6C 65 61 72 65
        64 21
   04DC 0D                 5320 	.db 0x0D
   04DD 0A                 5321 	.db 0x0A
   04DE 00                 5322 	.db 0x00
   04DF                    5323 __str_36:
   04DF 0D                 5324 	.db 0x0D
   04E0 0A                 5325 	.db 0x0A
   04E1 00                 5326 	.db 0x00
   04E2                    5327 __str_37:
   04E2 25 78 3A 20        5328 	.ascii "%x: "
   04E6 00                 5329 	.db 0x00
   04E7                    5330 __str_38:
   04E7 25 78 20           5331 	.ascii "%x "
   04EA 00                 5332 	.db 0x00
   04EB                    5333 __str_39:
   04EB 0D                 5334 	.db 0x0D
   04EC 0A                 5335 	.db 0x0A
   04ED 49 6E 20 45 45 50  5336 	.ascii "In EEPROM Mode"
        52 4F 4D 20 4D 6F
        64 65
   04FB 00                 5337 	.db 0x00
   04FC                    5338 __str_40:
   04FC 0D                 5339 	.db 0x0D
   04FD 0A                 5340 	.db 0x0A
   04FE 50 72 65 73 73 20  5341 	.ascii "Press 'W' to write a byte to EEPROM"
        27 57 27 20 74 6F
        20 77 72 69 74 65
        20 61 20 62 79 74
        65 20 74 6F 20 45
        45 50 52 4F 4D
   0521 00                 5342 	.db 0x00
   0522                    5343 __str_41:
   0522 0D                 5344 	.db 0x0D
   0523 0A                 5345 	.db 0x0A
   0524 50 72 65 73 73 20  5346 	.ascii "Press 'R' to read a byte from EEPROM"
        27 52 27 20 74 6F
        20 72 65 61 64 20
        61 20 62 79 74 65
        20 66 72 6F 6D 20
        45 45 50 52 4F 4D
   0548 00                 5347 	.db 0x00
   0549                    5348 __str_42:
   0549 0D                 5349 	.db 0x0D
   054A 0A                 5350 	.db 0x0A
   054B 50 72 65 73 73 20  5351 	.ascii "Press 'L' to display EEPROM data on LCD"
        27 4C 27 20 74 6F
        20 64 69 73 70 6C
        61 79 20 45 45 50
        52 4F 4D 20 64 61
        74 61 20 6F 6E 20
        4C 43 44
   0572 00                 5352 	.db 0x00
   0573                    5353 __str_43:
   0573 0D                 5354 	.db 0x0D
   0574 0A                 5355 	.db 0x0A
   0575 50 72 65 73 73 20  5356 	.ascii "Press 'D' to do a Hex Dump of EEPROM"
        27 44 27 20 74 6F
        20 64 6F 20 61 20
        48 65 78 20 44 75
        6D 70 20 6F 66 20
        45 45 50 52 4F 4D
   0599 00                 5357 	.db 0x00
   059A                    5358 __str_44:
   059A 0D                 5359 	.db 0x0D
   059B 0A                 5360 	.db 0x0A
   059C 57 72 69 74 69 6E  5361 	.ascii "Writing to EEPROM..."
        67 20 74 6F 20 45
        45 50 52 4F 4D 2E
        2E 2E
   05B0 00                 5362 	.db 0x00
   05B1                    5363 __str_45:
   05B1 0D                 5364 	.db 0x0D
   05B2 0A                 5365 	.db 0x0A
   05B3 45 6E 74 65 72 20  5366 	.ascii "Enter a byte of data to write to EEPROM:"
        61 20 62 79 74 65
        20 6F 66 20 64 61
        74 61 20 74 6F 20
        77 72 69 74 65 20
        74 6F 20 45 45 50
        52 4F 4D 3A
   05DB 00                 5367 	.db 0x00
   05DC                    5368 __str_46:
   05DC 0D                 5369 	.db 0x0D
   05DD 0A                 5370 	.db 0x0A
   05DE 57 72 6F 74 65 20  5371 	.ascii "Wrote %X to block %d address 0x%X in EEPROM!"
        25 58 20 74 6F 20
        62 6C 6F 63 6B 20
        25 64 20 61 64 64
        72 65 73 73 20 30
        78 25 58 20 69 6E
        20 45 45 50 52 4F
        4D 21
   060A 0D                 5372 	.db 0x0D
   060B 0A                 5373 	.db 0x0A
   060C 00                 5374 	.db 0x00
   060D                    5375 __str_47:
   060D 0D                 5376 	.db 0x0D
   060E 0A                 5377 	.db 0x0A
   060F 52 65 61 64 69 6E  5378 	.ascii "Reading from EEPROM..."
        67 20 66 72 6F 6D
        20 45 45 50 52 4F
        4D 2E 2E 2E
   0625 00                 5379 	.db 0x00
   0626                    5380 __str_48:
   0626 0D                 5381 	.db 0x0D
   0627 0A                 5382 	.db 0x0A
   0628 52 65 61 64 20 25  5383 	.ascii "Read %X from block %d address 0x%X"
        58 20 66 72 6F 6D
        20 62 6C 6F 63 6B
        20 25 64 20 61 64
        64 72 65 73 73 20
        30 78 25 58
   064A 0D                 5384 	.db 0x0D
   064B 0A                 5385 	.db 0x0A
   064C 00                 5386 	.db 0x00
   064D                    5387 __str_49:
   064D 0D                 5388 	.db 0x0D
   064E 0A                 5389 	.db 0x0A
   064F 45 6E 74 65 72 20  5390 	.ascii "Enter LCD row from 0-3:"
        4C 43 44 20 72 6F
        77 20 66 72 6F 6D
        20 30 2D 33 3A
   0666 00                 5391 	.db 0x00
   0667                    5392 __str_50:
   0667 3A 20              5393 	.ascii ": "
   0669 00                 5394 	.db 0x00
   066A                    5395 __str_51:
   066A 0D                 5396 	.db 0x0D
   066B 0A                 5397 	.db 0x0A
   066C 57 72 6F 74 65 20  5398 	.ascii "Wrote to LCD!"
        74 6F 20 4C 43 44
        21
   0679 0D                 5399 	.db 0x0D
   067A 0A                 5400 	.db 0x0A
   067B 00                 5401 	.db 0x00
   067C                    5402 __str_52:
   067C 0D                 5403 	.db 0x0D
   067D 0A                 5404 	.db 0x0A
   067E 50 65 72 66 6F 72  5405 	.ascii "Performing an EEPROM data dump"
        6D 69 6E 67 20 61
        6E 20 45 45 50 52
        4F 4D 20 64 61 74
        61 20 64 75 6D 70
   069C 0D                 5406 	.db 0x0D
   069D 0A                 5407 	.db 0x0A
   069E 00                 5408 	.db 0x00
   069F                    5409 __str_53:
   069F 0D                 5410 	.db 0x0D
   06A0 0A                 5411 	.db 0x0A
   06A1 45 6E 74 65 72 20  5412 	.ascii "Enter the starting block and address"
        74 68 65 20 73 74
        61 72 74 69 6E 67
        20 62 6C 6F 63 6B
        20 61 6E 64 20 61
        64 64 72 65 73 73
   06C5 00                 5413 	.db 0x00
   06C6                    5414 __str_54:
   06C6 0D                 5415 	.db 0x0D
   06C7 0A                 5416 	.db 0x0A
   06C8 45 6E 74 65 72 20  5417 	.ascii "Enter the ending block and address"
        74 68 65 20 65 6E
        64 69 6E 67 20 62
        6C 6F 63 6B 20 61
        6E 64 20 61 64 64
        72 65 73 73
   06EA 00                 5418 	.db 0x00
   06EB                    5419 __str_55:
   06EB 0D                 5420 	.db 0x0D
   06EC 0A                 5421 	.db 0x0A
   06ED 49 6E 76 61 6C 69  5422 	.ascii "Invalid addresses. End address must be after start address"
        64 20 61 64 64 72
        65 73 73 65 73 2E
        20 45 6E 64 20 61
        64 64 72 65 73 73
        20 6D 75 73 74 20
        62 65 20 61 66 74
        65 72 20 73 74 61
        72 74 20 61 64 64
        72 65 73 73
   0727 00                 5423 	.db 0x00
   0728                    5424 __str_56:
   0728 0D                 5425 	.db 0x0D
   0729 0A                 5426 	.db 0x0A
   072A 49 6E 20 43 6C 6F  5427 	.ascii "In Clock Mode"
        63 6B 20 4D 6F 64
        65
   0737 00                 5428 	.db 0x00
   0738                    5429 __str_57:
   0738 0D                 5430 	.db 0x0D
   0739 0A                 5431 	.db 0x0A
   073A 50 72 65 73 73 20  5432 	.ascii "Press 'T' to stop the clock"
        27 54 27 20 74 6F
        20 73 74 6F 70 20
        74 68 65 20 63 6C
        6F 63 6B
   0755 00                 5433 	.db 0x00
   0756                    5434 __str_58:
   0756 0D                 5435 	.db 0x0D
   0757 0A                 5436 	.db 0x0A
   0758 50 72 65 73 73 20  5437 	.ascii "Press 'S' to start the clock again"
        27 53 27 20 74 6F
        20 73 74 61 72 74
        20 74 68 65 20 63
        6C 6F 63 6B 20 61
        67 61 69 6E
   077A 00                 5438 	.db 0x00
   077B                    5439 __str_59:
   077B 0D                 5440 	.db 0x0D
   077C 0A                 5441 	.db 0x0A
   077D 50 72 65 73 73 20  5442 	.ascii "Press 'O' to reset the clock to 0"
        27 4F 27 20 74 6F
        20 72 65 73 65 74
        20 74 68 65 20 63
        6C 6F 63 6B 20 74
        6F 20 30
   079E 00                 5443 	.db 0x00
   079F                    5444 __str_60:
   079F 0D                 5445 	.db 0x0D
   07A0 0A                 5446 	.db 0x0A
   07A1 50 72 65 73 73 20  5447 	.ascii "Press 'N' to create a new alarm"
        27 4E 27 20 74 6F
        20 63 72 65 61 74
        65 20 61 20 6E 65
        77 20 61 6C 61 72
        6D
   07C0 00                 5448 	.db 0x00
   07C1                    5449 __str_61:
   07C1 0D                 5450 	.db 0x0D
   07C2 0A                 5451 	.db 0x0A
   07C3 50 72 65 73 73 20  5452 	.ascii "Press 'C' to view count for each alarm"
        27 43 27 20 74 6F
        20 76 69 65 77 20
        63 6F 75 6E 74 20
        66 6F 72 20 65 61
        63 68 20 61 6C 61
        72 6D
   07E9 00                 5453 	.db 0x00
   07EA                    5454 __str_62:
   07EA 0D                 5455 	.db 0x0D
   07EB 0A                 5456 	.db 0x0A
   07EC 50 72 65 73 73 20  5457 	.ascii "Press 'D' to disable an alarm"
        27 44 27 20 74 6F
        20 64 69 73 61 62
        6C 65 20 61 6E 20
        61 6C 61 72 6D
   0809 00                 5458 	.db 0x00
   080A                    5459 __str_63:
   080A 0D                 5460 	.db 0x0D
   080B 0A                 5461 	.db 0x0A
   080C 50 72 65 73 73 20  5462 	.ascii "Press 'E' to reenable an alarm"
        27 45 27 20 74 6F
        20 72 65 65 6E 61
        62 6C 65 20 61 6E
        20 61 6C 61 72 6D
   082A 00                 5463 	.db 0x00
   082B                    5464 __str_64:
   082B 0D                 5465 	.db 0x0D
   082C 0A                 5466 	.db 0x0A
   082D 53 74 6F 70 70 69  5467 	.ascii "Stopping the clock"
        6E 67 20 74 68 65
        20 63 6C 6F 63 6B
   083F 00                 5468 	.db 0x00
   0840                    5469 __str_65:
   0840 0D                 5470 	.db 0x0D
   0841 0A                 5471 	.db 0x0A
   0842 53 74 61 72 74 69  5472 	.ascii "Starting the clock"
        6E 67 20 74 68 65
        20 63 6C 6F 63 6B
   0854 00                 5473 	.db 0x00
   0855                    5474 __str_66:
   0855 0D                 5475 	.db 0x0D
   0856 0A                 5476 	.db 0x0A
   0857 52 65 73 65 74 74  5477 	.ascii "Resetting the clock"
        69 6E 67 20 74 68
        65 20 63 6C 6F 63
        6B
   086A 00                 5478 	.db 0x00
   086B                    5479 __str_67:
   086B 0D                 5480 	.db 0x0D
   086C 0A                 5481 	.db 0x0A
   086D 45 6E 74 65 72 20  5482 	.ascii "Enter alarm time in seconds:"
        61 6C 61 72 6D 20
        74 69 6D 65 20 69
        6E 20 73 65 63 6F
        6E 64 73 3A
   0889 0D                 5483 	.db 0x0D
   088A 0A                 5484 	.db 0x0A
   088B 00                 5485 	.db 0x00
   088C                    5486 __str_68:
   088C 0D                 5487 	.db 0x0D
   088D 0A                 5488 	.db 0x0A
   088E 41 6C 61 72 6D 20  5489 	.ascii "Alarm %d: %u <Enabled>"
        25 64 3A 20 25 75
        20 3C 45 6E 61 62
        6C 65 64 3E
   08A4 00                 5490 	.db 0x00
   08A5                    5491 __str_69:
   08A5 0D                 5492 	.db 0x0D
   08A6 0A                 5493 	.db 0x0A
   08A7 41 6C 61 72 6D 20  5494 	.ascii "Alarm %d: %u <Disabled>"
        25 64 3A 20 25 75
        20 3C 44 69 73 61
        62 6C 65 64 3E
   08BE 00                 5495 	.db 0x00
   08BF                    5496 __str_70:
   08BF 0D                 5497 	.db 0x0D
   08C0 0A                 5498 	.db 0x0A
   08C1 45 6E 74 65 72 20  5499 	.ascii "Enter an alarm number from 0-2 to disable:"
        61 6E 20 61 6C 61
        72 6D 20 6E 75 6D
        62 65 72 20 66 72
        6F 6D 20 30 2D 32
        20 74 6F 20 64 69
        73 61 62 6C 65 3A
   08EB 00                 5500 	.db 0x00
   08EC                    5501 __str_71:
   08EC 0D                 5502 	.db 0x0D
   08ED 0A                 5503 	.db 0x0A
   08EE 41 6C 61 72 6D 20  5504 	.ascii "Alarm %d disabled"
        25 64 20 64 69 73
        61 62 6C 65 64
   08FF 0D                 5505 	.db 0x0D
   0900 0A                 5506 	.db 0x0A
   0901 00                 5507 	.db 0x00
   0902                    5508 __str_72:
   0902 0D                 5509 	.db 0x0D
   0903 0A                 5510 	.db 0x0A
   0904 45 6E 74 65 72 20  5511 	.ascii "Enter an alarm number from 0-2 to enable:"
        61 6E 20 61 6C 61
        72 6D 20 6E 75 6D
        62 65 72 20 66 72
        6F 6D 20 30 2D 32
        20 74 6F 20 65 6E
        61 62 6C 65 3A
   092D 00                 5512 	.db 0x00
   092E                    5513 __str_73:
   092E 0D                 5514 	.db 0x0D
   092F 0A                 5515 	.db 0x0A
   0930 41 6C 61 72 6D 20  5516 	.ascii "Alarm %d enabled"
        25 64 20 65 6E 61
        62 6C 65 64
   0940 0D                 5517 	.db 0x0D
   0941 0A                 5518 	.db 0x0A
   0942 00                 5519 	.db 0x00
   0943                    5520 __str_74:
   0943 0D                 5521 	.db 0x0D
   0944 0A                 5522 	.db 0x0A
   0945 2A 2A 2A 2A 2A 2A  5523 	.ascii "***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0954 00                 5524 	.db 0x00
   0955                    5525 __str_75:
   0955 0D                 5526 	.db 0x0D
   0956 0A                 5527 	.db 0x0A
   0957 20 20 20 20 4D 65  5528 	.ascii "    Menu"
        6E 75
   095F 0D                 5529 	.db 0x0D
   0960 0A                 5530 	.db 0x0A
   0961 00                 5531 	.db 0x00
   0962                    5532 __str_76:
   0962 0D                 5533 	.db 0x0D
   0963 0A                 5534 	.db 0x0A
   0964 50 72 65 73 73 20  5535 	.ascii "Press 'H' to show the help menu"
        27 48 27 20 74 6F
        20 73 68 6F 77 20
        74 68 65 20 68 65
        6C 70 20 6D 65 6E
        75
   0983 00                 5536 	.db 0x00
   0984                    5537 __str_77:
   0984 0D                 5538 	.db 0x0D
   0985 0A                 5539 	.db 0x0A
   0986 50 72 65 73 73 20  5540 	.ascii "Press 'L' to enter LCD control mode"
        27 4C 27 20 74 6F
        20 65 6E 74 65 72
        20 4C 43 44 20 63
        6F 6E 74 72 6F 6C
        20 6D 6F 64 65
   09A9 00                 5541 	.db 0x00
   09AA                    5542 __str_78:
   09AA 0D                 5543 	.db 0x0D
   09AB 0A                 5544 	.db 0x0A
   09AC 50 72 65 73 73 20  5545 	.ascii "Press 'E' to enter EEPROM control mode"
        27 45 27 20 74 6F
        20 65 6E 74 65 72
        20 45 45 50 52 4F
        4D 20 63 6F 6E 74
        72 6F 6C 20 6D 6F
        64 65
   09D2 00                 5546 	.db 0x00
   09D3                    5547 __str_79:
   09D3 0D                 5548 	.db 0x0D
   09D4 0A                 5549 	.db 0x0A
   09D5 50 72 65 73 73 20  5550 	.ascii "Press 'C' to enter Clock control mode"
        27 43 27 20 74 6F
        20 65 6E 74 65 72
        20 43 6C 6F 63 6B
        20 63 6F 6E 74 72
        6F 6C 20 6D 6F 64
        65
   09FA 00                 5551 	.db 0x00
   09FB                    5552 __str_80:
   09FB 0D                 5553 	.db 0x0D
   09FC 0A                 5554 	.db 0x0A
   09FD 50 72 65 73 73 20  5555 	.ascii "Press 'G' to enter Custom Code control mode"
        27 47 27 20 74 6F
        20 65 6E 74 65 72
        20 43 75 73 74 6F
        6D 20 43 6F 64 65
        20 63 6F 6E 74 72
        6F 6C 20 6D 6F 64
        65
   0A28 00                 5556 	.db 0x00
   0A29                    5557 __str_81:
   0A29 0D                 5558 	.db 0x0D
   0A2A 0A                 5559 	.db 0x0A
   0A2B 50 72 65 73 73 20  5560 	.ascii "Press 'P' to enter PCF I/O expander control mode"
        27 50 27 20 74 6F
        20 65 6E 74 65 72
        20 50 43 46 20 49
        2F 4F 20 65 78 70
        61 6E 64 65 72 20
        63 6F 6E 74 72 6F
        6C 20 6D 6F 64 65
   0A5B 0D                 5561 	.db 0x0D
   0A5C 0A                 5562 	.db 0x0A
   0A5D 00                 5563 	.db 0x00
   0A5E                    5564 __str_82:
   0A5E 0D                 5565 	.db 0x0D
   0A5F 0A                 5566 	.db 0x0A
   0A60 41 6C 61 72 6D 20  5567 	.ascii "Alarm %d going off, you must press 'D' to disable it"
        25 64 20 67 6F 69
        6E 67 20 6F 66 66
        2C 20 79 6F 75 20
        6D 75 73 74 20 70
        72 65 73 73 20 27
        44 27 20 74 6F 20
        64 69 73 61 62 6C
        65 20 69 74
   0A94 0D                 5568 	.db 0x0D
   0A95 0A                 5569 	.db 0x0A
   0A96 00                 5570 	.db 0x00
   0A97                    5571 __str_83:
   0A97 44 69 73 61 62 6C  5572 	.ascii "Disable Alarm!"
        65 20 41 6C 61 72
        6D 21
   0AA5 00                 5573 	.db 0x00
   0AA6                    5574 __str_84:
   0AA6 0D                 5575 	.db 0x0D
   0AA7 0A                 5576 	.db 0x0A
   0AA8 41 6C 61 72 6D 20  5577 	.ascii "Alarm %d disabled!"
        25 64 20 64 69 73
        61 62 6C 65 64 21
   0ABA 0D                 5578 	.db 0x0D
   0ABB 0A                 5579 	.db 0x0A
   0ABC 00                 5580 	.db 0x00
   0ABD                    5581 __str_85:
   0ABD 20 20 20 20 20 20  5582 	.ascii "              "
        20 20 20 20 20 20
        20 20
   0ACB 00                 5583 	.db 0x00
                           5584 	.area XINIT   (CODE)
   0000                    5585 __xinit__mode:
   0000 00                 5586 	.db #0x00
   0001                    5587 __xinit__ExpiredAlarms:
   0001 00                 5588 	.db #0x00
   0002 00                 5589 	.db #0x00
   0003 00                 5590 	.db #0x00
