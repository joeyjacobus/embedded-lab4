                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sun Nov 06 20:16:35 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _handleInput
                             14 	.globl _getBlockAndAddress
                             15 	.globl _ShowMenu
                             16 	.globl __sdcc_external_startup
                             17 	.globl _P5_7
                             18 	.globl _P5_6
                             19 	.globl _P5_5
                             20 	.globl _P5_4
                             21 	.globl _P5_3
                             22 	.globl _P5_2
                             23 	.globl _P5_1
                             24 	.globl _P5_0
                             25 	.globl _P4_7
                             26 	.globl _P4_6
                             27 	.globl _P4_5
                             28 	.globl _P4_4
                             29 	.globl _P4_3
                             30 	.globl _P4_2
                             31 	.globl _P4_1
                             32 	.globl _P4_0
                             33 	.globl _PX0L
                             34 	.globl _PT0L
                             35 	.globl _PX1L
                             36 	.globl _PT1L
                             37 	.globl _PLS
                             38 	.globl _PT2L
                             39 	.globl _PPCL
                             40 	.globl _EC
                             41 	.globl _CCF0
                             42 	.globl _CCF1
                             43 	.globl _CCF2
                             44 	.globl _CCF3
                             45 	.globl _CCF4
                             46 	.globl _CR
                             47 	.globl _CF
                             48 	.globl _TF2
                             49 	.globl _EXF2
                             50 	.globl _RCLK
                             51 	.globl _TCLK
                             52 	.globl _EXEN2
                             53 	.globl _TR2
                             54 	.globl _C_T2
                             55 	.globl _CP_RL2
                             56 	.globl _T2CON_7
                             57 	.globl _T2CON_6
                             58 	.globl _T2CON_5
                             59 	.globl _T2CON_4
                             60 	.globl _T2CON_3
                             61 	.globl _T2CON_2
                             62 	.globl _T2CON_1
                             63 	.globl _T2CON_0
                             64 	.globl _PT2
                             65 	.globl _ET2
                             66 	.globl _CY
                             67 	.globl _AC
                             68 	.globl _F0
                             69 	.globl _RS1
                             70 	.globl _RS0
                             71 	.globl _OV
                             72 	.globl _F1
                             73 	.globl _P
                             74 	.globl _PS
                             75 	.globl _PT1
                             76 	.globl _PX1
                             77 	.globl _PT0
                             78 	.globl _PX0
                             79 	.globl _RD
                             80 	.globl _WR
                             81 	.globl _T1
                             82 	.globl _T0
                             83 	.globl _INT1
                             84 	.globl _INT0
                             85 	.globl _TXD
                             86 	.globl _RXD
                             87 	.globl _P3_7
                             88 	.globl _P3_6
                             89 	.globl _P3_5
                             90 	.globl _P3_4
                             91 	.globl _P3_3
                             92 	.globl _P3_2
                             93 	.globl _P3_1
                             94 	.globl _P3_0
                             95 	.globl _EA
                             96 	.globl _ES
                             97 	.globl _ET1
                             98 	.globl _EX1
                             99 	.globl _ET0
                            100 	.globl _EX0
                            101 	.globl _P2_7
                            102 	.globl _P2_6
                            103 	.globl _P2_5
                            104 	.globl _P2_4
                            105 	.globl _P2_3
                            106 	.globl _P2_2
                            107 	.globl _P2_1
                            108 	.globl _P2_0
                            109 	.globl _SM0
                            110 	.globl _SM1
                            111 	.globl _SM2
                            112 	.globl _REN
                            113 	.globl _TB8
                            114 	.globl _RB8
                            115 	.globl _TI
                            116 	.globl _RI
                            117 	.globl _P1_7
                            118 	.globl _P1_6
                            119 	.globl _P1_5
                            120 	.globl _P1_4
                            121 	.globl _P1_3
                            122 	.globl _P1_2
                            123 	.globl _P1_1
                            124 	.globl _P1_0
                            125 	.globl _TF1
                            126 	.globl _TR1
                            127 	.globl _TF0
                            128 	.globl _TR0
                            129 	.globl _IE1
                            130 	.globl _IT1
                            131 	.globl _IE0
                            132 	.globl _IT0
                            133 	.globl _P0_7
                            134 	.globl _P0_6
                            135 	.globl _P0_5
                            136 	.globl _P0_4
                            137 	.globl _P0_3
                            138 	.globl _P0_2
                            139 	.globl _P0_1
                            140 	.globl _P0_0
                            141 	.globl _EECON
                            142 	.globl _KBF
                            143 	.globl _KBE
                            144 	.globl _KBLS
                            145 	.globl _BRL
                            146 	.globl _BDRCON
                            147 	.globl _T2MOD
                            148 	.globl _SPDAT
                            149 	.globl _SPSTA
                            150 	.globl _SPCON
                            151 	.globl _SADEN
                            152 	.globl _SADDR
                            153 	.globl _WDTPRG
                            154 	.globl _WDTRST
                            155 	.globl _P5
                            156 	.globl _P4
                            157 	.globl _IPH1
                            158 	.globl _IPL1
                            159 	.globl _IPH0
                            160 	.globl _IPL0
                            161 	.globl _IEN1
                            162 	.globl _IEN0
                            163 	.globl _CMOD
                            164 	.globl _CL
                            165 	.globl _CH
                            166 	.globl _CCON
                            167 	.globl _CCAPM4
                            168 	.globl _CCAPM3
                            169 	.globl _CCAPM2
                            170 	.globl _CCAPM1
                            171 	.globl _CCAPM0
                            172 	.globl _CCAP4L
                            173 	.globl _CCAP3L
                            174 	.globl _CCAP2L
                            175 	.globl _CCAP1L
                            176 	.globl _CCAP0L
                            177 	.globl _CCAP4H
                            178 	.globl _CCAP3H
                            179 	.globl _CCAP2H
                            180 	.globl _CCAP1H
                            181 	.globl _CCAP0H
                            182 	.globl _CKCKON1
                            183 	.globl _CKCKON0
                            184 	.globl _CKRL
                            185 	.globl _AUXR1
                            186 	.globl _AUXR
                            187 	.globl _TH2
                            188 	.globl _TL2
                            189 	.globl _RCAP2H
                            190 	.globl _RCAP2L
                            191 	.globl _T2CON
                            192 	.globl _B
                            193 	.globl _ACC
                            194 	.globl _PSW
                            195 	.globl _IP
                            196 	.globl _P3
                            197 	.globl _IE
                            198 	.globl _P2
                            199 	.globl _SBUF
                            200 	.globl _SCON
                            201 	.globl _P1
                            202 	.globl _TH1
                            203 	.globl _TH0
                            204 	.globl _TL1
                            205 	.globl _TL0
                            206 	.globl _TMOD
                            207 	.globl _TCON
                            208 	.globl _PCON
                            209 	.globl _DPH
                            210 	.globl _DPL
                            211 	.globl _SP
                            212 	.globl _P0
                            213 	.globl _getBlockAndAddress_PARM_2
                            214 ;--------------------------------------------------------
                            215 ; special function registers
                            216 ;--------------------------------------------------------
                            217 	.area RSEG    (DATA)
                    0080    218 _P0	=	0x0080
                    0081    219 _SP	=	0x0081
                    0082    220 _DPL	=	0x0082
                    0083    221 _DPH	=	0x0083
                    0087    222 _PCON	=	0x0087
                    0088    223 _TCON	=	0x0088
                    0089    224 _TMOD	=	0x0089
                    008A    225 _TL0	=	0x008a
                    008B    226 _TL1	=	0x008b
                    008C    227 _TH0	=	0x008c
                    008D    228 _TH1	=	0x008d
                    0090    229 _P1	=	0x0090
                    0098    230 _SCON	=	0x0098
                    0099    231 _SBUF	=	0x0099
                    00A0    232 _P2	=	0x00a0
                    00A8    233 _IE	=	0x00a8
                    00B0    234 _P3	=	0x00b0
                    00B8    235 _IP	=	0x00b8
                    00D0    236 _PSW	=	0x00d0
                    00E0    237 _ACC	=	0x00e0
                    00F0    238 _B	=	0x00f0
                    00C8    239 _T2CON	=	0x00c8
                    00CA    240 _RCAP2L	=	0x00ca
                    00CB    241 _RCAP2H	=	0x00cb
                    00CC    242 _TL2	=	0x00cc
                    00CD    243 _TH2	=	0x00cd
                    008E    244 _AUXR	=	0x008e
                    00A2    245 _AUXR1	=	0x00a2
                    0097    246 _CKRL	=	0x0097
                    008F    247 _CKCKON0	=	0x008f
                    008F    248 _CKCKON1	=	0x008f
                    00FA    249 _CCAP0H	=	0x00fa
                    00FB    250 _CCAP1H	=	0x00fb
                    00FC    251 _CCAP2H	=	0x00fc
                    00FD    252 _CCAP3H	=	0x00fd
                    00FE    253 _CCAP4H	=	0x00fe
                    00EA    254 _CCAP0L	=	0x00ea
                    00EB    255 _CCAP1L	=	0x00eb
                    00EC    256 _CCAP2L	=	0x00ec
                    00ED    257 _CCAP3L	=	0x00ed
                    00EE    258 _CCAP4L	=	0x00ee
                    00DA    259 _CCAPM0	=	0x00da
                    00DB    260 _CCAPM1	=	0x00db
                    00DC    261 _CCAPM2	=	0x00dc
                    00DD    262 _CCAPM3	=	0x00dd
                    00DE    263 _CCAPM4	=	0x00de
                    00D8    264 _CCON	=	0x00d8
                    00F9    265 _CH	=	0x00f9
                    00E9    266 _CL	=	0x00e9
                    00D9    267 _CMOD	=	0x00d9
                    00A8    268 _IEN0	=	0x00a8
                    00B1    269 _IEN1	=	0x00b1
                    00B8    270 _IPL0	=	0x00b8
                    00B7    271 _IPH0	=	0x00b7
                    00B2    272 _IPL1	=	0x00b2
                    00B3    273 _IPH1	=	0x00b3
                    00C0    274 _P4	=	0x00c0
                    00D8    275 _P5	=	0x00d8
                    00A6    276 _WDTRST	=	0x00a6
                    00A7    277 _WDTPRG	=	0x00a7
                    00A9    278 _SADDR	=	0x00a9
                    00B9    279 _SADEN	=	0x00b9
                    00C3    280 _SPCON	=	0x00c3
                    00C4    281 _SPSTA	=	0x00c4
                    00C5    282 _SPDAT	=	0x00c5
                    00C9    283 _T2MOD	=	0x00c9
                    009B    284 _BDRCON	=	0x009b
                    009A    285 _BRL	=	0x009a
                    009C    286 _KBLS	=	0x009c
                    009D    287 _KBE	=	0x009d
                    009E    288 _KBF	=	0x009e
                    00D2    289 _EECON	=	0x00d2
                            290 ;--------------------------------------------------------
                            291 ; special function bits
                            292 ;--------------------------------------------------------
                            293 	.area RSEG    (DATA)
                    0080    294 _P0_0	=	0x0080
                    0081    295 _P0_1	=	0x0081
                    0082    296 _P0_2	=	0x0082
                    0083    297 _P0_3	=	0x0083
                    0084    298 _P0_4	=	0x0084
                    0085    299 _P0_5	=	0x0085
                    0086    300 _P0_6	=	0x0086
                    0087    301 _P0_7	=	0x0087
                    0088    302 _IT0	=	0x0088
                    0089    303 _IE0	=	0x0089
                    008A    304 _IT1	=	0x008a
                    008B    305 _IE1	=	0x008b
                    008C    306 _TR0	=	0x008c
                    008D    307 _TF0	=	0x008d
                    008E    308 _TR1	=	0x008e
                    008F    309 _TF1	=	0x008f
                    0090    310 _P1_0	=	0x0090
                    0091    311 _P1_1	=	0x0091
                    0092    312 _P1_2	=	0x0092
                    0093    313 _P1_3	=	0x0093
                    0094    314 _P1_4	=	0x0094
                    0095    315 _P1_5	=	0x0095
                    0096    316 _P1_6	=	0x0096
                    0097    317 _P1_7	=	0x0097
                    0098    318 _RI	=	0x0098
                    0099    319 _TI	=	0x0099
                    009A    320 _RB8	=	0x009a
                    009B    321 _TB8	=	0x009b
                    009C    322 _REN	=	0x009c
                    009D    323 _SM2	=	0x009d
                    009E    324 _SM1	=	0x009e
                    009F    325 _SM0	=	0x009f
                    00A0    326 _P2_0	=	0x00a0
                    00A1    327 _P2_1	=	0x00a1
                    00A2    328 _P2_2	=	0x00a2
                    00A3    329 _P2_3	=	0x00a3
                    00A4    330 _P2_4	=	0x00a4
                    00A5    331 _P2_5	=	0x00a5
                    00A6    332 _P2_6	=	0x00a6
                    00A7    333 _P2_7	=	0x00a7
                    00A8    334 _EX0	=	0x00a8
                    00A9    335 _ET0	=	0x00a9
                    00AA    336 _EX1	=	0x00aa
                    00AB    337 _ET1	=	0x00ab
                    00AC    338 _ES	=	0x00ac
                    00AF    339 _EA	=	0x00af
                    00B0    340 _P3_0	=	0x00b0
                    00B1    341 _P3_1	=	0x00b1
                    00B2    342 _P3_2	=	0x00b2
                    00B3    343 _P3_3	=	0x00b3
                    00B4    344 _P3_4	=	0x00b4
                    00B5    345 _P3_5	=	0x00b5
                    00B6    346 _P3_6	=	0x00b6
                    00B7    347 _P3_7	=	0x00b7
                    00B0    348 _RXD	=	0x00b0
                    00B1    349 _TXD	=	0x00b1
                    00B2    350 _INT0	=	0x00b2
                    00B3    351 _INT1	=	0x00b3
                    00B4    352 _T0	=	0x00b4
                    00B5    353 _T1	=	0x00b5
                    00B6    354 _WR	=	0x00b6
                    00B7    355 _RD	=	0x00b7
                    00B8    356 _PX0	=	0x00b8
                    00B9    357 _PT0	=	0x00b9
                    00BA    358 _PX1	=	0x00ba
                    00BB    359 _PT1	=	0x00bb
                    00BC    360 _PS	=	0x00bc
                    00D0    361 _P	=	0x00d0
                    00D1    362 _F1	=	0x00d1
                    00D2    363 _OV	=	0x00d2
                    00D3    364 _RS0	=	0x00d3
                    00D4    365 _RS1	=	0x00d4
                    00D5    366 _F0	=	0x00d5
                    00D6    367 _AC	=	0x00d6
                    00D7    368 _CY	=	0x00d7
                    00AD    369 _ET2	=	0x00ad
                    00BD    370 _PT2	=	0x00bd
                    00C8    371 _T2CON_0	=	0x00c8
                    00C9    372 _T2CON_1	=	0x00c9
                    00CA    373 _T2CON_2	=	0x00ca
                    00CB    374 _T2CON_3	=	0x00cb
                    00CC    375 _T2CON_4	=	0x00cc
                    00CD    376 _T2CON_5	=	0x00cd
                    00CE    377 _T2CON_6	=	0x00ce
                    00CF    378 _T2CON_7	=	0x00cf
                    00C8    379 _CP_RL2	=	0x00c8
                    00C9    380 _C_T2	=	0x00c9
                    00CA    381 _TR2	=	0x00ca
                    00CB    382 _EXEN2	=	0x00cb
                    00CC    383 _TCLK	=	0x00cc
                    00CD    384 _RCLK	=	0x00cd
                    00CE    385 _EXF2	=	0x00ce
                    00CF    386 _TF2	=	0x00cf
                    00DF    387 _CF	=	0x00df
                    00DE    388 _CR	=	0x00de
                    00DC    389 _CCF4	=	0x00dc
                    00DB    390 _CCF3	=	0x00db
                    00DA    391 _CCF2	=	0x00da
                    00D9    392 _CCF1	=	0x00d9
                    00D8    393 _CCF0	=	0x00d8
                    00AE    394 _EC	=	0x00ae
                    00BE    395 _PPCL	=	0x00be
                    00BD    396 _PT2L	=	0x00bd
                    00BC    397 _PLS	=	0x00bc
                    00BB    398 _PT1L	=	0x00bb
                    00BA    399 _PX1L	=	0x00ba
                    00B9    400 _PT0L	=	0x00b9
                    00B8    401 _PX0L	=	0x00b8
                    00C0    402 _P4_0	=	0x00c0
                    00C1    403 _P4_1	=	0x00c1
                    00C2    404 _P4_2	=	0x00c2
                    00C3    405 _P4_3	=	0x00c3
                    00C4    406 _P4_4	=	0x00c4
                    00C5    407 _P4_5	=	0x00c5
                    00C6    408 _P4_6	=	0x00c6
                    00C7    409 _P4_7	=	0x00c7
                    00D8    410 _P5_0	=	0x00d8
                    00D9    411 _P5_1	=	0x00d9
                    00DA    412 _P5_2	=	0x00da
                    00DB    413 _P5_3	=	0x00db
                    00DC    414 _P5_4	=	0x00dc
                    00DD    415 _P5_5	=	0x00dd
                    00DE    416 _P5_6	=	0x00de
                    00DF    417 _P5_7	=	0x00df
                            418 ;--------------------------------------------------------
                            419 ; overlayable register banks
                            420 ;--------------------------------------------------------
                            421 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     422 	.ds 8
                            423 ;--------------------------------------------------------
                            424 ; internal ram data
                            425 ;--------------------------------------------------------
                            426 	.area DSEG    (DATA)
                            427 ;--------------------------------------------------------
                            428 ; overlayable items in internal ram 
                            429 ;--------------------------------------------------------
                            430 	.area OSEG    (OVR,DATA)
                            431 ;--------------------------------------------------------
                            432 ; Stack segment in internal ram 
                            433 ;--------------------------------------------------------
                            434 	.area	SSEG	(DATA)
   0000                     435 __start__stack:
   0000                     436 	.ds	1
                            437 
                            438 ;--------------------------------------------------------
                            439 ; indirectly addressable internal ram data
                            440 ;--------------------------------------------------------
                            441 	.area ISEG    (DATA)
                            442 ;--------------------------------------------------------
                            443 ; bit data
                            444 ;--------------------------------------------------------
                            445 	.area BSEG    (BIT)
                            446 ;--------------------------------------------------------
                            447 ; paged external ram data
                            448 ;--------------------------------------------------------
                            449 	.area PSEG    (PAG,XDATA)
                            450 ;--------------------------------------------------------
                            451 ; external ram data
                            452 ;--------------------------------------------------------
                            453 	.area XSEG    (XDATA)
   0000                     454 _getBlockAndAddress_PARM_2:
   0000                     455 	.ds 3
   0003                     456 _getBlockAndAddress_address_1_1:
   0003                     457 	.ds 3
   0006                     458 _handleInput_c_1_1:
   0006                     459 	.ds 1
   0007                     460 _handleInput_block_1_1:
   0007                     461 	.ds 1
   0008                     462 _handleInput_end_block_1_1:
   0008                     463 	.ds 1
   0009                     464 _handleInput_address_1_1:
   0009                     465 	.ds 1
   000A                     466 _handleInput_end_address_1_1:
   000A                     467 	.ds 1
   000B                     468 _handleInput_start_addr_1_1:
   000B                     469 	.ds 2
   000D                     470 _handleInput_end_addr_1_1:
   000D                     471 	.ds 2
                            472 ;--------------------------------------------------------
                            473 ; external initialized ram data
                            474 ;--------------------------------------------------------
                            475 	.area XISEG   (XDATA)
                            476 	.area HOME    (CODE)
                            477 	.area GSINIT0 (CODE)
                            478 	.area GSINIT1 (CODE)
                            479 	.area GSINIT2 (CODE)
                            480 	.area GSINIT3 (CODE)
                            481 	.area GSINIT4 (CODE)
                            482 	.area GSINIT5 (CODE)
                            483 	.area GSINIT  (CODE)
                            484 	.area GSFINAL (CODE)
                            485 	.area CSEG    (CODE)
                            486 ;--------------------------------------------------------
                            487 ; interrupt vector 
                            488 ;--------------------------------------------------------
                            489 	.area HOME    (CODE)
   0000                     490 __interrupt_vect:
   0000 02s00r00            491 	ljmp	__sdcc_gsinit_startup
                            492 ;--------------------------------------------------------
                            493 ; global & static initialisations
                            494 ;--------------------------------------------------------
                            495 	.area HOME    (CODE)
                            496 	.area GSINIT  (CODE)
                            497 	.area GSFINAL (CODE)
                            498 	.area GSINIT  (CODE)
                            499 	.globl __sdcc_gsinit_startup
                            500 	.globl __sdcc_program_startup
                            501 	.globl __start__stack
                            502 	.globl __mcs51_genXINIT
                            503 	.globl __mcs51_genXRAMCLEAR
                            504 	.globl __mcs51_genRAMCLEAR
                            505 	.area GSFINAL (CODE)
   0000 02s00r00            506 	ljmp	__sdcc_program_startup
                            507 ;--------------------------------------------------------
                            508 ; Home
                            509 ;--------------------------------------------------------
                            510 	.area HOME    (CODE)
                            511 	.area CSEG    (CODE)
   0000                     512 __sdcc_program_startup:
   0000 12s08rA8            513 	lcall	_main
                            514 ;	return from main will lock up
   0003 80 FE               515 	sjmp .
                            516 ;--------------------------------------------------------
                            517 ; code
                            518 ;--------------------------------------------------------
                            519 	.area CSEG    (CODE)
                            520 ;------------------------------------------------------------
                            521 ;Allocation info for local variables in function '_sdcc_external_startup'
                            522 ;------------------------------------------------------------
                            523 ;------------------------------------------------------------
                            524 ;	main.c:15: _sdcc_external_startup(){
                            525 ;	-----------------------------------------
                            526 ;	 function _sdcc_external_startup
                            527 ;	-----------------------------------------
   0005                     528 __sdcc_external_startup:
                    0002    529 	ar2 = 0x02
                    0003    530 	ar3 = 0x03
                    0004    531 	ar4 = 0x04
                    0005    532 	ar5 = 0x05
                    0006    533 	ar6 = 0x06
                    0007    534 	ar7 = 0x07
                    0000    535 	ar0 = 0x00
                    0001    536 	ar1 = 0x01
                            537 ;	main.c:17: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            538 ;	genOr
   0005 43 8E 0C            539 	orl	_AUXR,#0x0C
                            540 ;	main.c:18: return 0;
                            541 ;	genRet
                            542 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            543 	mov	dptr,#0x0000
                            544 ;	Peephole 300	removed redundant label 00101$
   000B 22                  545 	ret
                            546 ;------------------------------------------------------------
                            547 ;Allocation info for local variables in function 'ShowMenu'
                            548 ;------------------------------------------------------------
                            549 ;------------------------------------------------------------
                            550 ;	main.c:25: void ShowMenu(void){
                            551 ;	-----------------------------------------
                            552 ;	 function ShowMenu
                            553 ;	-----------------------------------------
   000C                     554 _ShowMenu:
                            555 ;	main.c:26: printf("\r\n***************");
                            556 ;	genIpush
   000C 74r00               557 	mov	a,#__str_0
   000E C0 E0               558 	push	acc
   0010 74s00               559 	mov	a,#(__str_0 >> 8)
   0012 C0 E0               560 	push	acc
   0014 74 80               561 	mov	a,#0x80
   0016 C0 E0               562 	push	acc
                            563 ;	genCall
   0018 12s00r00            564 	lcall	_printf
   001B 15 81               565 	dec	sp
   001D 15 81               566 	dec	sp
   001F 15 81               567 	dec	sp
                            568 ;	main.c:27: printf("\r\n    Menu\r\n");
                            569 ;	genIpush
   0021 74r12               570 	mov	a,#__str_1
   0023 C0 E0               571 	push	acc
   0025 74s00               572 	mov	a,#(__str_1 >> 8)
   0027 C0 E0               573 	push	acc
   0029 74 80               574 	mov	a,#0x80
   002B C0 E0               575 	push	acc
                            576 ;	genCall
   002D 12s00r00            577 	lcall	_printf
   0030 15 81               578 	dec	sp
   0032 15 81               579 	dec	sp
   0034 15 81               580 	dec	sp
                            581 ;	main.c:28: printf("\r\n***************");
                            582 ;	genIpush
   0036 74r00               583 	mov	a,#__str_0
   0038 C0 E0               584 	push	acc
   003A 74s00               585 	mov	a,#(__str_0 >> 8)
   003C C0 E0               586 	push	acc
   003E 74 80               587 	mov	a,#0x80
   0040 C0 E0               588 	push	acc
                            589 ;	genCall
   0042 12s00r00            590 	lcall	_printf
   0045 15 81               591 	dec	sp
   0047 15 81               592 	dec	sp
   0049 15 81               593 	dec	sp
                            594 ;	main.c:29: printf("\r\nPress 'H' to show this menu");
                            595 ;	genIpush
   004B 74r1F               596 	mov	a,#__str_2
   004D C0 E0               597 	push	acc
   004F 74s00               598 	mov	a,#(__str_2 >> 8)
   0051 C0 E0               599 	push	acc
   0053 74 80               600 	mov	a,#0x80
   0055 C0 E0               601 	push	acc
                            602 ;	genCall
   0057 12s00r00            603 	lcall	_printf
   005A 15 81               604 	dec	sp
   005C 15 81               605 	dec	sp
   005E 15 81               606 	dec	sp
                            607 ;	main.c:30: printf("\r\nPress 'W' to write a byte to EEPROM");
                            608 ;	genIpush
   0060 74r3D               609 	mov	a,#__str_3
   0062 C0 E0               610 	push	acc
   0064 74s00               611 	mov	a,#(__str_3 >> 8)
   0066 C0 E0               612 	push	acc
   0068 74 80               613 	mov	a,#0x80
   006A C0 E0               614 	push	acc
                            615 ;	genCall
   006C 12s00r00            616 	lcall	_printf
   006F 15 81               617 	dec	sp
   0071 15 81               618 	dec	sp
   0073 15 81               619 	dec	sp
                            620 ;	main.c:31: printf("\r\nPress 'R' to read a byte from EEPROM");
                            621 ;	genIpush
   0075 74r63               622 	mov	a,#__str_4
   0077 C0 E0               623 	push	acc
   0079 74s00               624 	mov	a,#(__str_4 >> 8)
   007B C0 E0               625 	push	acc
   007D 74 80               626 	mov	a,#0x80
   007F C0 E0               627 	push	acc
                            628 ;	genCall
   0081 12s00r00            629 	lcall	_printf
   0084 15 81               630 	dec	sp
   0086 15 81               631 	dec	sp
   0088 15 81               632 	dec	sp
                            633 ;	main.c:32: printf("\r\nPress 'L' to display EEPROM data on LCD");
                            634 ;	genIpush
   008A 74r8A               635 	mov	a,#__str_5
   008C C0 E0               636 	push	acc
   008E 74s00               637 	mov	a,#(__str_5 >> 8)
   0090 C0 E0               638 	push	acc
   0092 74 80               639 	mov	a,#0x80
   0094 C0 E0               640 	push	acc
                            641 ;	genCall
   0096 12s00r00            642 	lcall	_printf
   0099 15 81               643 	dec	sp
   009B 15 81               644 	dec	sp
   009D 15 81               645 	dec	sp
                            646 ;	main.c:33: printf("\r\nPress 'C' to clear the LCD display");
                            647 ;	genIpush
   009F 74rB4               648 	mov	a,#__str_6
   00A1 C0 E0               649 	push	acc
   00A3 74s00               650 	mov	a,#(__str_6 >> 8)
   00A5 C0 E0               651 	push	acc
   00A7 74 80               652 	mov	a,#0x80
   00A9 C0 E0               653 	push	acc
                            654 ;	genCall
   00AB 12s00r00            655 	lcall	_printf
   00AE 15 81               656 	dec	sp
   00B0 15 81               657 	dec	sp
   00B2 15 81               658 	dec	sp
                            659 ;	main.c:34: printf("\r\nPress 'D' to do a Hex Dump of EEPROM");
                            660 ;	genIpush
   00B4 74rD9               661 	mov	a,#__str_7
   00B6 C0 E0               662 	push	acc
   00B8 74s00               663 	mov	a,#(__str_7 >> 8)
   00BA C0 E0               664 	push	acc
   00BC 74 80               665 	mov	a,#0x80
   00BE C0 E0               666 	push	acc
                            667 ;	genCall
   00C0 12s00r00            668 	lcall	_printf
   00C3 15 81               669 	dec	sp
   00C5 15 81               670 	dec	sp
   00C7 15 81               671 	dec	sp
                            672 ;	main.c:35: printf("\r\nPress 'Y' to read the contents of DDRAM");
                            673 ;	genIpush
   00C9 74r00               674 	mov	a,#__str_8
   00CB C0 E0               675 	push	acc
   00CD 74s01               676 	mov	a,#(__str_8 >> 8)
   00CF C0 E0               677 	push	acc
   00D1 74 80               678 	mov	a,#0x80
   00D3 C0 E0               679 	push	acc
                            680 ;	genCall
   00D5 12s00r00            681 	lcall	_printf
   00D8 15 81               682 	dec	sp
   00DA 15 81               683 	dec	sp
   00DC 15 81               684 	dec	sp
                            685 ;	main.c:36: printf("\r\nPress 'G' to read the contents of CGRAM\r\n");
                            686 ;	genIpush
   00DE 74r2A               687 	mov	a,#__str_9
   00E0 C0 E0               688 	push	acc
   00E2 74s01               689 	mov	a,#(__str_9 >> 8)
   00E4 C0 E0               690 	push	acc
   00E6 74 80               691 	mov	a,#0x80
   00E8 C0 E0               692 	push	acc
                            693 ;	genCall
   00EA 12s00r00            694 	lcall	_printf
   00ED 15 81               695 	dec	sp
   00EF 15 81               696 	dec	sp
   00F1 15 81               697 	dec	sp
                            698 ;	Peephole 300	removed redundant label 00101$
   00F3 22                  699 	ret
                            700 ;------------------------------------------------------------
                            701 ;Allocation info for local variables in function 'getBlockAndAddress'
                            702 ;------------------------------------------------------------
                            703 ;block                     Allocated with name '_getBlockAndAddress_PARM_2'
                            704 ;address                   Allocated with name '_getBlockAndAddress_address_1_1'
                            705 ;------------------------------------------------------------
                            706 ;	main.c:40: void getBlockAndAddress(uint8_t *address, uint8_t *block){
                            707 ;	-----------------------------------------
                            708 ;	 function getBlockAndAddress
                            709 ;	-----------------------------------------
   00F4                     710 _getBlockAndAddress:
                            711 ;	genReceive
   00F4 AA F0               712 	mov	r2,b
   00F6 AB 83               713 	mov	r3,dph
   00F8 E5 82               714 	mov	a,dpl
   00FA 90s00r03            715 	mov	dptr,#_getBlockAndAddress_address_1_1
   00FD F0                  716 	movx	@dptr,a
   00FE A3                  717 	inc	dptr
   00FF EB                  718 	mov	a,r3
   0100 F0                  719 	movx	@dptr,a
   0101 A3                  720 	inc	dptr
   0102 EA                  721 	mov	a,r2
   0103 F0                  722 	movx	@dptr,a
                            723 ;	main.c:41: printf("\r\nEnter an EEPROM block number from 0-7: ");
                            724 ;	genIpush
   0104 74r56               725 	mov	a,#__str_10
   0106 C0 E0               726 	push	acc
   0108 74s01               727 	mov	a,#(__str_10 >> 8)
   010A C0 E0               728 	push	acc
   010C 74 80               729 	mov	a,#0x80
   010E C0 E0               730 	push	acc
                            731 ;	genCall
   0110 12s00r00            732 	lcall	_printf
   0113 15 81               733 	dec	sp
   0115 15 81               734 	dec	sp
   0117 15 81               735 	dec	sp
                            736 ;	main.c:42: *block = Serial_GetInteger(1);
                            737 ;	genAssign
   0119 90s00r00            738 	mov	dptr,#_getBlockAndAddress_PARM_2
   011C E0                  739 	movx	a,@dptr
   011D FA                  740 	mov	r2,a
   011E A3                  741 	inc	dptr
   011F E0                  742 	movx	a,@dptr
   0120 FB                  743 	mov	r3,a
   0121 A3                  744 	inc	dptr
   0122 E0                  745 	movx	a,@dptr
   0123 FC                  746 	mov	r4,a
                            747 ;	genCall
                            748 ;	Peephole 182.b	used 16 bit load of dptr
   0124 90 00 01            749 	mov	dptr,#0x0001
   0127 C0 02               750 	push	ar2
   0129 C0 03               751 	push	ar3
   012B C0 04               752 	push	ar4
   012D 12s00r00            753 	lcall	_Serial_GetInteger
   0130 AD 82               754 	mov	r5,dpl
   0132 AE 83               755 	mov	r6,dph
   0134 D0 04               756 	pop	ar4
   0136 D0 03               757 	pop	ar3
   0138 D0 02               758 	pop	ar2
                            759 ;	genCast
                            760 ;	genPointerSet
                            761 ;	genGenPointerSet
   013A 8A 82               762 	mov	dpl,r2
   013C 8B 83               763 	mov	dph,r3
   013E 8C F0               764 	mov	b,r4
   0140 ED                  765 	mov	a,r5
   0141 12s00r00            766 	lcall	__gptrput
                            767 ;	main.c:43: while(*block > 7){
   0144                     768 00101$:
                            769 ;	genPointerGet
                            770 ;	genGenPointerGet
   0144 8A 82               771 	mov	dpl,r2
   0146 8B 83               772 	mov	dph,r3
   0148 8C F0               773 	mov	b,r4
   014A 12s00r00            774 	lcall	__gptrget
                            775 ;	genCmpGt
                            776 ;	genCmp
                            777 ;	genIfxJump
                            778 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            779 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   014D FD                  780 	mov  r5,a
                            781 ;	Peephole 177.a	removed redundant mov
   014E 24 F8               782 	add	a,#0xff - 0x07
   0150 50 43               783 	jnc	00103$
                            784 ;	Peephole 300	removed redundant label 00108$
                            785 ;	main.c:44: printf("\r\nINVALID: Enter an EEPROM block number from 0-7: ");
                            786 ;	genIpush
   0152 C0 02               787 	push	ar2
   0154 C0 03               788 	push	ar3
   0156 C0 04               789 	push	ar4
   0158 74r80               790 	mov	a,#__str_11
   015A C0 E0               791 	push	acc
   015C 74s01               792 	mov	a,#(__str_11 >> 8)
   015E C0 E0               793 	push	acc
   0160 74 80               794 	mov	a,#0x80
   0162 C0 E0               795 	push	acc
                            796 ;	genCall
   0164 12s00r00            797 	lcall	_printf
   0167 15 81               798 	dec	sp
   0169 15 81               799 	dec	sp
   016B 15 81               800 	dec	sp
   016D D0 04               801 	pop	ar4
   016F D0 03               802 	pop	ar3
   0171 D0 02               803 	pop	ar2
                            804 ;	main.c:45: *block = Serial_GetInteger(1);
                            805 ;	genCall
                            806 ;	Peephole 182.b	used 16 bit load of dptr
   0173 90 00 01            807 	mov	dptr,#0x0001
   0176 C0 02               808 	push	ar2
   0178 C0 03               809 	push	ar3
   017A C0 04               810 	push	ar4
   017C 12s00r00            811 	lcall	_Serial_GetInteger
   017F AD 82               812 	mov	r5,dpl
   0181 AE 83               813 	mov	r6,dph
   0183 D0 04               814 	pop	ar4
   0185 D0 03               815 	pop	ar3
   0187 D0 02               816 	pop	ar2
                            817 ;	genCast
                            818 ;	genPointerSet
                            819 ;	genGenPointerSet
   0189 8A 82               820 	mov	dpl,r2
   018B 8B 83               821 	mov	dph,r3
   018D 8C F0               822 	mov	b,r4
   018F ED                  823 	mov	a,r5
   0190 12s00r00            824 	lcall	__gptrput
                            825 ;	Peephole 112.b	changed ljmp to sjmp
   0193 80 AF               826 	sjmp	00101$
   0195                     827 00103$:
                            828 ;	main.c:48: printf("\r\nEnter an EEPROM Word address in hex:");
                            829 ;	genIpush
   0195 74rB3               830 	mov	a,#__str_12
   0197 C0 E0               831 	push	acc
   0199 74s01               832 	mov	a,#(__str_12 >> 8)
   019B C0 E0               833 	push	acc
   019D 74 80               834 	mov	a,#0x80
   019F C0 E0               835 	push	acc
                            836 ;	genCall
   01A1 12s00r00            837 	lcall	_printf
   01A4 15 81               838 	dec	sp
   01A6 15 81               839 	dec	sp
   01A8 15 81               840 	dec	sp
                            841 ;	main.c:49: *address = Serial_GetHex();
                            842 ;	genAssign
   01AA 90s00r03            843 	mov	dptr,#_getBlockAndAddress_address_1_1
   01AD E0                  844 	movx	a,@dptr
   01AE FA                  845 	mov	r2,a
   01AF A3                  846 	inc	dptr
   01B0 E0                  847 	movx	a,@dptr
   01B1 FB                  848 	mov	r3,a
   01B2 A3                  849 	inc	dptr
   01B3 E0                  850 	movx	a,@dptr
   01B4 FC                  851 	mov	r4,a
                            852 ;	genCall
   01B5 C0 02               853 	push	ar2
   01B7 C0 03               854 	push	ar3
   01B9 C0 04               855 	push	ar4
   01BB 12s00r00            856 	lcall	_Serial_GetHex
   01BE AD 82               857 	mov	r5,dpl
   01C0 D0 04               858 	pop	ar4
   01C2 D0 03               859 	pop	ar3
   01C4 D0 02               860 	pop	ar2
                            861 ;	genPointerSet
                            862 ;	genGenPointerSet
   01C6 8A 82               863 	mov	dpl,r2
   01C8 8B 83               864 	mov	dph,r3
   01CA 8C F0               865 	mov	b,r4
   01CC ED                  866 	mov	a,r5
                            867 ;	Peephole 253.b	replaced lcall/ret with ljmp
   01CD 02s00r00            868 	ljmp	__gptrput
                            869 ;
                            870 ;------------------------------------------------------------
                            871 ;Allocation info for local variables in function 'handleInput'
                            872 ;------------------------------------------------------------
                            873 ;c                         Allocated with name '_handleInput_c_1_1'
                            874 ;block                     Allocated with name '_handleInput_block_1_1'
                            875 ;end_block                 Allocated with name '_handleInput_end_block_1_1'
                            876 ;address                   Allocated with name '_handleInput_address_1_1'
                            877 ;end_address               Allocated with name '_handleInput_end_address_1_1'
                            878 ;i                         Allocated with name '_handleInput_i_1_1'
                            879 ;lcdData                   Allocated with name '_handleInput_lcdData_1_1'
                            880 ;Lcd_row                   Allocated with name '_handleInput_Lcd_row_1_1'
                            881 ;start_addr                Allocated with name '_handleInput_start_addr_1_1'
                            882 ;end_addr                  Allocated with name '_handleInput_end_addr_1_1'
                            883 ;------------------------------------------------------------
                            884 ;	main.c:55: void handleInput(char c){
                            885 ;	-----------------------------------------
                            886 ;	 function handleInput
                            887 ;	-----------------------------------------
   01D0                     888 _handleInput:
                            889 ;	genReceive
   01D0 E5 82               890 	mov	a,dpl
   01D2 90s00r06            891 	mov	dptr,#_handleInput_c_1_1
   01D5 F0                  892 	movx	@dptr,a
                            893 ;	main.c:67: switch (c){
                            894 ;	genAssign
   01D6 90s00r06            895 	mov	dptr,#_handleInput_c_1_1
   01D9 E0                  896 	movx	a,@dptr
   01DA FA                  897 	mov	r2,a
                            898 ;	genCmpEq
                            899 ;	gencjneshort
   01DB BA 43 03            900 	cjne	r2,#0x43,00174$
   01DE 02s03rBA            901 	ljmp	00104$
   01E1                     902 00174$:
                            903 ;	genCmpEq
                            904 ;	gencjneshort
   01E1 BA 44 03            905 	cjne	r2,#0x44,00175$
   01E4 02s03rD3            906 	ljmp	00105$
   01E7                     907 00175$:
                            908 ;	genCmpEq
                            909 ;	gencjneshort
   01E7 BA 47 03            910 	cjne	r2,#0x47,00176$
   01EA 02s07rE0            911 	ljmp	00118$
   01ED                     912 00176$:
                            913 ;	genCmpEq
                            914 ;	gencjneshort
   01ED BA 48 03            915 	cjne	r2,#0x48,00177$
   01F0 02s08rA5            916 	ljmp	00122$
   01F3                     917 00177$:
                            918 ;	genCmpEq
                            919 ;	gencjneshort
   01F3 BA 4C 03            920 	cjne	r2,#0x4C,00178$
   01F6 02s03r13            921 	ljmp	00103$
   01F9                     922 00178$:
                            923 ;	genCmpEq
                            924 ;	gencjneshort
   01F9 BA 52 03            925 	cjne	r2,#0x52,00179$
   01FC 02s02rA0            926 	ljmp	00102$
   01FF                     927 00179$:
                            928 ;	genCmpEq
                            929 ;	gencjneshort
   01FF BA 57 02            930 	cjne	r2,#0x57,00180$
                            931 ;	Peephole 112.b	changed ljmp to sjmp
   0202 80 07               932 	sjmp	00101$
   0204                     933 00180$:
                            934 ;	genCmpEq
                            935 ;	gencjneshort
   0204 BA 59 03            936 	cjne	r2,#0x59,00181$
   0207 02s05rA6            937 	ljmp	00117$
   020A                     938 00181$:
                            939 ;	Peephole 251.a	replaced ljmp to ret with ret
   020A 22                  940 	ret
                            941 ;	main.c:68: case 'W':
   020B                     942 00101$:
                            943 ;	main.c:69: printf("\r\nWriting to EEPROM...");
                            944 ;	genIpush
   020B 74rDA               945 	mov	a,#__str_13
   020D C0 E0               946 	push	acc
   020F 74s01               947 	mov	a,#(__str_13 >> 8)
   0211 C0 E0               948 	push	acc
   0213 74 80               949 	mov	a,#0x80
   0215 C0 E0               950 	push	acc
                            951 ;	genCall
   0217 12s00r00            952 	lcall	_printf
   021A 15 81               953 	dec	sp
   021C 15 81               954 	dec	sp
   021E 15 81               955 	dec	sp
                            956 ;	main.c:70: getBlockAndAddress(&address, &block);
                            957 ;	genCast
   0220 90s00r00            958 	mov	dptr,#_getBlockAndAddress_PARM_2
   0223 74r07               959 	mov	a,#_handleInput_block_1_1
   0225 F0                  960 	movx	@dptr,a
   0226 A3                  961 	inc	dptr
   0227 74s00               962 	mov	a,#(_handleInput_block_1_1 >> 8)
   0229 F0                  963 	movx	@dptr,a
   022A A3                  964 	inc	dptr
   022B 74 00               965 	mov	a,#0x0
   022D F0                  966 	movx	@dptr,a
                            967 ;	genCall
                            968 ;	Peephole 182.a	used 16 bit load of DPTR
   022E 90s00r09            969 	mov	dptr,#_handleInput_address_1_1
   0231 75 F0 00            970 	mov	b,#0x00
   0234 12s00rF4            971 	lcall	_getBlockAndAddress
                            972 ;	main.c:71: printf("\r\nEnter a byte of data to write to EEPROM:");
                            973 ;	genIpush
   0237 74rF1               974 	mov	a,#__str_14
   0239 C0 E0               975 	push	acc
   023B 74s01               976 	mov	a,#(__str_14 >> 8)
   023D C0 E0               977 	push	acc
   023F 74 80               978 	mov	a,#0x80
   0241 C0 E0               979 	push	acc
                            980 ;	genCall
   0243 12s00r00            981 	lcall	_printf
   0246 15 81               982 	dec	sp
   0248 15 81               983 	dec	sp
   024A 15 81               984 	dec	sp
                            985 ;	main.c:72: lcdData = Serial_GetHex();
                            986 ;	genCall
   024C 12s00r00            987 	lcall	_Serial_GetHex
   024F AA 82               988 	mov	r2,dpl
                            989 ;	main.c:73: EPROM_ByteWrite(lcdData, address, block);
                            990 ;	genAssign
   0251 90s00r09            991 	mov	dptr,#_handleInput_address_1_1
   0254 E0                  992 	movx	a,@dptr
   0255 FB                  993 	mov	r3,a
                            994 ;	genAssign
   0256 90s00r07            995 	mov	dptr,#_handleInput_block_1_1
   0259 E0                  996 	movx	a,@dptr
   025A FC                  997 	mov	r4,a
                            998 ;	genAssign
   025B 90s00r00            999 	mov	dptr,#_EPROM_ByteWrite_PARM_2
   025E EB                 1000 	mov	a,r3
   025F F0                 1001 	movx	@dptr,a
                           1002 ;	genAssign
   0260 90s00r00           1003 	mov	dptr,#_EPROM_ByteWrite_PARM_3
   0263 EC                 1004 	mov	a,r4
   0264 F0                 1005 	movx	@dptr,a
                           1006 ;	genCall
   0265 8A 82              1007 	mov	dpl,r2
   0267 C0 02              1008 	push	ar2
   0269 12s00r00           1009 	lcall	_EPROM_ByteWrite
   026C D0 02              1010 	pop	ar2
                           1011 ;	main.c:74: printf("\r\nWrote %X to block %d address 0x%X in EEPROM!\r\n", lcdData, block, address);
                           1012 ;	genAssign
   026E 90s00r09           1013 	mov	dptr,#_handleInput_address_1_1
   0271 E0                 1014 	movx	a,@dptr
   0272 FB                 1015 	mov	r3,a
                           1016 ;	genCast
   0273 7C 00              1017 	mov	r4,#0x00
                           1018 ;	genAssign
   0275 90s00r07           1019 	mov	dptr,#_handleInput_block_1_1
   0278 E0                 1020 	movx	a,@dptr
   0279 FD                 1021 	mov	r5,a
                           1022 ;	genCast
   027A 7E 00              1023 	mov	r6,#0x00
                           1024 ;	genCast
   027C 7F 00              1025 	mov	r7,#0x00
                           1026 ;	genIpush
   027E C0 03              1027 	push	ar3
   0280 C0 04              1028 	push	ar4
                           1029 ;	genIpush
   0282 C0 05              1030 	push	ar5
   0284 C0 06              1031 	push	ar6
                           1032 ;	genIpush
   0286 C0 02              1033 	push	ar2
   0288 C0 07              1034 	push	ar7
                           1035 ;	genIpush
   028A 74r1C              1036 	mov	a,#__str_15
   028C C0 E0              1037 	push	acc
   028E 74s02              1038 	mov	a,#(__str_15 >> 8)
   0290 C0 E0              1039 	push	acc
   0292 74 80              1040 	mov	a,#0x80
   0294 C0 E0              1041 	push	acc
                           1042 ;	genCall
   0296 12s00r00           1043 	lcall	_printf
   0299 E5 81              1044 	mov	a,sp
   029B 24 F7              1045 	add	a,#0xf7
   029D F5 81              1046 	mov	sp,a
                           1047 ;	main.c:75: break;
                           1048 ;	Peephole 251.a	replaced ljmp to ret with ret
   029F 22                 1049 	ret
                           1050 ;	main.c:76: case 'R':
   02A0                    1051 00102$:
                           1052 ;	main.c:77: printf("\r\nReading from EEPROM...");
                           1053 ;	genIpush
   02A0 74r4D              1054 	mov	a,#__str_16
   02A2 C0 E0              1055 	push	acc
   02A4 74s02              1056 	mov	a,#(__str_16 >> 8)
   02A6 C0 E0              1057 	push	acc
   02A8 74 80              1058 	mov	a,#0x80
   02AA C0 E0              1059 	push	acc
                           1060 ;	genCall
   02AC 12s00r00           1061 	lcall	_printf
   02AF 15 81              1062 	dec	sp
   02B1 15 81              1063 	dec	sp
   02B3 15 81              1064 	dec	sp
                           1065 ;	main.c:78: getBlockAndAddress(&address, &block);
                           1066 ;	genCast
   02B5 90s00r00           1067 	mov	dptr,#_getBlockAndAddress_PARM_2
   02B8 74r07              1068 	mov	a,#_handleInput_block_1_1
   02BA F0                 1069 	movx	@dptr,a
   02BB A3                 1070 	inc	dptr
   02BC 74s00              1071 	mov	a,#(_handleInput_block_1_1 >> 8)
   02BE F0                 1072 	movx	@dptr,a
   02BF A3                 1073 	inc	dptr
   02C0 74 00              1074 	mov	a,#0x0
   02C2 F0                 1075 	movx	@dptr,a
                           1076 ;	genCall
                           1077 ;	Peephole 182.a	used 16 bit load of DPTR
   02C3 90s00r09           1078 	mov	dptr,#_handleInput_address_1_1
   02C6 75 F0 00           1079 	mov	b,#0x00
   02C9 12s00rF4           1080 	lcall	_getBlockAndAddress
                           1081 ;	main.c:80: lcdData = EPROM_ByteRead(address, block);
                           1082 ;	genAssign
   02CC 90s00r09           1083 	mov	dptr,#_handleInput_address_1_1
   02CF E0                 1084 	movx	a,@dptr
   02D0 FA                 1085 	mov	r2,a
                           1086 ;	genAssign
   02D1 90s00r07           1087 	mov	dptr,#_handleInput_block_1_1
   02D4 E0                 1088 	movx	a,@dptr
                           1089 ;	genAssign
   02D5 FB                 1090 	mov	r3,a
   02D6 90s00r00           1091 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           1092 ;	Peephole 100	removed redundant mov
   02D9 F0                 1093 	movx	@dptr,a
                           1094 ;	genCall
   02DA 8A 82              1095 	mov	dpl,r2
   02DC 12s00r00           1096 	lcall	_EPROM_ByteRead
   02DF AA 82              1097 	mov	r2,dpl
                           1098 ;	main.c:81: printf("\r\nRead %X from block %d address 0x%X\r\n", lcdData, block, address);
                           1099 ;	genAssign
   02E1 90s00r09           1100 	mov	dptr,#_handleInput_address_1_1
   02E4 E0                 1101 	movx	a,@dptr
   02E5 FB                 1102 	mov	r3,a
                           1103 ;	genCast
   02E6 7C 00              1104 	mov	r4,#0x00
                           1105 ;	genAssign
   02E8 90s00r07           1106 	mov	dptr,#_handleInput_block_1_1
   02EB E0                 1107 	movx	a,@dptr
   02EC FD                 1108 	mov	r5,a
                           1109 ;	genCast
   02ED 7E 00              1110 	mov	r6,#0x00
                           1111 ;	genCast
   02EF 7F 00              1112 	mov	r7,#0x00
                           1113 ;	genIpush
   02F1 C0 03              1114 	push	ar3
   02F3 C0 04              1115 	push	ar4
                           1116 ;	genIpush
   02F5 C0 05              1117 	push	ar5
   02F7 C0 06              1118 	push	ar6
                           1119 ;	genIpush
   02F9 C0 02              1120 	push	ar2
   02FB C0 07              1121 	push	ar7
                           1122 ;	genIpush
   02FD 74r66              1123 	mov	a,#__str_17
   02FF C0 E0              1124 	push	acc
   0301 74s02              1125 	mov	a,#(__str_17 >> 8)
   0303 C0 E0              1126 	push	acc
   0305 74 80              1127 	mov	a,#0x80
   0307 C0 E0              1128 	push	acc
                           1129 ;	genCall
   0309 12s00r00           1130 	lcall	_printf
   030C E5 81              1131 	mov	a,sp
   030E 24 F7              1132 	add	a,#0xf7
   0310 F5 81              1133 	mov	sp,a
                           1134 ;	main.c:82: break;
                           1135 ;	Peephole 251.a	replaced ljmp to ret with ret
   0312 22                 1136 	ret
                           1137 ;	main.c:83: case 'L':
   0313                    1138 00103$:
                           1139 ;	main.c:84: getBlockAndAddress(&address, &block);
                           1140 ;	genCast
   0313 90s00r00           1141 	mov	dptr,#_getBlockAndAddress_PARM_2
   0316 74r07              1142 	mov	a,#_handleInput_block_1_1
   0318 F0                 1143 	movx	@dptr,a
   0319 A3                 1144 	inc	dptr
   031A 74s00              1145 	mov	a,#(_handleInput_block_1_1 >> 8)
   031C F0                 1146 	movx	@dptr,a
   031D A3                 1147 	inc	dptr
   031E 74 00              1148 	mov	a,#0x0
   0320 F0                 1149 	movx	@dptr,a
                           1150 ;	genCall
                           1151 ;	Peephole 182.a	used 16 bit load of DPTR
   0321 90s00r09           1152 	mov	dptr,#_handleInput_address_1_1
   0324 75 F0 00           1153 	mov	b,#0x00
   0327 12s00rF4           1154 	lcall	_getBlockAndAddress
                           1155 ;	main.c:86: lcdData = EPROM_ByteRead(address, block);
                           1156 ;	genAssign
   032A 90s00r09           1157 	mov	dptr,#_handleInput_address_1_1
   032D E0                 1158 	movx	a,@dptr
   032E FA                 1159 	mov	r2,a
                           1160 ;	genAssign
   032F 90s00r07           1161 	mov	dptr,#_handleInput_block_1_1
   0332 E0                 1162 	movx	a,@dptr
                           1163 ;	genAssign
   0333 FB                 1164 	mov	r3,a
   0334 90s00r00           1165 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           1166 ;	Peephole 100	removed redundant mov
   0337 F0                 1167 	movx	@dptr,a
                           1168 ;	genCall
   0338 8A 82              1169 	mov	dpl,r2
   033A 12s00r00           1170 	lcall	_EPROM_ByteRead
   033D AA 82              1171 	mov	r2,dpl
                           1172 ;	main.c:88: printf("\r\nEnter LCD row from 0-3:");
                           1173 ;	genIpush
   033F C0 02              1174 	push	ar2
   0341 74r8D              1175 	mov	a,#__str_18
   0343 C0 E0              1176 	push	acc
   0345 74s02              1177 	mov	a,#(__str_18 >> 8)
   0347 C0 E0              1178 	push	acc
   0349 74 80              1179 	mov	a,#0x80
   034B C0 E0              1180 	push	acc
                           1181 ;	genCall
   034D 12s00r00           1182 	lcall	_printf
   0350 15 81              1183 	dec	sp
   0352 15 81              1184 	dec	sp
   0354 15 81              1185 	dec	sp
   0356 D0 02              1186 	pop	ar2
                           1187 ;	main.c:89: Lcd_row = Serial_GetInteger(1);
                           1188 ;	genCall
                           1189 ;	Peephole 182.b	used 16 bit load of dptr
   0358 90 00 01           1190 	mov	dptr,#0x0001
   035B C0 02              1191 	push	ar2
   035D 12s00r00           1192 	lcall	_Serial_GetInteger
   0360 AB 82              1193 	mov	r3,dpl
   0362 AC 83              1194 	mov	r4,dph
   0364 D0 02              1195 	pop	ar2
                           1196 ;	genCast
                           1197 ;	main.c:91: LCD_gotoxy(Lcd_row, 0);
                           1198 ;	genAssign
   0366 90s00r00           1199 	mov	dptr,#_LCD_gotoxy_PARM_2
                           1200 ;	Peephole 181	changed mov to clr
   0369 E4                 1201 	clr	a
   036A F0                 1202 	movx	@dptr,a
                           1203 ;	genCall
   036B 8B 82              1204 	mov	dpl,r3
   036D C0 02              1205 	push	ar2
   036F 12s00r00           1206 	lcall	_LCD_gotoxy
   0372 D0 02              1207 	pop	ar2
                           1208 ;	main.c:92: LCD_Putch(block + '0');
                           1209 ;	genAssign
   0374 90s00r07           1210 	mov	dptr,#_handleInput_block_1_1
   0377 E0                 1211 	movx	a,@dptr
                           1212 ;	genPlus
                           1213 ;     genPlusIncr
                           1214 ;	Peephole 236.a	used r3 instead of ar3
                           1215 ;	Peephole 214	reduced some extra moves
                           1216 ;	genCall
                           1217 ;	Peephole 215	removed some moves
   0378 24 30              1218 	add	a,#0x30
   037A FB                 1219 	mov	r3,a
                           1220 ;	Peephole 244.c	loading dpl from a instead of r3
   037B F5 82              1221 	mov	dpl,a
   037D C0 02              1222 	push	ar2
   037F 12s00r00           1223 	lcall	_LCD_Putch
   0382 D0 02              1224 	pop	ar2
                           1225 ;	main.c:93: LCD_Puthex(address);
                           1226 ;	genAssign
   0384 90s00r09           1227 	mov	dptr,#_handleInput_address_1_1
   0387 E0                 1228 	movx	a,@dptr
                           1229 ;	genCall
   0388 FB                 1230 	mov	r3,a
                           1231 ;	Peephole 244.c	loading dpl from a instead of r3
   0389 F5 82              1232 	mov	dpl,a
   038B C0 02              1233 	push	ar2
   038D 12s00r00           1234 	lcall	_LCD_Puthex
   0390 D0 02              1235 	pop	ar2
                           1236 ;	main.c:94: LCD_Putstr(": ");
                           1237 ;	genCall
                           1238 ;	Peephole 182.a	used 16 bit load of DPTR
   0392 90s02rA7           1239 	mov	dptr,#__str_19
   0395 75 F0 80           1240 	mov	b,#0x80
   0398 C0 02              1241 	push	ar2
   039A 12s00r00           1242 	lcall	_LCD_Putstr
   039D D0 02              1243 	pop	ar2
                           1244 ;	main.c:95: LCD_Puthex(lcdData);
                           1245 ;	genCall
   039F 8A 82              1246 	mov	dpl,r2
   03A1 12s00r00           1247 	lcall	_LCD_Puthex
                           1248 ;	main.c:97: printf("\r\nWrote to LCD!\r\n");
                           1249 ;	genIpush
   03A4 74rAA              1250 	mov	a,#__str_20
   03A6 C0 E0              1251 	push	acc
   03A8 74s02              1252 	mov	a,#(__str_20 >> 8)
   03AA C0 E0              1253 	push	acc
   03AC 74 80              1254 	mov	a,#0x80
   03AE C0 E0              1255 	push	acc
                           1256 ;	genCall
   03B0 12s00r00           1257 	lcall	_printf
   03B3 15 81              1258 	dec	sp
   03B5 15 81              1259 	dec	sp
   03B7 15 81              1260 	dec	sp
                           1261 ;	main.c:98: break;
                           1262 ;	Peephole 251.a	replaced ljmp to ret with ret
   03B9 22                 1263 	ret
                           1264 ;	main.c:99: case 'C':
   03BA                    1265 00104$:
                           1266 ;	main.c:100: LCD_ClearScreen();
                           1267 ;	genCall
   03BA 12s00r00           1268 	lcall	_LCD_ClearScreen
                           1269 ;	main.c:101: printf("\r\nLCD Display Cleared!\r\n");
                           1270 ;	genIpush
   03BD 74rBC              1271 	mov	a,#__str_21
   03BF C0 E0              1272 	push	acc
   03C1 74s02              1273 	mov	a,#(__str_21 >> 8)
   03C3 C0 E0              1274 	push	acc
   03C5 74 80              1275 	mov	a,#0x80
   03C7 C0 E0              1276 	push	acc
                           1277 ;	genCall
   03C9 12s00r00           1278 	lcall	_printf
   03CC 15 81              1279 	dec	sp
   03CE 15 81              1280 	dec	sp
   03D0 15 81              1281 	dec	sp
                           1282 ;	main.c:102: break;
                           1283 ;	Peephole 251.a	replaced ljmp to ret with ret
   03D2 22                 1284 	ret
                           1285 ;	main.c:103: case 'D':
   03D3                    1286 00105$:
                           1287 ;	main.c:104: printf("\r\nPerforming an EEPROM data dump\r\n");
                           1288 ;	genIpush
   03D3 74rD5              1289 	mov	a,#__str_22
   03D5 C0 E0              1290 	push	acc
   03D7 74s02              1291 	mov	a,#(__str_22 >> 8)
   03D9 C0 E0              1292 	push	acc
   03DB 74 80              1293 	mov	a,#0x80
   03DD C0 E0              1294 	push	acc
                           1295 ;	genCall
   03DF 12s00r00           1296 	lcall	_printf
   03E2 15 81              1297 	dec	sp
   03E4 15 81              1298 	dec	sp
   03E6 15 81              1299 	dec	sp
                           1300 ;	main.c:105: printf("\r\nEnter the starting block and address");
                           1301 ;	genIpush
   03E8 74rF8              1302 	mov	a,#__str_23
   03EA C0 E0              1303 	push	acc
   03EC 74s02              1304 	mov	a,#(__str_23 >> 8)
   03EE C0 E0              1305 	push	acc
   03F0 74 80              1306 	mov	a,#0x80
   03F2 C0 E0              1307 	push	acc
                           1308 ;	genCall
   03F4 12s00r00           1309 	lcall	_printf
   03F7 15 81              1310 	dec	sp
   03F9 15 81              1311 	dec	sp
   03FB 15 81              1312 	dec	sp
                           1313 ;	main.c:106: getBlockAndAddress(&address, &block);
                           1314 ;	genCast
   03FD 90s00r00           1315 	mov	dptr,#_getBlockAndAddress_PARM_2
   0400 74r07              1316 	mov	a,#_handleInput_block_1_1
   0402 F0                 1317 	movx	@dptr,a
   0403 A3                 1318 	inc	dptr
   0404 74s00              1319 	mov	a,#(_handleInput_block_1_1 >> 8)
   0406 F0                 1320 	movx	@dptr,a
   0407 A3                 1321 	inc	dptr
   0408 74 00              1322 	mov	a,#0x0
   040A F0                 1323 	movx	@dptr,a
                           1324 ;	genCall
                           1325 ;	Peephole 182.a	used 16 bit load of DPTR
   040B 90s00r09           1326 	mov	dptr,#_handleInput_address_1_1
   040E 75 F0 00           1327 	mov	b,#0x00
   0411 12s00rF4           1328 	lcall	_getBlockAndAddress
                           1329 ;	main.c:107: printf("\r\nEnter the ending block and address");
                           1330 ;	genIpush
   0414 74r1F              1331 	mov	a,#__str_24
   0416 C0 E0              1332 	push	acc
   0418 74s03              1333 	mov	a,#(__str_24 >> 8)
   041A C0 E0              1334 	push	acc
   041C 74 80              1335 	mov	a,#0x80
   041E C0 E0              1336 	push	acc
                           1337 ;	genCall
   0420 12s00r00           1338 	lcall	_printf
   0423 15 81              1339 	dec	sp
   0425 15 81              1340 	dec	sp
   0427 15 81              1341 	dec	sp
                           1342 ;	main.c:108: getBlockAndAddress(&end_address, &end_block);
                           1343 ;	genCast
   0429 90s00r00           1344 	mov	dptr,#_getBlockAndAddress_PARM_2
   042C 74r08              1345 	mov	a,#_handleInput_end_block_1_1
   042E F0                 1346 	movx	@dptr,a
   042F A3                 1347 	inc	dptr
   0430 74s00              1348 	mov	a,#(_handleInput_end_block_1_1 >> 8)
   0432 F0                 1349 	movx	@dptr,a
   0433 A3                 1350 	inc	dptr
   0434 74 00              1351 	mov	a,#0x0
   0436 F0                 1352 	movx	@dptr,a
                           1353 ;	genCall
                           1354 ;	Peephole 182.a	used 16 bit load of DPTR
   0437 90s00r0A           1355 	mov	dptr,#_handleInput_end_address_1_1
   043A 75 F0 00           1356 	mov	b,#0x00
   043D 12s00rF4           1357 	lcall	_getBlockAndAddress
                           1358 ;	main.c:109: start_addr =( block << 8) | address;
                           1359 ;	genAssign
   0440 90s00r07           1360 	mov	dptr,#_handleInput_block_1_1
   0443 E0                 1361 	movx	a,@dptr
   0444 FA                 1362 	mov	r2,a
                           1363 ;	genCast
                           1364 ;	genLeftShift
                           1365 ;	genLeftShiftLiteral
                           1366 ;	genlshTwo
                           1367 ;	peephole 177.e	removed redundant move
   0445 8A 03              1368 	mov	ar3,r2
   0447 7A 00              1369 	mov	r2,#0x00
                           1370 ;	genAssign
   0449 90s00r09           1371 	mov	dptr,#_handleInput_address_1_1
   044C E0                 1372 	movx	a,@dptr
                           1373 ;	genCast
                           1374 ;	genOr
   044D FC                 1375 	mov	r4,a
   044E 7D 00              1376 	mov	r5,#0x00
                           1377 ;	Peephole 177.d	removed redundant move
   0450 42 02              1378 	orl	ar2,a
   0452 ED                 1379 	mov	a,r5
   0453 42 03              1380 	orl	ar3,a
                           1381 ;	genAssign
   0455 90s00r0B           1382 	mov	dptr,#_handleInput_start_addr_1_1
   0458 EA                 1383 	mov	a,r2
   0459 F0                 1384 	movx	@dptr,a
   045A A3                 1385 	inc	dptr
   045B EB                 1386 	mov	a,r3
   045C F0                 1387 	movx	@dptr,a
                           1388 ;	main.c:110: end_addr = (end_block << 8) | end_address;
                           1389 ;	genAssign
   045D 90s00r08           1390 	mov	dptr,#_handleInput_end_block_1_1
   0460 E0                 1391 	movx	a,@dptr
   0461 FC                 1392 	mov	r4,a
                           1393 ;	genCast
                           1394 ;	genLeftShift
                           1395 ;	genLeftShiftLiteral
                           1396 ;	genlshTwo
                           1397 ;	peephole 177.e	removed redundant move
   0462 8C 05              1398 	mov	ar5,r4
   0464 7C 00              1399 	mov	r4,#0x00
                           1400 ;	genAssign
   0466 90s00r0A           1401 	mov	dptr,#_handleInput_end_address_1_1
   0469 E0                 1402 	movx	a,@dptr
                           1403 ;	genCast
                           1404 ;	genOr
   046A FE                 1405 	mov	r6,a
   046B 7F 00              1406 	mov	r7,#0x00
                           1407 ;	Peephole 177.d	removed redundant move
   046D 42 04              1408 	orl	ar4,a
   046F EF                 1409 	mov	a,r7
   0470 42 05              1410 	orl	ar5,a
                           1411 ;	genAssign
   0472 90s00r0D           1412 	mov	dptr,#_handleInput_end_addr_1_1
   0475 EC                 1413 	mov	a,r4
   0476 F0                 1414 	movx	@dptr,a
   0477 A3                 1415 	inc	dptr
   0478 ED                 1416 	mov	a,r5
   0479 F0                 1417 	movx	@dptr,a
                           1418 ;	main.c:111: if (start_addr > end_addr){
                           1419 ;	genAssign
                           1420 ;	genAssign
                           1421 ;	genCmpGt
                           1422 ;	genCmp
   047A C3                 1423 	clr	c
   047B EC                 1424 	mov	a,r4
   047C 9A                 1425 	subb	a,r2
   047D ED                 1426 	mov	a,r5
   047E 9B                 1427 	subb	a,r3
                           1428 ;	genIfxJump
                           1429 ;	Peephole 108.a	removed ljmp by inverse jump logic
   047F 50 16              1430 	jnc	00107$
                           1431 ;	Peephole 300	removed redundant label 00182$
                           1432 ;	main.c:112: printf("\r\nInvalid addresses. End address must be after start address");
                           1433 ;	genIpush
   0481 74r44              1434 	mov	a,#__str_25
   0483 C0 E0              1435 	push	acc
   0485 74s03              1436 	mov	a,#(__str_25 >> 8)
   0487 C0 E0              1437 	push	acc
   0489 74 80              1438 	mov	a,#0x80
   048B C0 E0              1439 	push	acc
                           1440 ;	genCall
   048D 12s00r00           1441 	lcall	_printf
   0490 15 81              1442 	dec	sp
   0492 15 81              1443 	dec	sp
   0494 15 81              1444 	dec	sp
                           1445 ;	main.c:113: return;
                           1446 ;	genRet
                           1447 ;	Peephole 251.a	replaced ljmp to ret with ret
   0496 22                 1448 	ret
   0497                    1449 00107$:
                           1450 ;	main.c:115: printf("\r\n");
                           1451 ;	genIpush
   0497 74r81              1452 	mov	a,#__str_26
   0499 C0 E0              1453 	push	acc
   049B 74s03              1454 	mov	a,#(__str_26 >> 8)
   049D C0 E0              1455 	push	acc
   049F 74 80              1456 	mov	a,#0x80
   04A1 C0 E0              1457 	push	acc
                           1458 ;	genCall
   04A3 12s00r00           1459 	lcall	_printf
   04A6 15 81              1460 	dec	sp
   04A8 15 81              1461 	dec	sp
   04AA 15 81              1462 	dec	sp
                           1463 ;	main.c:116: while(start_addr <= end_addr){
                           1464 ;	genAssign
   04AC 90s00r0D           1465 	mov	dptr,#_handleInput_end_addr_1_1
   04AF E0                 1466 	movx	a,@dptr
   04B0 FA                 1467 	mov	r2,a
   04B1 A3                 1468 	inc	dptr
   04B2 E0                 1469 	movx	a,@dptr
   04B3 FB                 1470 	mov	r3,a
                           1471 ;	genAssign
   04B4 8A 04              1472 	mov	ar4,r2
   04B6 8B 05              1473 	mov	ar5,r3
   04B8                    1474 00114$:
                           1475 ;	genAssign
   04B8 90s00r0B           1476 	mov	dptr,#_handleInput_start_addr_1_1
   04BB E0                 1477 	movx	a,@dptr
   04BC FE                 1478 	mov	r6,a
   04BD A3                 1479 	inc	dptr
   04BE E0                 1480 	movx	a,@dptr
   04BF FF                 1481 	mov	r7,a
                           1482 ;	genCmpGt
                           1483 ;	genCmp
   04C0 C3                 1484 	clr	c
   04C1 EC                 1485 	mov	a,r4
   04C2 9E                 1486 	subb	a,r6
   04C3 ED                 1487 	mov	a,r5
   04C4 9F                 1488 	subb	a,r7
                           1489 ;	genIfxJump
   04C5 50 01              1490 	jnc	00183$
                           1491 ;	Peephole 251.a	replaced ljmp to ret with ret
   04C7 22                 1492 	ret
   04C8                    1493 00183$:
                           1494 ;	main.c:117: printf("%x: ", start_addr);
                           1495 ;	genIpush
   04C8 C0 02              1496 	push	ar2
   04CA C0 03              1497 	push	ar3
   04CC C0 04              1498 	push	ar4
   04CE C0 05              1499 	push	ar5
   04D0 C0 06              1500 	push	ar6
   04D2 C0 07              1501 	push	ar7
   04D4 C0 06              1502 	push	ar6
   04D6 C0 07              1503 	push	ar7
                           1504 ;	genIpush
   04D8 74r84              1505 	mov	a,#__str_27
   04DA C0 E0              1506 	push	acc
   04DC 74s03              1507 	mov	a,#(__str_27 >> 8)
   04DE C0 E0              1508 	push	acc
   04E0 74 80              1509 	mov	a,#0x80
   04E2 C0 E0              1510 	push	acc
                           1511 ;	genCall
   04E4 12s00r00           1512 	lcall	_printf
   04E7 E5 81              1513 	mov	a,sp
   04E9 24 FB              1514 	add	a,#0xfb
   04EB F5 81              1515 	mov	sp,a
   04ED D0 07              1516 	pop	ar7
   04EF D0 06              1517 	pop	ar6
   04F1 D0 05              1518 	pop	ar5
   04F3 D0 04              1519 	pop	ar4
   04F5 D0 03              1520 	pop	ar3
   04F7 D0 02              1521 	pop	ar2
                           1522 ;	main.c:119: for (i = 0; i < 16; ++i){
                           1523 ;	genAssign
                           1524 ;	genAssign
   04F9 78 00              1525 	mov	r0,#0x00
   04FB                    1526 00110$:
                           1527 ;	genCmpLt
                           1528 ;	genCmp
   04FB B8 10 00           1529 	cjne	r0,#0x10,00184$
   04FE                    1530 00184$:
                           1531 ;	genIfxJump
                           1532 ;	Peephole 112.b	changed ljmp to sjmp
                           1533 ;	Peephole 160.b	removed sjmp by inverse jump logic
   04FE 50 76              1534 	jnc	00168$
                           1535 ;	Peephole 300	removed redundant label 00185$
                           1536 ;	main.c:120: lcdData = EPROM_ByteRead(start_addr & 0xFF, start_addr >> 8);
                           1537 ;	genIpush
   0500 C0 04              1538 	push	ar4
   0502 C0 05              1539 	push	ar5
                           1540 ;	genAnd
   0504 8E 01              1541 	mov	ar1,r6
   0506 7C 00              1542 	mov	r4,#0x00
                           1543 ;	genCast
                           1544 ;	genGetByte
   0508 90s00r00           1545 	mov	dptr,#_EPROM_ByteRead_PARM_2
   050B EF                 1546 	mov	a,r7
   050C F0                 1547 	movx	@dptr,a
                           1548 ;	genCall
   050D 89 82              1549 	mov	dpl,r1
   050F C0 02              1550 	push	ar2
   0511 C0 03              1551 	push	ar3
   0513 C0 05              1552 	push	ar5
   0515 C0 06              1553 	push	ar6
   0517 C0 07              1554 	push	ar7
   0519 C0 00              1555 	push	ar0
   051B 12s00r00           1556 	lcall	_EPROM_ByteRead
   051E AC 82              1557 	mov	r4,dpl
   0520 D0 00              1558 	pop	ar0
   0522 D0 07              1559 	pop	ar7
   0524 D0 06              1560 	pop	ar6
   0526 D0 05              1561 	pop	ar5
   0528 D0 03              1562 	pop	ar3
   052A D0 02              1563 	pop	ar2
                           1564 ;	main.c:121: printf("%x ", lcdData);
                           1565 ;	genCast
   052C 7D 00              1566 	mov	r5,#0x00
                           1567 ;	genIpush
   052E C0 02              1568 	push	ar2
   0530 C0 03              1569 	push	ar3
   0532 C0 04              1570 	push	ar4
   0534 C0 05              1571 	push	ar5
   0536 C0 06              1572 	push	ar6
   0538 C0 07              1573 	push	ar7
   053A C0 00              1574 	push	ar0
   053C C0 04              1575 	push	ar4
   053E C0 05              1576 	push	ar5
                           1577 ;	genIpush
   0540 74r89              1578 	mov	a,#__str_28
   0542 C0 E0              1579 	push	acc
   0544 74s03              1580 	mov	a,#(__str_28 >> 8)
   0546 C0 E0              1581 	push	acc
   0548 74 80              1582 	mov	a,#0x80
   054A C0 E0              1583 	push	acc
                           1584 ;	genCall
   054C 12s00r00           1585 	lcall	_printf
   054F E5 81              1586 	mov	a,sp
   0551 24 FB              1587 	add	a,#0xfb
   0553 F5 81              1588 	mov	sp,a
   0555 D0 00              1589 	pop	ar0
   0557 D0 07              1590 	pop	ar7
   0559 D0 06              1591 	pop	ar6
   055B D0 05              1592 	pop	ar5
   055D D0 04              1593 	pop	ar4
   055F D0 03              1594 	pop	ar3
   0561 D0 02              1595 	pop	ar2
                           1596 ;	main.c:122: start_addr++;
                           1597 ;	genPlus
                           1598 ;     genPlusIncr
   0563 0E                 1599 	inc	r6
   0564 BE 00 01           1600 	cjne	r6,#0x00,00186$
   0567 0F                 1601 	inc	r7
   0568                    1602 00186$:
                           1603 ;	main.c:123: if(start_addr > end_addr){
                           1604 ;	genCmpGt
                           1605 ;	genCmp
   0568 C3                 1606 	clr	c
   0569 EA                 1607 	mov	a,r2
   056A 9E                 1608 	subb	a,r6
   056B EB                 1609 	mov	a,r3
   056C 9F                 1610 	subb	a,r7
                           1611 ;	genIpop
                           1612 ;	genIfx
                           1613 ;	genIfxJump
                           1614 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           1615 ;	Peephole 129.c	optimized condition
   056D D0 05              1616 	pop	ar5
   056F D0 04              1617 	pop	ar4
   0571 40 03              1618 	jc	00168$
                           1619 ;	Peephole 300	removed redundant label 00187$
                           1620 ;	main.c:119: for (i = 0; i < 16; ++i){
                           1621 ;	genPlus
                           1622 ;     genPlusIncr
   0573 08                 1623 	inc	r0
                           1624 ;	Peephole 112.b	changed ljmp to sjmp
   0574 80 85              1625 	sjmp	00110$
   0576                    1626 00168$:
                           1627 ;	genAssign
   0576 90s00r0B           1628 	mov	dptr,#_handleInput_start_addr_1_1
   0579 EE                 1629 	mov	a,r6
   057A F0                 1630 	movx	@dptr,a
   057B A3                 1631 	inc	dptr
   057C EF                 1632 	mov	a,r7
   057D F0                 1633 	movx	@dptr,a
                           1634 ;	main.c:127: printf("\r\n");
                           1635 ;	genIpush
   057E C0 02              1636 	push	ar2
   0580 C0 03              1637 	push	ar3
   0582 C0 04              1638 	push	ar4
   0584 C0 05              1639 	push	ar5
   0586 74r81              1640 	mov	a,#__str_26
   0588 C0 E0              1641 	push	acc
   058A 74s03              1642 	mov	a,#(__str_26 >> 8)
   058C C0 E0              1643 	push	acc
   058E 74 80              1644 	mov	a,#0x80
   0590 C0 E0              1645 	push	acc
                           1646 ;	genCall
   0592 12s00r00           1647 	lcall	_printf
   0595 15 81              1648 	dec	sp
   0597 15 81              1649 	dec	sp
   0599 15 81              1650 	dec	sp
   059B D0 05              1651 	pop	ar5
   059D D0 04              1652 	pop	ar4
   059F D0 03              1653 	pop	ar3
   05A1 D0 02              1654 	pop	ar2
   05A3 02s04rB8           1655 	ljmp	00114$
                           1656 ;	main.c:130: case 'Y':
   05A6                    1657 00117$:
                           1658 ;	main.c:131: printf("\r\n");
                           1659 ;	genIpush
   05A6 74r81              1660 	mov	a,#__str_26
   05A8 C0 E0              1661 	push	acc
   05AA 74s03              1662 	mov	a,#(__str_26 >> 8)
   05AC C0 E0              1663 	push	acc
   05AE 74 80              1664 	mov	a,#0x80
   05B0 C0 E0              1665 	push	acc
                           1666 ;	genCall
   05B2 12s00r00           1667 	lcall	_printf
   05B5 15 81              1668 	dec	sp
   05B7 15 81              1669 	dec	sp
   05B9 15 81              1670 	dec	sp
                           1671 ;	main.c:135: printf("%x: ", start_addr);
                           1672 ;	genIpush
   05BB 74 80              1673 	mov	a,#0x80
   05BD C0 E0              1674 	push	acc
                           1675 ;	Peephole 181	changed mov to clr
   05BF E4                 1676 	clr	a
   05C0 C0 E0              1677 	push	acc
                           1678 ;	genIpush
   05C2 74r84              1679 	mov	a,#__str_27
   05C4 C0 E0              1680 	push	acc
   05C6 74s03              1681 	mov	a,#(__str_27 >> 8)
   05C8 C0 E0              1682 	push	acc
   05CA 74 80              1683 	mov	a,#0x80
   05CC C0 E0              1684 	push	acc
                           1685 ;	genCall
   05CE 12s00r00           1686 	lcall	_printf
   05D1 E5 81              1687 	mov	a,sp
   05D3 24 FB              1688 	add	a,#0xfb
   05D5 F5 81              1689 	mov	sp,a
                           1690 ;	main.c:136: for (i = 0; i < 16; ++i){
                           1691 ;	genAssign
   05D7 7A 80              1692 	mov	r2,#0x80
   05D9 7B 00              1693 	mov	r3,#0x00
                           1694 ;	genAssign
   05DB 7C 10              1695 	mov	r4,#0x10
   05DD                    1696 00127$:
                           1697 ;	main.c:137: LCD_SetDDRAMAddress(start_addr);
                           1698 ;	genCast
   05DD 8A 05              1699 	mov	ar5,r2
                           1700 ;	genCall
   05DF 8D 82              1701 	mov	dpl,r5
   05E1 C0 02              1702 	push	ar2
   05E3 C0 03              1703 	push	ar3
   05E5 C0 04              1704 	push	ar4
   05E7 12s00r00           1705 	lcall	_LCD_SetDDRAMAddress
   05EA D0 04              1706 	pop	ar4
   05EC D0 03              1707 	pop	ar3
   05EE D0 02              1708 	pop	ar2
                           1709 ;	main.c:138: lcdData = LCD_ReadRAM();
                           1710 ;	genCall
   05F0 C0 02              1711 	push	ar2
   05F2 C0 03              1712 	push	ar3
   05F4 C0 04              1713 	push	ar4
   05F6 12s00r00           1714 	lcall	_LCD_ReadRAM
   05F9 AD 82              1715 	mov	r5,dpl
   05FB D0 04              1716 	pop	ar4
   05FD D0 03              1717 	pop	ar3
   05FF D0 02              1718 	pop	ar2
                           1719 ;	main.c:139: printf("%x ", lcdData);
                           1720 ;	genCast
   0601 7E 00              1721 	mov	r6,#0x00
                           1722 ;	genIpush
   0603 C0 02              1723 	push	ar2
   0605 C0 03              1724 	push	ar3
   0607 C0 04              1725 	push	ar4
   0609 C0 05              1726 	push	ar5
   060B C0 06              1727 	push	ar6
                           1728 ;	genIpush
   060D 74r89              1729 	mov	a,#__str_28
   060F C0 E0              1730 	push	acc
   0611 74s03              1731 	mov	a,#(__str_28 >> 8)
   0613 C0 E0              1732 	push	acc
   0615 74 80              1733 	mov	a,#0x80
   0617 C0 E0              1734 	push	acc
                           1735 ;	genCall
   0619 12s00r00           1736 	lcall	_printf
   061C E5 81              1737 	mov	a,sp
   061E 24 FB              1738 	add	a,#0xfb
   0620 F5 81              1739 	mov	sp,a
   0622 D0 04              1740 	pop	ar4
   0624 D0 03              1741 	pop	ar3
   0626 D0 02              1742 	pop	ar2
                           1743 ;	main.c:140: start_addr++;
                           1744 ;	genPlus
                           1745 ;     genPlusIncr
   0628 0A                 1746 	inc	r2
   0629 BA 00 01           1747 	cjne	r2,#0x00,00188$
   062C 0B                 1748 	inc	r3
   062D                    1749 00188$:
                           1750 ;	genDjnz
                           1751 ;	Peephole 112.b	changed ljmp to sjmp
                           1752 ;	Peephole 205	optimized misc jump sequence
   062D DC AE              1753 	djnz	r4,00127$
                           1754 ;	Peephole 300	removed redundant label 00189$
                           1755 ;	Peephole 300	removed redundant label 00190$
                           1756 ;	main.c:136: for (i = 0; i < 16; ++i){
                           1757 ;	main.c:142: printf("\r\n");
                           1758 ;	genIpush
   062F 74r81              1759 	mov	a,#__str_26
   0631 C0 E0              1760 	push	acc
   0633 74s03              1761 	mov	a,#(__str_26 >> 8)
   0635 C0 E0              1762 	push	acc
   0637 74 80              1763 	mov	a,#0x80
   0639 C0 E0              1764 	push	acc
                           1765 ;	genCall
   063B 12s00r00           1766 	lcall	_printf
   063E 15 81              1767 	dec	sp
   0640 15 81              1768 	dec	sp
   0642 15 81              1769 	dec	sp
                           1770 ;	main.c:145: printf("%x: ", start_addr);
                           1771 ;	genIpush
   0644 74 C0              1772 	mov	a,#0xC0
   0646 C0 E0              1773 	push	acc
                           1774 ;	Peephole 181	changed mov to clr
   0648 E4                 1775 	clr	a
   0649 C0 E0              1776 	push	acc
                           1777 ;	genIpush
   064B 74r84              1778 	mov	a,#__str_27
   064D C0 E0              1779 	push	acc
   064F 74s03              1780 	mov	a,#(__str_27 >> 8)
   0651 C0 E0              1781 	push	acc
   0653 74 80              1782 	mov	a,#0x80
   0655 C0 E0              1783 	push	acc
                           1784 ;	genCall
   0657 12s00r00           1785 	lcall	_printf
   065A E5 81              1786 	mov	a,sp
   065C 24 FB              1787 	add	a,#0xfb
   065E F5 81              1788 	mov	sp,a
                           1789 ;	main.c:146: for (i = 0; i < 16; ++i){
                           1790 ;	genAssign
   0660 7A C0              1791 	mov	r2,#0xC0
   0662 7B 00              1792 	mov	r3,#0x00
                           1793 ;	genAssign
   0664 7C 10              1794 	mov	r4,#0x10
   0666                    1795 00130$:
                           1796 ;	main.c:147: LCD_SetDDRAMAddress(start_addr);
                           1797 ;	genCast
   0666 8A 05              1798 	mov	ar5,r2
                           1799 ;	genCall
   0668 8D 82              1800 	mov	dpl,r5
   066A C0 02              1801 	push	ar2
   066C C0 03              1802 	push	ar3
   066E C0 04              1803 	push	ar4
   0670 12s00r00           1804 	lcall	_LCD_SetDDRAMAddress
   0673 D0 04              1805 	pop	ar4
   0675 D0 03              1806 	pop	ar3
   0677 D0 02              1807 	pop	ar2
                           1808 ;	main.c:148: lcdData = LCD_ReadRAM();
                           1809 ;	genCall
   0679 C0 02              1810 	push	ar2
   067B C0 03              1811 	push	ar3
   067D C0 04              1812 	push	ar4
   067F 12s00r00           1813 	lcall	_LCD_ReadRAM
   0682 AD 82              1814 	mov	r5,dpl
   0684 D0 04              1815 	pop	ar4
   0686 D0 03              1816 	pop	ar3
   0688 D0 02              1817 	pop	ar2
                           1818 ;	main.c:149: printf("%x ", lcdData);
                           1819 ;	genCast
   068A 7E 00              1820 	mov	r6,#0x00
                           1821 ;	genIpush
   068C C0 02              1822 	push	ar2
   068E C0 03              1823 	push	ar3
   0690 C0 04              1824 	push	ar4
   0692 C0 05              1825 	push	ar5
   0694 C0 06              1826 	push	ar6
                           1827 ;	genIpush
   0696 74r89              1828 	mov	a,#__str_28
   0698 C0 E0              1829 	push	acc
   069A 74s03              1830 	mov	a,#(__str_28 >> 8)
   069C C0 E0              1831 	push	acc
   069E 74 80              1832 	mov	a,#0x80
   06A0 C0 E0              1833 	push	acc
                           1834 ;	genCall
   06A2 12s00r00           1835 	lcall	_printf
   06A5 E5 81              1836 	mov	a,sp
   06A7 24 FB              1837 	add	a,#0xfb
   06A9 F5 81              1838 	mov	sp,a
   06AB D0 04              1839 	pop	ar4
   06AD D0 03              1840 	pop	ar3
   06AF D0 02              1841 	pop	ar2
                           1842 ;	main.c:150: start_addr++;
                           1843 ;	genPlus
                           1844 ;     genPlusIncr
   06B1 0A                 1845 	inc	r2
   06B2 BA 00 01           1846 	cjne	r2,#0x00,00191$
   06B5 0B                 1847 	inc	r3
   06B6                    1848 00191$:
                           1849 ;	genDjnz
                           1850 ;	Peephole 112.b	changed ljmp to sjmp
                           1851 ;	Peephole 205	optimized misc jump sequence
   06B6 DC AE              1852 	djnz	r4,00130$
                           1853 ;	Peephole 300	removed redundant label 00192$
                           1854 ;	Peephole 300	removed redundant label 00193$
                           1855 ;	main.c:146: for (i = 0; i < 16; ++i){
                           1856 ;	main.c:152: printf("\r\n");
                           1857 ;	genIpush
   06B8 74r81              1858 	mov	a,#__str_26
   06BA C0 E0              1859 	push	acc
   06BC 74s03              1860 	mov	a,#(__str_26 >> 8)
   06BE C0 E0              1861 	push	acc
   06C0 74 80              1862 	mov	a,#0x80
   06C2 C0 E0              1863 	push	acc
                           1864 ;	genCall
   06C4 12s00r00           1865 	lcall	_printf
   06C7 15 81              1866 	dec	sp
   06C9 15 81              1867 	dec	sp
   06CB 15 81              1868 	dec	sp
                           1869 ;	main.c:155: printf("%x: ", start_addr);
                           1870 ;	genIpush
   06CD 74 90              1871 	mov	a,#0x90
   06CF C0 E0              1872 	push	acc
                           1873 ;	Peephole 181	changed mov to clr
   06D1 E4                 1874 	clr	a
   06D2 C0 E0              1875 	push	acc
                           1876 ;	genIpush
   06D4 74r84              1877 	mov	a,#__str_27
   06D6 C0 E0              1878 	push	acc
   06D8 74s03              1879 	mov	a,#(__str_27 >> 8)
   06DA C0 E0              1880 	push	acc
   06DC 74 80              1881 	mov	a,#0x80
   06DE C0 E0              1882 	push	acc
                           1883 ;	genCall
   06E0 12s00r00           1884 	lcall	_printf
   06E3 E5 81              1885 	mov	a,sp
   06E5 24 FB              1886 	add	a,#0xfb
   06E7 F5 81              1887 	mov	sp,a
                           1888 ;	main.c:156: for (i = 0; i < 16; ++i){
                           1889 ;	genAssign
   06E9 7A 90              1890 	mov	r2,#0x90
   06EB 7B 00              1891 	mov	r3,#0x00
                           1892 ;	genAssign
   06ED 7C 10              1893 	mov	r4,#0x10
   06EF                    1894 00133$:
                           1895 ;	main.c:157: LCD_SetDDRAMAddress(start_addr);
                           1896 ;	genCast
   06EF 8A 05              1897 	mov	ar5,r2
                           1898 ;	genCall
   06F1 8D 82              1899 	mov	dpl,r5
   06F3 C0 02              1900 	push	ar2
   06F5 C0 03              1901 	push	ar3
   06F7 C0 04              1902 	push	ar4
   06F9 12s00r00           1903 	lcall	_LCD_SetDDRAMAddress
   06FC D0 04              1904 	pop	ar4
   06FE D0 03              1905 	pop	ar3
   0700 D0 02              1906 	pop	ar2
                           1907 ;	main.c:158: lcdData = LCD_ReadRAM();
                           1908 ;	genCall
   0702 C0 02              1909 	push	ar2
   0704 C0 03              1910 	push	ar3
   0706 C0 04              1911 	push	ar4
   0708 12s00r00           1912 	lcall	_LCD_ReadRAM
   070B AD 82              1913 	mov	r5,dpl
   070D D0 04              1914 	pop	ar4
   070F D0 03              1915 	pop	ar3
   0711 D0 02              1916 	pop	ar2
                           1917 ;	main.c:159: printf("%x ", lcdData);
                           1918 ;	genCast
   0713 7E 00              1919 	mov	r6,#0x00
                           1920 ;	genIpush
   0715 C0 02              1921 	push	ar2
   0717 C0 03              1922 	push	ar3
   0719 C0 04              1923 	push	ar4
   071B C0 05              1924 	push	ar5
   071D C0 06              1925 	push	ar6
                           1926 ;	genIpush
   071F 74r89              1927 	mov	a,#__str_28
   0721 C0 E0              1928 	push	acc
   0723 74s03              1929 	mov	a,#(__str_28 >> 8)
   0725 C0 E0              1930 	push	acc
   0727 74 80              1931 	mov	a,#0x80
   0729 C0 E0              1932 	push	acc
                           1933 ;	genCall
   072B 12s00r00           1934 	lcall	_printf
   072E E5 81              1935 	mov	a,sp
   0730 24 FB              1936 	add	a,#0xfb
   0732 F5 81              1937 	mov	sp,a
   0734 D0 04              1938 	pop	ar4
   0736 D0 03              1939 	pop	ar3
   0738 D0 02              1940 	pop	ar2
                           1941 ;	main.c:160: start_addr++;
                           1942 ;	genPlus
                           1943 ;     genPlusIncr
   073A 0A                 1944 	inc	r2
   073B BA 00 01           1945 	cjne	r2,#0x00,00194$
   073E 0B                 1946 	inc	r3
   073F                    1947 00194$:
                           1948 ;	genDjnz
                           1949 ;	Peephole 112.b	changed ljmp to sjmp
                           1950 ;	Peephole 205	optimized misc jump sequence
   073F DC AE              1951 	djnz	r4,00133$
                           1952 ;	Peephole 300	removed redundant label 00195$
                           1953 ;	Peephole 300	removed redundant label 00196$
                           1954 ;	main.c:156: for (i = 0; i < 16; ++i){
                           1955 ;	main.c:162: printf("\r\n");
                           1956 ;	genIpush
   0741 74r81              1957 	mov	a,#__str_26
   0743 C0 E0              1958 	push	acc
   0745 74s03              1959 	mov	a,#(__str_26 >> 8)
   0747 C0 E0              1960 	push	acc
   0749 74 80              1961 	mov	a,#0x80
   074B C0 E0              1962 	push	acc
                           1963 ;	genCall
   074D 12s00r00           1964 	lcall	_printf
   0750 15 81              1965 	dec	sp
   0752 15 81              1966 	dec	sp
   0754 15 81              1967 	dec	sp
                           1968 ;	main.c:165: printf("%x: ", start_addr);
                           1969 ;	genIpush
   0756 74 D0              1970 	mov	a,#0xD0
   0758 C0 E0              1971 	push	acc
                           1972 ;	Peephole 181	changed mov to clr
   075A E4                 1973 	clr	a
   075B C0 E0              1974 	push	acc
                           1975 ;	genIpush
   075D 74r84              1976 	mov	a,#__str_27
   075F C0 E0              1977 	push	acc
   0761 74s03              1978 	mov	a,#(__str_27 >> 8)
   0763 C0 E0              1979 	push	acc
   0765 74 80              1980 	mov	a,#0x80
   0767 C0 E0              1981 	push	acc
                           1982 ;	genCall
   0769 12s00r00           1983 	lcall	_printf
   076C E5 81              1984 	mov	a,sp
   076E 24 FB              1985 	add	a,#0xfb
   0770 F5 81              1986 	mov	sp,a
                           1987 ;	main.c:166: for (i = 0; i < 16; ++i){
                           1988 ;	genAssign
   0772 7A D0              1989 	mov	r2,#0xD0
   0774 7B 00              1990 	mov	r3,#0x00
                           1991 ;	genAssign
   0776 7C 10              1992 	mov	r4,#0x10
   0778                    1993 00136$:
                           1994 ;	main.c:167: LCD_SetDDRAMAddress(start_addr);
                           1995 ;	genCast
   0778 8A 05              1996 	mov	ar5,r2
                           1997 ;	genCall
   077A 8D 82              1998 	mov	dpl,r5
   077C C0 02              1999 	push	ar2
   077E C0 03              2000 	push	ar3
   0780 C0 04              2001 	push	ar4
   0782 12s00r00           2002 	lcall	_LCD_SetDDRAMAddress
   0785 D0 04              2003 	pop	ar4
   0787 D0 03              2004 	pop	ar3
   0789 D0 02              2005 	pop	ar2
                           2006 ;	main.c:168: lcdData = LCD_ReadRAM();
                           2007 ;	genCall
   078B C0 02              2008 	push	ar2
   078D C0 03              2009 	push	ar3
   078F C0 04              2010 	push	ar4
   0791 12s00r00           2011 	lcall	_LCD_ReadRAM
   0794 AD 82              2012 	mov	r5,dpl
   0796 D0 04              2013 	pop	ar4
   0798 D0 03              2014 	pop	ar3
   079A D0 02              2015 	pop	ar2
                           2016 ;	main.c:169: printf("%x ", lcdData);
                           2017 ;	genCast
   079C 7E 00              2018 	mov	r6,#0x00
                           2019 ;	genIpush
   079E C0 02              2020 	push	ar2
   07A0 C0 03              2021 	push	ar3
   07A2 C0 04              2022 	push	ar4
   07A4 C0 05              2023 	push	ar5
   07A6 C0 06              2024 	push	ar6
                           2025 ;	genIpush
   07A8 74r89              2026 	mov	a,#__str_28
   07AA C0 E0              2027 	push	acc
   07AC 74s03              2028 	mov	a,#(__str_28 >> 8)
   07AE C0 E0              2029 	push	acc
   07B0 74 80              2030 	mov	a,#0x80
   07B2 C0 E0              2031 	push	acc
                           2032 ;	genCall
   07B4 12s00r00           2033 	lcall	_printf
   07B7 E5 81              2034 	mov	a,sp
   07B9 24 FB              2035 	add	a,#0xfb
   07BB F5 81              2036 	mov	sp,a
   07BD D0 04              2037 	pop	ar4
   07BF D0 03              2038 	pop	ar3
   07C1 D0 02              2039 	pop	ar2
                           2040 ;	main.c:170: start_addr++;
                           2041 ;	genPlus
                           2042 ;     genPlusIncr
   07C3 0A                 2043 	inc	r2
   07C4 BA 00 01           2044 	cjne	r2,#0x00,00197$
   07C7 0B                 2045 	inc	r3
   07C8                    2046 00197$:
                           2047 ;	genDjnz
                           2048 ;	Peephole 112.b	changed ljmp to sjmp
                           2049 ;	Peephole 205	optimized misc jump sequence
   07C8 DC AE              2050 	djnz	r4,00136$
                           2051 ;	Peephole 300	removed redundant label 00198$
                           2052 ;	Peephole 300	removed redundant label 00199$
                           2053 ;	main.c:166: for (i = 0; i < 16; ++i){
                           2054 ;	main.c:172: printf("\r\n");
                           2055 ;	genIpush
   07CA 74r81              2056 	mov	a,#__str_26
   07CC C0 E0              2057 	push	acc
   07CE 74s03              2058 	mov	a,#(__str_26 >> 8)
   07D0 C0 E0              2059 	push	acc
   07D2 74 80              2060 	mov	a,#0x80
   07D4 C0 E0              2061 	push	acc
                           2062 ;	genCall
   07D6 12s00r00           2063 	lcall	_printf
   07D9 15 81              2064 	dec	sp
   07DB 15 81              2065 	dec	sp
   07DD 15 81              2066 	dec	sp
                           2067 ;	main.c:175: break;
                           2068 ;	Peephole 251.a	replaced ljmp to ret with ret
   07DF 22                 2069 	ret
                           2070 ;	main.c:176: case 'G':
   07E0                    2071 00118$:
                           2072 ;	main.c:177: printf("\r\n");
                           2073 ;	genIpush
   07E0 74r81              2074 	mov	a,#__str_26
   07E2 C0 E0              2075 	push	acc
   07E4 74s03              2076 	mov	a,#(__str_26 >> 8)
   07E6 C0 E0              2077 	push	acc
   07E8 74 80              2078 	mov	a,#0x80
   07EA C0 E0              2079 	push	acc
                           2080 ;	genCall
   07EC 12s00r00           2081 	lcall	_printf
   07EF 15 81              2082 	dec	sp
   07F1 15 81              2083 	dec	sp
   07F3 15 81              2084 	dec	sp
                           2085 ;	main.c:178: start_addr = 0x40;
                           2086 ;	genAssign
   07F5 90s00r0B           2087 	mov	dptr,#_handleInput_start_addr_1_1
   07F8 74 40              2088 	mov	a,#0x40
   07FA F0                 2089 	movx	@dptr,a
   07FB E4                 2090 	clr	a
   07FC A3                 2091 	inc	dptr
   07FD F0                 2092 	movx	@dptr,a
                           2093 ;	main.c:180: while (start_addr < 0x80){
   07FE                    2094 00119$:
                           2095 ;	genAssign
   07FE 90s00r0B           2096 	mov	dptr,#_handleInput_start_addr_1_1
   0801 E0                 2097 	movx	a,@dptr
   0802 FA                 2098 	mov	r2,a
   0803 A3                 2099 	inc	dptr
   0804 E0                 2100 	movx	a,@dptr
   0805 FB                 2101 	mov	r3,a
                           2102 ;	genCmpLt
                           2103 ;	genCmp
   0806 C3                 2104 	clr	c
   0807 EA                 2105 	mov	a,r2
   0808 94 80              2106 	subb	a,#0x80
   080A EB                 2107 	mov	a,r3
   080B 94 00              2108 	subb	a,#0x00
                           2109 ;	genIfxJump
   080D 40 01              2110 	jc	00200$
                           2111 ;	Peephole 251.a	replaced ljmp to ret with ret
   080F 22                 2112 	ret
   0810                    2113 00200$:
                           2114 ;	main.c:181: printf("%x: ", start_addr);
                           2115 ;	genIpush
   0810 C0 02              2116 	push	ar2
   0812 C0 03              2117 	push	ar3
   0814 C0 02              2118 	push	ar2
   0816 C0 03              2119 	push	ar3
                           2120 ;	genIpush
   0818 74r84              2121 	mov	a,#__str_27
   081A C0 E0              2122 	push	acc
   081C 74s03              2123 	mov	a,#(__str_27 >> 8)
   081E C0 E0              2124 	push	acc
   0820 74 80              2125 	mov	a,#0x80
   0822 C0 E0              2126 	push	acc
                           2127 ;	genCall
   0824 12s00r00           2128 	lcall	_printf
   0827 E5 81              2129 	mov	a,sp
   0829 24 FB              2130 	add	a,#0xfb
   082B F5 81              2131 	mov	sp,a
   082D D0 03              2132 	pop	ar3
   082F D0 02              2133 	pop	ar2
                           2134 ;	main.c:183: for (i = 0; i < 16; ++i){
                           2135 ;	genAssign
                           2136 ;	genAssign
   0831 7C 10              2137 	mov	r4,#0x10
   0833                    2138 00139$:
                           2139 ;	main.c:184: LCD_SetCGRAMAddress(start_addr);
                           2140 ;	genCast
   0833 8A 05              2141 	mov	ar5,r2
                           2142 ;	genCall
   0835 8D 82              2143 	mov	dpl,r5
   0837 C0 02              2144 	push	ar2
   0839 C0 03              2145 	push	ar3
   083B C0 04              2146 	push	ar4
   083D 12s00r00           2147 	lcall	_LCD_SetCGRAMAddress
   0840 D0 04              2148 	pop	ar4
   0842 D0 03              2149 	pop	ar3
   0844 D0 02              2150 	pop	ar2
                           2151 ;	main.c:185: lcdData = LCD_ReadRAM();
                           2152 ;	genCall
   0846 C0 02              2153 	push	ar2
   0848 C0 03              2154 	push	ar3
   084A C0 04              2155 	push	ar4
   084C 12s00r00           2156 	lcall	_LCD_ReadRAM
   084F AD 82              2157 	mov	r5,dpl
   0851 D0 04              2158 	pop	ar4
   0853 D0 03              2159 	pop	ar3
   0855 D0 02              2160 	pop	ar2
                           2161 ;	main.c:186: printf("%x ", lcdData);
                           2162 ;	genCast
   0857 7E 00              2163 	mov	r6,#0x00
                           2164 ;	genIpush
   0859 C0 02              2165 	push	ar2
   085B C0 03              2166 	push	ar3
   085D C0 04              2167 	push	ar4
   085F C0 05              2168 	push	ar5
   0861 C0 06              2169 	push	ar6
                           2170 ;	genIpush
   0863 74r89              2171 	mov	a,#__str_28
   0865 C0 E0              2172 	push	acc
   0867 74s03              2173 	mov	a,#(__str_28 >> 8)
   0869 C0 E0              2174 	push	acc
   086B 74 80              2175 	mov	a,#0x80
   086D C0 E0              2176 	push	acc
                           2177 ;	genCall
   086F 12s00r00           2178 	lcall	_printf
   0872 E5 81              2179 	mov	a,sp
   0874 24 FB              2180 	add	a,#0xfb
   0876 F5 81              2181 	mov	sp,a
   0878 D0 04              2182 	pop	ar4
   087A D0 03              2183 	pop	ar3
   087C D0 02              2184 	pop	ar2
                           2185 ;	main.c:187: start_addr++;
                           2186 ;	genPlus
                           2187 ;     genPlusIncr
   087E 0A                 2188 	inc	r2
   087F BA 00 01           2189 	cjne	r2,#0x00,00201$
   0882 0B                 2190 	inc	r3
   0883                    2191 00201$:
                           2192 ;	genDjnz
                           2193 ;	Peephole 112.b	changed ljmp to sjmp
                           2194 ;	Peephole 205	optimized misc jump sequence
   0883 DC AE              2195 	djnz	r4,00139$
                           2196 ;	Peephole 300	removed redundant label 00202$
                           2197 ;	Peephole 300	removed redundant label 00203$
                           2198 ;	main.c:183: for (i = 0; i < 16; ++i){
                           2199 ;	main.c:189: printf("\r\n");
                           2200 ;	genAssign
   0885 90s00r0B           2201 	mov	dptr,#_handleInput_start_addr_1_1
   0888 EA                 2202 	mov	a,r2
   0889 F0                 2203 	movx	@dptr,a
   088A A3                 2204 	inc	dptr
   088B EB                 2205 	mov	a,r3
   088C F0                 2206 	movx	@dptr,a
                           2207 ;	genIpush
   088D 74r81              2208 	mov	a,#__str_26
   088F C0 E0              2209 	push	acc
   0891 74s03              2210 	mov	a,#(__str_26 >> 8)
   0893 C0 E0              2211 	push	acc
   0895 74 80              2212 	mov	a,#0x80
   0897 C0 E0              2213 	push	acc
                           2214 ;	genCall
   0899 12s00r00           2215 	lcall	_printf
   089C 15 81              2216 	dec	sp
   089E 15 81              2217 	dec	sp
   08A0 15 81              2218 	dec	sp
   08A2 02s07rFE           2219 	ljmp	00119$
                           2220 ;	main.c:192: case 'H':
   08A5                    2221 00122$:
                           2222 ;	main.c:193: ShowMenu();
                           2223 ;	genCall
                           2224 ;	main.c:197: }
                           2225 ;	Peephole 253.b	replaced lcall/ret with ljmp
   08A5 02s00r0C           2226 	ljmp	_ShowMenu
                           2227 ;
                           2228 ;------------------------------------------------------------
                           2229 ;Allocation info for local variables in function 'main'
                           2230 ;------------------------------------------------------------
                           2231 ;c                         Allocated with name '_main_c_2_2'
                           2232 ;------------------------------------------------------------
                           2233 ;	main.c:203: void main(void)
                           2234 ;	-----------------------------------------
                           2235 ;	 function main
                           2236 ;	-----------------------------------------
   08A8                    2237 _main:
                           2238 ;	main.c:205: Serial_Init();
                           2239 ;	genCall
   08A8 12s00r00           2240 	lcall	_Serial_Init
                           2241 ;	main.c:206: EPROM_Init();
                           2242 ;	genCall
   08AB 12s00r00           2243 	lcall	_EPROM_Init
                           2244 ;	main.c:207: LCD_Init();
                           2245 ;	genCall
   08AE 12s00r00           2246 	lcall	_LCD_Init
                           2247 ;	main.c:208: P1_3 = 1;
                           2248 ;	genAssign
   08B1 D2 93              2249 	setb	_P1_3
                           2250 ;	main.c:211: ShowMenu();
                           2251 ;	genCall
   08B3 12s00r0C           2252 	lcall	_ShowMenu
                           2253 ;	main.c:212: while(1){
   08B6                    2254 00104$:
                           2255 ;	main.c:214: c = getchar ();
                           2256 ;	genCall
   08B6 12s00r00           2257 	lcall	_getchar
   08B9 AA 82              2258 	mov	r2,dpl
                           2259 ;	main.c:215: if (c == ENTER_KEY){
                           2260 ;	genCmpEq
                           2261 ;	gencjneshort
                           2262 ;	Peephole 112.b	changed ljmp to sjmp
                           2263 ;	Peephole 198.b	optimized misc jump sequence
   08BB BA 0D 0A           2264 	cjne	r2,#0x0D,00102$
                           2265 ;	Peephole 200.b	removed redundant sjmp
                           2266 ;	Peephole 300	removed redundant label 00110$
                           2267 ;	Peephole 300	removed redundant label 00111$
                           2268 ;	main.c:216: putchar('\n');
                           2269 ;	genCall
   08BE 75 82 0A           2270 	mov	dpl,#0x0A
   08C1 C0 02              2271 	push	ar2
   08C3 12s00r00           2272 	lcall	_putchar
   08C6 D0 02              2273 	pop	ar2
   08C8                    2274 00102$:
                           2275 ;	main.c:218: putchar(c);
                           2276 ;	genCall
   08C8 8A 82              2277 	mov	dpl,r2
   08CA C0 02              2278 	push	ar2
   08CC 12s00r00           2279 	lcall	_putchar
   08CF D0 02              2280 	pop	ar2
                           2281 ;	main.c:219: handleInput(c);
                           2282 ;	genCall
   08D1 8A 82              2283 	mov	dpl,r2
   08D3 12s01rD0           2284 	lcall	_handleInput
                           2285 ;	Peephole 112.b	changed ljmp to sjmp
   08D6 80 DE              2286 	sjmp	00104$
                           2287 ;	Peephole 259.a	removed redundant label 00106$ and ret
                           2288 ;
                           2289 	.area CSEG    (CODE)
                           2290 	.area CONST   (CODE)
   0000                    2291 __str_0:
   0000 0D                 2292 	.db 0x0D
   0001 0A                 2293 	.db 0x0A
   0002 2A 2A 2A 2A 2A 2A  2294 	.ascii "***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   0011 00                 2295 	.db 0x00
   0012                    2296 __str_1:
   0012 0D                 2297 	.db 0x0D
   0013 0A                 2298 	.db 0x0A
   0014 20 20 20 20 4D 65  2299 	.ascii "    Menu"
        6E 75
   001C 0D                 2300 	.db 0x0D
   001D 0A                 2301 	.db 0x0A
   001E 00                 2302 	.db 0x00
   001F                    2303 __str_2:
   001F 0D                 2304 	.db 0x0D
   0020 0A                 2305 	.db 0x0A
   0021 50 72 65 73 73 20  2306 	.ascii "Press 'H' to show this menu"
        27 48 27 20 74 6F
        20 73 68 6F 77 20
        74 68 69 73 20 6D
        65 6E 75
   003C 00                 2307 	.db 0x00
   003D                    2308 __str_3:
   003D 0D                 2309 	.db 0x0D
   003E 0A                 2310 	.db 0x0A
   003F 50 72 65 73 73 20  2311 	.ascii "Press 'W' to write a byte to EEPROM"
        27 57 27 20 74 6F
        20 77 72 69 74 65
        20 61 20 62 79 74
        65 20 74 6F 20 45
        45 50 52 4F 4D
   0062 00                 2312 	.db 0x00
   0063                    2313 __str_4:
   0063 0D                 2314 	.db 0x0D
   0064 0A                 2315 	.db 0x0A
   0065 50 72 65 73 73 20  2316 	.ascii "Press 'R' to read a byte from EEPROM"
        27 52 27 20 74 6F
        20 72 65 61 64 20
        61 20 62 79 74 65
        20 66 72 6F 6D 20
        45 45 50 52 4F 4D
   0089 00                 2317 	.db 0x00
   008A                    2318 __str_5:
   008A 0D                 2319 	.db 0x0D
   008B 0A                 2320 	.db 0x0A
   008C 50 72 65 73 73 20  2321 	.ascii "Press 'L' to display EEPROM data on LCD"
        27 4C 27 20 74 6F
        20 64 69 73 70 6C
        61 79 20 45 45 50
        52 4F 4D 20 64 61
        74 61 20 6F 6E 20
        4C 43 44
   00B3 00                 2322 	.db 0x00
   00B4                    2323 __str_6:
   00B4 0D                 2324 	.db 0x0D
   00B5 0A                 2325 	.db 0x0A
   00B6 50 72 65 73 73 20  2326 	.ascii "Press 'C' to clear the LCD display"
        27 43 27 20 74 6F
        20 63 6C 65 61 72
        20 74 68 65 20 4C
        43 44 20 64 69 73
        70 6C 61 79
   00D8 00                 2327 	.db 0x00
   00D9                    2328 __str_7:
   00D9 0D                 2329 	.db 0x0D
   00DA 0A                 2330 	.db 0x0A
   00DB 50 72 65 73 73 20  2331 	.ascii "Press 'D' to do a Hex Dump of EEPROM"
        27 44 27 20 74 6F
        20 64 6F 20 61 20
        48 65 78 20 44 75
        6D 70 20 6F 66 20
        45 45 50 52 4F 4D
   00FF 00                 2332 	.db 0x00
   0100                    2333 __str_8:
   0100 0D                 2334 	.db 0x0D
   0101 0A                 2335 	.db 0x0A
   0102 50 72 65 73 73 20  2336 	.ascii "Press 'Y' to read the contents of DDRAM"
        27 59 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 44 44
        52 41 4D
   0129 00                 2337 	.db 0x00
   012A                    2338 __str_9:
   012A 0D                 2339 	.db 0x0D
   012B 0A                 2340 	.db 0x0A
   012C 50 72 65 73 73 20  2341 	.ascii "Press 'G' to read the contents of CGRAM"
        27 47 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 43 47
        52 41 4D
   0153 0D                 2342 	.db 0x0D
   0154 0A                 2343 	.db 0x0A
   0155 00                 2344 	.db 0x00
   0156                    2345 __str_10:
   0156 0D                 2346 	.db 0x0D
   0157 0A                 2347 	.db 0x0A
   0158 45 6E 74 65 72 20  2348 	.ascii "Enter an EEPROM block number from 0-7: "
        61 6E 20 45 45 50
        52 4F 4D 20 62 6C
        6F 63 6B 20 6E 75
        6D 62 65 72 20 66
        72 6F 6D 20 30 2D
        37 3A 20
   017F 00                 2349 	.db 0x00
   0180                    2350 __str_11:
   0180 0D                 2351 	.db 0x0D
   0181 0A                 2352 	.db 0x0A
   0182 49 4E 56 41 4C 49  2353 	.ascii "INVALID: Enter an EEPROM block number from 0-7: "
        44 3A 20 45 6E 74
        65 72 20 61 6E 20
        45 45 50 52 4F 4D
        20 62 6C 6F 63 6B
        20 6E 75 6D 62 65
        72 20 66 72 6F 6D
        20 30 2D 37 3A 20
   01B2 00                 2354 	.db 0x00
   01B3                    2355 __str_12:
   01B3 0D                 2356 	.db 0x0D
   01B4 0A                 2357 	.db 0x0A
   01B5 45 6E 74 65 72 20  2358 	.ascii "Enter an EEPROM Word address in hex:"
        61 6E 20 45 45 50
        52 4F 4D 20 57 6F
        72 64 20 61 64 64
        72 65 73 73 20 69
        6E 20 68 65 78 3A
   01D9 00                 2359 	.db 0x00
   01DA                    2360 __str_13:
   01DA 0D                 2361 	.db 0x0D
   01DB 0A                 2362 	.db 0x0A
   01DC 57 72 69 74 69 6E  2363 	.ascii "Writing to EEPROM..."
        67 20 74 6F 20 45
        45 50 52 4F 4D 2E
        2E 2E
   01F0 00                 2364 	.db 0x00
   01F1                    2365 __str_14:
   01F1 0D                 2366 	.db 0x0D
   01F2 0A                 2367 	.db 0x0A
   01F3 45 6E 74 65 72 20  2368 	.ascii "Enter a byte of data to write to EEPROM:"
        61 20 62 79 74 65
        20 6F 66 20 64 61
        74 61 20 74 6F 20
        77 72 69 74 65 20
        74 6F 20 45 45 50
        52 4F 4D 3A
   021B 00                 2369 	.db 0x00
   021C                    2370 __str_15:
   021C 0D                 2371 	.db 0x0D
   021D 0A                 2372 	.db 0x0A
   021E 57 72 6F 74 65 20  2373 	.ascii "Wrote %X to block %d address 0x%X in EEPROM!"
        25 58 20 74 6F 20
        62 6C 6F 63 6B 20
        25 64 20 61 64 64
        72 65 73 73 20 30
        78 25 58 20 69 6E
        20 45 45 50 52 4F
        4D 21
   024A 0D                 2374 	.db 0x0D
   024B 0A                 2375 	.db 0x0A
   024C 00                 2376 	.db 0x00
   024D                    2377 __str_16:
   024D 0D                 2378 	.db 0x0D
   024E 0A                 2379 	.db 0x0A
   024F 52 65 61 64 69 6E  2380 	.ascii "Reading from EEPROM..."
        67 20 66 72 6F 6D
        20 45 45 50 52 4F
        4D 2E 2E 2E
   0265 00                 2381 	.db 0x00
   0266                    2382 __str_17:
   0266 0D                 2383 	.db 0x0D
   0267 0A                 2384 	.db 0x0A
   0268 52 65 61 64 20 25  2385 	.ascii "Read %X from block %d address 0x%X"
        58 20 66 72 6F 6D
        20 62 6C 6F 63 6B
        20 25 64 20 61 64
        64 72 65 73 73 20
        30 78 25 58
   028A 0D                 2386 	.db 0x0D
   028B 0A                 2387 	.db 0x0A
   028C 00                 2388 	.db 0x00
   028D                    2389 __str_18:
   028D 0D                 2390 	.db 0x0D
   028E 0A                 2391 	.db 0x0A
   028F 45 6E 74 65 72 20  2392 	.ascii "Enter LCD row from 0-3:"
        4C 43 44 20 72 6F
        77 20 66 72 6F 6D
        20 30 2D 33 3A
   02A6 00                 2393 	.db 0x00
   02A7                    2394 __str_19:
   02A7 3A 20              2395 	.ascii ": "
   02A9 00                 2396 	.db 0x00
   02AA                    2397 __str_20:
   02AA 0D                 2398 	.db 0x0D
   02AB 0A                 2399 	.db 0x0A
   02AC 57 72 6F 74 65 20  2400 	.ascii "Wrote to LCD!"
        74 6F 20 4C 43 44
        21
   02B9 0D                 2401 	.db 0x0D
   02BA 0A                 2402 	.db 0x0A
   02BB 00                 2403 	.db 0x00
   02BC                    2404 __str_21:
   02BC 0D                 2405 	.db 0x0D
   02BD 0A                 2406 	.db 0x0A
   02BE 4C 43 44 20 44 69  2407 	.ascii "LCD Display Cleared!"
        73 70 6C 61 79 20
        43 6C 65 61 72 65
        64 21
   02D2 0D                 2408 	.db 0x0D
   02D3 0A                 2409 	.db 0x0A
   02D4 00                 2410 	.db 0x00
   02D5                    2411 __str_22:
   02D5 0D                 2412 	.db 0x0D
   02D6 0A                 2413 	.db 0x0A
   02D7 50 65 72 66 6F 72  2414 	.ascii "Performing an EEPROM data dump"
        6D 69 6E 67 20 61
        6E 20 45 45 50 52
        4F 4D 20 64 61 74
        61 20 64 75 6D 70
   02F5 0D                 2415 	.db 0x0D
   02F6 0A                 2416 	.db 0x0A
   02F7 00                 2417 	.db 0x00
   02F8                    2418 __str_23:
   02F8 0D                 2419 	.db 0x0D
   02F9 0A                 2420 	.db 0x0A
   02FA 45 6E 74 65 72 20  2421 	.ascii "Enter the starting block and address"
        74 68 65 20 73 74
        61 72 74 69 6E 67
        20 62 6C 6F 63 6B
        20 61 6E 64 20 61
        64 64 72 65 73 73
   031E 00                 2422 	.db 0x00
   031F                    2423 __str_24:
   031F 0D                 2424 	.db 0x0D
   0320 0A                 2425 	.db 0x0A
   0321 45 6E 74 65 72 20  2426 	.ascii "Enter the ending block and address"
        74 68 65 20 65 6E
        64 69 6E 67 20 62
        6C 6F 63 6B 20 61
        6E 64 20 61 64 64
        72 65 73 73
   0343 00                 2427 	.db 0x00
   0344                    2428 __str_25:
   0344 0D                 2429 	.db 0x0D
   0345 0A                 2430 	.db 0x0A
   0346 49 6E 76 61 6C 69  2431 	.ascii "Invalid addresses. End address must be after start address"
        64 20 61 64 64 72
        65 73 73 65 73 2E
        20 45 6E 64 20 61
        64 64 72 65 73 73
        20 6D 75 73 74 20
        62 65 20 61 66 74
        65 72 20 73 74 61
        72 74 20 61 64 64
        72 65 73 73
   0380 00                 2432 	.db 0x00
   0381                    2433 __str_26:
   0381 0D                 2434 	.db 0x0D
   0382 0A                 2435 	.db 0x0A
   0383 00                 2436 	.db 0x00
   0384                    2437 __str_27:
   0384 25 78 3A 20        2438 	.ascii "%x: "
   0388 00                 2439 	.db 0x00
   0389                    2440 __str_28:
   0389 25 78 20           2441 	.ascii "%x "
   038C 00                 2442 	.db 0x00
                           2443 	.area XINIT   (CODE)
