                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Sun Nov 13 23:06:29 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _handleInput
                             14 	.globl _handleCGMode
                             15 	.globl _CG_Menu
                             16 	.globl _handlePCFMode
                             17 	.globl _PCF_Menu
                             18 	.globl _getBlockAndAddress
                             19 	.globl __sdcc_external_startup
                             20 	.globl _P5_7
                             21 	.globl _P5_6
                             22 	.globl _P5_5
                             23 	.globl _P5_4
                             24 	.globl _P5_3
                             25 	.globl _P5_2
                             26 	.globl _P5_1
                             27 	.globl _P5_0
                             28 	.globl _P4_7
                             29 	.globl _P4_6
                             30 	.globl _P4_5
                             31 	.globl _P4_4
                             32 	.globl _P4_3
                             33 	.globl _P4_2
                             34 	.globl _P4_1
                             35 	.globl _P4_0
                             36 	.globl _PX0L
                             37 	.globl _PT0L
                             38 	.globl _PX1L
                             39 	.globl _PT1L
                             40 	.globl _PLS
                             41 	.globl _PT2L
                             42 	.globl _PPCL
                             43 	.globl _EC
                             44 	.globl _CCF0
                             45 	.globl _CCF1
                             46 	.globl _CCF2
                             47 	.globl _CCF3
                             48 	.globl _CCF4
                             49 	.globl _CR
                             50 	.globl _CF
                             51 	.globl _TF2
                             52 	.globl _EXF2
                             53 	.globl _RCLK
                             54 	.globl _TCLK
                             55 	.globl _EXEN2
                             56 	.globl _TR2
                             57 	.globl _C_T2
                             58 	.globl _CP_RL2
                             59 	.globl _T2CON_7
                             60 	.globl _T2CON_6
                             61 	.globl _T2CON_5
                             62 	.globl _T2CON_4
                             63 	.globl _T2CON_3
                             64 	.globl _T2CON_2
                             65 	.globl _T2CON_1
                             66 	.globl _T2CON_0
                             67 	.globl _PT2
                             68 	.globl _ET2
                             69 	.globl _CY
                             70 	.globl _AC
                             71 	.globl _F0
                             72 	.globl _RS1
                             73 	.globl _RS0
                             74 	.globl _OV
                             75 	.globl _F1
                             76 	.globl _P
                             77 	.globl _PS
                             78 	.globl _PT1
                             79 	.globl _PX1
                             80 	.globl _PT0
                             81 	.globl _PX0
                             82 	.globl _RD
                             83 	.globl _WR
                             84 	.globl _T1
                             85 	.globl _T0
                             86 	.globl _INT1
                             87 	.globl _INT0
                             88 	.globl _TXD
                             89 	.globl _RXD
                             90 	.globl _P3_7
                             91 	.globl _P3_6
                             92 	.globl _P3_5
                             93 	.globl _P3_4
                             94 	.globl _P3_3
                             95 	.globl _P3_2
                             96 	.globl _P3_1
                             97 	.globl _P3_0
                             98 	.globl _EA
                             99 	.globl _ES
                            100 	.globl _ET1
                            101 	.globl _EX1
                            102 	.globl _ET0
                            103 	.globl _EX0
                            104 	.globl _P2_7
                            105 	.globl _P2_6
                            106 	.globl _P2_5
                            107 	.globl _P2_4
                            108 	.globl _P2_3
                            109 	.globl _P2_2
                            110 	.globl _P2_1
                            111 	.globl _P2_0
                            112 	.globl _SM0
                            113 	.globl _SM1
                            114 	.globl _SM2
                            115 	.globl _REN
                            116 	.globl _TB8
                            117 	.globl _RB8
                            118 	.globl _TI
                            119 	.globl _RI
                            120 	.globl _P1_7
                            121 	.globl _P1_6
                            122 	.globl _P1_5
                            123 	.globl _P1_4
                            124 	.globl _P1_3
                            125 	.globl _P1_2
                            126 	.globl _P1_1
                            127 	.globl _P1_0
                            128 	.globl _TF1
                            129 	.globl _TR1
                            130 	.globl _TF0
                            131 	.globl _TR0
                            132 	.globl _IE1
                            133 	.globl _IT1
                            134 	.globl _IE0
                            135 	.globl _IT0
                            136 	.globl _P0_7
                            137 	.globl _P0_6
                            138 	.globl _P0_5
                            139 	.globl _P0_4
                            140 	.globl _P0_3
                            141 	.globl _P0_2
                            142 	.globl _P0_1
                            143 	.globl _P0_0
                            144 	.globl _EECON
                            145 	.globl _KBF
                            146 	.globl _KBE
                            147 	.globl _KBLS
                            148 	.globl _BRL
                            149 	.globl _BDRCON
                            150 	.globl _T2MOD
                            151 	.globl _SPDAT
                            152 	.globl _SPSTA
                            153 	.globl _SPCON
                            154 	.globl _SADEN
                            155 	.globl _SADDR
                            156 	.globl _WDTPRG
                            157 	.globl _WDTRST
                            158 	.globl _P5
                            159 	.globl _P4
                            160 	.globl _IPH1
                            161 	.globl _IPL1
                            162 	.globl _IPH0
                            163 	.globl _IPL0
                            164 	.globl _IEN1
                            165 	.globl _IEN0
                            166 	.globl _CMOD
                            167 	.globl _CL
                            168 	.globl _CH
                            169 	.globl _CCON
                            170 	.globl _CCAPM4
                            171 	.globl _CCAPM3
                            172 	.globl _CCAPM2
                            173 	.globl _CCAPM1
                            174 	.globl _CCAPM0
                            175 	.globl _CCAP4L
                            176 	.globl _CCAP3L
                            177 	.globl _CCAP2L
                            178 	.globl _CCAP1L
                            179 	.globl _CCAP0L
                            180 	.globl _CCAP4H
                            181 	.globl _CCAP3H
                            182 	.globl _CCAP2H
                            183 	.globl _CCAP1H
                            184 	.globl _CCAP0H
                            185 	.globl _CKCKON1
                            186 	.globl _CKCKON0
                            187 	.globl _CKRL
                            188 	.globl _AUXR1
                            189 	.globl _AUXR
                            190 	.globl _TH2
                            191 	.globl _TL2
                            192 	.globl _RCAP2H
                            193 	.globl _RCAP2L
                            194 	.globl _T2CON
                            195 	.globl _B
                            196 	.globl _ACC
                            197 	.globl _PSW
                            198 	.globl _IP
                            199 	.globl _P3
                            200 	.globl _IE
                            201 	.globl _P2
                            202 	.globl _SBUF
                            203 	.globl _SCON
                            204 	.globl _P1
                            205 	.globl _TH1
                            206 	.globl _TH0
                            207 	.globl _TL1
                            208 	.globl _TL0
                            209 	.globl _TMOD
                            210 	.globl _TCON
                            211 	.globl _PCON
                            212 	.globl _DPH
                            213 	.globl _DPL
                            214 	.globl _SP
                            215 	.globl _P0
                            216 	.globl _ExpiredAlarms
                            217 	.globl _mode
                            218 	.globl _getBlockAndAddress_PARM_2
                            219 	.globl _DisableFlag
                            220 	.globl _LCD_Menu
                            221 	.globl _handleLCDMode
                            222 	.globl _EEPROM_Menu
                            223 	.globl _handleEEPROMMode
                            224 	.globl _CLOCK_Menu
                            225 	.globl _handleCLOCKMode
                            226 	.globl _MainMenu
                            227 	.globl _handleMAINMode
                            228 ;--------------------------------------------------------
                            229 ; special function registers
                            230 ;--------------------------------------------------------
                            231 	.area RSEG    (DATA)
                    0080    232 _P0	=	0x0080
                    0081    233 _SP	=	0x0081
                    0082    234 _DPL	=	0x0082
                    0083    235 _DPH	=	0x0083
                    0087    236 _PCON	=	0x0087
                    0088    237 _TCON	=	0x0088
                    0089    238 _TMOD	=	0x0089
                    008A    239 _TL0	=	0x008a
                    008B    240 _TL1	=	0x008b
                    008C    241 _TH0	=	0x008c
                    008D    242 _TH1	=	0x008d
                    0090    243 _P1	=	0x0090
                    0098    244 _SCON	=	0x0098
                    0099    245 _SBUF	=	0x0099
                    00A0    246 _P2	=	0x00a0
                    00A8    247 _IE	=	0x00a8
                    00B0    248 _P3	=	0x00b0
                    00B8    249 _IP	=	0x00b8
                    00D0    250 _PSW	=	0x00d0
                    00E0    251 _ACC	=	0x00e0
                    00F0    252 _B	=	0x00f0
                    00C8    253 _T2CON	=	0x00c8
                    00CA    254 _RCAP2L	=	0x00ca
                    00CB    255 _RCAP2H	=	0x00cb
                    00CC    256 _TL2	=	0x00cc
                    00CD    257 _TH2	=	0x00cd
                    008E    258 _AUXR	=	0x008e
                    00A2    259 _AUXR1	=	0x00a2
                    0097    260 _CKRL	=	0x0097
                    008F    261 _CKCKON0	=	0x008f
                    008F    262 _CKCKON1	=	0x008f
                    00FA    263 _CCAP0H	=	0x00fa
                    00FB    264 _CCAP1H	=	0x00fb
                    00FC    265 _CCAP2H	=	0x00fc
                    00FD    266 _CCAP3H	=	0x00fd
                    00FE    267 _CCAP4H	=	0x00fe
                    00EA    268 _CCAP0L	=	0x00ea
                    00EB    269 _CCAP1L	=	0x00eb
                    00EC    270 _CCAP2L	=	0x00ec
                    00ED    271 _CCAP3L	=	0x00ed
                    00EE    272 _CCAP4L	=	0x00ee
                    00DA    273 _CCAPM0	=	0x00da
                    00DB    274 _CCAPM1	=	0x00db
                    00DC    275 _CCAPM2	=	0x00dc
                    00DD    276 _CCAPM3	=	0x00dd
                    00DE    277 _CCAPM4	=	0x00de
                    00D8    278 _CCON	=	0x00d8
                    00F9    279 _CH	=	0x00f9
                    00E9    280 _CL	=	0x00e9
                    00D9    281 _CMOD	=	0x00d9
                    00A8    282 _IEN0	=	0x00a8
                    00B1    283 _IEN1	=	0x00b1
                    00B8    284 _IPL0	=	0x00b8
                    00B7    285 _IPH0	=	0x00b7
                    00B2    286 _IPL1	=	0x00b2
                    00B3    287 _IPH1	=	0x00b3
                    00C0    288 _P4	=	0x00c0
                    00D8    289 _P5	=	0x00d8
                    00A6    290 _WDTRST	=	0x00a6
                    00A7    291 _WDTPRG	=	0x00a7
                    00A9    292 _SADDR	=	0x00a9
                    00B9    293 _SADEN	=	0x00b9
                    00C3    294 _SPCON	=	0x00c3
                    00C4    295 _SPSTA	=	0x00c4
                    00C5    296 _SPDAT	=	0x00c5
                    00C9    297 _T2MOD	=	0x00c9
                    009B    298 _BDRCON	=	0x009b
                    009A    299 _BRL	=	0x009a
                    009C    300 _KBLS	=	0x009c
                    009D    301 _KBE	=	0x009d
                    009E    302 _KBF	=	0x009e
                    00D2    303 _EECON	=	0x00d2
                            304 ;--------------------------------------------------------
                            305 ; special function bits
                            306 ;--------------------------------------------------------
                            307 	.area RSEG    (DATA)
                    0080    308 _P0_0	=	0x0080
                    0081    309 _P0_1	=	0x0081
                    0082    310 _P0_2	=	0x0082
                    0083    311 _P0_3	=	0x0083
                    0084    312 _P0_4	=	0x0084
                    0085    313 _P0_5	=	0x0085
                    0086    314 _P0_6	=	0x0086
                    0087    315 _P0_7	=	0x0087
                    0088    316 _IT0	=	0x0088
                    0089    317 _IE0	=	0x0089
                    008A    318 _IT1	=	0x008a
                    008B    319 _IE1	=	0x008b
                    008C    320 _TR0	=	0x008c
                    008D    321 _TF0	=	0x008d
                    008E    322 _TR1	=	0x008e
                    008F    323 _TF1	=	0x008f
                    0090    324 _P1_0	=	0x0090
                    0091    325 _P1_1	=	0x0091
                    0092    326 _P1_2	=	0x0092
                    0093    327 _P1_3	=	0x0093
                    0094    328 _P1_4	=	0x0094
                    0095    329 _P1_5	=	0x0095
                    0096    330 _P1_6	=	0x0096
                    0097    331 _P1_7	=	0x0097
                    0098    332 _RI	=	0x0098
                    0099    333 _TI	=	0x0099
                    009A    334 _RB8	=	0x009a
                    009B    335 _TB8	=	0x009b
                    009C    336 _REN	=	0x009c
                    009D    337 _SM2	=	0x009d
                    009E    338 _SM1	=	0x009e
                    009F    339 _SM0	=	0x009f
                    00A0    340 _P2_0	=	0x00a0
                    00A1    341 _P2_1	=	0x00a1
                    00A2    342 _P2_2	=	0x00a2
                    00A3    343 _P2_3	=	0x00a3
                    00A4    344 _P2_4	=	0x00a4
                    00A5    345 _P2_5	=	0x00a5
                    00A6    346 _P2_6	=	0x00a6
                    00A7    347 _P2_7	=	0x00a7
                    00A8    348 _EX0	=	0x00a8
                    00A9    349 _ET0	=	0x00a9
                    00AA    350 _EX1	=	0x00aa
                    00AB    351 _ET1	=	0x00ab
                    00AC    352 _ES	=	0x00ac
                    00AF    353 _EA	=	0x00af
                    00B0    354 _P3_0	=	0x00b0
                    00B1    355 _P3_1	=	0x00b1
                    00B2    356 _P3_2	=	0x00b2
                    00B3    357 _P3_3	=	0x00b3
                    00B4    358 _P3_4	=	0x00b4
                    00B5    359 _P3_5	=	0x00b5
                    00B6    360 _P3_6	=	0x00b6
                    00B7    361 _P3_7	=	0x00b7
                    00B0    362 _RXD	=	0x00b0
                    00B1    363 _TXD	=	0x00b1
                    00B2    364 _INT0	=	0x00b2
                    00B3    365 _INT1	=	0x00b3
                    00B4    366 _T0	=	0x00b4
                    00B5    367 _T1	=	0x00b5
                    00B6    368 _WR	=	0x00b6
                    00B7    369 _RD	=	0x00b7
                    00B8    370 _PX0	=	0x00b8
                    00B9    371 _PT0	=	0x00b9
                    00BA    372 _PX1	=	0x00ba
                    00BB    373 _PT1	=	0x00bb
                    00BC    374 _PS	=	0x00bc
                    00D0    375 _P	=	0x00d0
                    00D1    376 _F1	=	0x00d1
                    00D2    377 _OV	=	0x00d2
                    00D3    378 _RS0	=	0x00d3
                    00D4    379 _RS1	=	0x00d4
                    00D5    380 _F0	=	0x00d5
                    00D6    381 _AC	=	0x00d6
                    00D7    382 _CY	=	0x00d7
                    00AD    383 _ET2	=	0x00ad
                    00BD    384 _PT2	=	0x00bd
                    00C8    385 _T2CON_0	=	0x00c8
                    00C9    386 _T2CON_1	=	0x00c9
                    00CA    387 _T2CON_2	=	0x00ca
                    00CB    388 _T2CON_3	=	0x00cb
                    00CC    389 _T2CON_4	=	0x00cc
                    00CD    390 _T2CON_5	=	0x00cd
                    00CE    391 _T2CON_6	=	0x00ce
                    00CF    392 _T2CON_7	=	0x00cf
                    00C8    393 _CP_RL2	=	0x00c8
                    00C9    394 _C_T2	=	0x00c9
                    00CA    395 _TR2	=	0x00ca
                    00CB    396 _EXEN2	=	0x00cb
                    00CC    397 _TCLK	=	0x00cc
                    00CD    398 _RCLK	=	0x00cd
                    00CE    399 _EXF2	=	0x00ce
                    00CF    400 _TF2	=	0x00cf
                    00DF    401 _CF	=	0x00df
                    00DE    402 _CR	=	0x00de
                    00DC    403 _CCF4	=	0x00dc
                    00DB    404 _CCF3	=	0x00db
                    00DA    405 _CCF2	=	0x00da
                    00D9    406 _CCF1	=	0x00d9
                    00D8    407 _CCF0	=	0x00d8
                    00AE    408 _EC	=	0x00ae
                    00BE    409 _PPCL	=	0x00be
                    00BD    410 _PT2L	=	0x00bd
                    00BC    411 _PLS	=	0x00bc
                    00BB    412 _PT1L	=	0x00bb
                    00BA    413 _PX1L	=	0x00ba
                    00B9    414 _PT0L	=	0x00b9
                    00B8    415 _PX0L	=	0x00b8
                    00C0    416 _P4_0	=	0x00c0
                    00C1    417 _P4_1	=	0x00c1
                    00C2    418 _P4_2	=	0x00c2
                    00C3    419 _P4_3	=	0x00c3
                    00C4    420 _P4_4	=	0x00c4
                    00C5    421 _P4_5	=	0x00c5
                    00C6    422 _P4_6	=	0x00c6
                    00C7    423 _P4_7	=	0x00c7
                    00D8    424 _P5_0	=	0x00d8
                    00D9    425 _P5_1	=	0x00d9
                    00DA    426 _P5_2	=	0x00da
                    00DB    427 _P5_3	=	0x00db
                    00DC    428 _P5_4	=	0x00dc
                    00DD    429 _P5_5	=	0x00dd
                    00DE    430 _P5_6	=	0x00de
                    00DF    431 _P5_7	=	0x00df
                            432 ;--------------------------------------------------------
                            433 ; overlayable register banks
                            434 ;--------------------------------------------------------
                            435 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     436 	.ds 8
                            437 ;--------------------------------------------------------
                            438 ; internal ram data
                            439 ;--------------------------------------------------------
                            440 	.area DSEG    (DATA)
                            441 ;--------------------------------------------------------
                            442 ; overlayable items in internal ram 
                            443 ;--------------------------------------------------------
                            444 	.area OSEG    (OVR,DATA)
                            445 ;--------------------------------------------------------
                            446 ; Stack segment in internal ram 
                            447 ;--------------------------------------------------------
                            448 	.area	SSEG	(DATA)
   0000                     449 __start__stack:
   0000                     450 	.ds	1
                            451 
                            452 ;--------------------------------------------------------
                            453 ; indirectly addressable internal ram data
                            454 ;--------------------------------------------------------
                            455 	.area ISEG    (DATA)
                            456 ;--------------------------------------------------------
                            457 ; bit data
                            458 ;--------------------------------------------------------
                            459 	.area BSEG    (BIT)
   0000                     460 _DisableFlag::
   0000                     461 	.ds 1
                            462 ;--------------------------------------------------------
                            463 ; paged external ram data
                            464 ;--------------------------------------------------------
                            465 	.area PSEG    (PAG,XDATA)
                            466 ;--------------------------------------------------------
                            467 ; external ram data
                            468 ;--------------------------------------------------------
                            469 	.area XSEG    (XDATA)
   0000                     470 _getBlockAndAddress_PARM_2:
   0000                     471 	.ds 3
   0003                     472 _getBlockAndAddress_address_1_1:
   0003                     473 	.ds 3
   0006                     474 _handlePCFMode_c_1_1:
   0006                     475 	.ds 1
   0007                     476 _handleCGMode_c_1_1:
   0007                     477 	.ds 1
   0008                     478 _handleCGMode_addr_1_1:
   0008                     479 	.ds 1
   0009                     480 _handleLCDMode_c_1_1:
   0009                     481 	.ds 1
   000A                     482 _handleLCDMode_row_1_1:
   000A                     483 	.ds 2
   000C                     484 _handleLCDMode_col_1_1:
   000C                     485 	.ds 2
   000E                     486 _handleLCDMode_str_1_1:
   000E                     487 	.ds 100
   0072                     488 _handleLCDMode_start_addr_1_1:
   0072                     489 	.ds 2
   0074                     490 _handleEEPROMMode_c_1_1:
   0074                     491 	.ds 1
   0075                     492 _handleEEPROMMode_block_1_1:
   0075                     493 	.ds 1
   0076                     494 _handleEEPROMMode_end_block_1_1:
   0076                     495 	.ds 1
   0077                     496 _handleEEPROMMode_address_1_1:
   0077                     497 	.ds 1
   0078                     498 _handleEEPROMMode_end_address_1_1:
   0078                     499 	.ds 1
   0079                     500 _handleEEPROMMode_start_addr_1_1:
   0079                     501 	.ds 2
   007B                     502 _handleEEPROMMode_end_addr_1_1:
   007B                     503 	.ds 2
   007D                     504 _handleCLOCKMode_c_1_1:
   007D                     505 	.ds 1
   007E                     506 _handleCLOCKMode_i_1_1:
   007E                     507 	.ds 1
   007F                     508 _handleMAINMode_c_1_1:
   007F                     509 	.ds 1
   0080                     510 _handleInput_c_1_1:
   0080                     511 	.ds 1
   0081                     512 _main_i_2_2:
   0081                     513 	.ds 1
                            514 ;--------------------------------------------------------
                            515 ; external initialized ram data
                            516 ;--------------------------------------------------------
                            517 	.area XISEG   (XDATA)
   0000                     518 _mode::
   0000                     519 	.ds 1
   0001                     520 _ExpiredAlarms::
   0001                     521 	.ds 3
                            522 	.area HOME    (CODE)
                            523 	.area GSINIT0 (CODE)
                            524 	.area GSINIT1 (CODE)
                            525 	.area GSINIT2 (CODE)
                            526 	.area GSINIT3 (CODE)
                            527 	.area GSINIT4 (CODE)
                            528 	.area GSINIT5 (CODE)
                            529 	.area GSINIT  (CODE)
                            530 	.area GSFINAL (CODE)
                            531 	.area CSEG    (CODE)
                            532 ;--------------------------------------------------------
                            533 ; interrupt vector 
                            534 ;--------------------------------------------------------
                            535 	.area HOME    (CODE)
   0000                     536 __interrupt_vect:
   0000 02s00r00            537 	ljmp	__sdcc_gsinit_startup
   0003 32                  538 	reti
   0004                     539 	.ds	7
   000B 02s00r00            540 	ljmp	_timer0
   000E                     541 	.ds	5
   0013 02s00r00            542 	ljmp	_ext1
                            543 ;--------------------------------------------------------
                            544 ; global & static initialisations
                            545 ;--------------------------------------------------------
                            546 	.area HOME    (CODE)
                            547 	.area GSINIT  (CODE)
                            548 	.area GSFINAL (CODE)
                            549 	.area GSINIT  (CODE)
                            550 	.globl __sdcc_gsinit_startup
                            551 	.globl __sdcc_program_startup
                            552 	.globl __start__stack
                            553 	.globl __mcs51_genXINIT
                            554 	.globl __mcs51_genXRAMCLEAR
                            555 	.globl __mcs51_genRAMCLEAR
                            556 ;	main.c:39: bool DisableFlag = false;
                            557 ;	genAssign
   0000 C2*00               558 	clr	_DisableFlag
                            559 	.area GSFINAL (CODE)
   0000 02s00r00            560 	ljmp	__sdcc_program_startup
                            561 ;--------------------------------------------------------
                            562 ; Home
                            563 ;--------------------------------------------------------
                            564 	.area HOME    (CODE)
                            565 	.area CSEG    (CODE)
   0000                     566 __sdcc_program_startup:
   0000 12s13r6E            567 	lcall	_main
                            568 ;	return from main will lock up
   0003 80 FE               569 	sjmp .
                            570 ;--------------------------------------------------------
                            571 ; code
                            572 ;--------------------------------------------------------
                            573 	.area CSEG    (CODE)
                            574 ;------------------------------------------------------------
                            575 ;Allocation info for local variables in function '_sdcc_external_startup'
                            576 ;------------------------------------------------------------
                            577 ;------------------------------------------------------------
                            578 ;	main.c:55: _sdcc_external_startup(){
                            579 ;	-----------------------------------------
                            580 ;	 function _sdcc_external_startup
                            581 ;	-----------------------------------------
   0005                     582 __sdcc_external_startup:
                    0002    583 	ar2 = 0x02
                    0003    584 	ar3 = 0x03
                    0004    585 	ar4 = 0x04
                    0005    586 	ar5 = 0x05
                    0006    587 	ar6 = 0x06
                    0007    588 	ar7 = 0x07
                    0000    589 	ar0 = 0x00
                    0001    590 	ar1 = 0x01
                            591 ;	main.c:57: AUXR |= AUXR_ENABLE_XRAM_MASK;   //Enable all XRAM
                            592 ;	genOr
   0005 43 8E 0C            593 	orl	_AUXR,#0x0C
                            594 ;	main.c:58: return 0;
                            595 ;	genRet
                            596 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            597 	mov	dptr,#0x0000
                            598 ;	Peephole 300	removed redundant label 00101$
   000B 22                  599 	ret
                            600 ;------------------------------------------------------------
                            601 ;Allocation info for local variables in function 'getBlockAndAddress'
                            602 ;------------------------------------------------------------
                            603 ;block                     Allocated with name '_getBlockAndAddress_PARM_2'
                            604 ;address                   Allocated with name '_getBlockAndAddress_address_1_1'
                            605 ;------------------------------------------------------------
                            606 ;	main.c:62: void getBlockAndAddress(uint8_t *address, uint8_t *block){
                            607 ;	-----------------------------------------
                            608 ;	 function getBlockAndAddress
                            609 ;	-----------------------------------------
   000C                     610 _getBlockAndAddress:
                            611 ;	genReceive
   000C AA F0               612 	mov	r2,b
   000E AB 83               613 	mov	r3,dph
   0010 E5 82               614 	mov	a,dpl
   0012 90s00r03            615 	mov	dptr,#_getBlockAndAddress_address_1_1
   0015 F0                  616 	movx	@dptr,a
   0016 A3                  617 	inc	dptr
   0017 EB                  618 	mov	a,r3
   0018 F0                  619 	movx	@dptr,a
   0019 A3                  620 	inc	dptr
   001A EA                  621 	mov	a,r2
   001B F0                  622 	movx	@dptr,a
                            623 ;	main.c:63: printf("\r\nEnter an EEPROM block number from 0-7: ");
                            624 ;	genIpush
   001C 74r00               625 	mov	a,#__str_0
   001E C0 E0               626 	push	acc
   0020 74s00               627 	mov	a,#(__str_0 >> 8)
   0022 C0 E0               628 	push	acc
   0024 74 80               629 	mov	a,#0x80
   0026 C0 E0               630 	push	acc
                            631 ;	genCall
   0028 12s00r00            632 	lcall	_printf
   002B 15 81               633 	dec	sp
   002D 15 81               634 	dec	sp
   002F 15 81               635 	dec	sp
                            636 ;	main.c:64: *block = Serial_GetInteger(1);
                            637 ;	genAssign
   0031 90s00r00            638 	mov	dptr,#_getBlockAndAddress_PARM_2
   0034 E0                  639 	movx	a,@dptr
   0035 FA                  640 	mov	r2,a
   0036 A3                  641 	inc	dptr
   0037 E0                  642 	movx	a,@dptr
   0038 FB                  643 	mov	r3,a
   0039 A3                  644 	inc	dptr
   003A E0                  645 	movx	a,@dptr
   003B FC                  646 	mov	r4,a
                            647 ;	genCall
                            648 ;	Peephole 182.b	used 16 bit load of dptr
   003C 90 00 01            649 	mov	dptr,#0x0001
   003F C0 02               650 	push	ar2
   0041 C0 03               651 	push	ar3
   0043 C0 04               652 	push	ar4
   0045 12s00r00            653 	lcall	_Serial_GetInteger
   0048 AD 82               654 	mov	r5,dpl
   004A AE 83               655 	mov	r6,dph
   004C D0 04               656 	pop	ar4
   004E D0 03               657 	pop	ar3
   0050 D0 02               658 	pop	ar2
                            659 ;	genCast
                            660 ;	genPointerSet
                            661 ;	genGenPointerSet
   0052 8A 82               662 	mov	dpl,r2
   0054 8B 83               663 	mov	dph,r3
   0056 8C F0               664 	mov	b,r4
   0058 ED                  665 	mov	a,r5
   0059 12s00r00            666 	lcall	__gptrput
                            667 ;	main.c:65: while(*block > 7){
   005C                     668 00101$:
                            669 ;	genPointerGet
                            670 ;	genGenPointerGet
   005C 8A 82               671 	mov	dpl,r2
   005E 8B 83               672 	mov	dph,r3
   0060 8C F0               673 	mov	b,r4
   0062 12s00r00            674 	lcall	__gptrget
                            675 ;	genCmpGt
                            676 ;	genCmp
                            677 ;	genIfxJump
                            678 ;	Peephole 108.a	removed ljmp by inverse jump logic
                            679 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0065 FD                  680 	mov  r5,a
                            681 ;	Peephole 177.a	removed redundant mov
   0066 24 F8               682 	add	a,#0xff - 0x07
   0068 50 43               683 	jnc	00103$
                            684 ;	Peephole 300	removed redundant label 00108$
                            685 ;	main.c:66: printf("\r\nINVALID: Enter an EEPROM block number from 0-7: ");
                            686 ;	genIpush
   006A C0 02               687 	push	ar2
   006C C0 03               688 	push	ar3
   006E C0 04               689 	push	ar4
   0070 74r2A               690 	mov	a,#__str_1
   0072 C0 E0               691 	push	acc
   0074 74s00               692 	mov	a,#(__str_1 >> 8)
   0076 C0 E0               693 	push	acc
   0078 74 80               694 	mov	a,#0x80
   007A C0 E0               695 	push	acc
                            696 ;	genCall
   007C 12s00r00            697 	lcall	_printf
   007F 15 81               698 	dec	sp
   0081 15 81               699 	dec	sp
   0083 15 81               700 	dec	sp
   0085 D0 04               701 	pop	ar4
   0087 D0 03               702 	pop	ar3
   0089 D0 02               703 	pop	ar2
                            704 ;	main.c:67: *block = Serial_GetInteger(1);
                            705 ;	genCall
                            706 ;	Peephole 182.b	used 16 bit load of dptr
   008B 90 00 01            707 	mov	dptr,#0x0001
   008E C0 02               708 	push	ar2
   0090 C0 03               709 	push	ar3
   0092 C0 04               710 	push	ar4
   0094 12s00r00            711 	lcall	_Serial_GetInteger
   0097 AD 82               712 	mov	r5,dpl
   0099 AE 83               713 	mov	r6,dph
   009B D0 04               714 	pop	ar4
   009D D0 03               715 	pop	ar3
   009F D0 02               716 	pop	ar2
                            717 ;	genCast
                            718 ;	genPointerSet
                            719 ;	genGenPointerSet
   00A1 8A 82               720 	mov	dpl,r2
   00A3 8B 83               721 	mov	dph,r3
   00A5 8C F0               722 	mov	b,r4
   00A7 ED                  723 	mov	a,r5
   00A8 12s00r00            724 	lcall	__gptrput
                            725 ;	Peephole 112.b	changed ljmp to sjmp
   00AB 80 AF               726 	sjmp	00101$
   00AD                     727 00103$:
                            728 ;	main.c:70: printf("\r\nEnter an EEPROM Word address in hex:");
                            729 ;	genIpush
   00AD 74r5D               730 	mov	a,#__str_2
   00AF C0 E0               731 	push	acc
   00B1 74s00               732 	mov	a,#(__str_2 >> 8)
   00B3 C0 E0               733 	push	acc
   00B5 74 80               734 	mov	a,#0x80
   00B7 C0 E0               735 	push	acc
                            736 ;	genCall
   00B9 12s00r00            737 	lcall	_printf
   00BC 15 81               738 	dec	sp
   00BE 15 81               739 	dec	sp
   00C0 15 81               740 	dec	sp
                            741 ;	main.c:71: *address = Serial_GetHex();
                            742 ;	genAssign
   00C2 90s00r03            743 	mov	dptr,#_getBlockAndAddress_address_1_1
   00C5 E0                  744 	movx	a,@dptr
   00C6 FA                  745 	mov	r2,a
   00C7 A3                  746 	inc	dptr
   00C8 E0                  747 	movx	a,@dptr
   00C9 FB                  748 	mov	r3,a
   00CA A3                  749 	inc	dptr
   00CB E0                  750 	movx	a,@dptr
   00CC FC                  751 	mov	r4,a
                            752 ;	genCall
   00CD C0 02               753 	push	ar2
   00CF C0 03               754 	push	ar3
   00D1 C0 04               755 	push	ar4
   00D3 12s00r00            756 	lcall	_Serial_GetHex
   00D6 AD 82               757 	mov	r5,dpl
   00D8 D0 04               758 	pop	ar4
   00DA D0 03               759 	pop	ar3
   00DC D0 02               760 	pop	ar2
                            761 ;	genPointerSet
                            762 ;	genGenPointerSet
   00DE 8A 82               763 	mov	dpl,r2
   00E0 8B 83               764 	mov	dph,r3
   00E2 8C F0               765 	mov	b,r4
   00E4 ED                  766 	mov	a,r5
                            767 ;	Peephole 253.b	replaced lcall/ret with ljmp
   00E5 02s00r00            768 	ljmp	__gptrput
                            769 ;
                            770 ;------------------------------------------------------------
                            771 ;Allocation info for local variables in function 'PCF_Menu'
                            772 ;------------------------------------------------------------
                            773 ;------------------------------------------------------------
                            774 ;	main.c:75: void PCF_Menu(void){
                            775 ;	-----------------------------------------
                            776 ;	 function PCF_Menu
                            777 ;	-----------------------------------------
   00E8                     778 _PCF_Menu:
                            779 ;	main.c:76: printf("\r\nIn Custom Character Mode");
                            780 ;	genIpush
   00E8 74r84               781 	mov	a,#__str_3
   00EA C0 E0               782 	push	acc
   00EC 74s00               783 	mov	a,#(__str_3 >> 8)
   00EE C0 E0               784 	push	acc
   00F0 74 80               785 	mov	a,#0x80
   00F2 C0 E0               786 	push	acc
                            787 ;	genCall
   00F4 12s00r00            788 	lcall	_printf
   00F7 15 81               789 	dec	sp
   00F9 15 81               790 	dec	sp
   00FB 15 81               791 	dec	sp
                            792 ;	main.c:77: printf("\r\nPress 'H' for help");
                            793 ;	genIpush
   00FD 74r9F               794 	mov	a,#__str_4
   00FF C0 E0               795 	push	acc
   0101 74s00               796 	mov	a,#(__str_4 >> 8)
   0103 C0 E0               797 	push	acc
   0105 74 80               798 	mov	a,#0x80
   0107 C0 E0               799 	push	acc
                            800 ;	genCall
   0109 12s00r00            801 	lcall	_printf
   010C 15 81               802 	dec	sp
   010E 15 81               803 	dec	sp
   0110 15 81               804 	dec	sp
                            805 ;	main.c:78: printf("\r\nPress 'O' to set pin to output low");
                            806 ;	genIpush
   0112 74rB4               807 	mov	a,#__str_5
   0114 C0 E0               808 	push	acc
   0116 74s00               809 	mov	a,#(__str_5 >> 8)
   0118 C0 E0               810 	push	acc
   011A 74 80               811 	mov	a,#0x80
   011C C0 E0               812 	push	acc
                            813 ;	genCall
   011E 12s00r00            814 	lcall	_printf
   0121 15 81               815 	dec	sp
   0123 15 81               816 	dec	sp
   0125 15 81               817 	dec	sp
                            818 ;	main.c:79: printf("\r\nPress 'I' to set pin to input/output value high");
                            819 ;	genIpush
   0127 74rD9               820 	mov	a,#__str_6
   0129 C0 E0               821 	push	acc
   012B 74s00               822 	mov	a,#(__str_6 >> 8)
   012D C0 E0               823 	push	acc
   012F 74 80               824 	mov	a,#0x80
   0131 C0 E0               825 	push	acc
                            826 ;	genCall
   0133 12s00r00            827 	lcall	_printf
   0136 15 81               828 	dec	sp
   0138 15 81               829 	dec	sp
   013A 15 81               830 	dec	sp
                            831 ;	main.c:80: printf("\r\nPress 'S' to view status of the pins");
                            832 ;	genIpush
   013C 74r0B               833 	mov	a,#__str_7
   013E C0 E0               834 	push	acc
   0140 74s01               835 	mov	a,#(__str_7 >> 8)
   0142 C0 E0               836 	push	acc
   0144 74 80               837 	mov	a,#0x80
   0146 C0 E0               838 	push	acc
                            839 ;	genCall
   0148 12s00r00            840 	lcall	_printf
   014B 15 81               841 	dec	sp
   014D 15 81               842 	dec	sp
   014F 15 81               843 	dec	sp
                            844 ;	main.c:81: printf("\r\nPress 'r' to return to main menu\r\n");
                            845 ;	genIpush
   0151 74r32               846 	mov	a,#__str_8
   0153 C0 E0               847 	push	acc
   0155 74s01               848 	mov	a,#(__str_8 >> 8)
   0157 C0 E0               849 	push	acc
   0159 74 80               850 	mov	a,#0x80
   015B C0 E0               851 	push	acc
                            852 ;	genCall
   015D 12s00r00            853 	lcall	_printf
   0160 15 81               854 	dec	sp
   0162 15 81               855 	dec	sp
   0164 15 81               856 	dec	sp
                            857 ;	Peephole 300	removed redundant label 00101$
   0166 22                  858 	ret
                            859 ;------------------------------------------------------------
                            860 ;Allocation info for local variables in function 'handlePCFMode'
                            861 ;------------------------------------------------------------
                            862 ;c                         Allocated with name '_handlePCFMode_c_1_1'
                            863 ;pin                       Allocated with name '_handlePCFMode_pin_1_1'
                            864 ;------------------------------------------------------------
                            865 ;	main.c:85: void handlePCFMode(char c){
                            866 ;	-----------------------------------------
                            867 ;	 function handlePCFMode
                            868 ;	-----------------------------------------
   0167                     869 _handlePCFMode:
                            870 ;	genReceive
   0167 E5 82               871 	mov	a,dpl
   0169 90s00r06            872 	mov	dptr,#_handlePCFMode_c_1_1
   016C F0                  873 	movx	@dptr,a
                            874 ;	main.c:87: switch(c){
                            875 ;	genAssign
   016D 90s00r06            876 	mov	dptr,#_handlePCFMode_c_1_1
   0170 E0                  877 	movx	a,@dptr
   0171 FA                  878 	mov	r2,a
                            879 ;	genCmpEq
                            880 ;	gencjneshort
   0172 BA 48 03            881 	cjne	r2,#0x48,00120$
   0175 02s02r3C            882 	ljmp	00108$
   0178                     883 00120$:
                            884 ;	genCmpEq
                            885 ;	gencjneshort
   0178 BA 49 02            886 	cjne	r2,#0x49,00121$
                            887 ;	Peephole 112.b	changed ljmp to sjmp
   017B 80 53               888 	sjmp	00104$
   017D                     889 00121$:
                            890 ;	genCmpEq
                            891 ;	gencjneshort
   017D BA 4F 02            892 	cjne	r2,#0x4F,00122$
                            893 ;	Peephole 112.b	changed ljmp to sjmp
   0180 80 11               894 	sjmp	00101$
   0182                     895 00122$:
                            896 ;	genCmpEq
                            897 ;	gencjneshort
   0182 BA 52 02            898 	cjne	r2,#0x52,00123$
                            899 ;	Peephole 112.b	changed ljmp to sjmp
   0185 80 6E               900 	sjmp	00106$
   0187                     901 00123$:
                            902 ;	genCmpEq
                            903 ;	gencjneshort
   0187 BA 53 02            904 	cjne	r2,#0x53,00124$
                            905 ;	Peephole 112.b	changed ljmp to sjmp
   018A 80 66               906 	sjmp	00105$
   018C                     907 00124$:
                            908 ;	genCmpEq
                            909 ;	gencjneshort
   018C BA 72 03            910 	cjne	r2,#0x72,00125$
   018F 02s02r34            911 	ljmp	00107$
   0192                     912 00125$:
                            913 ;	Peephole 251.a	replaced ljmp to ret with ret
   0192 22                  914 	ret
                            915 ;	main.c:88: case 'O':
   0193                     916 00101$:
                            917 ;	main.c:89: printf("\r\nEnter a pin from 0-7 to set as output low: ");
                            918 ;	genIpush
   0193 74r57               919 	mov	a,#__str_9
   0195 C0 E0               920 	push	acc
   0197 74s01               921 	mov	a,#(__str_9 >> 8)
   0199 C0 E0               922 	push	acc
   019B 74 80               923 	mov	a,#0x80
   019D C0 E0               924 	push	acc
                            925 ;	genCall
   019F 12s00r00            926 	lcall	_printf
   01A2 15 81               927 	dec	sp
   01A4 15 81               928 	dec	sp
   01A6 15 81               929 	dec	sp
                            930 ;	main.c:90: pin = Serial_GetInteger(1);
                            931 ;	genCall
                            932 ;	Peephole 182.b	used 16 bit load of dptr
   01A8 90 00 01            933 	mov	dptr,#0x0001
   01AB 12s00r00            934 	lcall	_Serial_GetInteger
   01AE AA 82               935 	mov	r2,dpl
   01B0 AB 83               936 	mov	r3,dph
                            937 ;	genCast
                            938 ;	main.c:91: if (pin == 1){
                            939 ;	genCmpEq
                            940 ;	gencjneshort
                            941 ;	Peephole 112.b	changed ljmp to sjmp
                            942 ;	Peephole 198.b	optimized misc jump sequence
   01B2 BA 01 16            943 	cjne	r2,#0x01,00103$
                            944 ;	Peephole 200.b	removed redundant sjmp
                            945 ;	Peephole 300	removed redundant label 00126$
                            946 ;	Peephole 300	removed redundant label 00127$
                            947 ;	main.c:92: printf("\r\nSorry, can't change pin 1 to output low.\r\n");
                            948 ;	genIpush
   01B5 74r85               949 	mov	a,#__str_10
   01B7 C0 E0               950 	push	acc
   01B9 74s01               951 	mov	a,#(__str_10 >> 8)
   01BB C0 E0               952 	push	acc
   01BD 74 80               953 	mov	a,#0x80
   01BF C0 E0               954 	push	acc
                            955 ;	genCall
   01C1 12s00r00            956 	lcall	_printf
   01C4 15 81               957 	dec	sp
   01C6 15 81               958 	dec	sp
   01C8 15 81               959 	dec	sp
                            960 ;	main.c:93: return;
                            961 ;	genRet
                            962 ;	Peephole 251.a	replaced ljmp to ret with ret
   01CA 22                  963 	ret
   01CB                     964 00103$:
                            965 ;	main.c:95: PCF_SetOutputLow(pin);
                            966 ;	genCall
   01CB 8A 82               967 	mov	dpl,r2
                            968 ;	main.c:96: break;
                            969 ;	Peephole 251.a	replaced ljmp to ret with ret
                            970 ;	Peephole 253.a	replaced lcall/ret with ljmp
   01CD 02s00r00            971 	ljmp	_PCF_SetOutputLow
                            972 ;	main.c:97: case 'I':
   01D0                     973 00104$:
                            974 ;	main.c:98: printf("\r\nEnter a pin from 0-7 to set as input/output value high: ");
                            975 ;	genIpush
   01D0 74rB2               976 	mov	a,#__str_11
   01D2 C0 E0               977 	push	acc
   01D4 74s01               978 	mov	a,#(__str_11 >> 8)
   01D6 C0 E0               979 	push	acc
   01D8 74 80               980 	mov	a,#0x80
   01DA C0 E0               981 	push	acc
                            982 ;	genCall
   01DC 12s00r00            983 	lcall	_printf
   01DF 15 81               984 	dec	sp
   01E1 15 81               985 	dec	sp
   01E3 15 81               986 	dec	sp
                            987 ;	main.c:99: pin = Serial_GetInteger(1);
                            988 ;	genCall
                            989 ;	Peephole 182.b	used 16 bit load of dptr
   01E5 90 00 01            990 	mov	dptr,#0x0001
   01E8 12s00r00            991 	lcall	_Serial_GetInteger
                            992 ;	genCast
                            993 ;	main.c:100: PCF_SetInputOutput(pin);
                            994 ;	genCall
   01EB AA 82               995 	mov	r2,dpl
   01ED AB 83               996 	mov	r3,dph
                            997 ;	Peephole 177.d	removed redundant move
                            998 ;	main.c:101: break;
                            999 ;	main.c:102: case 'S':
                           1000 ;	Peephole 112.b	changed ljmp to sjmp
                           1001 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1002 ;	Peephole 253.a	replaced lcall/ret with ljmp
   01EF 02s00r00           1003 	ljmp	_PCF_SetInputOutput
   01F2                    1004 00105$:
                           1005 ;	main.c:103: PCF_PrintState();
                           1006 ;	genCall
                           1007 ;	main.c:104: break;
                           1008 ;	main.c:105: case 'R':
                           1009 ;	Peephole 112.b	changed ljmp to sjmp
                           1010 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1011 ;	Peephole 253.a	replaced lcall/ret with ljmp
   01F2 02s00r00           1012 	ljmp	_PCF_PrintState
   01F5                    1013 00106$:
                           1014 ;	main.c:106: EA = 0;
                           1015 ;	genAssign
   01F5 C2 AF              1016 	clr	_EA
                           1017 ;	main.c:107: printf("/r/nCounter reset\r\n");
                           1018 ;	genIpush
   01F7 74rED              1019 	mov	a,#__str_12
   01F9 C0 E0              1020 	push	acc
   01FB 74s01              1021 	mov	a,#(__str_12 >> 8)
   01FD C0 E0              1022 	push	acc
   01FF 74 80              1023 	mov	a,#0x80
   0201 C0 E0              1024 	push	acc
                           1025 ;	genCall
   0203 12s00r00           1026 	lcall	_printf
   0206 15 81              1027 	dec	sp
   0208 15 81              1028 	dec	sp
   020A 15 81              1029 	dec	sp
                           1030 ;	main.c:108: ButtonCount = 0;
                           1031 ;	genAssign
   020C 90s00r00           1032 	mov	dptr,#_ButtonCount
                           1033 ;	Peephole 181	changed mov to clr
                           1034 ;	main.c:109: LCD_gotoxy(3,0);
                           1035 ;	genAssign
                           1036 ;	Peephole 181	changed mov to clr
                           1037 ;	Peephole 219.a	removed redundant clear
   020F E4                 1038 	clr	a
   0210 F0                 1039 	movx	@dptr,a
   0211 90s00r00           1040 	mov	dptr,#_LCD_gotoxy_PARM_2
   0214 F0                 1041 	movx	@dptr,a
                           1042 ;	genCall
   0215 75 82 03           1043 	mov	dpl,#0x03
   0218 12s00r00           1044 	lcall	_LCD_gotoxy
                           1045 ;	main.c:110: LCD_Putch(ButtonCount + 0x30);  //Output decimal value
                           1046 ;	genAssign
   021B 90s00r00           1047 	mov	dptr,#_ButtonCount
   021E E0                 1048 	movx	a,@dptr
                           1049 ;	genPlus
                           1050 ;     genPlusIncr
                           1051 ;	Peephole 236.a	used r2 instead of ar2
                           1052 ;	Peephole 214	reduced some extra moves
                           1053 ;	genCall
                           1054 ;	Peephole 215	removed some moves
   021F 24 30              1055 	add	a,#0x30
   0221 FA                 1056 	mov	r2,a
                           1057 ;	Peephole 244.c	loading dpl from a instead of r2
   0222 F5 82              1058 	mov	dpl,a
   0224 12s00r00           1059 	lcall	_LCD_Putch
                           1060 ;	main.c:111: PCF_OutputCount(ButtonCount);
                           1061 ;	genAssign
   0227 90s00r00           1062 	mov	dptr,#_ButtonCount
   022A E0                 1063 	movx	a,@dptr
                           1064 ;	genCall
   022B FA                 1065 	mov	r2,a
                           1066 ;	Peephole 244.c	loading dpl from a instead of r2
   022C F5 82              1067 	mov	dpl,a
   022E 12s00r00           1068 	lcall	_PCF_OutputCount
                           1069 ;	main.c:112: EA = 1;
                           1070 ;	genAssign
   0231 D2 AF              1071 	setb	_EA
                           1072 ;	main.c:113: break;
                           1073 ;	main.c:114: case 'r':
                           1074 ;	Peephole 112.b	changed ljmp to sjmp
                           1075 ;	Peephole 251.b	replaced sjmp to ret with ret
   0233 22                 1076 	ret
   0234                    1077 00107$:
                           1078 ;	main.c:115: mode = MAIN_MODE;
                           1079 ;	genAssign
   0234 90s00r00           1080 	mov	dptr,#_mode
                           1081 ;	Peephole 181	changed mov to clr
   0237 E4                 1082 	clr	a
   0238 F0                 1083 	movx	@dptr,a
                           1084 ;	main.c:116: MainMenu();
                           1085 ;	genCall
                           1086 ;	main.c:117: break;
                           1087 ;	main.c:118: case 'H':
                           1088 ;	Peephole 112.b	changed ljmp to sjmp
                           1089 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1090 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0239 02s11rD5           1091 	ljmp	_MainMenu
   023C                    1092 00108$:
                           1093 ;	main.c:119: PCF_Menu();
                           1094 ;	genCall
                           1095 ;	main.c:123: }
                           1096 ;	Peephole 253.b	replaced lcall/ret with ljmp
   023C 02s00rE8           1097 	ljmp	_PCF_Menu
                           1098 ;
                           1099 ;------------------------------------------------------------
                           1100 ;Allocation info for local variables in function 'CG_Menu'
                           1101 ;------------------------------------------------------------
                           1102 ;------------------------------------------------------------
                           1103 ;	main.c:128: void CG_Menu(void){
                           1104 ;	-----------------------------------------
                           1105 ;	 function CG_Menu
                           1106 ;	-----------------------------------------
   023F                    1107 _CG_Menu:
                           1108 ;	main.c:129: printf("\r\nIn Custom Character Mode");
                           1109 ;	genIpush
   023F 74r84              1110 	mov	a,#__str_3
   0241 C0 E0              1111 	push	acc
   0243 74s00              1112 	mov	a,#(__str_3 >> 8)
   0245 C0 E0              1113 	push	acc
   0247 74 80              1114 	mov	a,#0x80
   0249 C0 E0              1115 	push	acc
                           1116 ;	genCall
   024B 12s00r00           1117 	lcall	_printf
   024E 15 81              1118 	dec	sp
   0250 15 81              1119 	dec	sp
   0252 15 81              1120 	dec	sp
                           1121 ;	main.c:130: printf("\r\nPress 'H' for help");
                           1122 ;	genIpush
   0254 74r9F              1123 	mov	a,#__str_4
   0256 C0 E0              1124 	push	acc
   0258 74s00              1125 	mov	a,#(__str_4 >> 8)
   025A C0 E0              1126 	push	acc
   025C 74 80              1127 	mov	a,#0x80
   025E C0 E0              1128 	push	acc
                           1129 ;	genCall
   0260 12s00r00           1130 	lcall	_printf
   0263 15 81              1131 	dec	sp
   0265 15 81              1132 	dec	sp
   0267 15 81              1133 	dec	sp
                           1134 ;	main.c:131: printf("\r\nPress 'T' to test to custom code");
                           1135 ;	genIpush
   0269 74r01              1136 	mov	a,#__str_13
   026B C0 E0              1137 	push	acc
   026D 74s02              1138 	mov	a,#(__str_13 >> 8)
   026F C0 E0              1139 	push	acc
   0271 74 80              1140 	mov	a,#0x80
   0273 C0 E0              1141 	push	acc
                           1142 ;	genCall
   0275 12s00r00           1143 	lcall	_printf
   0278 15 81              1144 	dec	sp
   027A 15 81              1145 	dec	sp
   027C 15 81              1146 	dec	sp
                           1147 ;	main.c:132: printf("\r\nPress 'N' to add a new character");
                           1148 ;	genIpush
   027E 74r24              1149 	mov	a,#__str_14
   0280 C0 E0              1150 	push	acc
   0282 74s02              1151 	mov	a,#(__str_14 >> 8)
   0284 C0 E0              1152 	push	acc
   0286 74 80              1153 	mov	a,#0x80
   0288 C0 E0              1154 	push	acc
                           1155 ;	genCall
   028A 12s00r00           1156 	lcall	_printf
   028D 15 81              1157 	dec	sp
   028F 15 81              1158 	dec	sp
   0291 15 81              1159 	dec	sp
                           1160 ;	main.c:133: printf("\r\nPress 'S' to print a custom character");
                           1161 ;	genIpush
   0293 74r47              1162 	mov	a,#__str_15
   0295 C0 E0              1163 	push	acc
   0297 74s02              1164 	mov	a,#(__str_15 >> 8)
   0299 C0 E0              1165 	push	acc
   029B 74 80              1166 	mov	a,#0x80
   029D C0 E0              1167 	push	acc
                           1168 ;	genCall
   029F 12s00r00           1169 	lcall	_printf
   02A2 15 81              1170 	dec	sp
   02A4 15 81              1171 	dec	sp
   02A6 15 81              1172 	dec	sp
                           1173 ;	main.c:134: printf("\r\nPress 'F' to draw a flag to LCD");
                           1174 ;	genIpush
   02A8 74r6F              1175 	mov	a,#__str_16
   02AA C0 E0              1176 	push	acc
   02AC 74s02              1177 	mov	a,#(__str_16 >> 8)
   02AE C0 E0              1178 	push	acc
   02B0 74 80              1179 	mov	a,#0x80
   02B2 C0 E0              1180 	push	acc
                           1181 ;	genCall
   02B4 12s00r00           1182 	lcall	_printf
   02B7 15 81              1183 	dec	sp
   02B9 15 81              1184 	dec	sp
   02BB 15 81              1185 	dec	sp
                           1186 ;	main.c:135: printf("\r\nPress 'r' to return to main menu\r\n");
                           1187 ;	genIpush
   02BD 74r32              1188 	mov	a,#__str_8
   02BF C0 E0              1189 	push	acc
   02C1 74s01              1190 	mov	a,#(__str_8 >> 8)
   02C3 C0 E0              1191 	push	acc
   02C5 74 80              1192 	mov	a,#0x80
   02C7 C0 E0              1193 	push	acc
                           1194 ;	genCall
   02C9 12s00r00           1195 	lcall	_printf
   02CC 15 81              1196 	dec	sp
   02CE 15 81              1197 	dec	sp
   02D0 15 81              1198 	dec	sp
                           1199 ;	Peephole 300	removed redundant label 00101$
   02D2 22                 1200 	ret
                           1201 ;------------------------------------------------------------
                           1202 ;Allocation info for local variables in function 'handleCGMode'
                           1203 ;------------------------------------------------------------
                           1204 ;c                         Allocated with name '_handleCGMode_c_1_1'
                           1205 ;addr                      Allocated with name '_handleCGMode_addr_1_1'
                           1206 ;------------------------------------------------------------
                           1207 ;	main.c:139: void handleCGMode(char c){
                           1208 ;	-----------------------------------------
                           1209 ;	 function handleCGMode
                           1210 ;	-----------------------------------------
   02D3                    1211 _handleCGMode:
                           1212 ;	genReceive
   02D3 E5 82              1213 	mov	a,dpl
   02D5 90s00r07           1214 	mov	dptr,#_handleCGMode_c_1_1
   02D8 F0                 1215 	movx	@dptr,a
                           1216 ;	main.c:141: switch(c){
                           1217 ;	genAssign
   02D9 90s00r07           1218 	mov	dptr,#_handleCGMode_c_1_1
   02DC E0                 1219 	movx	a,@dptr
   02DD FA                 1220 	mov	r2,a
                           1221 ;	genCmpEq
                           1222 ;	gencjneshort
   02DE BA 46 03           1223 	cjne	r2,#0x46,00122$
   02E1 02s03r86           1224 	ljmp	00107$
   02E4                    1225 00122$:
                           1226 ;	genCmpEq
                           1227 ;	gencjneshort
   02E4 BA 48 03           1228 	cjne	r2,#0x48,00123$
   02E7 02s03r91           1229 	ljmp	00109$
   02EA                    1230 00123$:
                           1231 ;	genCmpEq
                           1232 ;	gencjneshort
   02EA BA 4E 02           1233 	cjne	r2,#0x4E,00124$
                           1234 ;	Peephole 112.b	changed ljmp to sjmp
   02ED 80 26              1235 	sjmp	00102$
   02EF                    1236 00124$:
                           1237 ;	genCmpEq
                           1238 ;	gencjneshort
   02EF BA 53 02           1239 	cjne	r2,#0x53,00125$
                           1240 ;	Peephole 112.b	changed ljmp to sjmp
   02F2 80 24              1241 	sjmp	00103$
   02F4                    1242 00125$:
                           1243 ;	genCmpEq
                           1244 ;	gencjneshort
   02F4 BA 54 02           1245 	cjne	r2,#0x54,00126$
                           1246 ;	Peephole 112.b	changed ljmp to sjmp
   02F7 80 07              1247 	sjmp	00101$
   02F9                    1248 00126$:
                           1249 ;	genCmpEq
                           1250 ;	gencjneshort
   02F9 BA 72 03           1251 	cjne	r2,#0x72,00127$
   02FC 02s03r89           1252 	ljmp	00108$
   02FF                    1253 00127$:
                           1254 ;	Peephole 251.a	replaced ljmp to ret with ret
   02FF 22                 1255 	ret
                           1256 ;	main.c:142: case 'T':
   0300                    1257 00101$:
                           1258 ;	main.c:143: TestWrite();
                           1259 ;	genCall
   0300 12s00r00           1260 	lcall	_TestWrite
                           1261 ;	main.c:144: LCD_gotoxy(0,3);
                           1262 ;	genAssign
   0303 90s00r00           1263 	mov	dptr,#_LCD_gotoxy_PARM_2
   0306 74 03              1264 	mov	a,#0x03
   0308 F0                 1265 	movx	@dptr,a
                           1266 ;	genCall
   0309 75 82 00           1267 	mov	dpl,#0x00
   030C 12s00r00           1268 	lcall	_LCD_gotoxy
                           1269 ;	main.c:145: LCD_Putch(0x00);
                           1270 ;	genCall
   030F 75 82 00           1271 	mov	dpl,#0x00
                           1272 ;	main.c:146: break;
                           1273 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1274 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0312 02s00r00           1275 	ljmp	_LCD_Putch
                           1276 ;	main.c:147: case 'N':
   0315                    1277 00102$:
                           1278 ;	main.c:148: Custom_New();
                           1279 ;	genCall
                           1280 ;	main.c:149: break;
                           1281 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1282 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0315 02s00r00           1283 	ljmp	_Custom_New
                           1284 ;	main.c:150: case 'S':
   0318                    1285 00103$:
                           1286 ;	main.c:151: printf("\r\nEnter an address from 0-7:");
                           1287 ;	genIpush
   0318 74r91              1288 	mov	a,#__str_17
   031A C0 E0              1289 	push	acc
   031C 74s02              1290 	mov	a,#(__str_17 >> 8)
   031E C0 E0              1291 	push	acc
   0320 74 80              1292 	mov	a,#0x80
   0322 C0 E0              1293 	push	acc
                           1294 ;	genCall
   0324 12s00r00           1295 	lcall	_printf
   0327 15 81              1296 	dec	sp
   0329 15 81              1297 	dec	sp
   032B 15 81              1298 	dec	sp
                           1299 ;	main.c:152: addr = Serial_GetInteger(2);
                           1300 ;	genCall
                           1301 ;	Peephole 182.b	used 16 bit load of dptr
   032D 90 00 02           1302 	mov	dptr,#0x0002
   0330 12s00r00           1303 	lcall	_Serial_GetInteger
   0333 AA 82              1304 	mov	r2,dpl
   0335 AB 83              1305 	mov	r3,dph
                           1306 ;	genCast
   0337 90s00r08           1307 	mov	dptr,#_handleCGMode_addr_1_1
   033A EA                 1308 	mov	a,r2
   033B F0                 1309 	movx	@dptr,a
                           1310 ;	main.c:153: while( addr > 7){
   033C                    1311 00104$:
                           1312 ;	genAssign
   033C 90s00r08           1313 	mov	dptr,#_handleCGMode_addr_1_1
   033F E0                 1314 	movx	a,@dptr
                           1315 ;	genCmpGt
                           1316 ;	genCmp
                           1317 ;	genIfxJump
                           1318 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           1319 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0340 FA                 1320 	mov  r2,a
                           1321 ;	Peephole 177.a	removed redundant mov
   0341 24 F8              1322 	add	a,#0xff - 0x07
   0343 50 26              1323 	jnc	00106$
                           1324 ;	Peephole 300	removed redundant label 00128$
                           1325 ;	main.c:154: printf("\r\nEnter an address from 0-7:");
                           1326 ;	genIpush
   0345 74r91              1327 	mov	a,#__str_17
   0347 C0 E0              1328 	push	acc
   0349 74s02              1329 	mov	a,#(__str_17 >> 8)
   034B C0 E0              1330 	push	acc
   034D 74 80              1331 	mov	a,#0x80
   034F C0 E0              1332 	push	acc
                           1333 ;	genCall
   0351 12s00r00           1334 	lcall	_printf
   0354 15 81              1335 	dec	sp
   0356 15 81              1336 	dec	sp
   0358 15 81              1337 	dec	sp
                           1338 ;	main.c:155: addr = Serial_GetInteger(2);
                           1339 ;	genCall
                           1340 ;	Peephole 182.b	used 16 bit load of dptr
   035A 90 00 02           1341 	mov	dptr,#0x0002
   035D 12s00r00           1342 	lcall	_Serial_GetInteger
   0360 AB 82              1343 	mov	r3,dpl
   0362 AC 83              1344 	mov	r4,dph
                           1345 ;	genCast
   0364 90s00r08           1346 	mov	dptr,#_handleCGMode_addr_1_1
   0367 EB                 1347 	mov	a,r3
   0368 F0                 1348 	movx	@dptr,a
                           1349 ;	Peephole 112.b	changed ljmp to sjmp
   0369 80 D1              1350 	sjmp	00104$
   036B                    1351 00106$:
                           1352 ;	main.c:157: Custom_Show(addr);
                           1353 ;	genCall
   036B 8A 82              1354 	mov	dpl,r2
   036D 12s00r00           1355 	lcall	_Custom_Show
                           1356 ;	main.c:158: printf("\r\nWrote custom character to LCD\r\n");
                           1357 ;	genIpush
   0370 74rAE              1358 	mov	a,#__str_18
   0372 C0 E0              1359 	push	acc
   0374 74s02              1360 	mov	a,#(__str_18 >> 8)
   0376 C0 E0              1361 	push	acc
   0378 74 80              1362 	mov	a,#0x80
   037A C0 E0              1363 	push	acc
                           1364 ;	genCall
   037C 12s00r00           1365 	lcall	_printf
   037F 15 81              1366 	dec	sp
   0381 15 81              1367 	dec	sp
   0383 15 81              1368 	dec	sp
                           1369 ;	main.c:159: break;
                           1370 ;	main.c:160: case 'F':
                           1371 ;	Peephole 112.b	changed ljmp to sjmp
                           1372 ;	Peephole 251.b	replaced sjmp to ret with ret
   0385 22                 1373 	ret
   0386                    1374 00107$:
                           1375 ;	main.c:161: Custom_DrawFlag();
                           1376 ;	genCall
                           1377 ;	main.c:162: break;
                           1378 ;	main.c:163: case 'r':
                           1379 ;	Peephole 112.b	changed ljmp to sjmp
                           1380 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1381 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0386 02s00r00           1382 	ljmp	_Custom_DrawFlag
   0389                    1383 00108$:
                           1384 ;	main.c:164: mode = MAIN_MODE;
                           1385 ;	genAssign
   0389 90s00r00           1386 	mov	dptr,#_mode
                           1387 ;	Peephole 181	changed mov to clr
   038C E4                 1388 	clr	a
   038D F0                 1389 	movx	@dptr,a
                           1390 ;	main.c:165: MainMenu();
                           1391 ;	genCall
                           1392 ;	main.c:166: break;
                           1393 ;	main.c:167: case 'H':
                           1394 ;	Peephole 112.b	changed ljmp to sjmp
                           1395 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1396 ;	Peephole 253.a	replaced lcall/ret with ljmp
   038E 02s11rD5           1397 	ljmp	_MainMenu
   0391                    1398 00109$:
                           1399 ;	main.c:168: CG_Menu();
                           1400 ;	genCall
                           1401 ;	main.c:172: }
                           1402 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0391 02s02r3F           1403 	ljmp	_CG_Menu
                           1404 ;
                           1405 ;------------------------------------------------------------
                           1406 ;Allocation info for local variables in function 'LCD_Menu'
                           1407 ;------------------------------------------------------------
                           1408 ;------------------------------------------------------------
                           1409 ;	main.c:177: void LCD_Menu(void){
                           1410 ;	-----------------------------------------
                           1411 ;	 function LCD_Menu
                           1412 ;	-----------------------------------------
   0394                    1413 _LCD_Menu:
                           1414 ;	main.c:178: printf("\r\nIn LCD Mode");
                           1415 ;	genIpush
   0394 74rD0              1416 	mov	a,#__str_19
   0396 C0 E0              1417 	push	acc
   0398 74s02              1418 	mov	a,#(__str_19 >> 8)
   039A C0 E0              1419 	push	acc
   039C 74 80              1420 	mov	a,#0x80
   039E C0 E0              1421 	push	acc
                           1422 ;	genCall
   03A0 12s00r00           1423 	lcall	_printf
   03A3 15 81              1424 	dec	sp
   03A5 15 81              1425 	dec	sp
   03A7 15 81              1426 	dec	sp
                           1427 ;	main.c:179: printf("\r\nPress 'H' for help");
                           1428 ;	genIpush
   03A9 74r9F              1429 	mov	a,#__str_4
   03AB C0 E0              1430 	push	acc
   03AD 74s00              1431 	mov	a,#(__str_4 >> 8)
   03AF C0 E0              1432 	push	acc
   03B1 74 80              1433 	mov	a,#0x80
   03B3 C0 E0              1434 	push	acc
                           1435 ;	genCall
   03B5 12s00r00           1436 	lcall	_printf
   03B8 15 81              1437 	dec	sp
   03BA 15 81              1438 	dec	sp
   03BC 15 81              1439 	dec	sp
                           1440 ;	main.c:180: printf("\r\nPress 'I' to Init LCD. Must call this first");
                           1441 ;	genIpush
   03BE 74rDE              1442 	mov	a,#__str_20
   03C0 C0 E0              1443 	push	acc
   03C2 74s02              1444 	mov	a,#(__str_20 >> 8)
   03C4 C0 E0              1445 	push	acc
   03C6 74 80              1446 	mov	a,#0x80
   03C8 C0 E0              1447 	push	acc
                           1448 ;	genCall
   03CA 12s00r00           1449 	lcall	_printf
   03CD 15 81              1450 	dec	sp
   03CF 15 81              1451 	dec	sp
   03D1 15 81              1452 	dec	sp
                           1453 ;	main.c:181: printf("\r\nPress 'g' to show gotoaddr ");
                           1454 ;	genIpush
   03D3 74r0C              1455 	mov	a,#__str_21
   03D5 C0 E0              1456 	push	acc
   03D7 74s03              1457 	mov	a,#(__str_21 >> 8)
   03D9 C0 E0              1458 	push	acc
   03DB 74 80              1459 	mov	a,#0x80
   03DD C0 E0              1460 	push	acc
                           1461 ;	genCall
   03DF 12s00r00           1462 	lcall	_printf
   03E2 15 81              1463 	dec	sp
   03E4 15 81              1464 	dec	sp
   03E6 15 81              1465 	dec	sp
                           1466 ;	main.c:182: printf("\r\nPress 'x' to show gotoxy");
                           1467 ;	genIpush
   03E8 74r2A              1468 	mov	a,#__str_22
   03EA C0 E0              1469 	push	acc
   03EC 74s03              1470 	mov	a,#(__str_22 >> 8)
   03EE C0 E0              1471 	push	acc
   03F0 74 80              1472 	mov	a,#0x80
   03F2 C0 E0              1473 	push	acc
                           1474 ;	genCall
   03F4 12s00r00           1475 	lcall	_printf
   03F7 15 81              1476 	dec	sp
   03F9 15 81              1477 	dec	sp
   03FB 15 81              1478 	dec	sp
                           1479 ;	main.c:183: printf("\r\nPress 'c' to show putch ");
                           1480 ;	genIpush
   03FD 74r45              1481 	mov	a,#__str_23
   03FF C0 E0              1482 	push	acc
   0401 74s03              1483 	mov	a,#(__str_23 >> 8)
   0403 C0 E0              1484 	push	acc
   0405 74 80              1485 	mov	a,#0x80
   0407 C0 E0              1486 	push	acc
                           1487 ;	genCall
   0409 12s00r00           1488 	lcall	_printf
   040C 15 81              1489 	dec	sp
   040E 15 81              1490 	dec	sp
   0410 15 81              1491 	dec	sp
                           1492 ;	main.c:184: printf("\r\nPress 's' to show putstr");
                           1493 ;	genIpush
   0412 74r60              1494 	mov	a,#__str_24
   0414 C0 E0              1495 	push	acc
   0416 74s03              1496 	mov	a,#(__str_24 >> 8)
   0418 C0 E0              1497 	push	acc
   041A 74 80              1498 	mov	a,#0x80
   041C C0 E0              1499 	push	acc
                           1500 ;	genCall
   041E 12s00r00           1501 	lcall	_printf
   0421 15 81              1502 	dec	sp
   0423 15 81              1503 	dec	sp
   0425 15 81              1504 	dec	sp
                           1505 ;	main.c:185: printf("\r\nPress 'C' to clear the LCD display");
                           1506 ;	genIpush
   0427 74r7B              1507 	mov	a,#__str_25
   0429 C0 E0              1508 	push	acc
   042B 74s03              1509 	mov	a,#(__str_25 >> 8)
   042D C0 E0              1510 	push	acc
   042F 74 80              1511 	mov	a,#0x80
   0431 C0 E0              1512 	push	acc
                           1513 ;	genCall
   0433 12s00r00           1514 	lcall	_printf
   0436 15 81              1515 	dec	sp
   0438 15 81              1516 	dec	sp
   043A 15 81              1517 	dec	sp
                           1518 ;	main.c:186: printf("\r\nPress 'Y' to read the contents of DDRAM");
                           1519 ;	genIpush
   043C 74rA0              1520 	mov	a,#__str_26
   043E C0 E0              1521 	push	acc
   0440 74s03              1522 	mov	a,#(__str_26 >> 8)
   0442 C0 E0              1523 	push	acc
   0444 74 80              1524 	mov	a,#0x80
   0446 C0 E0              1525 	push	acc
                           1526 ;	genCall
   0448 12s00r00           1527 	lcall	_printf
   044B 15 81              1528 	dec	sp
   044D 15 81              1529 	dec	sp
   044F 15 81              1530 	dec	sp
                           1531 ;	main.c:187: printf("\r\nPress 'G' to read the contents of CGRAM");
                           1532 ;	genIpush
   0451 74rCA              1533 	mov	a,#__str_27
   0453 C0 E0              1534 	push	acc
   0455 74s03              1535 	mov	a,#(__str_27 >> 8)
   0457 C0 E0              1536 	push	acc
   0459 74 80              1537 	mov	a,#0x80
   045B C0 E0              1538 	push	acc
                           1539 ;	genCall
   045D 12s00r00           1540 	lcall	_printf
   0460 15 81              1541 	dec	sp
   0462 15 81              1542 	dec	sp
   0464 15 81              1543 	dec	sp
                           1544 ;	main.c:188: printf("\r\nPress 'r' to return to main menu\r\n");
                           1545 ;	genIpush
   0466 74r32              1546 	mov	a,#__str_8
   0468 C0 E0              1547 	push	acc
   046A 74s01              1548 	mov	a,#(__str_8 >> 8)
   046C C0 E0              1549 	push	acc
   046E 74 80              1550 	mov	a,#0x80
   0470 C0 E0              1551 	push	acc
                           1552 ;	genCall
   0472 12s00r00           1553 	lcall	_printf
   0475 15 81              1554 	dec	sp
   0477 15 81              1555 	dec	sp
   0479 15 81              1556 	dec	sp
                           1557 ;	Peephole 300	removed redundant label 00101$
   047B 22                 1558 	ret
                           1559 ;------------------------------------------------------------
                           1560 ;Allocation info for local variables in function 'handleLCDMode'
                           1561 ;------------------------------------------------------------
                           1562 ;c                         Allocated with name '_handleLCDMode_c_1_1'
                           1563 ;row                       Allocated with name '_handleLCDMode_row_1_1'
                           1564 ;col                       Allocated with name '_handleLCDMode_col_1_1'
                           1565 ;address                   Allocated with name '_handleLCDMode_address_1_1'
                           1566 ;str                       Allocated with name '_handleLCDMode_str_1_1'
                           1567 ;i                         Allocated with name '_handleLCDMode_i_1_1'
                           1568 ;lcdData                   Allocated with name '_handleLCDMode_lcdData_1_1'
                           1569 ;start_addr                Allocated with name '_handleLCDMode_start_addr_1_1'
                           1570 ;------------------------------------------------------------
                           1571 ;	main.c:192: void handleLCDMode(char c){
                           1572 ;	-----------------------------------------
                           1573 ;	 function handleLCDMode
                           1574 ;	-----------------------------------------
   047C                    1575 _handleLCDMode:
                           1576 ;	genReceive
   047C E5 82              1577 	mov	a,dpl
   047E 90s00r09           1578 	mov	dptr,#_handleLCDMode_c_1_1
   0481 F0                 1579 	movx	@dptr,a
                           1580 ;	main.c:200: switch(c){
                           1581 ;	genAssign
   0482 90s00r09           1582 	mov	dptr,#_handleLCDMode_c_1_1
   0485 E0                 1583 	movx	a,@dptr
   0486 FA                 1584 	mov	r2,a
                           1585 ;	genCmpEq
                           1586 ;	gencjneshort
   0487 BA 43 03           1587 	cjne	r2,#0x43,00178$
   048A 02s06rB2           1588 	ljmp	00117$
   048D                    1589 00178$:
                           1590 ;	genCmpEq
                           1591 ;	gencjneshort
   048D BA 47 03           1592 	cjne	r2,#0x47,00179$
   0490 02s09r13           1593 	ljmp	00119$
   0493                    1594 00179$:
                           1595 ;	genCmpEq
                           1596 ;	gencjneshort
   0493 BA 48 03           1597 	cjne	r2,#0x48,00180$
   0496 02s0Ar04           1598 	ljmp	00124$
   0499                    1599 00180$:
                           1600 ;	genCmpEq
                           1601 ;	gencjneshort
   0499 BA 49 02           1602 	cjne	r2,#0x49,00181$
                           1603 ;	Peephole 112.b	changed ljmp to sjmp
   049C 80 23              1604 	sjmp	00101$
   049E                    1605 00181$:
                           1606 ;	genCmpEq
                           1607 ;	gencjneshort
   049E BA 59 03           1608 	cjne	r2,#0x59,00182$
   04A1 02s06rD9           1609 	ljmp	00118$
   04A4                    1610 00182$:
                           1611 ;	genCmpEq
                           1612 ;	gencjneshort
   04A4 BA 63 03           1613 	cjne	r2,#0x63,00183$
   04A7 02s06r0A           1614 	ljmp	00110$
   04AA                    1615 00183$:
                           1616 ;	genCmpEq
                           1617 ;	gencjneshort
   04AA BA 67 02           1618 	cjne	r2,#0x67,00184$
                           1619 ;	Peephole 112.b	changed ljmp to sjmp
   04AD 80 2A              1620 	sjmp	00102$
   04AF                    1621 00184$:
                           1622 ;	genCmpEq
                           1623 ;	gencjneshort
   04AF BA 72 03           1624 	cjne	r2,#0x72,00185$
   04B2 02s09rFC           1625 	ljmp	00123$
   04B5                    1626 00185$:
                           1627 ;	genCmpEq
                           1628 ;	gencjneshort
   04B5 BA 73 03           1629 	cjne	r2,#0x73,00186$
   04B8 02s06r38           1630 	ljmp	00111$
   04BB                    1631 00186$:
                           1632 ;	genCmpEq
                           1633 ;	gencjneshort
   04BB BA 78 02           1634 	cjne	r2,#0x78,00187$
                           1635 ;	Peephole 112.b	changed ljmp to sjmp
   04BE 80 36              1636 	sjmp	00103$
   04C0                    1637 00187$:
                           1638 ;	Peephole 251.a	replaced ljmp to ret with ret
   04C0 22                 1639 	ret
                           1640 ;	main.c:201: case 'I':
   04C1                    1641 00101$:
                           1642 ;	main.c:202: printf("\r\nInitializing LCD\r\n");
                           1643 ;	genIpush
   04C1 74rF4              1644 	mov	a,#__str_28
   04C3 C0 E0              1645 	push	acc
   04C5 74s03              1646 	mov	a,#(__str_28 >> 8)
   04C7 C0 E0              1647 	push	acc
   04C9 74 80              1648 	mov	a,#0x80
   04CB C0 E0              1649 	push	acc
                           1650 ;	genCall
   04CD 12s00r00           1651 	lcall	_printf
   04D0 15 81              1652 	dec	sp
   04D2 15 81              1653 	dec	sp
   04D4 15 81              1654 	dec	sp
                           1655 ;	main.c:203: LCD_Init();
                           1656 ;	genCall
                           1657 ;	main.c:204: break;
                           1658 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1659 ;	Peephole 253.a	replaced lcall/ret with ljmp
   04D6 02s00r00           1660 	ljmp	_LCD_Init
                           1661 ;	main.c:205: case 'g':
   04D9                    1662 00102$:
                           1663 ;	main.c:206: printf("\r\nEnter a hex address to go to\r\n");
                           1664 ;	genIpush
   04D9 74r09              1665 	mov	a,#__str_29
   04DB C0 E0              1666 	push	acc
   04DD 74s04              1667 	mov	a,#(__str_29 >> 8)
   04DF C0 E0              1668 	push	acc
   04E1 74 80              1669 	mov	a,#0x80
   04E3 C0 E0              1670 	push	acc
                           1671 ;	genCall
   04E5 12s00r00           1672 	lcall	_printf
   04E8 15 81              1673 	dec	sp
   04EA 15 81              1674 	dec	sp
   04EC 15 81              1675 	dec	sp
                           1676 ;	main.c:207: address = Serial_GetHex();
                           1677 ;	genCall
   04EE 12s00r00           1678 	lcall	_Serial_GetHex
                           1679 ;	main.c:208: LCD_gotoaddr(address);
                           1680 ;	genCall
   04F1 AA 82              1681 	mov  r2,dpl
                           1682 ;	Peephole 177.a	removed redundant mov
                           1683 ;	main.c:209: break;
                           1684 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1685 ;	Peephole 253.a	replaced lcall/ret with ljmp
   04F3 02s00r00           1686 	ljmp	_LCD_gotoaddr
                           1687 ;	main.c:210: case 'x':
   04F6                    1688 00103$:
                           1689 ;	main.c:211: printf ("\r\nEnter a row from 0-3:");
                           1690 ;	genIpush
   04F6 74r2A              1691 	mov	a,#__str_30
   04F8 C0 E0              1692 	push	acc
   04FA 74s04              1693 	mov	a,#(__str_30 >> 8)
   04FC C0 E0              1694 	push	acc
   04FE 74 80              1695 	mov	a,#0x80
   0500 C0 E0              1696 	push	acc
                           1697 ;	genCall
   0502 12s00r00           1698 	lcall	_printf
   0505 15 81              1699 	dec	sp
   0507 15 81              1700 	dec	sp
   0509 15 81              1701 	dec	sp
                           1702 ;	main.c:212: row = Serial_GetInteger(3);
                           1703 ;	genCall
                           1704 ;	Peephole 182.b	used 16 bit load of dptr
   050B 90 00 03           1705 	mov	dptr,#0x0003
   050E 12s00r00           1706 	lcall	_Serial_GetInteger
   0511 E5 82              1707 	mov	a,dpl
   0513 85 83 F0           1708 	mov	b,dph
                           1709 ;	genAssign
   0516 90s00r0A           1710 	mov	dptr,#_handleLCDMode_row_1_1
   0519 F0                 1711 	movx	@dptr,a
   051A A3                 1712 	inc	dptr
   051B E5 F0              1713 	mov	a,b
   051D F0                 1714 	movx	@dptr,a
                           1715 ;	main.c:213: while(row > 3){
   051E                    1716 00104$:
                           1717 ;	genAssign
   051E 90s00r0A           1718 	mov	dptr,#_handleLCDMode_row_1_1
   0521 E0                 1719 	movx	a,@dptr
   0522 FA                 1720 	mov	r2,a
   0523 A3                 1721 	inc	dptr
   0524 E0                 1722 	movx	a,@dptr
   0525 FB                 1723 	mov	r3,a
                           1724 ;	genCmpGt
                           1725 ;	genCmp
   0526 C3                 1726 	clr	c
   0527 74 03              1727 	mov	a,#0x03
   0529 9A                 1728 	subb	a,r2
                           1729 ;	Peephole 159	avoided xrl during execution
   052A 74 80              1730 	mov	a,#(0x00 ^ 0x80)
   052C 8B F0              1731 	mov	b,r3
   052E 63 F0 80           1732 	xrl	b,#0x80
   0531 95 F0              1733 	subb	a,b
                           1734 ;	genIfxJump
                           1735 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0533 50 2A              1736 	jnc	00106$
                           1737 ;	Peephole 300	removed redundant label 00188$
                           1738 ;	main.c:214: printf ("\r\nEnter a row from 0-3:");
                           1739 ;	genIpush
   0535 74r2A              1740 	mov	a,#__str_30
   0537 C0 E0              1741 	push	acc
   0539 74s04              1742 	mov	a,#(__str_30 >> 8)
   053B C0 E0              1743 	push	acc
   053D 74 80              1744 	mov	a,#0x80
   053F C0 E0              1745 	push	acc
                           1746 ;	genCall
   0541 12s00r00           1747 	lcall	_printf
   0544 15 81              1748 	dec	sp
   0546 15 81              1749 	dec	sp
   0548 15 81              1750 	dec	sp
                           1751 ;	main.c:215: row = Serial_GetInteger(3);
                           1752 ;	genCall
                           1753 ;	Peephole 182.b	used 16 bit load of dptr
   054A 90 00 03           1754 	mov	dptr,#0x0003
   054D 12s00r00           1755 	lcall	_Serial_GetInteger
   0550 E5 82              1756 	mov	a,dpl
   0552 85 83 F0           1757 	mov	b,dph
                           1758 ;	genAssign
   0555 90s00r0A           1759 	mov	dptr,#_handleLCDMode_row_1_1
   0558 F0                 1760 	movx	@dptr,a
   0559 A3                 1761 	inc	dptr
   055A E5 F0              1762 	mov	a,b
   055C F0                 1763 	movx	@dptr,a
                           1764 ;	Peephole 112.b	changed ljmp to sjmp
   055D 80 BF              1765 	sjmp	00104$
   055F                    1766 00106$:
                           1767 ;	main.c:218: printf ("\r\nEnter a col from 0-15:");
                           1768 ;	genIpush
   055F 74r42              1769 	mov	a,#__str_31
   0561 C0 E0              1770 	push	acc
   0563 74s04              1771 	mov	a,#(__str_31 >> 8)
   0565 C0 E0              1772 	push	acc
   0567 74 80              1773 	mov	a,#0x80
   0569 C0 E0              1774 	push	acc
                           1775 ;	genCall
   056B 12s00r00           1776 	lcall	_printf
   056E 15 81              1777 	dec	sp
   0570 15 81              1778 	dec	sp
   0572 15 81              1779 	dec	sp
                           1780 ;	main.c:219: col = Serial_GetInteger(3) ;
                           1781 ;	genCall
                           1782 ;	Peephole 182.b	used 16 bit load of dptr
   0574 90 00 03           1783 	mov	dptr,#0x0003
   0577 12s00r00           1784 	lcall	_Serial_GetInteger
   057A E5 82              1785 	mov	a,dpl
   057C 85 83 F0           1786 	mov	b,dph
                           1787 ;	genAssign
   057F 90s00r0C           1788 	mov	dptr,#_handleLCDMode_col_1_1
   0582 F0                 1789 	movx	@dptr,a
   0583 A3                 1790 	inc	dptr
   0584 E5 F0              1791 	mov	a,b
   0586 F0                 1792 	movx	@dptr,a
                           1793 ;	main.c:220: while(col > 15){
   0587                    1794 00107$:
                           1795 ;	genAssign
   0587 90s00r0C           1796 	mov	dptr,#_handleLCDMode_col_1_1
   058A E0                 1797 	movx	a,@dptr
   058B FA                 1798 	mov	r2,a
   058C A3                 1799 	inc	dptr
   058D E0                 1800 	movx	a,@dptr
   058E FB                 1801 	mov	r3,a
                           1802 ;	genCmpGt
                           1803 ;	genCmp
   058F C3                 1804 	clr	c
   0590 74 0F              1805 	mov	a,#0x0F
   0592 9A                 1806 	subb	a,r2
                           1807 ;	Peephole 159	avoided xrl during execution
   0593 74 80              1808 	mov	a,#(0x00 ^ 0x80)
   0595 8B F0              1809 	mov	b,r3
   0597 63 F0 80           1810 	xrl	b,#0x80
   059A 95 F0              1811 	subb	a,b
                           1812 ;	genIfxJump
                           1813 ;	Peephole 108.a	removed ljmp by inverse jump logic
   059C 50 2A              1814 	jnc	00109$
                           1815 ;	Peephole 300	removed redundant label 00189$
                           1816 ;	main.c:221: printf ("\r\nEnter a col from 0-15:");
                           1817 ;	genIpush
   059E 74r42              1818 	mov	a,#__str_31
   05A0 C0 E0              1819 	push	acc
   05A2 74s04              1820 	mov	a,#(__str_31 >> 8)
   05A4 C0 E0              1821 	push	acc
   05A6 74 80              1822 	mov	a,#0x80
   05A8 C0 E0              1823 	push	acc
                           1824 ;	genCall
   05AA 12s00r00           1825 	lcall	_printf
   05AD 15 81              1826 	dec	sp
   05AF 15 81              1827 	dec	sp
   05B1 15 81              1828 	dec	sp
                           1829 ;	main.c:222: col = Serial_GetInteger(3);
                           1830 ;	genCall
                           1831 ;	Peephole 182.b	used 16 bit load of dptr
   05B3 90 00 03           1832 	mov	dptr,#0x0003
   05B6 12s00r00           1833 	lcall	_Serial_GetInteger
   05B9 E5 82              1834 	mov	a,dpl
   05BB 85 83 F0           1835 	mov	b,dph
                           1836 ;	genAssign
   05BE 90s00r0C           1837 	mov	dptr,#_handleLCDMode_col_1_1
   05C1 F0                 1838 	movx	@dptr,a
   05C2 A3                 1839 	inc	dptr
   05C3 E5 F0              1840 	mov	a,b
   05C5 F0                 1841 	movx	@dptr,a
                           1842 ;	Peephole 112.b	changed ljmp to sjmp
   05C6 80 BF              1843 	sjmp	00107$
   05C8                    1844 00109$:
                           1845 ;	main.c:225: LCD_gotoxy(row, col);
                           1846 ;	genAssign
   05C8 90s00r0A           1847 	mov	dptr,#_handleLCDMode_row_1_1
   05CB E0                 1848 	movx	a,@dptr
   05CC FC                 1849 	mov	r4,a
   05CD A3                 1850 	inc	dptr
   05CE E0                 1851 	movx	a,@dptr
   05CF FD                 1852 	mov	r5,a
                           1853 ;	genCast
   05D0 8C 06              1854 	mov	ar6,r4
                           1855 ;	genCast
   05D2 90s00r00           1856 	mov	dptr,#_LCD_gotoxy_PARM_2
   05D5 EA                 1857 	mov	a,r2
   05D6 F0                 1858 	movx	@dptr,a
                           1859 ;	genCall
   05D7 8E 82              1860 	mov	dpl,r6
   05D9 C0 02              1861 	push	ar2
   05DB C0 03              1862 	push	ar3
   05DD C0 04              1863 	push	ar4
   05DF C0 05              1864 	push	ar5
   05E1 12s00r00           1865 	lcall	_LCD_gotoxy
   05E4 D0 05              1866 	pop	ar5
   05E6 D0 04              1867 	pop	ar4
   05E8 D0 03              1868 	pop	ar3
   05EA D0 02              1869 	pop	ar2
                           1870 ;	main.c:226: printf("\r\nMoved cursor to new location (%d,%d)\r\n", row, col);
                           1871 ;	genIpush
   05EC C0 02              1872 	push	ar2
   05EE C0 03              1873 	push	ar3
                           1874 ;	genIpush
   05F0 C0 04              1875 	push	ar4
   05F2 C0 05              1876 	push	ar5
                           1877 ;	genIpush
   05F4 74r5B              1878 	mov	a,#__str_32
   05F6 C0 E0              1879 	push	acc
   05F8 74s04              1880 	mov	a,#(__str_32 >> 8)
   05FA C0 E0              1881 	push	acc
   05FC 74 80              1882 	mov	a,#0x80
   05FE C0 E0              1883 	push	acc
                           1884 ;	genCall
   0600 12s00r00           1885 	lcall	_printf
   0603 E5 81              1886 	mov	a,sp
   0605 24 F9              1887 	add	a,#0xf9
   0607 F5 81              1888 	mov	sp,a
                           1889 ;	main.c:227: break;
                           1890 ;	Peephole 251.a	replaced ljmp to ret with ret
   0609 22                 1891 	ret
                           1892 ;	main.c:228: case 'c':
   060A                    1893 00110$:
                           1894 ;	main.c:229: printf("\r\nEnter a character to put at current address\r\n");
                           1895 ;	genIpush
   060A 74r84              1896 	mov	a,#__str_33
   060C C0 E0              1897 	push	acc
   060E 74s04              1898 	mov	a,#(__str_33 >> 8)
   0610 C0 E0              1899 	push	acc
   0612 74 80              1900 	mov	a,#0x80
   0614 C0 E0              1901 	push	acc
                           1902 ;	genCall
   0616 12s00r00           1903 	lcall	_printf
   0619 15 81              1904 	dec	sp
   061B 15 81              1905 	dec	sp
   061D 15 81              1906 	dec	sp
                           1907 ;	main.c:231: LCD_Putch(getchar());
                           1908 ;	genCall
   061F 12s00r00           1909 	lcall	_getchar
                           1910 ;	genCall
   0622 AA 82              1911 	mov  r2,dpl
                           1912 ;	Peephole 177.a	removed redundant mov
   0624 12s00r00           1913 	lcall	_LCD_Putch
                           1914 ;	main.c:232: address = LCD_ReadAddr();
                           1915 ;	genCall
   0627 12s00r00           1916 	lcall	_LCD_ReadAddr
   062A AA 82              1917 	mov	r2,dpl
                           1918 ;	main.c:233: TimerRedraw();
                           1919 ;	genCall
   062C C0 02              1920 	push	ar2
   062E 12s00r00           1921 	lcall	_TimerRedraw
   0631 D0 02              1922 	pop	ar2
                           1923 ;	main.c:234: LCD_gotoaddr(address);
                           1924 ;	genCall
   0633 8A 82              1925 	mov	dpl,r2
                           1926 ;	main.c:236: break;
                           1927 ;	Peephole 251.a	replaced ljmp to ret with ret
                           1928 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0635 02s00r00           1929 	ljmp	_LCD_gotoaddr
                           1930 ;	main.c:237: case 's':
   0638                    1931 00111$:
                           1932 ;	main.c:238: printf("\r\Enter a string\r\n");
                           1933 ;	genIpush
   0638 74rB4              1934 	mov	a,#__str_34
   063A C0 E0              1935 	push	acc
   063C 74s04              1936 	mov	a,#(__str_34 >> 8)
   063E C0 E0              1937 	push	acc
   0640 74 80              1938 	mov	a,#0x80
   0642 C0 E0              1939 	push	acc
                           1940 ;	genCall
   0644 12s00r00           1941 	lcall	_printf
   0647 15 81              1942 	dec	sp
   0649 15 81              1943 	dec	sp
   064B 15 81              1944 	dec	sp
                           1945 ;	main.c:240: while(i < 100){
                           1946 ;	genAssign
   064D 7A 00              1947 	mov	r2,#0x00
   064F                    1948 00114$:
                           1949 ;	genCmpLt
                           1950 ;	genCmp
   064F BA 64 00           1951 	cjne	r2,#0x64,00190$
   0652                    1952 00190$:
                           1953 ;	genIfxJump
                           1954 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0652 50 44              1955 	jnc	00116$
                           1956 ;	Peephole 300	removed redundant label 00191$
                           1957 ;	main.c:241: str[i] = getchar();
                           1958 ;	genPlus
                           1959 ;	Peephole 236.g	used r2 instead of ar2
   0654 EA                 1960 	mov	a,r2
   0655 24r0E              1961 	add	a,#_handleLCDMode_str_1_1
   0657 FB                 1962 	mov	r3,a
                           1963 ;	Peephole 181	changed mov to clr
   0658 E4                 1964 	clr	a
   0659 34s00              1965 	addc	a,#(_handleLCDMode_str_1_1 >> 8)
   065B FC                 1966 	mov	r4,a
                           1967 ;	genCall
   065C C0 02              1968 	push	ar2
   065E C0 03              1969 	push	ar3
   0660 C0 04              1970 	push	ar4
   0662 12s00r00           1971 	lcall	_getchar
   0665 AD 82              1972 	mov	r5,dpl
   0667 D0 04              1973 	pop	ar4
   0669 D0 03              1974 	pop	ar3
   066B D0 02              1975 	pop	ar2
                           1976 ;	genPointerSet
                           1977 ;     genFarPointerSet
   066D 8B 82              1978 	mov	dpl,r3
   066F 8C 83              1979 	mov	dph,r4
   0671 ED                 1980 	mov	a,r5
   0672 F0                 1981 	movx	@dptr,a
                           1982 ;	main.c:242: putchar(str[i]);
                           1983 ;	genCall
   0673 8D 82              1984 	mov	dpl,r5
   0675 C0 02              1985 	push	ar2
   0677 C0 03              1986 	push	ar3
   0679 C0 04              1987 	push	ar4
   067B 12s00r00           1988 	lcall	_putchar
   067E D0 04              1989 	pop	ar4
   0680 D0 03              1990 	pop	ar3
   0682 D0 02              1991 	pop	ar2
                           1992 ;	main.c:243: if (str[i] == ENTER_KEY){
                           1993 ;	genPointerGet
                           1994 ;	genFarPointerGet
   0684 8B 82              1995 	mov	dpl,r3
   0686 8C 83              1996 	mov	dph,r4
   0688 E0                 1997 	movx	a,@dptr
   0689 FD                 1998 	mov	r5,a
                           1999 ;	genCmpEq
                           2000 ;	gencjneshort
                           2001 ;	Peephole 112.b	changed ljmp to sjmp
                           2002 ;	Peephole 198.b	optimized misc jump sequence
   068A BD 0D 08           2003 	cjne	r5,#0x0D,00113$
                           2004 ;	Peephole 200.b	removed redundant sjmp
                           2005 ;	Peephole 300	removed redundant label 00192$
                           2006 ;	Peephole 300	removed redundant label 00193$
                           2007 ;	main.c:244: str[i] = '\0';
                           2008 ;	genPointerSet
                           2009 ;     genFarPointerSet
   068D 8B 82              2010 	mov	dpl,r3
   068F 8C 83              2011 	mov	dph,r4
                           2012 ;	Peephole 181	changed mov to clr
   0691 E4                 2013 	clr	a
   0692 F0                 2014 	movx	@dptr,a
                           2015 ;	main.c:245: break;
                           2016 ;	Peephole 112.b	changed ljmp to sjmp
   0693 80 03              2017 	sjmp	00116$
   0695                    2018 00113$:
                           2019 ;	main.c:247: i++;
                           2020 ;	genPlus
                           2021 ;     genPlusIncr
   0695 0A                 2022 	inc	r2
                           2023 ;	Peephole 112.b	changed ljmp to sjmp
   0696 80 B7              2024 	sjmp	00114$
   0698                    2025 00116$:
                           2026 ;	main.c:249: LCD_Putstr(str);
                           2027 ;	genCall
                           2028 ;	Peephole 182.a	used 16 bit load of DPTR
   0698 90s00r0E           2029 	mov	dptr,#_handleLCDMode_str_1_1
   069B 75 F0 00           2030 	mov	b,#0x00
   069E 12s00r00           2031 	lcall	_LCD_Putstr
                           2032 ;	main.c:250: address = LCD_ReadAddr();
                           2033 ;	genCall
   06A1 12s00r00           2034 	lcall	_LCD_ReadAddr
   06A4 AA 82              2035 	mov	r2,dpl
                           2036 ;	main.c:251: TimerRedraw();
                           2037 ;	genCall
   06A6 C0 02              2038 	push	ar2
   06A8 12s00r00           2039 	lcall	_TimerRedraw
   06AB D0 02              2040 	pop	ar2
                           2041 ;	main.c:252: LCD_gotoaddr(address);
                           2042 ;	genCall
   06AD 8A 82              2043 	mov	dpl,r2
                           2044 ;	main.c:253: break;
                           2045 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2046 ;	Peephole 253.a	replaced lcall/ret with ljmp
   06AF 02s00r00           2047 	ljmp	_LCD_gotoaddr
                           2048 ;	main.c:254: case 'C':
   06B2                    2049 00117$:
                           2050 ;	main.c:255: LCD_ClearScreen();
                           2051 ;	genCall
   06B2 12s00r00           2052 	lcall	_LCD_ClearScreen
                           2053 ;	main.c:256: TimerRedraw();
                           2054 ;	genCall
   06B5 12s00r00           2055 	lcall	_TimerRedraw
                           2056 ;	main.c:257: LCD_gotoxy(0,0);    //Start at 0,0
                           2057 ;	genAssign
   06B8 90s00r00           2058 	mov	dptr,#_LCD_gotoxy_PARM_2
                           2059 ;	Peephole 181	changed mov to clr
   06BB E4                 2060 	clr	a
   06BC F0                 2061 	movx	@dptr,a
                           2062 ;	genCall
   06BD 75 82 00           2063 	mov	dpl,#0x00
   06C0 12s00r00           2064 	lcall	_LCD_gotoxy
                           2065 ;	main.c:258: printf("\r\nLCD Display Cleared!\r\n");
                           2066 ;	genIpush
   06C3 74rC6              2067 	mov	a,#__str_35
   06C5 C0 E0              2068 	push	acc
   06C7 74s04              2069 	mov	a,#(__str_35 >> 8)
   06C9 C0 E0              2070 	push	acc
   06CB 74 80              2071 	mov	a,#0x80
   06CD C0 E0              2072 	push	acc
                           2073 ;	genCall
   06CF 12s00r00           2074 	lcall	_printf
   06D2 15 81              2075 	dec	sp
   06D4 15 81              2076 	dec	sp
   06D6 15 81              2077 	dec	sp
                           2078 ;	main.c:259: break;
                           2079 ;	Peephole 251.a	replaced ljmp to ret with ret
   06D8 22                 2080 	ret
                           2081 ;	main.c:260: case 'Y':
   06D9                    2082 00118$:
                           2083 ;	main.c:261: printf("\r\n");
                           2084 ;	genIpush
   06D9 74rDF              2085 	mov	a,#__str_36
   06DB C0 E0              2086 	push	acc
   06DD 74s04              2087 	mov	a,#(__str_36 >> 8)
   06DF C0 E0              2088 	push	acc
   06E1 74 80              2089 	mov	a,#0x80
   06E3 C0 E0              2090 	push	acc
                           2091 ;	genCall
   06E5 12s00r00           2092 	lcall	_printf
   06E8 15 81              2093 	dec	sp
   06EA 15 81              2094 	dec	sp
   06EC 15 81              2095 	dec	sp
                           2096 ;	main.c:264: printf("%x: ", start_addr);
                           2097 ;	genIpush
   06EE 74 80              2098 	mov	a,#0x80
   06F0 C0 E0              2099 	push	acc
                           2100 ;	Peephole 181	changed mov to clr
   06F2 E4                 2101 	clr	a
   06F3 C0 E0              2102 	push	acc
                           2103 ;	genIpush
   06F5 74rE2              2104 	mov	a,#__str_37
   06F7 C0 E0              2105 	push	acc
   06F9 74s04              2106 	mov	a,#(__str_37 >> 8)
   06FB C0 E0              2107 	push	acc
   06FD 74 80              2108 	mov	a,#0x80
   06FF C0 E0              2109 	push	acc
                           2110 ;	genCall
   0701 12s00r00           2111 	lcall	_printf
   0704 E5 81              2112 	mov	a,sp
   0706 24 FB              2113 	add	a,#0xfb
   0708 F5 81              2114 	mov	sp,a
                           2115 ;	main.c:265: for (i = 0; i < 16; ++i){
                           2116 ;	genAssign
   070A 7A 80              2117 	mov	r2,#0x80
   070C 7B 00              2118 	mov	r3,#0x00
                           2119 ;	genAssign
   070E 7C 10              2120 	mov	r4,#0x10
   0710                    2121 00129$:
                           2122 ;	main.c:266: LCD_SetDDRAMAddress(start_addr);
                           2123 ;	genCast
   0710 8A 05              2124 	mov	ar5,r2
                           2125 ;	genCall
   0712 8D 82              2126 	mov	dpl,r5
   0714 C0 02              2127 	push	ar2
   0716 C0 03              2128 	push	ar3
   0718 C0 04              2129 	push	ar4
   071A 12s00r00           2130 	lcall	_LCD_SetDDRAMAddress
   071D D0 04              2131 	pop	ar4
   071F D0 03              2132 	pop	ar3
   0721 D0 02              2133 	pop	ar2
                           2134 ;	main.c:267: lcdData = LCD_ReadRAM();
                           2135 ;	genCall
   0723 C0 02              2136 	push	ar2
   0725 C0 03              2137 	push	ar3
   0727 C0 04              2138 	push	ar4
   0729 12s00r00           2139 	lcall	_LCD_ReadRAM
   072C AD 82              2140 	mov	r5,dpl
   072E D0 04              2141 	pop	ar4
   0730 D0 03              2142 	pop	ar3
   0732 D0 02              2143 	pop	ar2
                           2144 ;	main.c:268: printf("%x ", lcdData);
                           2145 ;	genCast
   0734 7E 00              2146 	mov	r6,#0x00
                           2147 ;	genIpush
   0736 C0 02              2148 	push	ar2
   0738 C0 03              2149 	push	ar3
   073A C0 04              2150 	push	ar4
   073C C0 05              2151 	push	ar5
   073E C0 06              2152 	push	ar6
                           2153 ;	genIpush
   0740 74rE7              2154 	mov	a,#__str_38
   0742 C0 E0              2155 	push	acc
   0744 74s04              2156 	mov	a,#(__str_38 >> 8)
   0746 C0 E0              2157 	push	acc
   0748 74 80              2158 	mov	a,#0x80
   074A C0 E0              2159 	push	acc
                           2160 ;	genCall
   074C 12s00r00           2161 	lcall	_printf
   074F E5 81              2162 	mov	a,sp
   0751 24 FB              2163 	add	a,#0xfb
   0753 F5 81              2164 	mov	sp,a
   0755 D0 04              2165 	pop	ar4
   0757 D0 03              2166 	pop	ar3
   0759 D0 02              2167 	pop	ar2
                           2168 ;	main.c:269: start_addr++;
                           2169 ;	genPlus
                           2170 ;     genPlusIncr
   075B 0A                 2171 	inc	r2
   075C BA 00 01           2172 	cjne	r2,#0x00,00194$
   075F 0B                 2173 	inc	r3
   0760                    2174 00194$:
                           2175 ;	genDjnz
                           2176 ;	Peephole 112.b	changed ljmp to sjmp
                           2177 ;	Peephole 205	optimized misc jump sequence
   0760 DC AE              2178 	djnz	r4,00129$
                           2179 ;	Peephole 300	removed redundant label 00195$
                           2180 ;	Peephole 300	removed redundant label 00196$
                           2181 ;	main.c:265: for (i = 0; i < 16; ++i){
                           2182 ;	main.c:271: printf("\r\n");
                           2183 ;	genIpush
   0762 74rDF              2184 	mov	a,#__str_36
   0764 C0 E0              2185 	push	acc
   0766 74s04              2186 	mov	a,#(__str_36 >> 8)
   0768 C0 E0              2187 	push	acc
   076A 74 80              2188 	mov	a,#0x80
   076C C0 E0              2189 	push	acc
                           2190 ;	genCall
   076E 12s00r00           2191 	lcall	_printf
   0771 15 81              2192 	dec	sp
   0773 15 81              2193 	dec	sp
   0775 15 81              2194 	dec	sp
                           2195 ;	main.c:274: printf("%x: ", start_addr);
                           2196 ;	genIpush
   0777 74 C0              2197 	mov	a,#0xC0
   0779 C0 E0              2198 	push	acc
                           2199 ;	Peephole 181	changed mov to clr
   077B E4                 2200 	clr	a
   077C C0 E0              2201 	push	acc
                           2202 ;	genIpush
   077E 74rE2              2203 	mov	a,#__str_37
   0780 C0 E0              2204 	push	acc
   0782 74s04              2205 	mov	a,#(__str_37 >> 8)
   0784 C0 E0              2206 	push	acc
   0786 74 80              2207 	mov	a,#0x80
   0788 C0 E0              2208 	push	acc
                           2209 ;	genCall
   078A 12s00r00           2210 	lcall	_printf
   078D E5 81              2211 	mov	a,sp
   078F 24 FB              2212 	add	a,#0xfb
   0791 F5 81              2213 	mov	sp,a
                           2214 ;	main.c:275: for (i = 0; i < 16; ++i){
                           2215 ;	genAssign
   0793 7A C0              2216 	mov	r2,#0xC0
   0795 7B 00              2217 	mov	r3,#0x00
                           2218 ;	genAssign
   0797 7C 10              2219 	mov	r4,#0x10
   0799                    2220 00132$:
                           2221 ;	main.c:276: LCD_SetDDRAMAddress(start_addr);
                           2222 ;	genCast
   0799 8A 05              2223 	mov	ar5,r2
                           2224 ;	genCall
   079B 8D 82              2225 	mov	dpl,r5
   079D C0 02              2226 	push	ar2
   079F C0 03              2227 	push	ar3
   07A1 C0 04              2228 	push	ar4
   07A3 12s00r00           2229 	lcall	_LCD_SetDDRAMAddress
   07A6 D0 04              2230 	pop	ar4
   07A8 D0 03              2231 	pop	ar3
   07AA D0 02              2232 	pop	ar2
                           2233 ;	main.c:277: lcdData = LCD_ReadRAM();
                           2234 ;	genCall
   07AC C0 02              2235 	push	ar2
   07AE C0 03              2236 	push	ar3
   07B0 C0 04              2237 	push	ar4
   07B2 12s00r00           2238 	lcall	_LCD_ReadRAM
   07B5 AD 82              2239 	mov	r5,dpl
   07B7 D0 04              2240 	pop	ar4
   07B9 D0 03              2241 	pop	ar3
   07BB D0 02              2242 	pop	ar2
                           2243 ;	main.c:278: printf("%x ", lcdData);
                           2244 ;	genCast
   07BD 7E 00              2245 	mov	r6,#0x00
                           2246 ;	genIpush
   07BF C0 02              2247 	push	ar2
   07C1 C0 03              2248 	push	ar3
   07C3 C0 04              2249 	push	ar4
   07C5 C0 05              2250 	push	ar5
   07C7 C0 06              2251 	push	ar6
                           2252 ;	genIpush
   07C9 74rE7              2253 	mov	a,#__str_38
   07CB C0 E0              2254 	push	acc
   07CD 74s04              2255 	mov	a,#(__str_38 >> 8)
   07CF C0 E0              2256 	push	acc
   07D1 74 80              2257 	mov	a,#0x80
   07D3 C0 E0              2258 	push	acc
                           2259 ;	genCall
   07D5 12s00r00           2260 	lcall	_printf
   07D8 E5 81              2261 	mov	a,sp
   07DA 24 FB              2262 	add	a,#0xfb
   07DC F5 81              2263 	mov	sp,a
   07DE D0 04              2264 	pop	ar4
   07E0 D0 03              2265 	pop	ar3
   07E2 D0 02              2266 	pop	ar2
                           2267 ;	main.c:279: start_addr++;
                           2268 ;	genPlus
                           2269 ;     genPlusIncr
   07E4 0A                 2270 	inc	r2
   07E5 BA 00 01           2271 	cjne	r2,#0x00,00197$
   07E8 0B                 2272 	inc	r3
   07E9                    2273 00197$:
                           2274 ;	genDjnz
                           2275 ;	Peephole 112.b	changed ljmp to sjmp
                           2276 ;	Peephole 205	optimized misc jump sequence
   07E9 DC AE              2277 	djnz	r4,00132$
                           2278 ;	Peephole 300	removed redundant label 00198$
                           2279 ;	Peephole 300	removed redundant label 00199$
                           2280 ;	main.c:275: for (i = 0; i < 16; ++i){
                           2281 ;	main.c:281: printf("\r\n");
                           2282 ;	genIpush
   07EB 74rDF              2283 	mov	a,#__str_36
   07ED C0 E0              2284 	push	acc
   07EF 74s04              2285 	mov	a,#(__str_36 >> 8)
   07F1 C0 E0              2286 	push	acc
   07F3 74 80              2287 	mov	a,#0x80
   07F5 C0 E0              2288 	push	acc
                           2289 ;	genCall
   07F7 12s00r00           2290 	lcall	_printf
   07FA 15 81              2291 	dec	sp
   07FC 15 81              2292 	dec	sp
   07FE 15 81              2293 	dec	sp
                           2294 ;	main.c:284: printf("%x: ", start_addr);
                           2295 ;	genIpush
   0800 74 90              2296 	mov	a,#0x90
   0802 C0 E0              2297 	push	acc
                           2298 ;	Peephole 181	changed mov to clr
   0804 E4                 2299 	clr	a
   0805 C0 E0              2300 	push	acc
                           2301 ;	genIpush
   0807 74rE2              2302 	mov	a,#__str_37
   0809 C0 E0              2303 	push	acc
   080B 74s04              2304 	mov	a,#(__str_37 >> 8)
   080D C0 E0              2305 	push	acc
   080F 74 80              2306 	mov	a,#0x80
   0811 C0 E0              2307 	push	acc
                           2308 ;	genCall
   0813 12s00r00           2309 	lcall	_printf
   0816 E5 81              2310 	mov	a,sp
   0818 24 FB              2311 	add	a,#0xfb
   081A F5 81              2312 	mov	sp,a
                           2313 ;	main.c:285: for (i = 0; i < 16; ++i){
                           2314 ;	genAssign
   081C 7A 90              2315 	mov	r2,#0x90
   081E 7B 00              2316 	mov	r3,#0x00
                           2317 ;	genAssign
   0820 7C 10              2318 	mov	r4,#0x10
   0822                    2319 00135$:
                           2320 ;	main.c:286: LCD_SetDDRAMAddress(start_addr);
                           2321 ;	genCast
   0822 8A 05              2322 	mov	ar5,r2
                           2323 ;	genCall
   0824 8D 82              2324 	mov	dpl,r5
   0826 C0 02              2325 	push	ar2
   0828 C0 03              2326 	push	ar3
   082A C0 04              2327 	push	ar4
   082C 12s00r00           2328 	lcall	_LCD_SetDDRAMAddress
   082F D0 04              2329 	pop	ar4
   0831 D0 03              2330 	pop	ar3
   0833 D0 02              2331 	pop	ar2
                           2332 ;	main.c:287: lcdData = LCD_ReadRAM();
                           2333 ;	genCall
   0835 C0 02              2334 	push	ar2
   0837 C0 03              2335 	push	ar3
   0839 C0 04              2336 	push	ar4
   083B 12s00r00           2337 	lcall	_LCD_ReadRAM
   083E AD 82              2338 	mov	r5,dpl
   0840 D0 04              2339 	pop	ar4
   0842 D0 03              2340 	pop	ar3
   0844 D0 02              2341 	pop	ar2
                           2342 ;	main.c:288: printf("%x ", lcdData);
                           2343 ;	genCast
   0846 7E 00              2344 	mov	r6,#0x00
                           2345 ;	genIpush
   0848 C0 02              2346 	push	ar2
   084A C0 03              2347 	push	ar3
   084C C0 04              2348 	push	ar4
   084E C0 05              2349 	push	ar5
   0850 C0 06              2350 	push	ar6
                           2351 ;	genIpush
   0852 74rE7              2352 	mov	a,#__str_38
   0854 C0 E0              2353 	push	acc
   0856 74s04              2354 	mov	a,#(__str_38 >> 8)
   0858 C0 E0              2355 	push	acc
   085A 74 80              2356 	mov	a,#0x80
   085C C0 E0              2357 	push	acc
                           2358 ;	genCall
   085E 12s00r00           2359 	lcall	_printf
   0861 E5 81              2360 	mov	a,sp
   0863 24 FB              2361 	add	a,#0xfb
   0865 F5 81              2362 	mov	sp,a
   0867 D0 04              2363 	pop	ar4
   0869 D0 03              2364 	pop	ar3
   086B D0 02              2365 	pop	ar2
                           2366 ;	main.c:289: start_addr++;
                           2367 ;	genPlus
                           2368 ;     genPlusIncr
   086D 0A                 2369 	inc	r2
   086E BA 00 01           2370 	cjne	r2,#0x00,00200$
   0871 0B                 2371 	inc	r3
   0872                    2372 00200$:
                           2373 ;	genDjnz
                           2374 ;	Peephole 112.b	changed ljmp to sjmp
                           2375 ;	Peephole 205	optimized misc jump sequence
   0872 DC AE              2376 	djnz	r4,00135$
                           2377 ;	Peephole 300	removed redundant label 00201$
                           2378 ;	Peephole 300	removed redundant label 00202$
                           2379 ;	main.c:285: for (i = 0; i < 16; ++i){
                           2380 ;	main.c:291: printf("\r\n");
                           2381 ;	genIpush
   0874 74rDF              2382 	mov	a,#__str_36
   0876 C0 E0              2383 	push	acc
   0878 74s04              2384 	mov	a,#(__str_36 >> 8)
   087A C0 E0              2385 	push	acc
   087C 74 80              2386 	mov	a,#0x80
   087E C0 E0              2387 	push	acc
                           2388 ;	genCall
   0880 12s00r00           2389 	lcall	_printf
   0883 15 81              2390 	dec	sp
   0885 15 81              2391 	dec	sp
   0887 15 81              2392 	dec	sp
                           2393 ;	main.c:294: printf("%x: ", start_addr);
                           2394 ;	genIpush
   0889 74 D0              2395 	mov	a,#0xD0
   088B C0 E0              2396 	push	acc
                           2397 ;	Peephole 181	changed mov to clr
   088D E4                 2398 	clr	a
   088E C0 E0              2399 	push	acc
                           2400 ;	genIpush
   0890 74rE2              2401 	mov	a,#__str_37
   0892 C0 E0              2402 	push	acc
   0894 74s04              2403 	mov	a,#(__str_37 >> 8)
   0896 C0 E0              2404 	push	acc
   0898 74 80              2405 	mov	a,#0x80
   089A C0 E0              2406 	push	acc
                           2407 ;	genCall
   089C 12s00r00           2408 	lcall	_printf
   089F E5 81              2409 	mov	a,sp
   08A1 24 FB              2410 	add	a,#0xfb
   08A3 F5 81              2411 	mov	sp,a
                           2412 ;	main.c:295: for (i = 0; i < 16; ++i){
                           2413 ;	genAssign
   08A5 7A D0              2414 	mov	r2,#0xD0
   08A7 7B 00              2415 	mov	r3,#0x00
                           2416 ;	genAssign
   08A9 7C 10              2417 	mov	r4,#0x10
   08AB                    2418 00138$:
                           2419 ;	main.c:296: LCD_SetDDRAMAddress(start_addr);
                           2420 ;	genCast
   08AB 8A 05              2421 	mov	ar5,r2
                           2422 ;	genCall
   08AD 8D 82              2423 	mov	dpl,r5
   08AF C0 02              2424 	push	ar2
   08B1 C0 03              2425 	push	ar3
   08B3 C0 04              2426 	push	ar4
   08B5 12s00r00           2427 	lcall	_LCD_SetDDRAMAddress
   08B8 D0 04              2428 	pop	ar4
   08BA D0 03              2429 	pop	ar3
   08BC D0 02              2430 	pop	ar2
                           2431 ;	main.c:297: lcdData = LCD_ReadRAM();
                           2432 ;	genCall
   08BE C0 02              2433 	push	ar2
   08C0 C0 03              2434 	push	ar3
   08C2 C0 04              2435 	push	ar4
   08C4 12s00r00           2436 	lcall	_LCD_ReadRAM
   08C7 AD 82              2437 	mov	r5,dpl
   08C9 D0 04              2438 	pop	ar4
   08CB D0 03              2439 	pop	ar3
   08CD D0 02              2440 	pop	ar2
                           2441 ;	main.c:298: printf("%x ", lcdData);
                           2442 ;	genCast
   08CF 7E 00              2443 	mov	r6,#0x00
                           2444 ;	genIpush
   08D1 C0 02              2445 	push	ar2
   08D3 C0 03              2446 	push	ar3
   08D5 C0 04              2447 	push	ar4
   08D7 C0 05              2448 	push	ar5
   08D9 C0 06              2449 	push	ar6
                           2450 ;	genIpush
   08DB 74rE7              2451 	mov	a,#__str_38
   08DD C0 E0              2452 	push	acc
   08DF 74s04              2453 	mov	a,#(__str_38 >> 8)
   08E1 C0 E0              2454 	push	acc
   08E3 74 80              2455 	mov	a,#0x80
   08E5 C0 E0              2456 	push	acc
                           2457 ;	genCall
   08E7 12s00r00           2458 	lcall	_printf
   08EA E5 81              2459 	mov	a,sp
   08EC 24 FB              2460 	add	a,#0xfb
   08EE F5 81              2461 	mov	sp,a
   08F0 D0 04              2462 	pop	ar4
   08F2 D0 03              2463 	pop	ar3
   08F4 D0 02              2464 	pop	ar2
                           2465 ;	main.c:299: start_addr++;
                           2466 ;	genPlus
                           2467 ;     genPlusIncr
   08F6 0A                 2468 	inc	r2
   08F7 BA 00 01           2469 	cjne	r2,#0x00,00203$
   08FA 0B                 2470 	inc	r3
   08FB                    2471 00203$:
                           2472 ;	genDjnz
                           2473 ;	Peephole 112.b	changed ljmp to sjmp
                           2474 ;	Peephole 205	optimized misc jump sequence
   08FB DC AE              2475 	djnz	r4,00138$
                           2476 ;	Peephole 300	removed redundant label 00204$
                           2477 ;	Peephole 300	removed redundant label 00205$
                           2478 ;	main.c:295: for (i = 0; i < 16; ++i){
                           2479 ;	main.c:301: printf("\r\n");
                           2480 ;	genIpush
   08FD 74rDF              2481 	mov	a,#__str_36
   08FF C0 E0              2482 	push	acc
   0901 74s04              2483 	mov	a,#(__str_36 >> 8)
   0903 C0 E0              2484 	push	acc
   0905 74 80              2485 	mov	a,#0x80
   0907 C0 E0              2486 	push	acc
                           2487 ;	genCall
   0909 12s00r00           2488 	lcall	_printf
   090C 15 81              2489 	dec	sp
   090E 15 81              2490 	dec	sp
   0910 15 81              2491 	dec	sp
                           2492 ;	main.c:304: break;
                           2493 ;	Peephole 251.a	replaced ljmp to ret with ret
   0912 22                 2494 	ret
                           2495 ;	main.c:305: case 'G':
   0913                    2496 00119$:
                           2497 ;	main.c:306: printf("\r\n");
                           2498 ;	genIpush
   0913 74rDF              2499 	mov	a,#__str_36
   0915 C0 E0              2500 	push	acc
   0917 74s04              2501 	mov	a,#(__str_36 >> 8)
   0919 C0 E0              2502 	push	acc
   091B 74 80              2503 	mov	a,#0x80
   091D C0 E0              2504 	push	acc
                           2505 ;	genCall
   091F 12s00r00           2506 	lcall	_printf
   0922 15 81              2507 	dec	sp
   0924 15 81              2508 	dec	sp
   0926 15 81              2509 	dec	sp
                           2510 ;	main.c:308: EA = 0;     //Disable interrupts temporarily. Shared globals
                           2511 ;	genAssign
   0928 C2 AF              2512 	clr	_EA
                           2513 ;	main.c:309: Saved_Address = LCD_ReadAddr();
                           2514 ;	genCall
   092A 12s00r00           2515 	lcall	_LCD_ReadAddr
   092D E5 82              2516 	mov	a,dpl
                           2517 ;	genAssign
   092F 90s00r00           2518 	mov	dptr,#_Saved_Address
   0932 F0                 2519 	movx	@dptr,a
                           2520 ;	main.c:310: CG_Accessed = true;
                           2521 ;	genAssign
   0933 D2*00              2522 	setb	_CG_Accessed
                           2523 ;	main.c:311: EA = 1;
                           2524 ;	genAssign
   0935 D2 AF              2525 	setb	_EA
                           2526 ;	main.c:314: start_addr = 0x40;
                           2527 ;	genAssign
   0937 90s00r72           2528 	mov	dptr,#_handleLCDMode_start_addr_1_1
   093A 74 40              2529 	mov	a,#0x40
   093C F0                 2530 	movx	@dptr,a
   093D E4                 2531 	clr	a
   093E A3                 2532 	inc	dptr
   093F F0                 2533 	movx	@dptr,a
                           2534 ;	main.c:316: while (start_addr < 0x80){
   0940                    2535 00120$:
                           2536 ;	genAssign
   0940 90s00r72           2537 	mov	dptr,#_handleLCDMode_start_addr_1_1
   0943 E0                 2538 	movx	a,@dptr
   0944 FA                 2539 	mov	r2,a
   0945 A3                 2540 	inc	dptr
   0946 E0                 2541 	movx	a,@dptr
   0947 FB                 2542 	mov	r3,a
                           2543 ;	genCmpLt
                           2544 ;	genCmp
   0948 C3                 2545 	clr	c
   0949 EA                 2546 	mov	a,r2
   094A 94 80              2547 	subb	a,#0x80
   094C EB                 2548 	mov	a,r3
   094D 94 00              2549 	subb	a,#0x00
                           2550 ;	genIfxJump
   094F 40 03              2551 	jc	00206$
   0951 02s09rE9           2552 	ljmp	00122$
   0954                    2553 00206$:
                           2554 ;	main.c:317: printf("%x: ", start_addr);
                           2555 ;	genIpush
   0954 C0 02              2556 	push	ar2
   0956 C0 03              2557 	push	ar3
   0958 C0 02              2558 	push	ar2
   095A C0 03              2559 	push	ar3
                           2560 ;	genIpush
   095C 74rE2              2561 	mov	a,#__str_37
   095E C0 E0              2562 	push	acc
   0960 74s04              2563 	mov	a,#(__str_37 >> 8)
   0962 C0 E0              2564 	push	acc
   0964 74 80              2565 	mov	a,#0x80
   0966 C0 E0              2566 	push	acc
                           2567 ;	genCall
   0968 12s00r00           2568 	lcall	_printf
   096B E5 81              2569 	mov	a,sp
   096D 24 FB              2570 	add	a,#0xfb
   096F F5 81              2571 	mov	sp,a
   0971 D0 03              2572 	pop	ar3
   0973 D0 02              2573 	pop	ar2
                           2574 ;	main.c:319: for (i = 0; i < 16; ++i){
                           2575 ;	genAssign
                           2576 ;	genAssign
   0975 7C 10              2577 	mov	r4,#0x10
   0977                    2578 00141$:
                           2579 ;	main.c:320: LCD_SetCGRAMAddress(start_addr);
                           2580 ;	genCast
   0977 8A 05              2581 	mov	ar5,r2
                           2582 ;	genCall
   0979 8D 82              2583 	mov	dpl,r5
   097B C0 02              2584 	push	ar2
   097D C0 03              2585 	push	ar3
   097F C0 04              2586 	push	ar4
   0981 12s00r00           2587 	lcall	_LCD_SetCGRAMAddress
   0984 D0 04              2588 	pop	ar4
   0986 D0 03              2589 	pop	ar3
   0988 D0 02              2590 	pop	ar2
                           2591 ;	main.c:321: lcdData = LCD_ReadRAM();
                           2592 ;	genCall
   098A C0 02              2593 	push	ar2
   098C C0 03              2594 	push	ar3
   098E C0 04              2595 	push	ar4
   0990 12s00r00           2596 	lcall	_LCD_ReadRAM
   0993 AD 82              2597 	mov	r5,dpl
   0995 D0 04              2598 	pop	ar4
   0997 D0 03              2599 	pop	ar3
   0999 D0 02              2600 	pop	ar2
                           2601 ;	main.c:322: printf("%x ", lcdData);
                           2602 ;	genCast
   099B 7E 00              2603 	mov	r6,#0x00
                           2604 ;	genIpush
   099D C0 02              2605 	push	ar2
   099F C0 03              2606 	push	ar3
   09A1 C0 04              2607 	push	ar4
   09A3 C0 05              2608 	push	ar5
   09A5 C0 06              2609 	push	ar6
                           2610 ;	genIpush
   09A7 74rE7              2611 	mov	a,#__str_38
   09A9 C0 E0              2612 	push	acc
   09AB 74s04              2613 	mov	a,#(__str_38 >> 8)
   09AD C0 E0              2614 	push	acc
   09AF 74 80              2615 	mov	a,#0x80
   09B1 C0 E0              2616 	push	acc
                           2617 ;	genCall
   09B3 12s00r00           2618 	lcall	_printf
   09B6 E5 81              2619 	mov	a,sp
   09B8 24 FB              2620 	add	a,#0xfb
   09BA F5 81              2621 	mov	sp,a
   09BC D0 04              2622 	pop	ar4
   09BE D0 03              2623 	pop	ar3
   09C0 D0 02              2624 	pop	ar2
                           2625 ;	main.c:323: start_addr++;
                           2626 ;	genPlus
                           2627 ;     genPlusIncr
   09C2 0A                 2628 	inc	r2
   09C3 BA 00 01           2629 	cjne	r2,#0x00,00207$
   09C6 0B                 2630 	inc	r3
   09C7                    2631 00207$:
                           2632 ;	genDjnz
                           2633 ;	Peephole 112.b	changed ljmp to sjmp
                           2634 ;	Peephole 205	optimized misc jump sequence
   09C7 DC AE              2635 	djnz	r4,00141$
                           2636 ;	Peephole 300	removed redundant label 00208$
                           2637 ;	Peephole 300	removed redundant label 00209$
                           2638 ;	main.c:319: for (i = 0; i < 16; ++i){
                           2639 ;	main.c:325: printf("\r\n");
                           2640 ;	genAssign
   09C9 90s00r72           2641 	mov	dptr,#_handleLCDMode_start_addr_1_1
   09CC EA                 2642 	mov	a,r2
   09CD F0                 2643 	movx	@dptr,a
   09CE A3                 2644 	inc	dptr
   09CF EB                 2645 	mov	a,r3
   09D0 F0                 2646 	movx	@dptr,a
                           2647 ;	genIpush
   09D1 74rDF              2648 	mov	a,#__str_36
   09D3 C0 E0              2649 	push	acc
   09D5 74s04              2650 	mov	a,#(__str_36 >> 8)
   09D7 C0 E0              2651 	push	acc
   09D9 74 80              2652 	mov	a,#0x80
   09DB C0 E0              2653 	push	acc
                           2654 ;	genCall
   09DD 12s00r00           2655 	lcall	_printf
   09E0 15 81              2656 	dec	sp
   09E2 15 81              2657 	dec	sp
   09E4 15 81              2658 	dec	sp
   09E6 02s09r40           2659 	ljmp	00120$
   09E9                    2660 00122$:
                           2661 ;	main.c:328: LCD_SetDDRAMAddress(Saved_Address);
                           2662 ;	genAssign
   09E9 90s00r00           2663 	mov	dptr,#_Saved_Address
   09EC E0                 2664 	movx	a,@dptr
                           2665 ;	genCall
   09ED FA                 2666 	mov	r2,a
                           2667 ;	Peephole 244.c	loading dpl from a instead of r2
   09EE F5 82              2668 	mov	dpl,a
   09F0 12s00r00           2669 	lcall	_LCD_SetDDRAMAddress
                           2670 ;	main.c:329: EA = 0;
                           2671 ;	genAssign
   09F3 C2 AF              2672 	clr	_EA
                           2673 ;	main.c:330: CG_Accessed = false;
                           2674 ;	genAssign
   09F5 C2*00              2675 	clr	_CG_Accessed
                           2676 ;	main.c:331: EA = 1;
                           2677 ;	genAssign
   09F7 D2 AF              2678 	setb	_EA
                           2679 ;	main.c:332: TimerRedraw();
                           2680 ;	genCall
                           2681 ;	main.c:333: break;
                           2682 ;	main.c:334: case 'r':
                           2683 ;	Peephole 112.b	changed ljmp to sjmp
                           2684 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2685 ;	Peephole 253.a	replaced lcall/ret with ljmp
   09F9 02s00r00           2686 	ljmp	_TimerRedraw
   09FC                    2687 00123$:
                           2688 ;	main.c:335: mode = MAIN_MODE;
                           2689 ;	genAssign
   09FC 90s00r00           2690 	mov	dptr,#_mode
                           2691 ;	Peephole 181	changed mov to clr
   09FF E4                 2692 	clr	a
   0A00 F0                 2693 	movx	@dptr,a
                           2694 ;	main.c:336: MainMenu();
                           2695 ;	genCall
                           2696 ;	main.c:337: break;
                           2697 ;	main.c:338: case 'H':
                           2698 ;	Peephole 112.b	changed ljmp to sjmp
                           2699 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2700 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0A01 02s11rD5           2701 	ljmp	_MainMenu
   0A04                    2702 00124$:
                           2703 ;	main.c:339: LCD_Menu();
                           2704 ;	genCall
                           2705 ;	main.c:343: }
                           2706 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0A04 02s03r94           2707 	ljmp	_LCD_Menu
                           2708 ;
                           2709 ;------------------------------------------------------------
                           2710 ;Allocation info for local variables in function 'EEPROM_Menu'
                           2711 ;------------------------------------------------------------
                           2712 ;------------------------------------------------------------
                           2713 ;	main.c:346: void EEPROM_Menu(void){
                           2714 ;	-----------------------------------------
                           2715 ;	 function EEPROM_Menu
                           2716 ;	-----------------------------------------
   0A07                    2717 _EEPROM_Menu:
                           2718 ;	main.c:347: printf("\r\nIn EEPROM Mode");
                           2719 ;	genIpush
   0A07 74rEB              2720 	mov	a,#__str_39
   0A09 C0 E0              2721 	push	acc
   0A0B 74s04              2722 	mov	a,#(__str_39 >> 8)
   0A0D C0 E0              2723 	push	acc
   0A0F 74 80              2724 	mov	a,#0x80
   0A11 C0 E0              2725 	push	acc
                           2726 ;	genCall
   0A13 12s00r00           2727 	lcall	_printf
   0A16 15 81              2728 	dec	sp
   0A18 15 81              2729 	dec	sp
   0A1A 15 81              2730 	dec	sp
                           2731 ;	main.c:348: printf("\r\nPress 'H' for help");
                           2732 ;	genIpush
   0A1C 74r9F              2733 	mov	a,#__str_4
   0A1E C0 E0              2734 	push	acc
   0A20 74s00              2735 	mov	a,#(__str_4 >> 8)
   0A22 C0 E0              2736 	push	acc
   0A24 74 80              2737 	mov	a,#0x80
   0A26 C0 E0              2738 	push	acc
                           2739 ;	genCall
   0A28 12s00r00           2740 	lcall	_printf
   0A2B 15 81              2741 	dec	sp
   0A2D 15 81              2742 	dec	sp
   0A2F 15 81              2743 	dec	sp
                           2744 ;	main.c:349: printf("\r\nPress 'W' to write a byte to EEPROM");
                           2745 ;	genIpush
   0A31 74rFC              2746 	mov	a,#__str_40
   0A33 C0 E0              2747 	push	acc
   0A35 74s04              2748 	mov	a,#(__str_40 >> 8)
   0A37 C0 E0              2749 	push	acc
   0A39 74 80              2750 	mov	a,#0x80
   0A3B C0 E0              2751 	push	acc
                           2752 ;	genCall
   0A3D 12s00r00           2753 	lcall	_printf
   0A40 15 81              2754 	dec	sp
   0A42 15 81              2755 	dec	sp
   0A44 15 81              2756 	dec	sp
                           2757 ;	main.c:350: printf("\r\nPress 'R' to read a byte from EEPROM");
                           2758 ;	genIpush
   0A46 74r22              2759 	mov	a,#__str_41
   0A48 C0 E0              2760 	push	acc
   0A4A 74s05              2761 	mov	a,#(__str_41 >> 8)
   0A4C C0 E0              2762 	push	acc
   0A4E 74 80              2763 	mov	a,#0x80
   0A50 C0 E0              2764 	push	acc
                           2765 ;	genCall
   0A52 12s00r00           2766 	lcall	_printf
   0A55 15 81              2767 	dec	sp
   0A57 15 81              2768 	dec	sp
   0A59 15 81              2769 	dec	sp
                           2770 ;	main.c:351: printf("\r\nPress 'L' to display EEPROM data on LCD");
                           2771 ;	genIpush
   0A5B 74r49              2772 	mov	a,#__str_42
   0A5D C0 E0              2773 	push	acc
   0A5F 74s05              2774 	mov	a,#(__str_42 >> 8)
   0A61 C0 E0              2775 	push	acc
   0A63 74 80              2776 	mov	a,#0x80
   0A65 C0 E0              2777 	push	acc
                           2778 ;	genCall
   0A67 12s00r00           2779 	lcall	_printf
   0A6A 15 81              2780 	dec	sp
   0A6C 15 81              2781 	dec	sp
   0A6E 15 81              2782 	dec	sp
                           2783 ;	main.c:352: printf("\r\nPress 'D' to do a Hex Dump of EEPROM");
                           2784 ;	genIpush
   0A70 74r73              2785 	mov	a,#__str_43
   0A72 C0 E0              2786 	push	acc
   0A74 74s05              2787 	mov	a,#(__str_43 >> 8)
   0A76 C0 E0              2788 	push	acc
   0A78 74 80              2789 	mov	a,#0x80
   0A7A C0 E0              2790 	push	acc
                           2791 ;	genCall
   0A7C 12s00r00           2792 	lcall	_printf
   0A7F 15 81              2793 	dec	sp
   0A81 15 81              2794 	dec	sp
   0A83 15 81              2795 	dec	sp
                           2796 ;	main.c:353: printf("\r\nPress 'Y' to perform an EEPROM software reset");
                           2797 ;	genIpush
   0A85 74r9A              2798 	mov	a,#__str_44
   0A87 C0 E0              2799 	push	acc
   0A89 74s05              2800 	mov	a,#(__str_44 >> 8)
   0A8B C0 E0              2801 	push	acc
   0A8D 74 80              2802 	mov	a,#0x80
   0A8F C0 E0              2803 	push	acc
                           2804 ;	genCall
   0A91 12s00r00           2805 	lcall	_printf
   0A94 15 81              2806 	dec	sp
   0A96 15 81              2807 	dec	sp
   0A98 15 81              2808 	dec	sp
                           2809 ;	main.c:354: printf("\r\nPress 'r' to return to main menu\r\n");
                           2810 ;	genIpush
   0A9A 74r32              2811 	mov	a,#__str_8
   0A9C C0 E0              2812 	push	acc
   0A9E 74s01              2813 	mov	a,#(__str_8 >> 8)
   0AA0 C0 E0              2814 	push	acc
   0AA2 74 80              2815 	mov	a,#0x80
   0AA4 C0 E0              2816 	push	acc
                           2817 ;	genCall
   0AA6 12s00r00           2818 	lcall	_printf
   0AA9 15 81              2819 	dec	sp
   0AAB 15 81              2820 	dec	sp
   0AAD 15 81              2821 	dec	sp
                           2822 ;	Peephole 300	removed redundant label 00101$
   0AAF 22                 2823 	ret
                           2824 ;------------------------------------------------------------
                           2825 ;Allocation info for local variables in function 'handleEEPROMMode'
                           2826 ;------------------------------------------------------------
                           2827 ;c                         Allocated with name '_handleEEPROMMode_c_1_1'
                           2828 ;block                     Allocated with name '_handleEEPROMMode_block_1_1'
                           2829 ;end_block                 Allocated with name '_handleEEPROMMode_end_block_1_1'
                           2830 ;address                   Allocated with name '_handleEEPROMMode_address_1_1'
                           2831 ;end_address               Allocated with name '_handleEEPROMMode_end_address_1_1'
                           2832 ;i                         Allocated with name '_handleEEPROMMode_i_1_1'
                           2833 ;lcdData                   Allocated with name '_handleEEPROMMode_lcdData_1_1'
                           2834 ;Lcd_row                   Allocated with name '_handleEEPROMMode_Lcd_row_1_1'
                           2835 ;start_addr                Allocated with name '_handleEEPROMMode_start_addr_1_1'
                           2836 ;end_addr                  Allocated with name '_handleEEPROMMode_end_addr_1_1'
                           2837 ;------------------------------------------------------------
                           2838 ;	main.c:357: void handleEEPROMMode(char c){
                           2839 ;	-----------------------------------------
                           2840 ;	 function handleEEPROMMode
                           2841 ;	-----------------------------------------
   0AB0                    2842 _handleEEPROMMode:
                           2843 ;	genReceive
   0AB0 E5 82              2844 	mov	a,dpl
   0AB2 90s00r74           2845 	mov	dptr,#_handleEEPROMMode_c_1_1
   0AB5 F0                 2846 	movx	@dptr,a
                           2847 ;	main.c:367: switch(c){
                           2848 ;	genAssign
   0AB6 90s00r74           2849 	mov	dptr,#_handleEEPROMMode_c_1_1
   0AB9 E0                 2850 	movx	a,@dptr
   0ABA FA                 2851 	mov	r2,a
                           2852 ;	genCmpEq
                           2853 ;	gencjneshort
   0ABB BA 44 03           2854 	cjne	r2,#0x44,00137$
   0ABE 02s0Cr94           2855 	ljmp	00104$
   0AC1                    2856 00137$:
                           2857 ;	genCmpEq
                           2858 ;	gencjneshort
   0AC1 BA 48 03           2859 	cjne	r2,#0x48,00138$
   0AC4 02s0Er87           2860 	ljmp	00118$
   0AC7                    2861 00138$:
                           2862 ;	genCmpEq
                           2863 ;	gencjneshort
   0AC7 BA 4C 03           2864 	cjne	r2,#0x4C,00139$
   0ACA 02s0BrED           2865 	ljmp	00103$
   0ACD                    2866 00139$:
                           2867 ;	genCmpEq
                           2868 ;	gencjneshort
   0ACD BA 52 03           2869 	cjne	r2,#0x52,00140$
   0AD0 02s0Br7A           2870 	ljmp	00102$
   0AD3                    2871 00140$:
                           2872 ;	genCmpEq
                           2873 ;	gencjneshort
   0AD3 BA 57 02           2874 	cjne	r2,#0x57,00141$
                           2875 ;	Peephole 112.b	changed ljmp to sjmp
   0AD6 80 0D              2876 	sjmp	00101$
   0AD8                    2877 00141$:
                           2878 ;	genCmpEq
                           2879 ;	gencjneshort
   0AD8 BA 59 03           2880 	cjne	r2,#0x59,00142$
   0ADB 02s0Er67           2881 	ljmp	00116$
   0ADE                    2882 00142$:
                           2883 ;	genCmpEq
                           2884 ;	gencjneshort
   0ADE BA 72 03           2885 	cjne	r2,#0x72,00143$
   0AE1 02s0Er7F           2886 	ljmp	00117$
   0AE4                    2887 00143$:
                           2888 ;	Peephole 251.a	replaced ljmp to ret with ret
   0AE4 22                 2889 	ret
                           2890 ;	main.c:368: case 'W':
   0AE5                    2891 00101$:
                           2892 ;	main.c:369: printf("\r\nWriting to EEPROM...");
                           2893 ;	genIpush
   0AE5 74rCA              2894 	mov	a,#__str_45
   0AE7 C0 E0              2895 	push	acc
   0AE9 74s05              2896 	mov	a,#(__str_45 >> 8)
   0AEB C0 E0              2897 	push	acc
   0AED 74 80              2898 	mov	a,#0x80
   0AEF C0 E0              2899 	push	acc
                           2900 ;	genCall
   0AF1 12s00r00           2901 	lcall	_printf
   0AF4 15 81              2902 	dec	sp
   0AF6 15 81              2903 	dec	sp
   0AF8 15 81              2904 	dec	sp
                           2905 ;	main.c:370: getBlockAndAddress(&address, &block);
                           2906 ;	genCast
   0AFA 90s00r00           2907 	mov	dptr,#_getBlockAndAddress_PARM_2
   0AFD 74r75              2908 	mov	a,#_handleEEPROMMode_block_1_1
   0AFF F0                 2909 	movx	@dptr,a
   0B00 A3                 2910 	inc	dptr
   0B01 74s00              2911 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0B03 F0                 2912 	movx	@dptr,a
   0B04 A3                 2913 	inc	dptr
   0B05 74 00              2914 	mov	a,#0x0
   0B07 F0                 2915 	movx	@dptr,a
                           2916 ;	genCall
                           2917 ;	Peephole 182.a	used 16 bit load of DPTR
   0B08 90s00r77           2918 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B0B 75 F0 00           2919 	mov	b,#0x00
   0B0E 12s00r0C           2920 	lcall	_getBlockAndAddress
                           2921 ;	main.c:371: printf("\r\nEnter a byte of data to write to EEPROM:");
                           2922 ;	genIpush
   0B11 74rE1              2923 	mov	a,#__str_46
   0B13 C0 E0              2924 	push	acc
   0B15 74s05              2925 	mov	a,#(__str_46 >> 8)
   0B17 C0 E0              2926 	push	acc
   0B19 74 80              2927 	mov	a,#0x80
   0B1B C0 E0              2928 	push	acc
                           2929 ;	genCall
   0B1D 12s00r00           2930 	lcall	_printf
   0B20 15 81              2931 	dec	sp
   0B22 15 81              2932 	dec	sp
   0B24 15 81              2933 	dec	sp
                           2934 ;	main.c:372: lcdData = Serial_GetHex();
                           2935 ;	genCall
   0B26 12s00r00           2936 	lcall	_Serial_GetHex
   0B29 AA 82              2937 	mov	r2,dpl
                           2938 ;	main.c:373: EPROM_ByteWrite(lcdData, address, block);
                           2939 ;	genAssign
   0B2B 90s00r77           2940 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B2E E0                 2941 	movx	a,@dptr
   0B2F FB                 2942 	mov	r3,a
                           2943 ;	genAssign
   0B30 90s00r75           2944 	mov	dptr,#_handleEEPROMMode_block_1_1
   0B33 E0                 2945 	movx	a,@dptr
   0B34 FC                 2946 	mov	r4,a
                           2947 ;	genAssign
   0B35 90s00r00           2948 	mov	dptr,#_EPROM_ByteWrite_PARM_2
   0B38 EB                 2949 	mov	a,r3
   0B39 F0                 2950 	movx	@dptr,a
                           2951 ;	genAssign
   0B3A 90s00r00           2952 	mov	dptr,#_EPROM_ByteWrite_PARM_3
   0B3D EC                 2953 	mov	a,r4
   0B3E F0                 2954 	movx	@dptr,a
                           2955 ;	genCall
   0B3F 8A 82              2956 	mov	dpl,r2
   0B41 C0 02              2957 	push	ar2
   0B43 12s00r00           2958 	lcall	_EPROM_ByteWrite
   0B46 D0 02              2959 	pop	ar2
                           2960 ;	main.c:374: printf("\r\nWrote %X to block %d address 0x%X in EEPROM!\r\n", lcdData, block, address);
                           2961 ;	genAssign
   0B48 90s00r77           2962 	mov	dptr,#_handleEEPROMMode_address_1_1
   0B4B E0                 2963 	movx	a,@dptr
   0B4C FB                 2964 	mov	r3,a
                           2965 ;	genCast
   0B4D 7C 00              2966 	mov	r4,#0x00
                           2967 ;	genAssign
   0B4F 90s00r75           2968 	mov	dptr,#_handleEEPROMMode_block_1_1
   0B52 E0                 2969 	movx	a,@dptr
   0B53 FD                 2970 	mov	r5,a
                           2971 ;	genCast
   0B54 7E 00              2972 	mov	r6,#0x00
                           2973 ;	genCast
   0B56 7F 00              2974 	mov	r7,#0x00
                           2975 ;	genIpush
   0B58 C0 03              2976 	push	ar3
   0B5A C0 04              2977 	push	ar4
                           2978 ;	genIpush
   0B5C C0 05              2979 	push	ar5
   0B5E C0 06              2980 	push	ar6
                           2981 ;	genIpush
   0B60 C0 02              2982 	push	ar2
   0B62 C0 07              2983 	push	ar7
                           2984 ;	genIpush
   0B64 74r0C              2985 	mov	a,#__str_47
   0B66 C0 E0              2986 	push	acc
   0B68 74s06              2987 	mov	a,#(__str_47 >> 8)
   0B6A C0 E0              2988 	push	acc
   0B6C 74 80              2989 	mov	a,#0x80
   0B6E C0 E0              2990 	push	acc
                           2991 ;	genCall
   0B70 12s00r00           2992 	lcall	_printf
   0B73 E5 81              2993 	mov	a,sp
   0B75 24 F7              2994 	add	a,#0xf7
   0B77 F5 81              2995 	mov	sp,a
                           2996 ;	main.c:375: break;
                           2997 ;	Peephole 251.a	replaced ljmp to ret with ret
   0B79 22                 2998 	ret
                           2999 ;	main.c:376: case 'R':
   0B7A                    3000 00102$:
                           3001 ;	main.c:377: printf("\r\nReading from EEPROM...");
                           3002 ;	genIpush
   0B7A 74r3D              3003 	mov	a,#__str_48
   0B7C C0 E0              3004 	push	acc
   0B7E 74s06              3005 	mov	a,#(__str_48 >> 8)
   0B80 C0 E0              3006 	push	acc
   0B82 74 80              3007 	mov	a,#0x80
   0B84 C0 E0              3008 	push	acc
                           3009 ;	genCall
   0B86 12s00r00           3010 	lcall	_printf
   0B89 15 81              3011 	dec	sp
   0B8B 15 81              3012 	dec	sp
   0B8D 15 81              3013 	dec	sp
                           3014 ;	main.c:378: getBlockAndAddress(&address, &block);
                           3015 ;	genCast
   0B8F 90s00r00           3016 	mov	dptr,#_getBlockAndAddress_PARM_2
   0B92 74r75              3017 	mov	a,#_handleEEPROMMode_block_1_1
   0B94 F0                 3018 	movx	@dptr,a
   0B95 A3                 3019 	inc	dptr
   0B96 74s00              3020 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0B98 F0                 3021 	movx	@dptr,a
   0B99 A3                 3022 	inc	dptr
   0B9A 74 00              3023 	mov	a,#0x0
   0B9C F0                 3024 	movx	@dptr,a
                           3025 ;	genCall
                           3026 ;	Peephole 182.a	used 16 bit load of DPTR
   0B9D 90s00r77           3027 	mov	dptr,#_handleEEPROMMode_address_1_1
   0BA0 75 F0 00           3028 	mov	b,#0x00
   0BA3 12s00r0C           3029 	lcall	_getBlockAndAddress
                           3030 ;	main.c:380: lcdData = EPROM_ByteRead(address, block);
                           3031 ;	genAssign
   0BA6 90s00r77           3032 	mov	dptr,#_handleEEPROMMode_address_1_1
   0BA9 E0                 3033 	movx	a,@dptr
   0BAA FA                 3034 	mov	r2,a
                           3035 ;	genAssign
   0BAB 90s00r75           3036 	mov	dptr,#_handleEEPROMMode_block_1_1
   0BAE E0                 3037 	movx	a,@dptr
                           3038 ;	genAssign
   0BAF FB                 3039 	mov	r3,a
   0BB0 90s00r00           3040 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           3041 ;	Peephole 100	removed redundant mov
   0BB3 F0                 3042 	movx	@dptr,a
                           3043 ;	genCall
   0BB4 8A 82              3044 	mov	dpl,r2
   0BB6 12s00r00           3045 	lcall	_EPROM_ByteRead
   0BB9 AA 82              3046 	mov	r2,dpl
                           3047 ;	main.c:381: printf("\r\nRead %X from block %d address 0x%X\r\n", lcdData, block, address);
                           3048 ;	genAssign
   0BBB 90s00r77           3049 	mov	dptr,#_handleEEPROMMode_address_1_1
   0BBE E0                 3050 	movx	a,@dptr
   0BBF FB                 3051 	mov	r3,a
                           3052 ;	genCast
   0BC0 7C 00              3053 	mov	r4,#0x00
                           3054 ;	genAssign
   0BC2 90s00r75           3055 	mov	dptr,#_handleEEPROMMode_block_1_1
   0BC5 E0                 3056 	movx	a,@dptr
   0BC6 FD                 3057 	mov	r5,a
                           3058 ;	genCast
   0BC7 7E 00              3059 	mov	r6,#0x00
                           3060 ;	genCast
   0BC9 7F 00              3061 	mov	r7,#0x00
                           3062 ;	genIpush
   0BCB C0 03              3063 	push	ar3
   0BCD C0 04              3064 	push	ar4
                           3065 ;	genIpush
   0BCF C0 05              3066 	push	ar5
   0BD1 C0 06              3067 	push	ar6
                           3068 ;	genIpush
   0BD3 C0 02              3069 	push	ar2
   0BD5 C0 07              3070 	push	ar7
                           3071 ;	genIpush
   0BD7 74r56              3072 	mov	a,#__str_49
   0BD9 C0 E0              3073 	push	acc
   0BDB 74s06              3074 	mov	a,#(__str_49 >> 8)
   0BDD C0 E0              3075 	push	acc
   0BDF 74 80              3076 	mov	a,#0x80
   0BE1 C0 E0              3077 	push	acc
                           3078 ;	genCall
   0BE3 12s00r00           3079 	lcall	_printf
   0BE6 E5 81              3080 	mov	a,sp
   0BE8 24 F7              3081 	add	a,#0xf7
   0BEA F5 81              3082 	mov	sp,a
                           3083 ;	main.c:382: break;
                           3084 ;	Peephole 251.a	replaced ljmp to ret with ret
   0BEC 22                 3085 	ret
                           3086 ;	main.c:383: case 'L':
   0BED                    3087 00103$:
                           3088 ;	main.c:384: getBlockAndAddress(&address, &block);
                           3089 ;	genCast
   0BED 90s00r00           3090 	mov	dptr,#_getBlockAndAddress_PARM_2
   0BF0 74r75              3091 	mov	a,#_handleEEPROMMode_block_1_1
   0BF2 F0                 3092 	movx	@dptr,a
   0BF3 A3                 3093 	inc	dptr
   0BF4 74s00              3094 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0BF6 F0                 3095 	movx	@dptr,a
   0BF7 A3                 3096 	inc	dptr
   0BF8 74 00              3097 	mov	a,#0x0
   0BFA F0                 3098 	movx	@dptr,a
                           3099 ;	genCall
                           3100 ;	Peephole 182.a	used 16 bit load of DPTR
   0BFB 90s00r77           3101 	mov	dptr,#_handleEEPROMMode_address_1_1
   0BFE 75 F0 00           3102 	mov	b,#0x00
   0C01 12s00r0C           3103 	lcall	_getBlockAndAddress
                           3104 ;	main.c:386: lcdData = EPROM_ByteRead(address, block);
                           3105 ;	genAssign
   0C04 90s00r77           3106 	mov	dptr,#_handleEEPROMMode_address_1_1
   0C07 E0                 3107 	movx	a,@dptr
   0C08 FA                 3108 	mov	r2,a
                           3109 ;	genAssign
   0C09 90s00r75           3110 	mov	dptr,#_handleEEPROMMode_block_1_1
   0C0C E0                 3111 	movx	a,@dptr
                           3112 ;	genAssign
   0C0D FB                 3113 	mov	r3,a
   0C0E 90s00r00           3114 	mov	dptr,#_EPROM_ByteRead_PARM_2
                           3115 ;	Peephole 100	removed redundant mov
   0C11 F0                 3116 	movx	@dptr,a
                           3117 ;	genCall
   0C12 8A 82              3118 	mov	dpl,r2
   0C14 12s00r00           3119 	lcall	_EPROM_ByteRead
   0C17 AA 82              3120 	mov	r2,dpl
                           3121 ;	main.c:388: printf("\r\nEnter LCD row from 0-3:");
                           3122 ;	genIpush
   0C19 C0 02              3123 	push	ar2
   0C1B 74r7D              3124 	mov	a,#__str_50
   0C1D C0 E0              3125 	push	acc
   0C1F 74s06              3126 	mov	a,#(__str_50 >> 8)
   0C21 C0 E0              3127 	push	acc
   0C23 74 80              3128 	mov	a,#0x80
   0C25 C0 E0              3129 	push	acc
                           3130 ;	genCall
   0C27 12s00r00           3131 	lcall	_printf
   0C2A 15 81              3132 	dec	sp
   0C2C 15 81              3133 	dec	sp
   0C2E 15 81              3134 	dec	sp
   0C30 D0 02              3135 	pop	ar2
                           3136 ;	main.c:389: Lcd_row = Serial_GetInteger(1);
                           3137 ;	genCall
                           3138 ;	Peephole 182.b	used 16 bit load of dptr
   0C32 90 00 01           3139 	mov	dptr,#0x0001
   0C35 C0 02              3140 	push	ar2
   0C37 12s00r00           3141 	lcall	_Serial_GetInteger
   0C3A AB 82              3142 	mov	r3,dpl
   0C3C AC 83              3143 	mov	r4,dph
   0C3E D0 02              3144 	pop	ar2
                           3145 ;	genCast
                           3146 ;	main.c:391: LCD_gotoxy(Lcd_row, 0);
                           3147 ;	genAssign
   0C40 90s00r00           3148 	mov	dptr,#_LCD_gotoxy_PARM_2
                           3149 ;	Peephole 181	changed mov to clr
   0C43 E4                 3150 	clr	a
   0C44 F0                 3151 	movx	@dptr,a
                           3152 ;	genCall
   0C45 8B 82              3153 	mov	dpl,r3
   0C47 C0 02              3154 	push	ar2
   0C49 12s00r00           3155 	lcall	_LCD_gotoxy
   0C4C D0 02              3156 	pop	ar2
                           3157 ;	main.c:392: LCD_Putch(block + '0');
                           3158 ;	genAssign
   0C4E 90s00r75           3159 	mov	dptr,#_handleEEPROMMode_block_1_1
   0C51 E0                 3160 	movx	a,@dptr
                           3161 ;	genPlus
                           3162 ;     genPlusIncr
                           3163 ;	Peephole 236.a	used r3 instead of ar3
                           3164 ;	Peephole 214	reduced some extra moves
                           3165 ;	genCall
                           3166 ;	Peephole 215	removed some moves
   0C52 24 30              3167 	add	a,#0x30
   0C54 FB                 3168 	mov	r3,a
                           3169 ;	Peephole 244.c	loading dpl from a instead of r3
   0C55 F5 82              3170 	mov	dpl,a
   0C57 C0 02              3171 	push	ar2
   0C59 12s00r00           3172 	lcall	_LCD_Putch
   0C5C D0 02              3173 	pop	ar2
                           3174 ;	main.c:393: LCD_Puthex(address);
                           3175 ;	genAssign
   0C5E 90s00r77           3176 	mov	dptr,#_handleEEPROMMode_address_1_1
   0C61 E0                 3177 	movx	a,@dptr
                           3178 ;	genCall
   0C62 FB                 3179 	mov	r3,a
                           3180 ;	Peephole 244.c	loading dpl from a instead of r3
   0C63 F5 82              3181 	mov	dpl,a
   0C65 C0 02              3182 	push	ar2
   0C67 12s00r00           3183 	lcall	_LCD_Puthex
   0C6A D0 02              3184 	pop	ar2
                           3185 ;	main.c:394: LCD_Putstr(": ");
                           3186 ;	genCall
                           3187 ;	Peephole 182.a	used 16 bit load of DPTR
   0C6C 90s06r97           3188 	mov	dptr,#__str_51
   0C6F 75 F0 80           3189 	mov	b,#0x80
   0C72 C0 02              3190 	push	ar2
   0C74 12s00r00           3191 	lcall	_LCD_Putstr
   0C77 D0 02              3192 	pop	ar2
                           3193 ;	main.c:395: LCD_Puthex(lcdData);
                           3194 ;	genCall
   0C79 8A 82              3195 	mov	dpl,r2
   0C7B 12s00r00           3196 	lcall	_LCD_Puthex
                           3197 ;	main.c:397: printf("\r\nWrote to LCD!\r\n");
                           3198 ;	genIpush
   0C7E 74r9A              3199 	mov	a,#__str_52
   0C80 C0 E0              3200 	push	acc
   0C82 74s06              3201 	mov	a,#(__str_52 >> 8)
   0C84 C0 E0              3202 	push	acc
   0C86 74 80              3203 	mov	a,#0x80
   0C88 C0 E0              3204 	push	acc
                           3205 ;	genCall
   0C8A 12s00r00           3206 	lcall	_printf
   0C8D 15 81              3207 	dec	sp
   0C8F 15 81              3208 	dec	sp
   0C91 15 81              3209 	dec	sp
                           3210 ;	main.c:398: break;
                           3211 ;	Peephole 251.a	replaced ljmp to ret with ret
   0C93 22                 3212 	ret
                           3213 ;	main.c:400: case 'D':
   0C94                    3214 00104$:
                           3215 ;	main.c:401: printf("\r\nPerforming an EEPROM data dump\r\n");
                           3216 ;	genIpush
   0C94 74rAC              3217 	mov	a,#__str_53
   0C96 C0 E0              3218 	push	acc
   0C98 74s06              3219 	mov	a,#(__str_53 >> 8)
   0C9A C0 E0              3220 	push	acc
   0C9C 74 80              3221 	mov	a,#0x80
   0C9E C0 E0              3222 	push	acc
                           3223 ;	genCall
   0CA0 12s00r00           3224 	lcall	_printf
   0CA3 15 81              3225 	dec	sp
   0CA5 15 81              3226 	dec	sp
   0CA7 15 81              3227 	dec	sp
                           3228 ;	main.c:402: printf("\r\nEnter the starting block and address");
                           3229 ;	genIpush
   0CA9 74rCF              3230 	mov	a,#__str_54
   0CAB C0 E0              3231 	push	acc
   0CAD 74s06              3232 	mov	a,#(__str_54 >> 8)
   0CAF C0 E0              3233 	push	acc
   0CB1 74 80              3234 	mov	a,#0x80
   0CB3 C0 E0              3235 	push	acc
                           3236 ;	genCall
   0CB5 12s00r00           3237 	lcall	_printf
   0CB8 15 81              3238 	dec	sp
   0CBA 15 81              3239 	dec	sp
   0CBC 15 81              3240 	dec	sp
                           3241 ;	main.c:403: getBlockAndAddress(&address, &block);
                           3242 ;	genCast
   0CBE 90s00r00           3243 	mov	dptr,#_getBlockAndAddress_PARM_2
   0CC1 74r75              3244 	mov	a,#_handleEEPROMMode_block_1_1
   0CC3 F0                 3245 	movx	@dptr,a
   0CC4 A3                 3246 	inc	dptr
   0CC5 74s00              3247 	mov	a,#(_handleEEPROMMode_block_1_1 >> 8)
   0CC7 F0                 3248 	movx	@dptr,a
   0CC8 A3                 3249 	inc	dptr
   0CC9 74 00              3250 	mov	a,#0x0
   0CCB F0                 3251 	movx	@dptr,a
                           3252 ;	genCall
                           3253 ;	Peephole 182.a	used 16 bit load of DPTR
   0CCC 90s00r77           3254 	mov	dptr,#_handleEEPROMMode_address_1_1
   0CCF 75 F0 00           3255 	mov	b,#0x00
   0CD2 12s00r0C           3256 	lcall	_getBlockAndAddress
                           3257 ;	main.c:404: printf("\r\nEnter the ending block and address");
                           3258 ;	genIpush
   0CD5 74rF6              3259 	mov	a,#__str_55
   0CD7 C0 E0              3260 	push	acc
   0CD9 74s06              3261 	mov	a,#(__str_55 >> 8)
   0CDB C0 E0              3262 	push	acc
   0CDD 74 80              3263 	mov	a,#0x80
   0CDF C0 E0              3264 	push	acc
                           3265 ;	genCall
   0CE1 12s00r00           3266 	lcall	_printf
   0CE4 15 81              3267 	dec	sp
   0CE6 15 81              3268 	dec	sp
   0CE8 15 81              3269 	dec	sp
                           3270 ;	main.c:405: getBlockAndAddress(&end_address, &end_block);
                           3271 ;	genCast
   0CEA 90s00r00           3272 	mov	dptr,#_getBlockAndAddress_PARM_2
   0CED 74r76              3273 	mov	a,#_handleEEPROMMode_end_block_1_1
   0CEF F0                 3274 	movx	@dptr,a
   0CF0 A3                 3275 	inc	dptr
   0CF1 74s00              3276 	mov	a,#(_handleEEPROMMode_end_block_1_1 >> 8)
   0CF3 F0                 3277 	movx	@dptr,a
   0CF4 A3                 3278 	inc	dptr
   0CF5 74 00              3279 	mov	a,#0x0
   0CF7 F0                 3280 	movx	@dptr,a
                           3281 ;	genCall
                           3282 ;	Peephole 182.a	used 16 bit load of DPTR
   0CF8 90s00r78           3283 	mov	dptr,#_handleEEPROMMode_end_address_1_1
   0CFB 75 F0 00           3284 	mov	b,#0x00
   0CFE 12s00r0C           3285 	lcall	_getBlockAndAddress
                           3286 ;	main.c:406: start_addr =( block << 8) | address;
                           3287 ;	genAssign
   0D01 90s00r75           3288 	mov	dptr,#_handleEEPROMMode_block_1_1
   0D04 E0                 3289 	movx	a,@dptr
   0D05 FA                 3290 	mov	r2,a
                           3291 ;	genCast
                           3292 ;	genLeftShift
                           3293 ;	genLeftShiftLiteral
                           3294 ;	genlshTwo
                           3295 ;	peephole 177.e	removed redundant move
   0D06 8A 03              3296 	mov	ar3,r2
   0D08 7A 00              3297 	mov	r2,#0x00
                           3298 ;	genAssign
   0D0A 90s00r77           3299 	mov	dptr,#_handleEEPROMMode_address_1_1
   0D0D E0                 3300 	movx	a,@dptr
                           3301 ;	genCast
                           3302 ;	genOr
   0D0E FC                 3303 	mov	r4,a
   0D0F 7D 00              3304 	mov	r5,#0x00
                           3305 ;	Peephole 177.d	removed redundant move
   0D11 42 02              3306 	orl	ar2,a
   0D13 ED                 3307 	mov	a,r5
   0D14 42 03              3308 	orl	ar3,a
                           3309 ;	genAssign
   0D16 90s00r79           3310 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0D19 EA                 3311 	mov	a,r2
   0D1A F0                 3312 	movx	@dptr,a
   0D1B A3                 3313 	inc	dptr
   0D1C EB                 3314 	mov	a,r3
   0D1D F0                 3315 	movx	@dptr,a
                           3316 ;	main.c:407: end_addr = (end_block << 8) | end_address;
                           3317 ;	genAssign
   0D1E 90s00r76           3318 	mov	dptr,#_handleEEPROMMode_end_block_1_1
   0D21 E0                 3319 	movx	a,@dptr
   0D22 FC                 3320 	mov	r4,a
                           3321 ;	genCast
                           3322 ;	genLeftShift
                           3323 ;	genLeftShiftLiteral
                           3324 ;	genlshTwo
                           3325 ;	peephole 177.e	removed redundant move
   0D23 8C 05              3326 	mov	ar5,r4
   0D25 7C 00              3327 	mov	r4,#0x00
                           3328 ;	genAssign
   0D27 90s00r78           3329 	mov	dptr,#_handleEEPROMMode_end_address_1_1
   0D2A E0                 3330 	movx	a,@dptr
                           3331 ;	genCast
                           3332 ;	genOr
   0D2B FE                 3333 	mov	r6,a
   0D2C 7F 00              3334 	mov	r7,#0x00
                           3335 ;	Peephole 177.d	removed redundant move
   0D2E 42 04              3336 	orl	ar4,a
   0D30 EF                 3337 	mov	a,r7
   0D31 42 05              3338 	orl	ar5,a
                           3339 ;	genAssign
   0D33 90s00r7B           3340 	mov	dptr,#_handleEEPROMMode_end_addr_1_1
   0D36 EC                 3341 	mov	a,r4
   0D37 F0                 3342 	movx	@dptr,a
   0D38 A3                 3343 	inc	dptr
   0D39 ED                 3344 	mov	a,r5
   0D3A F0                 3345 	movx	@dptr,a
                           3346 ;	main.c:408: if (start_addr > end_addr){
                           3347 ;	genAssign
                           3348 ;	genAssign
                           3349 ;	genCmpGt
                           3350 ;	genCmp
   0D3B C3                 3351 	clr	c
   0D3C EC                 3352 	mov	a,r4
   0D3D 9A                 3353 	subb	a,r2
   0D3E ED                 3354 	mov	a,r5
   0D3F 9B                 3355 	subb	a,r3
                           3356 ;	genIfxJump
                           3357 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0D40 50 16              3358 	jnc	00106$
                           3359 ;	Peephole 300	removed redundant label 00144$
                           3360 ;	main.c:409: printf("\r\nInvalid addresses. End address must be after start address");
                           3361 ;	genIpush
   0D42 74r1B              3362 	mov	a,#__str_56
   0D44 C0 E0              3363 	push	acc
   0D46 74s07              3364 	mov	a,#(__str_56 >> 8)
   0D48 C0 E0              3365 	push	acc
   0D4A 74 80              3366 	mov	a,#0x80
   0D4C C0 E0              3367 	push	acc
                           3368 ;	genCall
   0D4E 12s00r00           3369 	lcall	_printf
   0D51 15 81              3370 	dec	sp
   0D53 15 81              3371 	dec	sp
   0D55 15 81              3372 	dec	sp
                           3373 ;	main.c:410: return;
                           3374 ;	genRet
                           3375 ;	Peephole 251.a	replaced ljmp to ret with ret
   0D57 22                 3376 	ret
   0D58                    3377 00106$:
                           3378 ;	main.c:412: printf("\r\n");
                           3379 ;	genIpush
   0D58 74rDF              3380 	mov	a,#__str_36
   0D5A C0 E0              3381 	push	acc
   0D5C 74s04              3382 	mov	a,#(__str_36 >> 8)
   0D5E C0 E0              3383 	push	acc
   0D60 74 80              3384 	mov	a,#0x80
   0D62 C0 E0              3385 	push	acc
                           3386 ;	genCall
   0D64 12s00r00           3387 	lcall	_printf
   0D67 15 81              3388 	dec	sp
   0D69 15 81              3389 	dec	sp
   0D6B 15 81              3390 	dec	sp
                           3391 ;	main.c:413: while(start_addr <= end_addr){
                           3392 ;	genAssign
   0D6D 90s00r7B           3393 	mov	dptr,#_handleEEPROMMode_end_addr_1_1
   0D70 E0                 3394 	movx	a,@dptr
   0D71 FA                 3395 	mov	r2,a
   0D72 A3                 3396 	inc	dptr
   0D73 E0                 3397 	movx	a,@dptr
   0D74 FB                 3398 	mov	r3,a
                           3399 ;	genAssign
   0D75 8A 04              3400 	mov	ar4,r2
   0D77 8B 05              3401 	mov	ar5,r3
   0D79                    3402 00113$:
                           3403 ;	genAssign
   0D79 90s00r79           3404 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0D7C E0                 3405 	movx	a,@dptr
   0D7D FE                 3406 	mov	r6,a
   0D7E A3                 3407 	inc	dptr
   0D7F E0                 3408 	movx	a,@dptr
   0D80 FF                 3409 	mov	r7,a
                           3410 ;	genCmpGt
                           3411 ;	genCmp
   0D81 C3                 3412 	clr	c
   0D82 EC                 3413 	mov	a,r4
   0D83 9E                 3414 	subb	a,r6
   0D84 ED                 3415 	mov	a,r5
   0D85 9F                 3416 	subb	a,r7
                           3417 ;	genIfxJump
   0D86 50 01              3418 	jnc	00145$
                           3419 ;	Peephole 251.a	replaced ljmp to ret with ret
   0D88 22                 3420 	ret
   0D89                    3421 00145$:
                           3422 ;	main.c:414: printf("%x: ", start_addr);
                           3423 ;	genIpush
   0D89 C0 02              3424 	push	ar2
   0D8B C0 03              3425 	push	ar3
   0D8D C0 04              3426 	push	ar4
   0D8F C0 05              3427 	push	ar5
   0D91 C0 06              3428 	push	ar6
   0D93 C0 07              3429 	push	ar7
   0D95 C0 06              3430 	push	ar6
   0D97 C0 07              3431 	push	ar7
                           3432 ;	genIpush
   0D99 74rE2              3433 	mov	a,#__str_37
   0D9B C0 E0              3434 	push	acc
   0D9D 74s04              3435 	mov	a,#(__str_37 >> 8)
   0D9F C0 E0              3436 	push	acc
   0DA1 74 80              3437 	mov	a,#0x80
   0DA3 C0 E0              3438 	push	acc
                           3439 ;	genCall
   0DA5 12s00r00           3440 	lcall	_printf
   0DA8 E5 81              3441 	mov	a,sp
   0DAA 24 FB              3442 	add	a,#0xfb
   0DAC F5 81              3443 	mov	sp,a
   0DAE D0 07              3444 	pop	ar7
   0DB0 D0 06              3445 	pop	ar6
   0DB2 D0 05              3446 	pop	ar5
   0DB4 D0 04              3447 	pop	ar4
   0DB6 D0 03              3448 	pop	ar3
   0DB8 D0 02              3449 	pop	ar2
                           3450 ;	main.c:416: for (i = 0; i < 16; ++i){
                           3451 ;	genAssign
                           3452 ;	genAssign
   0DBA 78 00              3453 	mov	r0,#0x00
   0DBC                    3454 00109$:
                           3455 ;	genCmpLt
                           3456 ;	genCmp
   0DBC B8 10 00           3457 	cjne	r0,#0x10,00146$
   0DBF                    3458 00146$:
                           3459 ;	genIfxJump
                           3460 ;	Peephole 112.b	changed ljmp to sjmp
                           3461 ;	Peephole 160.b	removed sjmp by inverse jump logic
   0DBF 50 76              3462 	jnc	00136$
                           3463 ;	Peephole 300	removed redundant label 00147$
                           3464 ;	main.c:417: lcdData = EPROM_ByteRead(start_addr & 0xFF, start_addr >> 8);
                           3465 ;	genIpush
   0DC1 C0 04              3466 	push	ar4
   0DC3 C0 05              3467 	push	ar5
                           3468 ;	genAnd
   0DC5 8E 01              3469 	mov	ar1,r6
   0DC7 7C 00              3470 	mov	r4,#0x00
                           3471 ;	genCast
                           3472 ;	genGetByte
   0DC9 90s00r00           3473 	mov	dptr,#_EPROM_ByteRead_PARM_2
   0DCC EF                 3474 	mov	a,r7
   0DCD F0                 3475 	movx	@dptr,a
                           3476 ;	genCall
   0DCE 89 82              3477 	mov	dpl,r1
   0DD0 C0 02              3478 	push	ar2
   0DD2 C0 03              3479 	push	ar3
   0DD4 C0 05              3480 	push	ar5
   0DD6 C0 06              3481 	push	ar6
   0DD8 C0 07              3482 	push	ar7
   0DDA C0 00              3483 	push	ar0
   0DDC 12s00r00           3484 	lcall	_EPROM_ByteRead
   0DDF AC 82              3485 	mov	r4,dpl
   0DE1 D0 00              3486 	pop	ar0
   0DE3 D0 07              3487 	pop	ar7
   0DE5 D0 06              3488 	pop	ar6
   0DE7 D0 05              3489 	pop	ar5
   0DE9 D0 03              3490 	pop	ar3
   0DEB D0 02              3491 	pop	ar2
                           3492 ;	main.c:418: printf("%x ", lcdData);
                           3493 ;	genCast
   0DED 7D 00              3494 	mov	r5,#0x00
                           3495 ;	genIpush
   0DEF C0 02              3496 	push	ar2
   0DF1 C0 03              3497 	push	ar3
   0DF3 C0 04              3498 	push	ar4
   0DF5 C0 05              3499 	push	ar5
   0DF7 C0 06              3500 	push	ar6
   0DF9 C0 07              3501 	push	ar7
   0DFB C0 00              3502 	push	ar0
   0DFD C0 04              3503 	push	ar4
   0DFF C0 05              3504 	push	ar5
                           3505 ;	genIpush
   0E01 74rE7              3506 	mov	a,#__str_38
   0E03 C0 E0              3507 	push	acc
   0E05 74s04              3508 	mov	a,#(__str_38 >> 8)
   0E07 C0 E0              3509 	push	acc
   0E09 74 80              3510 	mov	a,#0x80
   0E0B C0 E0              3511 	push	acc
                           3512 ;	genCall
   0E0D 12s00r00           3513 	lcall	_printf
   0E10 E5 81              3514 	mov	a,sp
   0E12 24 FB              3515 	add	a,#0xfb
   0E14 F5 81              3516 	mov	sp,a
   0E16 D0 00              3517 	pop	ar0
   0E18 D0 07              3518 	pop	ar7
   0E1A D0 06              3519 	pop	ar6
   0E1C D0 05              3520 	pop	ar5
   0E1E D0 04              3521 	pop	ar4
   0E20 D0 03              3522 	pop	ar3
   0E22 D0 02              3523 	pop	ar2
                           3524 ;	main.c:419: start_addr++;
                           3525 ;	genPlus
                           3526 ;     genPlusIncr
   0E24 0E                 3527 	inc	r6
   0E25 BE 00 01           3528 	cjne	r6,#0x00,00148$
   0E28 0F                 3529 	inc	r7
   0E29                    3530 00148$:
                           3531 ;	main.c:420: if(start_addr > end_addr){
                           3532 ;	genCmpGt
                           3533 ;	genCmp
   0E29 C3                 3534 	clr	c
   0E2A EA                 3535 	mov	a,r2
   0E2B 9E                 3536 	subb	a,r6
   0E2C EB                 3537 	mov	a,r3
   0E2D 9F                 3538 	subb	a,r7
                           3539 ;	genIpop
                           3540 ;	genIfx
                           3541 ;	genIfxJump
                           3542 ;	Peephole 108.b	removed ljmp by inverse jump logic
                           3543 ;	Peephole 129.c	optimized condition
   0E2E D0 05              3544 	pop	ar5
   0E30 D0 04              3545 	pop	ar4
   0E32 40 03              3546 	jc	00136$
                           3547 ;	Peephole 300	removed redundant label 00149$
                           3548 ;	main.c:416: for (i = 0; i < 16; ++i){
                           3549 ;	genPlus
                           3550 ;     genPlusIncr
   0E34 08                 3551 	inc	r0
                           3552 ;	Peephole 112.b	changed ljmp to sjmp
   0E35 80 85              3553 	sjmp	00109$
   0E37                    3554 00136$:
                           3555 ;	genAssign
   0E37 90s00r79           3556 	mov	dptr,#_handleEEPROMMode_start_addr_1_1
   0E3A EE                 3557 	mov	a,r6
   0E3B F0                 3558 	movx	@dptr,a
   0E3C A3                 3559 	inc	dptr
   0E3D EF                 3560 	mov	a,r7
   0E3E F0                 3561 	movx	@dptr,a
                           3562 ;	main.c:424: printf("\r\n");
                           3563 ;	genIpush
   0E3F C0 02              3564 	push	ar2
   0E41 C0 03              3565 	push	ar3
   0E43 C0 04              3566 	push	ar4
   0E45 C0 05              3567 	push	ar5
   0E47 74rDF              3568 	mov	a,#__str_36
   0E49 C0 E0              3569 	push	acc
   0E4B 74s04              3570 	mov	a,#(__str_36 >> 8)
   0E4D C0 E0              3571 	push	acc
   0E4F 74 80              3572 	mov	a,#0x80
   0E51 C0 E0              3573 	push	acc
                           3574 ;	genCall
   0E53 12s00r00           3575 	lcall	_printf
   0E56 15 81              3576 	dec	sp
   0E58 15 81              3577 	dec	sp
   0E5A 15 81              3578 	dec	sp
   0E5C D0 05              3579 	pop	ar5
   0E5E D0 04              3580 	pop	ar4
   0E60 D0 03              3581 	pop	ar3
   0E62 D0 02              3582 	pop	ar2
   0E64 02s0Dr79           3583 	ljmp	00113$
                           3584 ;	main.c:427: case 'Y':
   0E67                    3585 00116$:
                           3586 ;	main.c:428: printf("\r\nReset the EEPROM interface\r\n");
                           3587 ;	genIpush
   0E67 74r58              3588 	mov	a,#__str_57
   0E69 C0 E0              3589 	push	acc
   0E6B 74s07              3590 	mov	a,#(__str_57 >> 8)
   0E6D C0 E0              3591 	push	acc
   0E6F 74 80              3592 	mov	a,#0x80
   0E71 C0 E0              3593 	push	acc
                           3594 ;	genCall
   0E73 12s00r00           3595 	lcall	_printf
   0E76 15 81              3596 	dec	sp
   0E78 15 81              3597 	dec	sp
   0E7A 15 81              3598 	dec	sp
                           3599 ;	main.c:429: EPROM_Reset();
                           3600 ;	genCall
                           3601 ;	main.c:430: break;
                           3602 ;	main.c:431: case 'r':
                           3603 ;	Peephole 112.b	changed ljmp to sjmp
                           3604 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3605 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E7C 02s00r00           3606 	ljmp	_EPROM_Reset
   0E7F                    3607 00117$:
                           3608 ;	main.c:432: mode = MAIN_MODE;
                           3609 ;	genAssign
   0E7F 90s00r00           3610 	mov	dptr,#_mode
                           3611 ;	Peephole 181	changed mov to clr
   0E82 E4                 3612 	clr	a
   0E83 F0                 3613 	movx	@dptr,a
                           3614 ;	main.c:433: MainMenu();
                           3615 ;	genCall
                           3616 ;	main.c:434: break;
                           3617 ;	main.c:435: case 'H':
                           3618 ;	Peephole 112.b	changed ljmp to sjmp
                           3619 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3620 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0E84 02s11rD5           3621 	ljmp	_MainMenu
   0E87                    3622 00118$:
                           3623 ;	main.c:436: EEPROM_Menu();
                           3624 ;	genCall
                           3625 ;	main.c:440: }
                           3626 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0E87 02s0Ar07           3627 	ljmp	_EEPROM_Menu
                           3628 ;
                           3629 ;------------------------------------------------------------
                           3630 ;Allocation info for local variables in function 'CLOCK_Menu'
                           3631 ;------------------------------------------------------------
                           3632 ;------------------------------------------------------------
                           3633 ;	main.c:444: void CLOCK_Menu(void){
                           3634 ;	-----------------------------------------
                           3635 ;	 function CLOCK_Menu
                           3636 ;	-----------------------------------------
   0E8A                    3637 _CLOCK_Menu:
                           3638 ;	main.c:445: printf("\r\nIn Clock Mode");
                           3639 ;	genIpush
   0E8A 74r77              3640 	mov	a,#__str_58
   0E8C C0 E0              3641 	push	acc
   0E8E 74s07              3642 	mov	a,#(__str_58 >> 8)
   0E90 C0 E0              3643 	push	acc
   0E92 74 80              3644 	mov	a,#0x80
   0E94 C0 E0              3645 	push	acc
                           3646 ;	genCall
   0E96 12s00r00           3647 	lcall	_printf
   0E99 15 81              3648 	dec	sp
   0E9B 15 81              3649 	dec	sp
   0E9D 15 81              3650 	dec	sp
                           3651 ;	main.c:446: printf("\r\nPress 'H' for help");
                           3652 ;	genIpush
   0E9F 74r9F              3653 	mov	a,#__str_4
   0EA1 C0 E0              3654 	push	acc
   0EA3 74s00              3655 	mov	a,#(__str_4 >> 8)
   0EA5 C0 E0              3656 	push	acc
   0EA7 74 80              3657 	mov	a,#0x80
   0EA9 C0 E0              3658 	push	acc
                           3659 ;	genCall
   0EAB 12s00r00           3660 	lcall	_printf
   0EAE 15 81              3661 	dec	sp
   0EB0 15 81              3662 	dec	sp
   0EB2 15 81              3663 	dec	sp
                           3664 ;	main.c:447: printf("\r\nPress 'T' to stop the clock");
                           3665 ;	genIpush
   0EB4 74r87              3666 	mov	a,#__str_59
   0EB6 C0 E0              3667 	push	acc
   0EB8 74s07              3668 	mov	a,#(__str_59 >> 8)
   0EBA C0 E0              3669 	push	acc
   0EBC 74 80              3670 	mov	a,#0x80
   0EBE C0 E0              3671 	push	acc
                           3672 ;	genCall
   0EC0 12s00r00           3673 	lcall	_printf
   0EC3 15 81              3674 	dec	sp
   0EC5 15 81              3675 	dec	sp
   0EC7 15 81              3676 	dec	sp
                           3677 ;	main.c:448: printf("\r\nPress 'S' to start the clock again");
                           3678 ;	genIpush
   0EC9 74rA5              3679 	mov	a,#__str_60
   0ECB C0 E0              3680 	push	acc
   0ECD 74s07              3681 	mov	a,#(__str_60 >> 8)
   0ECF C0 E0              3682 	push	acc
   0ED1 74 80              3683 	mov	a,#0x80
   0ED3 C0 E0              3684 	push	acc
                           3685 ;	genCall
   0ED5 12s00r00           3686 	lcall	_printf
   0ED8 15 81              3687 	dec	sp
   0EDA 15 81              3688 	dec	sp
   0EDC 15 81              3689 	dec	sp
                           3690 ;	main.c:449: printf("\r\nPress 'O' to reset the clock to 0");
                           3691 ;	genIpush
   0EDE 74rCA              3692 	mov	a,#__str_61
   0EE0 C0 E0              3693 	push	acc
   0EE2 74s07              3694 	mov	a,#(__str_61 >> 8)
   0EE4 C0 E0              3695 	push	acc
   0EE6 74 80              3696 	mov	a,#0x80
   0EE8 C0 E0              3697 	push	acc
                           3698 ;	genCall
   0EEA 12s00r00           3699 	lcall	_printf
   0EED 15 81              3700 	dec	sp
   0EEF 15 81              3701 	dec	sp
   0EF1 15 81              3702 	dec	sp
                           3703 ;	main.c:450: printf("\r\nPress 'N' to create a new alarm");
                           3704 ;	genIpush
   0EF3 74rEE              3705 	mov	a,#__str_62
   0EF5 C0 E0              3706 	push	acc
   0EF7 74s07              3707 	mov	a,#(__str_62 >> 8)
   0EF9 C0 E0              3708 	push	acc
   0EFB 74 80              3709 	mov	a,#0x80
   0EFD C0 E0              3710 	push	acc
                           3711 ;	genCall
   0EFF 12s00r00           3712 	lcall	_printf
   0F02 15 81              3713 	dec	sp
   0F04 15 81              3714 	dec	sp
   0F06 15 81              3715 	dec	sp
                           3716 ;	main.c:451: printf("\r\nPress 'C' to view count for each alarm");
                           3717 ;	genIpush
   0F08 74r10              3718 	mov	a,#__str_63
   0F0A C0 E0              3719 	push	acc
   0F0C 74s08              3720 	mov	a,#(__str_63 >> 8)
   0F0E C0 E0              3721 	push	acc
   0F10 74 80              3722 	mov	a,#0x80
   0F12 C0 E0              3723 	push	acc
                           3724 ;	genCall
   0F14 12s00r00           3725 	lcall	_printf
   0F17 15 81              3726 	dec	sp
   0F19 15 81              3727 	dec	sp
   0F1B 15 81              3728 	dec	sp
                           3729 ;	main.c:452: printf("\r\nPress 'D' to disable an alarm");
                           3730 ;	genIpush
   0F1D 74r39              3731 	mov	a,#__str_64
   0F1F C0 E0              3732 	push	acc
   0F21 74s08              3733 	mov	a,#(__str_64 >> 8)
   0F23 C0 E0              3734 	push	acc
   0F25 74 80              3735 	mov	a,#0x80
   0F27 C0 E0              3736 	push	acc
                           3737 ;	genCall
   0F29 12s00r00           3738 	lcall	_printf
   0F2C 15 81              3739 	dec	sp
   0F2E 15 81              3740 	dec	sp
   0F30 15 81              3741 	dec	sp
                           3742 ;	main.c:453: printf("\r\nPress 'E' to reenable an alarm");
                           3743 ;	genIpush
   0F32 74r59              3744 	mov	a,#__str_65
   0F34 C0 E0              3745 	push	acc
   0F36 74s08              3746 	mov	a,#(__str_65 >> 8)
   0F38 C0 E0              3747 	push	acc
   0F3A 74 80              3748 	mov	a,#0x80
   0F3C C0 E0              3749 	push	acc
                           3750 ;	genCall
   0F3E 12s00r00           3751 	lcall	_printf
   0F41 15 81              3752 	dec	sp
   0F43 15 81              3753 	dec	sp
   0F45 15 81              3754 	dec	sp
                           3755 ;	main.c:454: printf("\r\nPress 'r' to return to main menu\r\n");
                           3756 ;	genIpush
   0F47 74r32              3757 	mov	a,#__str_8
   0F49 C0 E0              3758 	push	acc
   0F4B 74s01              3759 	mov	a,#(__str_8 >> 8)
   0F4D C0 E0              3760 	push	acc
   0F4F 74 80              3761 	mov	a,#0x80
   0F51 C0 E0              3762 	push	acc
                           3763 ;	genCall
   0F53 12s00r00           3764 	lcall	_printf
   0F56 15 81              3765 	dec	sp
   0F58 15 81              3766 	dec	sp
   0F5A 15 81              3767 	dec	sp
                           3768 ;	Peephole 300	removed redundant label 00101$
   0F5C 22                 3769 	ret
                           3770 ;------------------------------------------------------------
                           3771 ;Allocation info for local variables in function 'handleCLOCKMode'
                           3772 ;------------------------------------------------------------
                           3773 ;c                         Allocated with name '_handleCLOCKMode_c_1_1'
                           3774 ;alarm_duration            Allocated with name '_handleCLOCKMode_alarm_duration_1_1'
                           3775 ;i                         Allocated with name '_handleCLOCKMode_i_1_1'
                           3776 ;------------------------------------------------------------
                           3777 ;	main.c:458: void handleCLOCKMode(char c){
                           3778 ;	-----------------------------------------
                           3779 ;	 function handleCLOCKMode
                           3780 ;	-----------------------------------------
   0F5D                    3781 _handleCLOCKMode:
                           3782 ;	genReceive
   0F5D E5 82              3783 	mov	a,dpl
   0F5F 90s00r7D           3784 	mov	dptr,#_handleCLOCKMode_c_1_1
   0F62 F0                 3785 	movx	@dptr,a
                           3786 ;	main.c:461: switch(c){
                           3787 ;	genAssign
   0F63 90s00r7D           3788 	mov	dptr,#_handleCLOCKMode_c_1_1
   0F66 E0                 3789 	movx	a,@dptr
   0F67 FA                 3790 	mov	r2,a
                           3791 ;	genCmpEq
                           3792 ;	gencjneshort
   0F68 BA 43 03           3793 	cjne	r2,#0x43,00147$
   0F6B 02s10r05           3794 	ljmp	00140$
   0F6E                    3795 00147$:
                           3796 ;	genCmpEq
                           3797 ;	gencjneshort
   0F6E BA 44 03           3798 	cjne	r2,#0x44,00148$
   0F71 02s10rAC           3799 	ljmp	00109$
   0F74                    3800 00148$:
                           3801 ;	genCmpEq
                           3802 ;	gencjneshort
   0F74 BA 45 03           3803 	cjne	r2,#0x45,00149$
   0F77 02s11r2D           3804 	ljmp	00113$
   0F7A                    3805 00149$:
                           3806 ;	genCmpEq
                           3807 ;	gencjneshort
   0F7A BA 48 03           3808 	cjne	r2,#0x48,00150$
   0F7D 02s11rD2           3809 	ljmp	00120$
   0F80                    3810 00150$:
                           3811 ;	genCmpEq
                           3812 ;	gencjneshort
   0F80 BA 4E 02           3813 	cjne	r2,#0x4E,00151$
                           3814 ;	Peephole 112.b	changed ljmp to sjmp
   0F83 80 5E              3815 	sjmp	00104$
   0F85                    3816 00151$:
                           3817 ;	genCmpEq
                           3818 ;	gencjneshort
   0F85 BA 4F 02           3819 	cjne	r2,#0x4F,00152$
                           3820 ;	Peephole 112.b	changed ljmp to sjmp
   0F88 80 41              3821 	sjmp	00103$
   0F8A                    3822 00152$:
                           3823 ;	genCmpEq
                           3824 ;	gencjneshort
   0F8A BA 53 02           3825 	cjne	r2,#0x53,00153$
                           3826 ;	Peephole 112.b	changed ljmp to sjmp
   0F8D 80 24              3827 	sjmp	00102$
   0F8F                    3828 00153$:
                           3829 ;	genCmpEq
                           3830 ;	gencjneshort
   0F8F BA 54 02           3831 	cjne	r2,#0x54,00154$
                           3832 ;	Peephole 112.b	changed ljmp to sjmp
   0F92 80 07              3833 	sjmp	00101$
   0F94                    3834 00154$:
                           3835 ;	genCmpEq
                           3836 ;	gencjneshort
   0F94 BA 72 03           3837 	cjne	r2,#0x72,00155$
   0F97 02s11rCA           3838 	ljmp	00119$
   0F9A                    3839 00155$:
                           3840 ;	Peephole 251.a	replaced ljmp to ret with ret
   0F9A 22                 3841 	ret
                           3842 ;	main.c:462: case 'T':
   0F9B                    3843 00101$:
                           3844 ;	main.c:463: printf("\r\nStopping the clock");
                           3845 ;	genIpush
   0F9B 74r7A              3846 	mov	a,#__str_66
   0F9D C0 E0              3847 	push	acc
   0F9F 74s08              3848 	mov	a,#(__str_66 >> 8)
   0FA1 C0 E0              3849 	push	acc
   0FA3 74 80              3850 	mov	a,#0x80
   0FA5 C0 E0              3851 	push	acc
                           3852 ;	genCall
   0FA7 12s00r00           3853 	lcall	_printf
   0FAA 15 81              3854 	dec	sp
   0FAC 15 81              3855 	dec	sp
   0FAE 15 81              3856 	dec	sp
                           3857 ;	main.c:464: Clock_Stop();
                           3858 ;	genCall
                           3859 ;	main.c:465: break;
                           3860 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3861 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FB0 02s00r00           3862 	ljmp	_Clock_Stop
                           3863 ;	main.c:466: case 'S':
   0FB3                    3864 00102$:
                           3865 ;	main.c:467: printf("\r\nStarting the clock");
                           3866 ;	genIpush
   0FB3 74r8F              3867 	mov	a,#__str_67
   0FB5 C0 E0              3868 	push	acc
   0FB7 74s08              3869 	mov	a,#(__str_67 >> 8)
   0FB9 C0 E0              3870 	push	acc
   0FBB 74 80              3871 	mov	a,#0x80
   0FBD C0 E0              3872 	push	acc
                           3873 ;	genCall
   0FBF 12s00r00           3874 	lcall	_printf
   0FC2 15 81              3875 	dec	sp
   0FC4 15 81              3876 	dec	sp
   0FC6 15 81              3877 	dec	sp
                           3878 ;	main.c:468: Clock_Start();
                           3879 ;	genCall
                           3880 ;	main.c:469: break;
                           3881 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3882 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FC8 02s00r00           3883 	ljmp	_Clock_Start
                           3884 ;	main.c:470: case 'O':
   0FCB                    3885 00103$:
                           3886 ;	main.c:471: printf("\r\nResetting the clock");
                           3887 ;	genIpush
   0FCB 74rA4              3888 	mov	a,#__str_68
   0FCD C0 E0              3889 	push	acc
   0FCF 74s08              3890 	mov	a,#(__str_68 >> 8)
   0FD1 C0 E0              3891 	push	acc
   0FD3 74 80              3892 	mov	a,#0x80
   0FD5 C0 E0              3893 	push	acc
                           3894 ;	genCall
   0FD7 12s00r00           3895 	lcall	_printf
   0FDA 15 81              3896 	dec	sp
   0FDC 15 81              3897 	dec	sp
   0FDE 15 81              3898 	dec	sp
                           3899 ;	main.c:472: Clock_Reset();
                           3900 ;	genCall
                           3901 ;	main.c:473: break;
                           3902 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3903 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0FE0 02s00r00           3904 	ljmp	_Clock_Reset
                           3905 ;	main.c:474: case 'N':
   0FE3                    3906 00104$:
                           3907 ;	main.c:475: printf("\r\nEnter alarm time in seconds:\r\n");
                           3908 ;	genIpush
   0FE3 74rBA              3909 	mov	a,#__str_69
   0FE5 C0 E0              3910 	push	acc
   0FE7 74s08              3911 	mov	a,#(__str_69 >> 8)
   0FE9 C0 E0              3912 	push	acc
   0FEB 74 80              3913 	mov	a,#0x80
   0FED C0 E0              3914 	push	acc
                           3915 ;	genCall
   0FEF 12s00r00           3916 	lcall	_printf
   0FF2 15 81              3917 	dec	sp
   0FF4 15 81              3918 	dec	sp
   0FF6 15 81              3919 	dec	sp
                           3920 ;	main.c:476: alarm_duration = Serial_GetInteger(5);
                           3921 ;	genCall
                           3922 ;	Peephole 182.b	used 16 bit load of dptr
   0FF8 90 00 05           3923 	mov	dptr,#0x0005
   0FFB 12s00r00           3924 	lcall	_Serial_GetInteger
                           3925 ;	main.c:477: Clock_NewAlarm(alarm_duration);
                           3926 ;	genCall
   0FFE AA 82              3927 	mov	r2,dpl
                           3928 ;	Peephole 177.d	removed redundant move
   1000 AB 83              3929 	mov  r3,dph
                           3930 ;	Peephole 177.a	removed redundant mov
                           3931 ;	main.c:478: break;
                           3932 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3933 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1002 02s00r00           3934 	ljmp	_Clock_NewAlarm
                           3935 ;	main.c:480: for (i = 0; i < 3; ++i){
   1005                    3936 00140$:
                           3937 ;	genAssign
   1005 7A 00              3938 	mov	r2,#0x00
   1007                    3939 00123$:
                           3940 ;	genCmpLt
                           3941 ;	genCmp
   1007 BA 03 00           3942 	cjne	r2,#0x03,00156$
   100A                    3943 00156$:
                           3944 ;	genIfxJump
   100A 40 03              3945 	jc	00157$
   100C 02s10r96           3946 	ljmp	00126$
   100F                    3947 00157$:
                           3948 ;	main.c:481: if (ActiveAlarms[i])
                           3949 ;	genPlus
                           3950 ;	Peephole 236.g	used r2 instead of ar2
   100F EA                 3951 	mov	a,r2
   1010 24r00              3952 	add	a,#_ActiveAlarms
   1012 FB                 3953 	mov	r3,a
                           3954 ;	Peephole 181	changed mov to clr
   1013 E4                 3955 	clr	a
   1014 34s00              3956 	addc	a,#(_ActiveAlarms >> 8)
   1016 FC                 3957 	mov	r4,a
                           3958 ;	genPointerGet
                           3959 ;	genFarPointerGet
   1017 8B 82              3960 	mov	dpl,r3
   1019 8C 83              3961 	mov	dph,r4
   101B E0                 3962 	movx	a,@dptr
                           3963 ;	genIfxJump
                           3964 ;	Peephole 108.c	removed ljmp by inverse jump logic
   101C 60 3B              3965 	jz	00107$
                           3966 ;	Peephole 300	removed redundant label 00158$
                           3967 ;	main.c:482: printf("\r\nAlarm %d: %u <Enabled>", i, AlarmCount[i]);
                           3968 ;	genMult
                           3969 ;	genMultOneByte
   101E EA                 3970 	mov	a,r2
   101F 75 F0 02           3971 	mov	b,#0x02
   1022 A4                 3972 	mul	ab
                           3973 ;	genPlus
   1023 24r00              3974 	add	a,#_AlarmCount
   1025 F5 82              3975 	mov	dpl,a
   1027 74s00              3976 	mov	a,#(_AlarmCount >> 8)
   1029 35 F0              3977 	addc	a,b
   102B F5 83              3978 	mov	dph,a
                           3979 ;	genPointerGet
                           3980 ;	genFarPointerGet
   102D E0                 3981 	movx	a,@dptr
   102E FB                 3982 	mov	r3,a
   102F A3                 3983 	inc	dptr
   1030 E0                 3984 	movx	a,@dptr
   1031 FC                 3985 	mov	r4,a
                           3986 ;	genCast
   1032 8A 05              3987 	mov	ar5,r2
   1034 7E 00              3988 	mov	r6,#0x00
                           3989 ;	genIpush
   1036 C0 02              3990 	push	ar2
   1038 C0 03              3991 	push	ar3
   103A C0 04              3992 	push	ar4
                           3993 ;	genIpush
   103C C0 05              3994 	push	ar5
   103E C0 06              3995 	push	ar6
                           3996 ;	genIpush
   1040 74rDB              3997 	mov	a,#__str_70
   1042 C0 E0              3998 	push	acc
   1044 74s08              3999 	mov	a,#(__str_70 >> 8)
   1046 C0 E0              4000 	push	acc
   1048 74 80              4001 	mov	a,#0x80
   104A C0 E0              4002 	push	acc
                           4003 ;	genCall
   104C 12s00r00           4004 	lcall	_printf
   104F E5 81              4005 	mov	a,sp
   1051 24 F9              4006 	add	a,#0xf9
   1053 F5 81              4007 	mov	sp,a
   1055 D0 02              4008 	pop	ar2
                           4009 ;	Peephole 112.b	changed ljmp to sjmp
   1057 80 39              4010 	sjmp	00125$
   1059                    4011 00107$:
                           4012 ;	main.c:484: printf("\r\nAlarm %d: %u <Disabled>", i, AlarmCount[i]);
                           4013 ;	genMult
                           4014 ;	genMultOneByte
   1059 EA                 4015 	mov	a,r2
   105A 75 F0 02           4016 	mov	b,#0x02
   105D A4                 4017 	mul	ab
                           4018 ;	genPlus
   105E 24r00              4019 	add	a,#_AlarmCount
   1060 F5 82              4020 	mov	dpl,a
   1062 74s00              4021 	mov	a,#(_AlarmCount >> 8)
   1064 35 F0              4022 	addc	a,b
   1066 F5 83              4023 	mov	dph,a
                           4024 ;	genPointerGet
                           4025 ;	genFarPointerGet
   1068 E0                 4026 	movx	a,@dptr
   1069 FB                 4027 	mov	r3,a
   106A A3                 4028 	inc	dptr
   106B E0                 4029 	movx	a,@dptr
   106C FC                 4030 	mov	r4,a
                           4031 ;	genCast
   106D 8A 05              4032 	mov	ar5,r2
   106F 7E 00              4033 	mov	r6,#0x00
                           4034 ;	genIpush
   1071 C0 02              4035 	push	ar2
   1073 C0 03              4036 	push	ar3
   1075 C0 04              4037 	push	ar4
                           4038 ;	genIpush
   1077 C0 05              4039 	push	ar5
   1079 C0 06              4040 	push	ar6
                           4041 ;	genIpush
   107B 74rF4              4042 	mov	a,#__str_71
   107D C0 E0              4043 	push	acc
   107F 74s08              4044 	mov	a,#(__str_71 >> 8)
   1081 C0 E0              4045 	push	acc
   1083 74 80              4046 	mov	a,#0x80
   1085 C0 E0              4047 	push	acc
                           4048 ;	genCall
   1087 12s00r00           4049 	lcall	_printf
   108A E5 81              4050 	mov	a,sp
   108C 24 F9              4051 	add	a,#0xf9
   108E F5 81              4052 	mov	sp,a
   1090 D0 02              4053 	pop	ar2
   1092                    4054 00125$:
                           4055 ;	main.c:480: for (i = 0; i < 3; ++i){
                           4056 ;	genPlus
                           4057 ;     genPlusIncr
   1092 0A                 4058 	inc	r2
   1093 02s10r07           4059 	ljmp	00123$
   1096                    4060 00126$:
                           4061 ;	main.c:486: printf("\r\n");
                           4062 ;	genIpush
   1096 74rDF              4063 	mov	a,#__str_36
   1098 C0 E0              4064 	push	acc
   109A 74s04              4065 	mov	a,#(__str_36 >> 8)
   109C C0 E0              4066 	push	acc
   109E 74 80              4067 	mov	a,#0x80
   10A0 C0 E0              4068 	push	acc
                           4069 ;	genCall
   10A2 12s00r00           4070 	lcall	_printf
   10A5 15 81              4071 	dec	sp
   10A7 15 81              4072 	dec	sp
   10A9 15 81              4073 	dec	sp
                           4074 ;	main.c:487: break;
                           4075 ;	Peephole 251.a	replaced ljmp to ret with ret
   10AB 22                 4076 	ret
                           4077 ;	main.c:488: case 'D':
   10AC                    4078 00109$:
                           4079 ;	main.c:489: printf("\r\nEnter an alarm number from 0-2 to disable:");
                           4080 ;	genIpush
   10AC 74r0E              4081 	mov	a,#__str_72
   10AE C0 E0              4082 	push	acc
   10B0 74s09              4083 	mov	a,#(__str_72 >> 8)
   10B2 C0 E0              4084 	push	acc
   10B4 74 80              4085 	mov	a,#0x80
   10B6 C0 E0              4086 	push	acc
                           4087 ;	genCall
   10B8 12s00r00           4088 	lcall	_printf
   10BB 15 81              4089 	dec	sp
   10BD 15 81              4090 	dec	sp
   10BF 15 81              4091 	dec	sp
                           4092 ;	main.c:490: i = Serial_GetInteger(1);
                           4093 ;	genCall
                           4094 ;	Peephole 182.b	used 16 bit load of dptr
   10C1 90 00 01           4095 	mov	dptr,#0x0001
   10C4 12s00r00           4096 	lcall	_Serial_GetInteger
   10C7 AA 82              4097 	mov	r2,dpl
   10C9 AB 83              4098 	mov	r3,dph
                           4099 ;	genCast
   10CB 90s00r7E           4100 	mov	dptr,#_handleCLOCKMode_i_1_1
   10CE EA                 4101 	mov	a,r2
   10CF F0                 4102 	movx	@dptr,a
                           4103 ;	main.c:491: while(i > 2){
   10D0                    4104 00110$:
                           4105 ;	genAssign
   10D0 90s00r7E           4106 	mov	dptr,#_handleCLOCKMode_i_1_1
   10D3 E0                 4107 	movx	a,@dptr
                           4108 ;	genCmpGt
                           4109 ;	genCmp
                           4110 ;	genIfxJump
                           4111 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           4112 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   10D4 FA                 4113 	mov  r2,a
                           4114 ;	Peephole 177.a	removed redundant mov
   10D5 24 FD              4115 	add	a,#0xff - 0x02
   10D7 50 26              4116 	jnc	00112$
                           4117 ;	Peephole 300	removed redundant label 00159$
                           4118 ;	main.c:492: printf("\r\nEnter an alarm number from 0-2 to disable:");
                           4119 ;	genIpush
   10D9 74r0E              4120 	mov	a,#__str_72
   10DB C0 E0              4121 	push	acc
   10DD 74s09              4122 	mov	a,#(__str_72 >> 8)
   10DF C0 E0              4123 	push	acc
   10E1 74 80              4124 	mov	a,#0x80
   10E3 C0 E0              4125 	push	acc
                           4126 ;	genCall
   10E5 12s00r00           4127 	lcall	_printf
   10E8 15 81              4128 	dec	sp
   10EA 15 81              4129 	dec	sp
   10EC 15 81              4130 	dec	sp
                           4131 ;	main.c:493: i = Serial_GetInteger(1);
                           4132 ;	genCall
                           4133 ;	Peephole 182.b	used 16 bit load of dptr
   10EE 90 00 01           4134 	mov	dptr,#0x0001
   10F1 12s00r00           4135 	lcall	_Serial_GetInteger
   10F4 AB 82              4136 	mov	r3,dpl
   10F6 AC 83              4137 	mov	r4,dph
                           4138 ;	genCast
   10F8 90s00r7E           4139 	mov	dptr,#_handleCLOCKMode_i_1_1
   10FB EB                 4140 	mov	a,r3
   10FC F0                 4141 	movx	@dptr,a
                           4142 ;	Peephole 112.b	changed ljmp to sjmp
   10FD 80 D1              4143 	sjmp	00110$
   10FF                    4144 00112$:
                           4145 ;	main.c:495: printf("\r\nAlarm %d disabled\r\n", i);
                           4146 ;	genCast
   10FF 8A 03              4147 	mov	ar3,r2
   1101 7C 00              4148 	mov	r4,#0x00
                           4149 ;	genIpush
   1103 C0 02              4150 	push	ar2
   1105 C0 03              4151 	push	ar3
   1107 C0 04              4152 	push	ar4
                           4153 ;	genIpush
   1109 74r3B              4154 	mov	a,#__str_73
   110B C0 E0              4155 	push	acc
   110D 74s09              4156 	mov	a,#(__str_73 >> 8)
   110F C0 E0              4157 	push	acc
   1111 74 80              4158 	mov	a,#0x80
   1113 C0 E0              4159 	push	acc
                           4160 ;	genCall
   1115 12s00r00           4161 	lcall	_printf
   1118 E5 81              4162 	mov	a,sp
   111A 24 FB              4163 	add	a,#0xfb
   111C F5 81              4164 	mov	sp,a
   111E D0 02              4165 	pop	ar2
                           4166 ;	main.c:496: ActiveAlarms[i] = 0;
                           4167 ;	genPlus
                           4168 ;	Peephole 236.g	used r2 instead of ar2
   1120 EA                 4169 	mov	a,r2
   1121 24r00              4170 	add	a,#_ActiveAlarms
   1123 F5 82              4171 	mov	dpl,a
                           4172 ;	Peephole 181	changed mov to clr
   1125 E4                 4173 	clr	a
   1126 34s00              4174 	addc	a,#(_ActiveAlarms >> 8)
   1128 F5 83              4175 	mov	dph,a
                           4176 ;	genPointerSet
                           4177 ;     genFarPointerSet
                           4178 ;	Peephole 181	changed mov to clr
   112A E4                 4179 	clr	a
   112B F0                 4180 	movx	@dptr,a
                           4181 ;	main.c:497: break;
                           4182 ;	Peephole 251.a	replaced ljmp to ret with ret
   112C 22                 4183 	ret
                           4184 ;	main.c:498: case 'E':
   112D                    4185 00113$:
                           4186 ;	main.c:499: printf("\r\nEnter an alarm number from 0-2 to enable:");
                           4187 ;	genIpush
   112D 74r51              4188 	mov	a,#__str_74
   112F C0 E0              4189 	push	acc
   1131 74s09              4190 	mov	a,#(__str_74 >> 8)
   1133 C0 E0              4191 	push	acc
   1135 74 80              4192 	mov	a,#0x80
   1137 C0 E0              4193 	push	acc
                           4194 ;	genCall
   1139 12s00r00           4195 	lcall	_printf
   113C 15 81              4196 	dec	sp
   113E 15 81              4197 	dec	sp
   1140 15 81              4198 	dec	sp
                           4199 ;	main.c:500: i = Serial_GetInteger(1);
                           4200 ;	genCall
                           4201 ;	Peephole 182.b	used 16 bit load of dptr
   1142 90 00 01           4202 	mov	dptr,#0x0001
   1145 12s00r00           4203 	lcall	_Serial_GetInteger
   1148 AA 82              4204 	mov	r2,dpl
   114A AB 83              4205 	mov	r3,dph
                           4206 ;	genCast
   114C 90s00r7E           4207 	mov	dptr,#_handleCLOCKMode_i_1_1
   114F EA                 4208 	mov	a,r2
   1150 F0                 4209 	movx	@dptr,a
                           4210 ;	main.c:501: while(i > 2){
   1151                    4211 00114$:
                           4212 ;	genAssign
   1151 90s00r7E           4213 	mov	dptr,#_handleCLOCKMode_i_1_1
   1154 E0                 4214 	movx	a,@dptr
                           4215 ;	genCmpGt
                           4216 ;	genCmp
                           4217 ;	genIfxJump
                           4218 ;	Peephole 108.a	removed ljmp by inverse jump logic
                           4219 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   1155 FA                 4220 	mov  r2,a
                           4221 ;	Peephole 177.a	removed redundant mov
   1156 24 FD              4222 	add	a,#0xff - 0x02
   1158 50 26              4223 	jnc	00116$
                           4224 ;	Peephole 300	removed redundant label 00160$
                           4225 ;	main.c:502: printf("\r\nEnter an alarm number from 0-2 to enable:");
                           4226 ;	genIpush
   115A 74r51              4227 	mov	a,#__str_74
   115C C0 E0              4228 	push	acc
   115E 74s09              4229 	mov	a,#(__str_74 >> 8)
   1160 C0 E0              4230 	push	acc
   1162 74 80              4231 	mov	a,#0x80
   1164 C0 E0              4232 	push	acc
                           4233 ;	genCall
   1166 12s00r00           4234 	lcall	_printf
   1169 15 81              4235 	dec	sp
   116B 15 81              4236 	dec	sp
   116D 15 81              4237 	dec	sp
                           4238 ;	main.c:503: i = Serial_GetInteger(1);
                           4239 ;	genCall
                           4240 ;	Peephole 182.b	used 16 bit load of dptr
   116F 90 00 01           4241 	mov	dptr,#0x0001
   1172 12s00r00           4242 	lcall	_Serial_GetInteger
   1175 AB 82              4243 	mov	r3,dpl
   1177 AC 83              4244 	mov	r4,dph
                           4245 ;	genCast
   1179 90s00r7E           4246 	mov	dptr,#_handleCLOCKMode_i_1_1
   117C EB                 4247 	mov	a,r3
   117D F0                 4248 	movx	@dptr,a
                           4249 ;	Peephole 112.b	changed ljmp to sjmp
   117E 80 D1              4250 	sjmp	00114$
   1180                    4251 00116$:
                           4252 ;	main.c:505: printf("\r\nAlarm %d enabled\r\n", i);
                           4253 ;	genCast
   1180 8A 03              4254 	mov	ar3,r2
   1182 7C 00              4255 	mov	r4,#0x00
                           4256 ;	genIpush
   1184 C0 02              4257 	push	ar2
   1186 C0 03              4258 	push	ar3
   1188 C0 04              4259 	push	ar4
                           4260 ;	genIpush
   118A 74r7D              4261 	mov	a,#__str_75
   118C C0 E0              4262 	push	acc
   118E 74s09              4263 	mov	a,#(__str_75 >> 8)
   1190 C0 E0              4264 	push	acc
   1192 74 80              4265 	mov	a,#0x80
   1194 C0 E0              4266 	push	acc
                           4267 ;	genCall
   1196 12s00r00           4268 	lcall	_printf
   1199 E5 81              4269 	mov	a,sp
   119B 24 FB              4270 	add	a,#0xfb
   119D F5 81              4271 	mov	sp,a
   119F D0 02              4272 	pop	ar2
                           4273 ;	main.c:506: if (AlarmCount[i] != 0)
                           4274 ;	genMult
                           4275 ;	genMultOneByte
   11A1 EA                 4276 	mov	a,r2
   11A2 75 F0 02           4277 	mov	b,#0x02
   11A5 A4                 4278 	mul	ab
                           4279 ;	genPlus
   11A6 24r00              4280 	add	a,#_AlarmCount
   11A8 F5 82              4281 	mov	dpl,a
   11AA 74s00              4282 	mov	a,#(_AlarmCount >> 8)
   11AC 35 F0              4283 	addc	a,b
   11AE F5 83              4284 	mov	dph,a
                           4285 ;	genPointerGet
                           4286 ;	genFarPointerGet
   11B0 E0                 4287 	movx	a,@dptr
   11B1 FB                 4288 	mov	r3,a
   11B2 A3                 4289 	inc	dptr
   11B3 E0                 4290 	movx	a,@dptr
   11B4 FC                 4291 	mov	r4,a
                           4292 ;	genCmpEq
                           4293 ;	gencjneshort
   11B5 BB 00 04           4294 	cjne	r3,#0x00,00161$
   11B8 BC 00 01           4295 	cjne	r4,#0x00,00161$
                           4296 ;	Peephole 112.b	changed ljmp to sjmp
                           4297 ;	Peephole 251.b	replaced sjmp to ret with ret
   11BB 22                 4298 	ret
   11BC                    4299 00161$:
                           4300 ;	main.c:507: ActiveAlarms[i] = 1;
                           4301 ;	genPlus
                           4302 ;	Peephole 236.g	used r2 instead of ar2
   11BC EA                 4303 	mov	a,r2
   11BD 24r00              4304 	add	a,#_ActiveAlarms
   11BF F5 82              4305 	mov	dpl,a
                           4306 ;	Peephole 181	changed mov to clr
   11C1 E4                 4307 	clr	a
   11C2 34s00              4308 	addc	a,#(_ActiveAlarms >> 8)
   11C4 F5 83              4309 	mov	dph,a
                           4310 ;	genPointerSet
                           4311 ;     genFarPointerSet
   11C6 74 01              4312 	mov	a,#0x01
   11C8 F0                 4313 	movx	@dptr,a
                           4314 ;	main.c:508: break;
                           4315 ;	main.c:509: case 'r':
                           4316 ;	Peephole 112.b	changed ljmp to sjmp
                           4317 ;	Peephole 251.b	replaced sjmp to ret with ret
   11C9 22                 4318 	ret
   11CA                    4319 00119$:
                           4320 ;	main.c:510: mode = MAIN_MODE;
                           4321 ;	genAssign
   11CA 90s00r00           4322 	mov	dptr,#_mode
                           4323 ;	Peephole 181	changed mov to clr
   11CD E4                 4324 	clr	a
   11CE F0                 4325 	movx	@dptr,a
                           4326 ;	main.c:511: MainMenu();
                           4327 ;	genCall
                           4328 ;	main.c:512: break;
                           4329 ;	main.c:513: case 'H':
                           4330 ;	Peephole 112.b	changed ljmp to sjmp
                           4331 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4332 ;	Peephole 253.a	replaced lcall/ret with ljmp
   11CF 02s11rD5           4333 	ljmp	_MainMenu
   11D2                    4334 00120$:
                           4335 ;	main.c:514: CLOCK_Menu();
                           4336 ;	genCall
                           4337 ;	main.c:518: }
                           4338 ;	Peephole 253.b	replaced lcall/ret with ljmp
   11D2 02s0Er8A           4339 	ljmp	_CLOCK_Menu
                           4340 ;
                           4341 ;------------------------------------------------------------
                           4342 ;Allocation info for local variables in function 'MainMenu'
                           4343 ;------------------------------------------------------------
                           4344 ;------------------------------------------------------------
                           4345 ;	main.c:522: void MainMenu(void){
                           4346 ;	-----------------------------------------
                           4347 ;	 function MainMenu
                           4348 ;	-----------------------------------------
   11D5                    4349 _MainMenu:
                           4350 ;	main.c:523: printf("\r\n***************");
                           4351 ;	genIpush
   11D5 74r92              4352 	mov	a,#__str_76
   11D7 C0 E0              4353 	push	acc
   11D9 74s09              4354 	mov	a,#(__str_76 >> 8)
   11DB C0 E0              4355 	push	acc
   11DD 74 80              4356 	mov	a,#0x80
   11DF C0 E0              4357 	push	acc
                           4358 ;	genCall
   11E1 12s00r00           4359 	lcall	_printf
   11E4 15 81              4360 	dec	sp
   11E6 15 81              4361 	dec	sp
   11E8 15 81              4362 	dec	sp
                           4363 ;	main.c:524: printf("\r\n    Menu\r\n");
                           4364 ;	genIpush
   11EA 74rA4              4365 	mov	a,#__str_77
   11EC C0 E0              4366 	push	acc
   11EE 74s09              4367 	mov	a,#(__str_77 >> 8)
   11F0 C0 E0              4368 	push	acc
   11F2 74 80              4369 	mov	a,#0x80
   11F4 C0 E0              4370 	push	acc
                           4371 ;	genCall
   11F6 12s00r00           4372 	lcall	_printf
   11F9 15 81              4373 	dec	sp
   11FB 15 81              4374 	dec	sp
   11FD 15 81              4375 	dec	sp
                           4376 ;	main.c:525: printf("\r\n***************");
                           4377 ;	genIpush
   11FF 74r92              4378 	mov	a,#__str_76
   1201 C0 E0              4379 	push	acc
   1203 74s09              4380 	mov	a,#(__str_76 >> 8)
   1205 C0 E0              4381 	push	acc
   1207 74 80              4382 	mov	a,#0x80
   1209 C0 E0              4383 	push	acc
                           4384 ;	genCall
   120B 12s00r00           4385 	lcall	_printf
   120E 15 81              4386 	dec	sp
   1210 15 81              4387 	dec	sp
   1212 15 81              4388 	dec	sp
                           4389 ;	main.c:526: printf("\r\nPress 'H' to show the help menu");
                           4390 ;	genIpush
   1214 74rB1              4391 	mov	a,#__str_78
   1216 C0 E0              4392 	push	acc
   1218 74s09              4393 	mov	a,#(__str_78 >> 8)
   121A C0 E0              4394 	push	acc
   121C 74 80              4395 	mov	a,#0x80
   121E C0 E0              4396 	push	acc
                           4397 ;	genCall
   1220 12s00r00           4398 	lcall	_printf
   1223 15 81              4399 	dec	sp
   1225 15 81              4400 	dec	sp
   1227 15 81              4401 	dec	sp
                           4402 ;	main.c:527: printf("\r\nPress 'L' to enter LCD control mode");
                           4403 ;	genIpush
   1229 74rD3              4404 	mov	a,#__str_79
   122B C0 E0              4405 	push	acc
   122D 74s09              4406 	mov	a,#(__str_79 >> 8)
   122F C0 E0              4407 	push	acc
   1231 74 80              4408 	mov	a,#0x80
   1233 C0 E0              4409 	push	acc
                           4410 ;	genCall
   1235 12s00r00           4411 	lcall	_printf
   1238 15 81              4412 	dec	sp
   123A 15 81              4413 	dec	sp
   123C 15 81              4414 	dec	sp
                           4415 ;	main.c:528: printf("\r\nPress 'E' to enter EEPROM control mode");
                           4416 ;	genIpush
   123E 74rF9              4417 	mov	a,#__str_80
   1240 C0 E0              4418 	push	acc
   1242 74s09              4419 	mov	a,#(__str_80 >> 8)
   1244 C0 E0              4420 	push	acc
   1246 74 80              4421 	mov	a,#0x80
   1248 C0 E0              4422 	push	acc
                           4423 ;	genCall
   124A 12s00r00           4424 	lcall	_printf
   124D 15 81              4425 	dec	sp
   124F 15 81              4426 	dec	sp
   1251 15 81              4427 	dec	sp
                           4428 ;	main.c:529: printf("\r\nPress 'C' to enter Clock control mode");
                           4429 ;	genIpush
   1253 74r22              4430 	mov	a,#__str_81
   1255 C0 E0              4431 	push	acc
   1257 74s0A              4432 	mov	a,#(__str_81 >> 8)
   1259 C0 E0              4433 	push	acc
   125B 74 80              4434 	mov	a,#0x80
   125D C0 E0              4435 	push	acc
                           4436 ;	genCall
   125F 12s00r00           4437 	lcall	_printf
   1262 15 81              4438 	dec	sp
   1264 15 81              4439 	dec	sp
   1266 15 81              4440 	dec	sp
                           4441 ;	main.c:530: printf("\r\nPress 'G' to enter Custom Code control mode");
                           4442 ;	genIpush
   1268 74r4A              4443 	mov	a,#__str_82
   126A C0 E0              4444 	push	acc
   126C 74s0A              4445 	mov	a,#(__str_82 >> 8)
   126E C0 E0              4446 	push	acc
   1270 74 80              4447 	mov	a,#0x80
   1272 C0 E0              4448 	push	acc
                           4449 ;	genCall
   1274 12s00r00           4450 	lcall	_printf
   1277 15 81              4451 	dec	sp
   1279 15 81              4452 	dec	sp
   127B 15 81              4453 	dec	sp
                           4454 ;	main.c:531: printf("\r\nPress 'I' to enter infinite loop to test watchdog");
                           4455 ;	genIpush
   127D 74r78              4456 	mov	a,#__str_83
   127F C0 E0              4457 	push	acc
   1281 74s0A              4458 	mov	a,#(__str_83 >> 8)
   1283 C0 E0              4459 	push	acc
   1285 74 80              4460 	mov	a,#0x80
   1287 C0 E0              4461 	push	acc
                           4462 ;	genCall
   1289 12s00r00           4463 	lcall	_printf
   128C 15 81              4464 	dec	sp
   128E 15 81              4465 	dec	sp
   1290 15 81              4466 	dec	sp
                           4467 ;	main.c:532: printf("\r\nPress 'P' to enter PCF I/O expander control mode\r\n");
                           4468 ;	genIpush
   1292 74rAC              4469 	mov	a,#__str_84
   1294 C0 E0              4470 	push	acc
   1296 74s0A              4471 	mov	a,#(__str_84 >> 8)
   1298 C0 E0              4472 	push	acc
   129A 74 80              4473 	mov	a,#0x80
   129C C0 E0              4474 	push	acc
                           4475 ;	genCall
   129E 12s00r00           4476 	lcall	_printf
   12A1 15 81              4477 	dec	sp
   12A3 15 81              4478 	dec	sp
   12A5 15 81              4479 	dec	sp
                           4480 ;	Peephole 300	removed redundant label 00101$
   12A7 22                 4481 	ret
                           4482 ;------------------------------------------------------------
                           4483 ;Allocation info for local variables in function 'handleMAINMode'
                           4484 ;------------------------------------------------------------
                           4485 ;c                         Allocated with name '_handleMAINMode_c_1_1'
                           4486 ;------------------------------------------------------------
                           4487 ;	main.c:535: void handleMAINMode(char c){
                           4488 ;	-----------------------------------------
                           4489 ;	 function handleMAINMode
                           4490 ;	-----------------------------------------
   12A8                    4491 _handleMAINMode:
                           4492 ;	genReceive
   12A8 E5 82              4493 	mov	a,dpl
   12AA 90s00r7F           4494 	mov	dptr,#_handleMAINMode_c_1_1
   12AD F0                 4495 	movx	@dptr,a
                           4496 ;	main.c:536: switch(c){
                           4497 ;	genAssign
   12AE 90s00r7F           4498 	mov	dptr,#_handleMAINMode_c_1_1
   12B1 E0                 4499 	movx	a,@dptr
   12B2 FA                 4500 	mov	r2,a
                           4501 ;	genCmpEq
                           4502 ;	gencjneshort
   12B3 BA 43 02           4503 	cjne	r2,#0x43,00123$
                           4504 ;	Peephole 112.b	changed ljmp to sjmp
   12B6 80 33              4505 	sjmp	00104$
   12B8                    4506 00123$:
                           4507 ;	genCmpEq
                           4508 ;	gencjneshort
   12B8 BA 45 02           4509 	cjne	r2,#0x45,00124$
                           4510 ;	Peephole 112.b	changed ljmp to sjmp
   12BB 80 25              4511 	sjmp	00103$
   12BD                    4512 00124$:
                           4513 ;	genCmpEq
                           4514 ;	gencjneshort
   12BD BA 47 02           4515 	cjne	r2,#0x47,00125$
                           4516 ;	Peephole 112.b	changed ljmp to sjmp
   12C0 80 32              4517 	sjmp	00105$
   12C2                    4518 00125$:
                           4519 ;	genCmpEq
                           4520 ;	gencjneshort
   12C2 BA 48 02           4521 	cjne	r2,#0x48,00126$
                           4522 ;	Peephole 112.b	changed ljmp to sjmp
   12C5 80 0F              4523 	sjmp	00101$
   12C7                    4524 00126$:
                           4525 ;	genCmpEq
                           4526 ;	gencjneshort
   12C7 BA 49 02           4527 	cjne	r2,#0x49,00127$
                           4528 ;	Peephole 112.b	changed ljmp to sjmp
   12CA 80 3A              4529 	sjmp	00109$
   12CC                    4530 00127$:
                           4531 ;	genCmpEq
                           4532 ;	gencjneshort
   12CC BA 4C 02           4533 	cjne	r2,#0x4C,00128$
                           4534 ;	Peephole 112.b	changed ljmp to sjmp
   12CF 80 08              4535 	sjmp	00102$
   12D1                    4536 00128$:
                           4537 ;	genCmpEq
                           4538 ;	gencjneshort
                           4539 ;	Peephole 112.b	changed ljmp to sjmp
                           4540 ;	main.c:537: case 'H':
                           4541 ;	Peephole 112.b	changed ljmp to sjmp
                           4542 ;	Peephole 198.b	optimized misc jump sequence
   12D1 BA 50 34           4543 	cjne	r2,#0x50,00113$
   12D4 80 27              4544 	sjmp	00106$
                           4545 ;	Peephole 300	removed redundant label 00129$
   12D6                    4546 00101$:
                           4547 ;	main.c:538: MainMenu();
                           4548 ;	genCall
                           4549 ;	main.c:539: break;
                           4550 ;	main.c:540: case 'L':
                           4551 ;	Peephole 112.b	changed ljmp to sjmp
                           4552 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4553 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12D6 02s11rD5           4554 	ljmp	_MainMenu
   12D9                    4555 00102$:
                           4556 ;	main.c:541: mode = LCD_MODE;
                           4557 ;	genAssign
   12D9 90s00r00           4558 	mov	dptr,#_mode
   12DC 74 01              4559 	mov	a,#0x01
   12DE F0                 4560 	movx	@dptr,a
                           4561 ;	main.c:542: LCD_Menu();
                           4562 ;	genCall
                           4563 ;	main.c:543: break;
                           4564 ;	main.c:544: case 'E':
                           4565 ;	Peephole 112.b	changed ljmp to sjmp
                           4566 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4567 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12DF 02s03r94           4568 	ljmp	_LCD_Menu
   12E2                    4569 00103$:
                           4570 ;	main.c:545: mode = EEPROM_MODE;
                           4571 ;	genAssign
   12E2 90s00r00           4572 	mov	dptr,#_mode
   12E5 74 02              4573 	mov	a,#0x02
   12E7 F0                 4574 	movx	@dptr,a
                           4575 ;	main.c:546: EEPROM_Menu();
                           4576 ;	genCall
                           4577 ;	main.c:547: break;
                           4578 ;	main.c:548: case 'C':
                           4579 ;	Peephole 112.b	changed ljmp to sjmp
                           4580 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4581 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12E8 02s0Ar07           4582 	ljmp	_EEPROM_Menu
   12EB                    4583 00104$:
                           4584 ;	main.c:549: mode = CLOCK_MODE;
                           4585 ;	genAssign
   12EB 90s00r00           4586 	mov	dptr,#_mode
   12EE 74 03              4587 	mov	a,#0x03
   12F0 F0                 4588 	movx	@dptr,a
                           4589 ;	main.c:550: CLOCK_Menu();
                           4590 ;	genCall
                           4591 ;	main.c:551: break;
                           4592 ;	main.c:552: case 'G':
                           4593 ;	Peephole 112.b	changed ljmp to sjmp
                           4594 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4595 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12F1 02s0Er8A           4596 	ljmp	_CLOCK_Menu
   12F4                    4597 00105$:
                           4598 ;	main.c:553: mode = CG_MODE;
                           4599 ;	genAssign
   12F4 90s00r00           4600 	mov	dptr,#_mode
   12F7 74 04              4601 	mov	a,#0x04
   12F9 F0                 4602 	movx	@dptr,a
                           4603 ;	main.c:554: CG_Menu();
                           4604 ;	genCall
                           4605 ;	main.c:555: break;
                           4606 ;	main.c:556: case 'P':
                           4607 ;	Peephole 112.b	changed ljmp to sjmp
                           4608 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4609 ;	Peephole 253.a	replaced lcall/ret with ljmp
   12FA 02s02r3F           4610 	ljmp	_CG_Menu
   12FD                    4611 00106$:
                           4612 ;	main.c:557: mode = PCF_MODE;
                           4613 ;	genAssign
   12FD 90s00r00           4614 	mov	dptr,#_mode
   1300 74 05              4615 	mov	a,#0x05
   1302 F0                 4616 	movx	@dptr,a
                           4617 ;	main.c:558: PCF_Menu();
                           4618 ;	genCall
                           4619 ;	main.c:559: break;
                           4620 ;	main.c:561: while(1);
                           4621 ;	Peephole 112.b	changed ljmp to sjmp
                           4622 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4623 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1303 02s00rE8           4624 	ljmp	_PCF_Menu
   1306                    4625 00109$:
                           4626 ;	main.c:565: }
                           4627 ;	Peephole 112.b	changed ljmp to sjmp
   1306 80 FE              4628 	sjmp	00109$
   1308                    4629 00113$:
   1308 22                 4630 	ret
                           4631 ;------------------------------------------------------------
                           4632 ;Allocation info for local variables in function 'handleInput'
                           4633 ;------------------------------------------------------------
                           4634 ;c                         Allocated with name '_handleInput_c_1_1'
                           4635 ;------------------------------------------------------------
                           4636 ;	main.c:572: void handleInput(char c){
                           4637 ;	-----------------------------------------
                           4638 ;	 function handleInput
                           4639 ;	-----------------------------------------
   1309                    4640 _handleInput:
                           4641 ;	genReceive
   1309 E5 82              4642 	mov	a,dpl
   130B 90s00r80           4643 	mov	dptr,#_handleInput_c_1_1
   130E F0                 4644 	movx	@dptr,a
                           4645 ;	main.c:573: switch(mode){
                           4646 ;	genAssign
   130F 90s00r00           4647 	mov	dptr,#_mode
   1312 E0                 4648 	movx	a,@dptr
                           4649 ;	genCmpGt
                           4650 ;	genCmp
                           4651 ;	genIfxJump
                           4652 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   1313 FA                 4653 	mov  r2,a
                           4654 ;	Peephole 177.a	removed redundant mov
   1314 24 FA              4655 	add	a,#0xff - 0x05
                           4656 ;	Peephole 112.b	changed ljmp to sjmp
                           4657 ;	Peephole 160.a	removed sjmp by inverse jump logic
   1316 40 55              4658 	jc	00108$
                           4659 ;	Peephole 300	removed redundant label 00111$
                           4660 ;	genJumpTab
   1318 EA                 4661 	mov	a,r2
                           4662 ;	Peephole 254	optimized left shift
   1319 2A                 4663 	add	a,r2
   131A 2A                 4664 	add	a,r2
   131B 90s13r1F           4665 	mov	dptr,#00112$
   131E 73                 4666 	jmp	@a+dptr
   131F                    4667 00112$:
   131F 02s13r31           4668 	ljmp	00101$
   1322 02s13r3B           4669 	ljmp	00102$
   1325 02s13r45           4670 	ljmp	00103$
   1328 02s13r4F           4671 	ljmp	00104$
   132B 02s13r59           4672 	ljmp	00105$
   132E 02s13r63           4673 	ljmp	00106$
                           4674 ;	main.c:574: case MAIN_MODE:
   1331                    4675 00101$:
                           4676 ;	main.c:575: handleMAINMode(c);
                           4677 ;	genAssign
   1331 90s00r80           4678 	mov	dptr,#_handleInput_c_1_1
   1334 E0                 4679 	movx	a,@dptr
                           4680 ;	genCall
   1335 FA                 4681 	mov	r2,a
                           4682 ;	Peephole 244.c	loading dpl from a instead of r2
   1336 F5 82              4683 	mov	dpl,a
                           4684 ;	main.c:576: break;
                           4685 ;	main.c:577: case LCD_MODE:
                           4686 ;	Peephole 112.b	changed ljmp to sjmp
                           4687 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4688 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1338 02s12rA8           4689 	ljmp	_handleMAINMode
   133B                    4690 00102$:
                           4691 ;	main.c:578: handleLCDMode(c);
                           4692 ;	genAssign
   133B 90s00r80           4693 	mov	dptr,#_handleInput_c_1_1
   133E E0                 4694 	movx	a,@dptr
                           4695 ;	genCall
   133F FA                 4696 	mov	r2,a
                           4697 ;	Peephole 244.c	loading dpl from a instead of r2
   1340 F5 82              4698 	mov	dpl,a
                           4699 ;	main.c:579: break;
                           4700 ;	main.c:580: case EEPROM_MODE:
                           4701 ;	Peephole 112.b	changed ljmp to sjmp
                           4702 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4703 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1342 02s04r7C           4704 	ljmp	_handleLCDMode
   1345                    4705 00103$:
                           4706 ;	main.c:581: handleEEPROMMode(c);
                           4707 ;	genAssign
   1345 90s00r80           4708 	mov	dptr,#_handleInput_c_1_1
   1348 E0                 4709 	movx	a,@dptr
                           4710 ;	genCall
   1349 FA                 4711 	mov	r2,a
                           4712 ;	Peephole 244.c	loading dpl from a instead of r2
   134A F5 82              4713 	mov	dpl,a
                           4714 ;	main.c:582: break;
                           4715 ;	main.c:583: case CLOCK_MODE:
                           4716 ;	Peephole 112.b	changed ljmp to sjmp
                           4717 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4718 ;	Peephole 253.a	replaced lcall/ret with ljmp
   134C 02s0ArB0           4719 	ljmp	_handleEEPROMMode
   134F                    4720 00104$:
                           4721 ;	main.c:584: handleCLOCKMode(c);
                           4722 ;	genAssign
   134F 90s00r80           4723 	mov	dptr,#_handleInput_c_1_1
   1352 E0                 4724 	movx	a,@dptr
                           4725 ;	genCall
   1353 FA                 4726 	mov	r2,a
                           4727 ;	Peephole 244.c	loading dpl from a instead of r2
   1354 F5 82              4728 	mov	dpl,a
                           4729 ;	main.c:585: break;
                           4730 ;	main.c:586: case CG_MODE:
                           4731 ;	Peephole 112.b	changed ljmp to sjmp
                           4732 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4733 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1356 02s0Fr5D           4734 	ljmp	_handleCLOCKMode
   1359                    4735 00105$:
                           4736 ;	main.c:587: handleCGMode(c);
                           4737 ;	genAssign
   1359 90s00r80           4738 	mov	dptr,#_handleInput_c_1_1
   135C E0                 4739 	movx	a,@dptr
                           4740 ;	genCall
   135D FA                 4741 	mov	r2,a
                           4742 ;	Peephole 244.c	loading dpl from a instead of r2
   135E F5 82              4743 	mov	dpl,a
                           4744 ;	main.c:588: break;
                           4745 ;	main.c:589: case PCF_MODE:
                           4746 ;	Peephole 112.b	changed ljmp to sjmp
                           4747 ;	Peephole 251.b	replaced sjmp to ret with ret
                           4748 ;	Peephole 253.a	replaced lcall/ret with ljmp
   1360 02s02rD3           4749 	ljmp	_handleCGMode
   1363                    4750 00106$:
                           4751 ;	main.c:590: handlePCFMode(c);
                           4752 ;	genAssign
   1363 90s00r80           4753 	mov	dptr,#_handleInput_c_1_1
   1366 E0                 4754 	movx	a,@dptr
                           4755 ;	genCall
   1367 FA                 4756 	mov	r2,a
                           4757 ;	Peephole 244.c	loading dpl from a instead of r2
   1368 F5 82              4758 	mov	dpl,a
                           4759 ;	main.c:592: }
                           4760 ;	Peephole 253.c	replaced lcall with ljmp
   136A 02s01r67           4761 	ljmp	_handlePCFMode
   136D                    4762 00108$:
   136D 22                 4763 	ret
                           4764 ;------------------------------------------------------------
                           4765 ;Allocation info for local variables in function 'main'
                           4766 ;------------------------------------------------------------
                           4767 ;c                         Allocated with name '_main_c_2_2'
                           4768 ;i                         Allocated with name '_main_i_2_2'
                           4769 ;------------------------------------------------------------
                           4770 ;	main.c:598: void main(void)
                           4771 ;	-----------------------------------------
                           4772 ;	 function main
                           4773 ;	-----------------------------------------
   136E                    4774 _main:
                           4775 ;	main.c:600: Serial_Init();
                           4776 ;	genCall
   136E 12s00r00           4777 	lcall	_Serial_Init
                           4778 ;	main.c:601: EPROM_Init();
                           4779 ;	genCall
   1371 12s00r00           4780 	lcall	_EPROM_Init
                           4781 ;	main.c:602: PCF_Init();
                           4782 ;	genCall
   1374 12s00r00           4783 	lcall	_PCF_Init
                           4784 ;	main.c:603: LCD_Init();
                           4785 ;	genCall
   1377 12s00r00           4786 	lcall	_LCD_Init
                           4787 ;	main.c:604: P1_3 = 1;
                           4788 ;	genAssign
   137A D2 93              4789 	setb	_P1_3
                           4790 ;	main.c:606: Timer0_Init();
                           4791 ;	genCall
   137C 12s00r00           4792 	lcall	_Timer0_Init
                           4793 ;	main.c:607: mode = MAIN_MODE;
                           4794 ;	genAssign
   137F 90s00r00           4795 	mov	dptr,#_mode
                           4796 ;	Peephole 181	changed mov to clr
                           4797 ;	main.c:608: LCD_gotoxy(0,0);    //Start at 0,0
                           4798 ;	genAssign
                           4799 ;	Peephole 181	changed mov to clr
                           4800 ;	Peephole 219.a	removed redundant clear
   1382 E4                 4801 	clr	a
   1383 F0                 4802 	movx	@dptr,a
   1384 90s00r00           4803 	mov	dptr,#_LCD_gotoxy_PARM_2
   1387 F0                 4804 	movx	@dptr,a
                           4805 ;	genCall
   1388 75 82 00           4806 	mov	dpl,#0x00
   138B 12s00r00           4807 	lcall	_LCD_gotoxy
                           4808 ;	main.c:609: MainMenu();
                           4809 ;	genCall
   138E 12s11rD5           4810 	lcall	_MainMenu
                           4811 ;	main.c:610: Watchdog_Init();
                           4812 ;	genCall
   1391 12s00r00           4813 	lcall	_Watchdog_Init
                           4814 ;	main.c:615: checkAlarms:
   1394                    4815 00101$:
                           4816 ;	main.c:616: for (i = 0; i < 3; ++i){
                           4817 ;	genAssign
   1394 90s00r81           4818 	mov	dptr,#_main_i_2_2
                           4819 ;	Peephole 181	changed mov to clr
   1397 E4                 4820 	clr	a
   1398 F0                 4821 	movx	@dptr,a
                           4822 ;	genAssign
   1399 7A 00              4823 	mov	r2,#0x00
   139B                    4824 00119$:
                           4825 ;	genCmpLt
                           4826 ;	genCmp
   139B BA 03 00           4827 	cjne	r2,#0x03,00141$
   139E                    4828 00141$:
                           4829 ;	genIfxJump
   139E 40 03              4830 	jc	00142$
   13A0 02s14r9E           4831 	ljmp	00122$
   13A3                    4832 00142$:
                           4833 ;	main.c:617: if(ExpiredAlarms[i]){
                           4834 ;	genPlus
                           4835 ;	Peephole 236.g	used r2 instead of ar2
   13A3 EA                 4836 	mov	a,r2
   13A4 24r01              4837 	add	a,#_ExpiredAlarms
   13A6 FB                 4838 	mov	r3,a
                           4839 ;	Peephole 181	changed mov to clr
   13A7 E4                 4840 	clr	a
   13A8 34s00              4841 	addc	a,#(_ExpiredAlarms >> 8)
   13AA FC                 4842 	mov	r4,a
                           4843 ;	genPointerGet
                           4844 ;	genFarPointerGet
   13AB 8B 82              4845 	mov	dpl,r3
   13AD 8C 83              4846 	mov	dph,r4
   13AF E0                 4847 	movx	a,@dptr
                           4848 ;	genIfxJump
   13B0 70 03              4849 	jnz	00143$
   13B2 02s14r95           4850 	ljmp	00121$
   13B5                    4851 00143$:
                           4852 ;	main.c:618: printf("\r\nAlarm %d going off, you must press 'D' to disable it\r\n", i);
                           4853 ;	genCast
   13B5 8A 03              4854 	mov	ar3,r2
   13B7 7C 00              4855 	mov	r4,#0x00
                           4856 ;	genIpush
   13B9 C0 03              4857 	push	ar3
   13BB C0 04              4858 	push	ar4
                           4859 ;	genIpush
   13BD 74rE1              4860 	mov	a,#__str_85
   13BF C0 E0              4861 	push	acc
   13C1 74s0A              4862 	mov	a,#(__str_85 >> 8)
   13C3 C0 E0              4863 	push	acc
   13C5 74 80              4864 	mov	a,#0x80
   13C7 C0 E0              4865 	push	acc
                           4866 ;	genCall
   13C9 12s00r00           4867 	lcall	_printf
   13CC E5 81              4868 	mov	a,sp
   13CE 24 FB              4869 	add	a,#0xfb
   13D0 F5 81              4870 	mov	sp,a
                           4871 ;	main.c:619: LCD_gotoxy(0,0);
                           4872 ;	genAssign
   13D2 90s00r00           4873 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4874 ;	Peephole 181	changed mov to clr
   13D5 E4                 4875 	clr	a
   13D6 F0                 4876 	movx	@dptr,a
                           4877 ;	genCall
   13D7 75 82 00           4878 	mov	dpl,#0x00
   13DA 12s00r00           4879 	lcall	_LCD_gotoxy
                           4880 ;	main.c:620: LCD_Putstr("Disable Alarm!");
                           4881 ;	genCall
                           4882 ;	Peephole 182.a	used 16 bit load of DPTR
   13DD 90s0Br1A           4883 	mov	dptr,#__str_86
   13E0 75 F0 80           4884 	mov	b,#0x80
   13E3 12s00r00           4885 	lcall	_LCD_Putstr
                           4886 ;	main.c:621: while(getchar() != 'D'){
                           4887 ;	genAssign
   13E6 90s00r81           4888 	mov	dptr,#_main_i_2_2
   13E9 E0                 4889 	movx	a,@dptr
   13EA FB                 4890 	mov	r3,a
   13EB                    4891 00102$:
                           4892 ;	genCall
   13EB C0 03              4893 	push	ar3
   13ED 12s00r00           4894 	lcall	_getchar
   13F0 AC 82              4895 	mov	r4,dpl
   13F2 D0 03              4896 	pop	ar3
                           4897 ;	genCmpEq
                           4898 ;	gencjneshort
   13F4 BC 44 02           4899 	cjne	r4,#0x44,00144$
                           4900 ;	Peephole 112.b	changed ljmp to sjmp
   13F7 80 3F              4901 	sjmp	00104$
   13F9                    4902 00144$:
                           4903 ;	main.c:622: printf("\r\nAlarm %d going off, you must press 'D' to disable it\r\n", i);
                           4904 ;	genCast
   13F9 8B 04              4905 	mov	ar4,r3
   13FB 7D 00              4906 	mov	r5,#0x00
                           4907 ;	genIpush
   13FD C0 03              4908 	push	ar3
   13FF C0 04              4909 	push	ar4
   1401 C0 05              4910 	push	ar5
                           4911 ;	genIpush
   1403 74rE1              4912 	mov	a,#__str_85
   1405 C0 E0              4913 	push	acc
   1407 74s0A              4914 	mov	a,#(__str_85 >> 8)
   1409 C0 E0              4915 	push	acc
   140B 74 80              4916 	mov	a,#0x80
   140D C0 E0              4917 	push	acc
                           4918 ;	genCall
   140F 12s00r00           4919 	lcall	_printf
   1412 E5 81              4920 	mov	a,sp
   1414 24 FB              4921 	add	a,#0xfb
   1416 F5 81              4922 	mov	sp,a
   1418 D0 03              4923 	pop	ar3
                           4924 ;	main.c:623: LCD_gotoxy(0,0);
                           4925 ;	genAssign
   141A 90s00r00           4926 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4927 ;	Peephole 181	changed mov to clr
   141D E4                 4928 	clr	a
   141E F0                 4929 	movx	@dptr,a
                           4930 ;	genCall
   141F 75 82 00           4931 	mov	dpl,#0x00
   1422 C0 03              4932 	push	ar3
   1424 12s00r00           4933 	lcall	_LCD_gotoxy
   1427 D0 03              4934 	pop	ar3
                           4935 ;	main.c:624: LCD_Putstr("Disable Alarm!");
                           4936 ;	genCall
                           4937 ;	Peephole 182.a	used 16 bit load of DPTR
   1429 90s0Br1A           4938 	mov	dptr,#__str_86
   142C 75 F0 80           4939 	mov	b,#0x80
   142F C0 03              4940 	push	ar3
   1431 12s00r00           4941 	lcall	_LCD_Putstr
   1434 D0 03              4942 	pop	ar3
                           4943 ;	Peephole 112.b	changed ljmp to sjmp
   1436 80 B3              4944 	sjmp	00102$
   1438                    4945 00104$:
                           4946 ;	main.c:626: printf("\r\nAlarm %d disabled!\r\n", i);
                           4947 ;	genAssign
   1438 90s00r81           4948 	mov	dptr,#_main_i_2_2
   143B E0                 4949 	movx	a,@dptr
   143C FB                 4950 	mov	r3,a
                           4951 ;	genCast
   143D 8B 04              4952 	mov	ar4,r3
   143F 7D 00              4953 	mov	r5,#0x00
                           4954 ;	genIpush
   1441 C0 03              4955 	push	ar3
   1443 C0 04              4956 	push	ar4
   1445 C0 05              4957 	push	ar5
                           4958 ;	genIpush
   1447 74r29              4959 	mov	a,#__str_87
   1449 C0 E0              4960 	push	acc
   144B 74s0B              4961 	mov	a,#(__str_87 >> 8)
   144D C0 E0              4962 	push	acc
   144F 74 80              4963 	mov	a,#0x80
   1451 C0 E0              4964 	push	acc
                           4965 ;	genCall
   1453 12s00r00           4966 	lcall	_printf
   1456 E5 81              4967 	mov	a,sp
   1458 24 FB              4968 	add	a,#0xfb
   145A F5 81              4969 	mov	sp,a
   145C D0 03              4970 	pop	ar3
                           4971 ;	main.c:627: LCD_gotoxy(0,0);
                           4972 ;	genAssign
   145E 90s00r00           4973 	mov	dptr,#_LCD_gotoxy_PARM_2
                           4974 ;	Peephole 181	changed mov to clr
   1461 E4                 4975 	clr	a
   1462 F0                 4976 	movx	@dptr,a
                           4977 ;	genCall
   1463 75 82 00           4978 	mov	dpl,#0x00
   1466 C0 03              4979 	push	ar3
   1468 12s00r00           4980 	lcall	_LCD_gotoxy
   146B D0 03              4981 	pop	ar3
                           4982 ;	main.c:628: LCD_Putstr("              ");
                           4983 ;	genCall
                           4984 ;	Peephole 182.a	used 16 bit load of DPTR
   146D 90s0Br40           4985 	mov	dptr,#__str_88
   1470 75 F0 80           4986 	mov	b,#0x80
   1473 C0 03              4987 	push	ar3
   1475 12s00r00           4988 	lcall	_LCD_Putstr
   1478 D0 03              4989 	pop	ar3
                           4990 ;	main.c:629: ActiveAlarms[i] = 0;
                           4991 ;	genPlus
                           4992 ;	Peephole 236.g	used r3 instead of ar3
   147A EB                 4993 	mov	a,r3
   147B 24r00              4994 	add	a,#_ActiveAlarms
   147D F5 82              4995 	mov	dpl,a
                           4996 ;	Peephole 181	changed mov to clr
   147F E4                 4997 	clr	a
   1480 34s00              4998 	addc	a,#(_ActiveAlarms >> 8)
   1482 F5 83              4999 	mov	dph,a
                           5000 ;	genPointerSet
                           5001 ;     genFarPointerSet
                           5002 ;	Peephole 181	changed mov to clr
   1484 E4                 5003 	clr	a
   1485 F0                 5004 	movx	@dptr,a
                           5005 ;	main.c:630: ExpiredAlarms[i] = 0;
                           5006 ;	genPlus
                           5007 ;	Peephole 236.g	used r3 instead of ar3
   1486 EB                 5008 	mov	a,r3
   1487 24r01              5009 	add	a,#_ExpiredAlarms
   1489 F5 82              5010 	mov	dpl,a
                           5011 ;	Peephole 181	changed mov to clr
   148B E4                 5012 	clr	a
   148C 34s00              5013 	addc	a,#(_ExpiredAlarms >> 8)
   148E F5 83              5014 	mov	dph,a
                           5015 ;	genPointerSet
                           5016 ;     genFarPointerSet
                           5017 ;	Peephole 181	changed mov to clr
   1490 E4                 5018 	clr	a
   1491 F0                 5019 	movx	@dptr,a
                           5020 ;	main.c:631: goto checkAlarms;
   1492 02s13r94           5021 	ljmp	00101$
   1495                    5022 00121$:
                           5023 ;	main.c:616: for (i = 0; i < 3; ++i){
                           5024 ;	genPlus
                           5025 ;     genPlusIncr
   1495 0A                 5026 	inc	r2
                           5027 ;	genAssign
   1496 90s00r81           5028 	mov	dptr,#_main_i_2_2
   1499 EA                 5029 	mov	a,r2
   149A F0                 5030 	movx	@dptr,a
   149B 02s13r9B           5031 	ljmp	00119$
   149E                    5032 00122$:
                           5033 ;	main.c:634: c = getchar ();
                           5034 ;	genCall
   149E 12s00r00           5035 	lcall	_getchar
   14A1 AA 82              5036 	mov	r2,dpl
                           5037 ;	main.c:635: if(DisableFlag){
                           5038 ;	genIfx
                           5039 ;	genIfxJump
                           5040 ;	main.c:636: DisableFlag = false;
                           5041 ;	genAssign
                           5042 ;	Peephole 250.b	using atomic test and clear
   14A3 10*00 03           5043 	jbc	_DisableFlag,00145$
   14A6 02s15r22           5044 	ljmp	00113$
   14A9                    5045 00145$:
                           5046 ;	main.c:637: if(c == 'D'){
                           5047 ;	genCmpEq
                           5048 ;	gencjneshort
   14A9 BA 44 02           5049 	cjne	r2,#0x44,00146$
   14AC 80 03              5050 	sjmp	00147$
   14AE                    5051 00146$:
   14AE 02s13r94           5052 	ljmp	00101$
   14B1                    5053 00147$:
                           5054 ;	main.c:638: for (i = 0; i < 3; ++i){
                           5055 ;	genAssign
   14B1 7B 00              5056 	mov	r3,#0x00
   14B3                    5057 00123$:
                           5058 ;	genCmpLt
                           5059 ;	genCmp
   14B3 BB 03 00           5060 	cjne	r3,#0x03,00148$
   14B6                    5061 00148$:
                           5062 ;	genIfxJump
   14B6 40 03              5063 	jc	00149$
   14B8 02s13r94           5064 	ljmp	00101$
   14BB                    5065 00149$:
                           5066 ;	main.c:639: if(ExpiredAlarms[i]){
                           5067 ;	genPlus
                           5068 ;	Peephole 236.g	used r3 instead of ar3
   14BB EB                 5069 	mov	a,r3
   14BC 24r01              5070 	add	a,#_ExpiredAlarms
   14BE FC                 5071 	mov	r4,a
                           5072 ;	Peephole 181	changed mov to clr
   14BF E4                 5073 	clr	a
   14C0 34s00              5074 	addc	a,#(_ExpiredAlarms >> 8)
   14C2 FD                 5075 	mov	r5,a
                           5076 ;	genPointerGet
                           5077 ;	genFarPointerGet
   14C3 8C 82              5078 	mov	dpl,r4
   14C5 8D 83              5079 	mov	dph,r5
   14C7 E0                 5080 	movx	a,@dptr
                           5081 ;	genIfxJump
                           5082 ;	Peephole 108.c	removed ljmp by inverse jump logic
   14C8 60 55              5083 	jz	00125$
                           5084 ;	Peephole 300	removed redundant label 00150$
                           5085 ;	main.c:640: printf("\r\nAlarm %d disabled!\r\n", i);
                           5086 ;	genCast
   14CA 8B 04              5087 	mov	ar4,r3
   14CC 7D 00              5088 	mov	r5,#0x00
                           5089 ;	genIpush
   14CE C0 03              5090 	push	ar3
   14D0 C0 04              5091 	push	ar4
   14D2 C0 05              5092 	push	ar5
                           5093 ;	genIpush
   14D4 74r29              5094 	mov	a,#__str_87
   14D6 C0 E0              5095 	push	acc
   14D8 74s0B              5096 	mov	a,#(__str_87 >> 8)
   14DA C0 E0              5097 	push	acc
   14DC 74 80              5098 	mov	a,#0x80
   14DE C0 E0              5099 	push	acc
                           5100 ;	genCall
   14E0 12s00r00           5101 	lcall	_printf
   14E3 E5 81              5102 	mov	a,sp
   14E5 24 FB              5103 	add	a,#0xfb
   14E7 F5 81              5104 	mov	sp,a
   14E9 D0 03              5105 	pop	ar3
                           5106 ;	main.c:641: LCD_gotoxy(0,0);
                           5107 ;	genAssign
   14EB 90s00r00           5108 	mov	dptr,#_LCD_gotoxy_PARM_2
                           5109 ;	Peephole 181	changed mov to clr
   14EE E4                 5110 	clr	a
   14EF F0                 5111 	movx	@dptr,a
                           5112 ;	genCall
   14F0 75 82 00           5113 	mov	dpl,#0x00
   14F3 C0 03              5114 	push	ar3
   14F5 12s00r00           5115 	lcall	_LCD_gotoxy
   14F8 D0 03              5116 	pop	ar3
                           5117 ;	main.c:642: LCD_Putstr("              ");
                           5118 ;	genCall
                           5119 ;	Peephole 182.a	used 16 bit load of DPTR
   14FA 90s0Br40           5120 	mov	dptr,#__str_88
   14FD 75 F0 80           5121 	mov	b,#0x80
   1500 C0 03              5122 	push	ar3
   1502 12s00r00           5123 	lcall	_LCD_Putstr
   1505 D0 03              5124 	pop	ar3
                           5125 ;	main.c:643: ActiveAlarms[i] = 0;
                           5126 ;	genPlus
                           5127 ;	Peephole 236.g	used r3 instead of ar3
   1507 EB                 5128 	mov	a,r3
   1508 24r00              5129 	add	a,#_ActiveAlarms
   150A F5 82              5130 	mov	dpl,a
                           5131 ;	Peephole 181	changed mov to clr
   150C E4                 5132 	clr	a
   150D 34s00              5133 	addc	a,#(_ActiveAlarms >> 8)
   150F F5 83              5134 	mov	dph,a
                           5135 ;	genPointerSet
                           5136 ;     genFarPointerSet
                           5137 ;	Peephole 181	changed mov to clr
   1511 E4                 5138 	clr	a
   1512 F0                 5139 	movx	@dptr,a
                           5140 ;	main.c:644: ExpiredAlarms[i] = 0;
                           5141 ;	genPlus
                           5142 ;	Peephole 236.g	used r3 instead of ar3
   1513 EB                 5143 	mov	a,r3
   1514 24r01              5144 	add	a,#_ExpiredAlarms
   1516 F5 82              5145 	mov	dpl,a
                           5146 ;	Peephole 181	changed mov to clr
   1518 E4                 5147 	clr	a
   1519 34s00              5148 	addc	a,#(_ExpiredAlarms >> 8)
   151B F5 83              5149 	mov	dph,a
                           5150 ;	genPointerSet
                           5151 ;     genFarPointerSet
                           5152 ;	Peephole 181	changed mov to clr
   151D E4                 5153 	clr	a
   151E F0                 5154 	movx	@dptr,a
   151F                    5155 00125$:
                           5156 ;	main.c:638: for (i = 0; i < 3; ++i){
                           5157 ;	genPlus
                           5158 ;     genPlusIncr
   151F 0B                 5159 	inc	r3
                           5160 ;	main.c:650: goto checkAlarms;
                           5161 ;	Peephole 112.b	changed ljmp to sjmp
   1520 80 91              5162 	sjmp	00123$
   1522                    5163 00113$:
                           5164 ;	main.c:654: if (c == ENTER_KEY){
                           5165 ;	genCmpEq
                           5166 ;	gencjneshort
                           5167 ;	Peephole 112.b	changed ljmp to sjmp
                           5168 ;	Peephole 198.b	optimized misc jump sequence
   1522 BA 0D 0A           5169 	cjne	r2,#0x0D,00115$
                           5170 ;	Peephole 200.b	removed redundant sjmp
                           5171 ;	Peephole 300	removed redundant label 00151$
                           5172 ;	Peephole 300	removed redundant label 00152$
                           5173 ;	main.c:655: putchar('\n');
                           5174 ;	genCall
   1525 75 82 0A           5175 	mov	dpl,#0x0A
   1528 C0 02              5176 	push	ar2
   152A 12s00r00           5177 	lcall	_putchar
   152D D0 02              5178 	pop	ar2
   152F                    5179 00115$:
                           5180 ;	main.c:657: putchar(c);
                           5181 ;	genCall
   152F 8A 82              5182 	mov	dpl,r2
   1531 C0 02              5183 	push	ar2
   1533 12s00r00           5184 	lcall	_putchar
   1536 D0 02              5185 	pop	ar2
                           5186 ;	main.c:658: handleInput(c);
                           5187 ;	genCall
   1538 8A 82              5188 	mov	dpl,r2
   153A 12s13r09           5189 	lcall	_handleInput
   153D 02s13r94           5190 	ljmp	00101$
                           5191 ;	Peephole 259.b	removed redundant label 00127$ and ret
                           5192 ;
                           5193 	.area CSEG    (CODE)
                           5194 	.area CONST   (CODE)
   0000                    5195 __str_0:
   0000 0D                 5196 	.db 0x0D
   0001 0A                 5197 	.db 0x0A
   0002 45 6E 74 65 72 20  5198 	.ascii "Enter an EEPROM block number from 0-7: "
        61 6E 20 45 45 50
        52 4F 4D 20 62 6C
        6F 63 6B 20 6E 75
        6D 62 65 72 20 66
        72 6F 6D 20 30 2D
        37 3A 20
   0029 00                 5199 	.db 0x00
   002A                    5200 __str_1:
   002A 0D                 5201 	.db 0x0D
   002B 0A                 5202 	.db 0x0A
   002C 49 4E 56 41 4C 49  5203 	.ascii "INVALID: Enter an EEPROM block number from 0-7: "
        44 3A 20 45 6E 74
        65 72 20 61 6E 20
        45 45 50 52 4F 4D
        20 62 6C 6F 63 6B
        20 6E 75 6D 62 65
        72 20 66 72 6F 6D
        20 30 2D 37 3A 20
   005C 00                 5204 	.db 0x00
   005D                    5205 __str_2:
   005D 0D                 5206 	.db 0x0D
   005E 0A                 5207 	.db 0x0A
   005F 45 6E 74 65 72 20  5208 	.ascii "Enter an EEPROM Word address in hex:"
        61 6E 20 45 45 50
        52 4F 4D 20 57 6F
        72 64 20 61 64 64
        72 65 73 73 20 69
        6E 20 68 65 78 3A
   0083 00                 5209 	.db 0x00
   0084                    5210 __str_3:
   0084 0D                 5211 	.db 0x0D
   0085 0A                 5212 	.db 0x0A
   0086 49 6E 20 43 75 73  5213 	.ascii "In Custom Character Mode"
        74 6F 6D 20 43 68
        61 72 61 63 74 65
        72 20 4D 6F 64 65
   009E 00                 5214 	.db 0x00
   009F                    5215 __str_4:
   009F 0D                 5216 	.db 0x0D
   00A0 0A                 5217 	.db 0x0A
   00A1 50 72 65 73 73 20  5218 	.ascii "Press 'H' for help"
        27 48 27 20 66 6F
        72 20 68 65 6C 70
   00B3 00                 5219 	.db 0x00
   00B4                    5220 __str_5:
   00B4 0D                 5221 	.db 0x0D
   00B5 0A                 5222 	.db 0x0A
   00B6 50 72 65 73 73 20  5223 	.ascii "Press 'O' to set pin to output low"
        27 4F 27 20 74 6F
        20 73 65 74 20 70
        69 6E 20 74 6F 20
        6F 75 74 70 75 74
        20 6C 6F 77
   00D8 00                 5224 	.db 0x00
   00D9                    5225 __str_6:
   00D9 0D                 5226 	.db 0x0D
   00DA 0A                 5227 	.db 0x0A
   00DB 50 72 65 73 73 20  5228 	.ascii "Press 'I' to set pin to input/output value high"
        27 49 27 20 74 6F
        20 73 65 74 20 70
        69 6E 20 74 6F 20
        69 6E 70 75 74 2F
        6F 75 74 70 75 74
        20 76 61 6C 75 65
        20 68 69 67 68
   010A 00                 5229 	.db 0x00
   010B                    5230 __str_7:
   010B 0D                 5231 	.db 0x0D
   010C 0A                 5232 	.db 0x0A
   010D 50 72 65 73 73 20  5233 	.ascii "Press 'S' to view status of the pins"
        27 53 27 20 74 6F
        20 76 69 65 77 20
        73 74 61 74 75 73
        20 6F 66 20 74 68
        65 20 70 69 6E 73
   0131 00                 5234 	.db 0x00
   0132                    5235 __str_8:
   0132 0D                 5236 	.db 0x0D
   0133 0A                 5237 	.db 0x0A
   0134 50 72 65 73 73 20  5238 	.ascii "Press 'r' to return to main menu"
        27 72 27 20 74 6F
        20 72 65 74 75 72
        6E 20 74 6F 20 6D
        61 69 6E 20 6D 65
        6E 75
   0154 0D                 5239 	.db 0x0D
   0155 0A                 5240 	.db 0x0A
   0156 00                 5241 	.db 0x00
   0157                    5242 __str_9:
   0157 0D                 5243 	.db 0x0D
   0158 0A                 5244 	.db 0x0A
   0159 45 6E 74 65 72 20  5245 	.ascii "Enter a pin from 0-7 to set as output low: "
        61 20 70 69 6E 20
        66 72 6F 6D 20 30
        2D 37 20 74 6F 20
        73 65 74 20 61 73
        20 6F 75 74 70 75
        74 20 6C 6F 77 3A
        20
   0184 00                 5246 	.db 0x00
   0185                    5247 __str_10:
   0185 0D                 5248 	.db 0x0D
   0186 0A                 5249 	.db 0x0A
   0187 53 6F 72 72 79 2C  5250 	.ascii "Sorry, can't change pin 1 to output low."
        20 63 61 6E 27 74
        20 63 68 61 6E 67
        65 20 70 69 6E 20
        31 20 74 6F 20 6F
        75 74 70 75 74 20
        6C 6F 77 2E
   01AF 0D                 5251 	.db 0x0D
   01B0 0A                 5252 	.db 0x0A
   01B1 00                 5253 	.db 0x00
   01B2                    5254 __str_11:
   01B2 0D                 5255 	.db 0x0D
   01B3 0A                 5256 	.db 0x0A
   01B4 45 6E 74 65 72 20  5257 	.ascii "Enter a pin from 0-7 to set as input/output value high: "
        61 20 70 69 6E 20
        66 72 6F 6D 20 30
        2D 37 20 74 6F 20
        73 65 74 20 61 73
        20 69 6E 70 75 74
        2F 6F 75 74 70 75
        74 20 76 61 6C 75
        65 20 68 69 67 68
        3A 20
   01EC 00                 5258 	.db 0x00
   01ED                    5259 __str_12:
   01ED 2F 72 2F 6E 43 6F  5260 	.ascii "/r/nCounter reset"
        75 6E 74 65 72 20
        72 65 73 65 74
   01FE 0D                 5261 	.db 0x0D
   01FF 0A                 5262 	.db 0x0A
   0200 00                 5263 	.db 0x00
   0201                    5264 __str_13:
   0201 0D                 5265 	.db 0x0D
   0202 0A                 5266 	.db 0x0A
   0203 50 72 65 73 73 20  5267 	.ascii "Press 'T' to test to custom code"
        27 54 27 20 74 6F
        20 74 65 73 74 20
        74 6F 20 63 75 73
        74 6F 6D 20 63 6F
        64 65
   0223 00                 5268 	.db 0x00
   0224                    5269 __str_14:
   0224 0D                 5270 	.db 0x0D
   0225 0A                 5271 	.db 0x0A
   0226 50 72 65 73 73 20  5272 	.ascii "Press 'N' to add a new character"
        27 4E 27 20 74 6F
        20 61 64 64 20 61
        20 6E 65 77 20 63
        68 61 72 61 63 74
        65 72
   0246 00                 5273 	.db 0x00
   0247                    5274 __str_15:
   0247 0D                 5275 	.db 0x0D
   0248 0A                 5276 	.db 0x0A
   0249 50 72 65 73 73 20  5277 	.ascii "Press 'S' to print a custom character"
        27 53 27 20 74 6F
        20 70 72 69 6E 74
        20 61 20 63 75 73
        74 6F 6D 20 63 68
        61 72 61 63 74 65
        72
   026E 00                 5278 	.db 0x00
   026F                    5279 __str_16:
   026F 0D                 5280 	.db 0x0D
   0270 0A                 5281 	.db 0x0A
   0271 50 72 65 73 73 20  5282 	.ascii "Press 'F' to draw a flag to LCD"
        27 46 27 20 74 6F
        20 64 72 61 77 20
        61 20 66 6C 61 67
        20 74 6F 20 4C 43
        44
   0290 00                 5283 	.db 0x00
   0291                    5284 __str_17:
   0291 0D                 5285 	.db 0x0D
   0292 0A                 5286 	.db 0x0A
   0293 45 6E 74 65 72 20  5287 	.ascii "Enter an address from 0-7:"
        61 6E 20 61 64 64
        72 65 73 73 20 66
        72 6F 6D 20 30 2D
        37 3A
   02AD 00                 5288 	.db 0x00
   02AE                    5289 __str_18:
   02AE 0D                 5290 	.db 0x0D
   02AF 0A                 5291 	.db 0x0A
   02B0 57 72 6F 74 65 20  5292 	.ascii "Wrote custom character to LCD"
        63 75 73 74 6F 6D
        20 63 68 61 72 61
        63 74 65 72 20 74
        6F 20 4C 43 44
   02CD 0D                 5293 	.db 0x0D
   02CE 0A                 5294 	.db 0x0A
   02CF 00                 5295 	.db 0x00
   02D0                    5296 __str_19:
   02D0 0D                 5297 	.db 0x0D
   02D1 0A                 5298 	.db 0x0A
   02D2 49 6E 20 4C 43 44  5299 	.ascii "In LCD Mode"
        20 4D 6F 64 65
   02DD 00                 5300 	.db 0x00
   02DE                    5301 __str_20:
   02DE 0D                 5302 	.db 0x0D
   02DF 0A                 5303 	.db 0x0A
   02E0 50 72 65 73 73 20  5304 	.ascii "Press 'I' to Init LCD. Must call this first"
        27 49 27 20 74 6F
        20 49 6E 69 74 20
        4C 43 44 2E 20 4D
        75 73 74 20 63 61
        6C 6C 20 74 68 69
        73 20 66 69 72 73
        74
   030B 00                 5305 	.db 0x00
   030C                    5306 __str_21:
   030C 0D                 5307 	.db 0x0D
   030D 0A                 5308 	.db 0x0A
   030E 50 72 65 73 73 20  5309 	.ascii "Press 'g' to show gotoaddr "
        27 67 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 61 64
        64 72 20
   0329 00                 5310 	.db 0x00
   032A                    5311 __str_22:
   032A 0D                 5312 	.db 0x0D
   032B 0A                 5313 	.db 0x0A
   032C 50 72 65 73 73 20  5314 	.ascii "Press 'x' to show gotoxy"
        27 78 27 20 74 6F
        20 73 68 6F 77 20
        67 6F 74 6F 78 79
   0344 00                 5315 	.db 0x00
   0345                    5316 __str_23:
   0345 0D                 5317 	.db 0x0D
   0346 0A                 5318 	.db 0x0A
   0347 50 72 65 73 73 20  5319 	.ascii "Press 'c' to show putch "
        27 63 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 63 68 20
   035F 00                 5320 	.db 0x00
   0360                    5321 __str_24:
   0360 0D                 5322 	.db 0x0D
   0361 0A                 5323 	.db 0x0A
   0362 50 72 65 73 73 20  5324 	.ascii "Press 's' to show putstr"
        27 73 27 20 74 6F
        20 73 68 6F 77 20
        70 75 74 73 74 72
   037A 00                 5325 	.db 0x00
   037B                    5326 __str_25:
   037B 0D                 5327 	.db 0x0D
   037C 0A                 5328 	.db 0x0A
   037D 50 72 65 73 73 20  5329 	.ascii "Press 'C' to clear the LCD display"
        27 43 27 20 74 6F
        20 63 6C 65 61 72
        20 74 68 65 20 4C
        43 44 20 64 69 73
        70 6C 61 79
   039F 00                 5330 	.db 0x00
   03A0                    5331 __str_26:
   03A0 0D                 5332 	.db 0x0D
   03A1 0A                 5333 	.db 0x0A
   03A2 50 72 65 73 73 20  5334 	.ascii "Press 'Y' to read the contents of DDRAM"
        27 59 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 44 44
        52 41 4D
   03C9 00                 5335 	.db 0x00
   03CA                    5336 __str_27:
   03CA 0D                 5337 	.db 0x0D
   03CB 0A                 5338 	.db 0x0A
   03CC 50 72 65 73 73 20  5339 	.ascii "Press 'G' to read the contents of CGRAM"
        27 47 27 20 74 6F
        20 72 65 61 64 20
        74 68 65 20 63 6F
        6E 74 65 6E 74 73
        20 6F 66 20 43 47
        52 41 4D
   03F3 00                 5340 	.db 0x00
   03F4                    5341 __str_28:
   03F4 0D                 5342 	.db 0x0D
   03F5 0A                 5343 	.db 0x0A
   03F6 49 6E 69 74 69 61  5344 	.ascii "Initializing LCD"
        6C 69 7A 69 6E 67
        20 4C 43 44
   0406 0D                 5345 	.db 0x0D
   0407 0A                 5346 	.db 0x0A
   0408 00                 5347 	.db 0x00
   0409                    5348 __str_29:
   0409 0D                 5349 	.db 0x0D
   040A 0A                 5350 	.db 0x0A
   040B 45 6E 74 65 72 20  5351 	.ascii "Enter a hex address to go to"
        61 20 68 65 78 20
        61 64 64 72 65 73
        73 20 74 6F 20 67
        6F 20 74 6F
   0427 0D                 5352 	.db 0x0D
   0428 0A                 5353 	.db 0x0A
   0429 00                 5354 	.db 0x00
   042A                    5355 __str_30:
   042A 0D                 5356 	.db 0x0D
   042B 0A                 5357 	.db 0x0A
   042C 45 6E 74 65 72 20  5358 	.ascii "Enter a row from 0-3:"
        61 20 72 6F 77 20
        66 72 6F 6D 20 30
        2D 33 3A
   0441 00                 5359 	.db 0x00
   0442                    5360 __str_31:
   0442 0D                 5361 	.db 0x0D
   0443 0A                 5362 	.db 0x0A
   0444 45 6E 74 65 72 20  5363 	.ascii "Enter a col from 0-15:"
        61 20 63 6F 6C 20
        66 72 6F 6D 20 30
        2D 31 35 3A
   045A 00                 5364 	.db 0x00
   045B                    5365 __str_32:
   045B 0D                 5366 	.db 0x0D
   045C 0A                 5367 	.db 0x0A
   045D 4D 6F 76 65 64 20  5368 	.ascii "Moved cursor to new location (%d,%d)"
        63 75 72 73 6F 72
        20 74 6F 20 6E 65
        77 20 6C 6F 63 61
        74 69 6F 6E 20 28
        25 64 2C 25 64 29
   0481 0D                 5369 	.db 0x0D
   0482 0A                 5370 	.db 0x0A
   0483 00                 5371 	.db 0x00
   0484                    5372 __str_33:
   0484 0D                 5373 	.db 0x0D
   0485 0A                 5374 	.db 0x0A
   0486 45 6E 74 65 72 20  5375 	.ascii "Enter a character to put at current address"
        61 20 63 68 61 72
        61 63 74 65 72 20
        74 6F 20 70 75 74
        20 61 74 20 63 75
        72 72 65 6E 74 20
        61 64 64 72 65 73
        73
   04B1 0D                 5376 	.db 0x0D
   04B2 0A                 5377 	.db 0x0A
   04B3 00                 5378 	.db 0x00
   04B4                    5379 __str_34:
   04B4 0D                 5380 	.db 0x0D
   04B5 45 6E 74 65 72 20  5381 	.ascii "Enter a string"
        61 20 73 74 72 69
        6E 67
   04C3 0D                 5382 	.db 0x0D
   04C4 0A                 5383 	.db 0x0A
   04C5 00                 5384 	.db 0x00
   04C6                    5385 __str_35:
   04C6 0D                 5386 	.db 0x0D
   04C7 0A                 5387 	.db 0x0A
   04C8 4C 43 44 20 44 69  5388 	.ascii "LCD Display Cleared!"
        73 70 6C 61 79 20
        43 6C 65 61 72 65
        64 21
   04DC 0D                 5389 	.db 0x0D
   04DD 0A                 5390 	.db 0x0A
   04DE 00                 5391 	.db 0x00
   04DF                    5392 __str_36:
   04DF 0D                 5393 	.db 0x0D
   04E0 0A                 5394 	.db 0x0A
   04E1 00                 5395 	.db 0x00
   04E2                    5396 __str_37:
   04E2 25 78 3A 20        5397 	.ascii "%x: "
   04E6 00                 5398 	.db 0x00
   04E7                    5399 __str_38:
   04E7 25 78 20           5400 	.ascii "%x "
   04EA 00                 5401 	.db 0x00
   04EB                    5402 __str_39:
   04EB 0D                 5403 	.db 0x0D
   04EC 0A                 5404 	.db 0x0A
   04ED 49 6E 20 45 45 50  5405 	.ascii "In EEPROM Mode"
        52 4F 4D 20 4D 6F
        64 65
   04FB 00                 5406 	.db 0x00
   04FC                    5407 __str_40:
   04FC 0D                 5408 	.db 0x0D
   04FD 0A                 5409 	.db 0x0A
   04FE 50 72 65 73 73 20  5410 	.ascii "Press 'W' to write a byte to EEPROM"
        27 57 27 20 74 6F
        20 77 72 69 74 65
        20 61 20 62 79 74
        65 20 74 6F 20 45
        45 50 52 4F 4D
   0521 00                 5411 	.db 0x00
   0522                    5412 __str_41:
   0522 0D                 5413 	.db 0x0D
   0523 0A                 5414 	.db 0x0A
   0524 50 72 65 73 73 20  5415 	.ascii "Press 'R' to read a byte from EEPROM"
        27 52 27 20 74 6F
        20 72 65 61 64 20
        61 20 62 79 74 65
        20 66 72 6F 6D 20
        45 45 50 52 4F 4D
   0548 00                 5416 	.db 0x00
   0549                    5417 __str_42:
   0549 0D                 5418 	.db 0x0D
   054A 0A                 5419 	.db 0x0A
   054B 50 72 65 73 73 20  5420 	.ascii "Press 'L' to display EEPROM data on LCD"
        27 4C 27 20 74 6F
        20 64 69 73 70 6C
        61 79 20 45 45 50
        52 4F 4D 20 64 61
        74 61 20 6F 6E 20
        4C 43 44
   0572 00                 5421 	.db 0x00
   0573                    5422 __str_43:
   0573 0D                 5423 	.db 0x0D
   0574 0A                 5424 	.db 0x0A
   0575 50 72 65 73 73 20  5425 	.ascii "Press 'D' to do a Hex Dump of EEPROM"
        27 44 27 20 74 6F
        20 64 6F 20 61 20
        48 65 78 20 44 75
        6D 70 20 6F 66 20
        45 45 50 52 4F 4D
   0599 00                 5426 	.db 0x00
   059A                    5427 __str_44:
   059A 0D                 5428 	.db 0x0D
   059B 0A                 5429 	.db 0x0A
   059C 50 72 65 73 73 20  5430 	.ascii "Press 'Y' to perform an EEPROM software reset"
        27 59 27 20 74 6F
        20 70 65 72 66 6F
        72 6D 20 61 6E 20
        45 45 50 52 4F 4D
        20 73 6F 66 74 77
        61 72 65 20 72 65
        73 65 74
   05C9 00                 5431 	.db 0x00
   05CA                    5432 __str_45:
   05CA 0D                 5433 	.db 0x0D
   05CB 0A                 5434 	.db 0x0A
   05CC 57 72 69 74 69 6E  5435 	.ascii "Writing to EEPROM..."
        67 20 74 6F 20 45
        45 50 52 4F 4D 2E
        2E 2E
   05E0 00                 5436 	.db 0x00
   05E1                    5437 __str_46:
   05E1 0D                 5438 	.db 0x0D
   05E2 0A                 5439 	.db 0x0A
   05E3 45 6E 74 65 72 20  5440 	.ascii "Enter a byte of data to write to EEPROM:"
        61 20 62 79 74 65
        20 6F 66 20 64 61
        74 61 20 74 6F 20
        77 72 69 74 65 20
        74 6F 20 45 45 50
        52 4F 4D 3A
   060B 00                 5441 	.db 0x00
   060C                    5442 __str_47:
   060C 0D                 5443 	.db 0x0D
   060D 0A                 5444 	.db 0x0A
   060E 57 72 6F 74 65 20  5445 	.ascii "Wrote %X to block %d address 0x%X in EEPROM!"
        25 58 20 74 6F 20
        62 6C 6F 63 6B 20
        25 64 20 61 64 64
        72 65 73 73 20 30
        78 25 58 20 69 6E
        20 45 45 50 52 4F
        4D 21
   063A 0D                 5446 	.db 0x0D
   063B 0A                 5447 	.db 0x0A
   063C 00                 5448 	.db 0x00
   063D                    5449 __str_48:
   063D 0D                 5450 	.db 0x0D
   063E 0A                 5451 	.db 0x0A
   063F 52 65 61 64 69 6E  5452 	.ascii "Reading from EEPROM..."
        67 20 66 72 6F 6D
        20 45 45 50 52 4F
        4D 2E 2E 2E
   0655 00                 5453 	.db 0x00
   0656                    5454 __str_49:
   0656 0D                 5455 	.db 0x0D
   0657 0A                 5456 	.db 0x0A
   0658 52 65 61 64 20 25  5457 	.ascii "Read %X from block %d address 0x%X"
        58 20 66 72 6F 6D
        20 62 6C 6F 63 6B
        20 25 64 20 61 64
        64 72 65 73 73 20
        30 78 25 58
   067A 0D                 5458 	.db 0x0D
   067B 0A                 5459 	.db 0x0A
   067C 00                 5460 	.db 0x00
   067D                    5461 __str_50:
   067D 0D                 5462 	.db 0x0D
   067E 0A                 5463 	.db 0x0A
   067F 45 6E 74 65 72 20  5464 	.ascii "Enter LCD row from 0-3:"
        4C 43 44 20 72 6F
        77 20 66 72 6F 6D
        20 30 2D 33 3A
   0696 00                 5465 	.db 0x00
   0697                    5466 __str_51:
   0697 3A 20              5467 	.ascii ": "
   0699 00                 5468 	.db 0x00
   069A                    5469 __str_52:
   069A 0D                 5470 	.db 0x0D
   069B 0A                 5471 	.db 0x0A
   069C 57 72 6F 74 65 20  5472 	.ascii "Wrote to LCD!"
        74 6F 20 4C 43 44
        21
   06A9 0D                 5473 	.db 0x0D
   06AA 0A                 5474 	.db 0x0A
   06AB 00                 5475 	.db 0x00
   06AC                    5476 __str_53:
   06AC 0D                 5477 	.db 0x0D
   06AD 0A                 5478 	.db 0x0A
   06AE 50 65 72 66 6F 72  5479 	.ascii "Performing an EEPROM data dump"
        6D 69 6E 67 20 61
        6E 20 45 45 50 52
        4F 4D 20 64 61 74
        61 20 64 75 6D 70
   06CC 0D                 5480 	.db 0x0D
   06CD 0A                 5481 	.db 0x0A
   06CE 00                 5482 	.db 0x00
   06CF                    5483 __str_54:
   06CF 0D                 5484 	.db 0x0D
   06D0 0A                 5485 	.db 0x0A
   06D1 45 6E 74 65 72 20  5486 	.ascii "Enter the starting block and address"
        74 68 65 20 73 74
        61 72 74 69 6E 67
        20 62 6C 6F 63 6B
        20 61 6E 64 20 61
        64 64 72 65 73 73
   06F5 00                 5487 	.db 0x00
   06F6                    5488 __str_55:
   06F6 0D                 5489 	.db 0x0D
   06F7 0A                 5490 	.db 0x0A
   06F8 45 6E 74 65 72 20  5491 	.ascii "Enter the ending block and address"
        74 68 65 20 65 6E
        64 69 6E 67 20 62
        6C 6F 63 6B 20 61
        6E 64 20 61 64 64
        72 65 73 73
   071A 00                 5492 	.db 0x00
   071B                    5493 __str_56:
   071B 0D                 5494 	.db 0x0D
   071C 0A                 5495 	.db 0x0A
   071D 49 6E 76 61 6C 69  5496 	.ascii "Invalid addresses. End address must be after start address"
        64 20 61 64 64 72
        65 73 73 65 73 2E
        20 45 6E 64 20 61
        64 64 72 65 73 73
        20 6D 75 73 74 20
        62 65 20 61 66 74
        65 72 20 73 74 61
        72 74 20 61 64 64
        72 65 73 73
   0757 00                 5497 	.db 0x00
   0758                    5498 __str_57:
   0758 0D                 5499 	.db 0x0D
   0759 0A                 5500 	.db 0x0A
   075A 52 65 73 65 74 20  5501 	.ascii "Reset the EEPROM interface"
        74 68 65 20 45 45
        50 52 4F 4D 20 69
        6E 74 65 72 66 61
        63 65
   0774 0D                 5502 	.db 0x0D
   0775 0A                 5503 	.db 0x0A
   0776 00                 5504 	.db 0x00
   0777                    5505 __str_58:
   0777 0D                 5506 	.db 0x0D
   0778 0A                 5507 	.db 0x0A
   0779 49 6E 20 43 6C 6F  5508 	.ascii "In Clock Mode"
        63 6B 20 4D 6F 64
        65
   0786 00                 5509 	.db 0x00
   0787                    5510 __str_59:
   0787 0D                 5511 	.db 0x0D
   0788 0A                 5512 	.db 0x0A
   0789 50 72 65 73 73 20  5513 	.ascii "Press 'T' to stop the clock"
        27 54 27 20 74 6F
        20 73 74 6F 70 20
        74 68 65 20 63 6C
        6F 63 6B
   07A4 00                 5514 	.db 0x00
   07A5                    5515 __str_60:
   07A5 0D                 5516 	.db 0x0D
   07A6 0A                 5517 	.db 0x0A
   07A7 50 72 65 73 73 20  5518 	.ascii "Press 'S' to start the clock again"
        27 53 27 20 74 6F
        20 73 74 61 72 74
        20 74 68 65 20 63
        6C 6F 63 6B 20 61
        67 61 69 6E
   07C9 00                 5519 	.db 0x00
   07CA                    5520 __str_61:
   07CA 0D                 5521 	.db 0x0D
   07CB 0A                 5522 	.db 0x0A
   07CC 50 72 65 73 73 20  5523 	.ascii "Press 'O' to reset the clock to 0"
        27 4F 27 20 74 6F
        20 72 65 73 65 74
        20 74 68 65 20 63
        6C 6F 63 6B 20 74
        6F 20 30
   07ED 00                 5524 	.db 0x00
   07EE                    5525 __str_62:
   07EE 0D                 5526 	.db 0x0D
   07EF 0A                 5527 	.db 0x0A
   07F0 50 72 65 73 73 20  5528 	.ascii "Press 'N' to create a new alarm"
        27 4E 27 20 74 6F
        20 63 72 65 61 74
        65 20 61 20 6E 65
        77 20 61 6C 61 72
        6D
   080F 00                 5529 	.db 0x00
   0810                    5530 __str_63:
   0810 0D                 5531 	.db 0x0D
   0811 0A                 5532 	.db 0x0A
   0812 50 72 65 73 73 20  5533 	.ascii "Press 'C' to view count for each alarm"
        27 43 27 20 74 6F
        20 76 69 65 77 20
        63 6F 75 6E 74 20
        66 6F 72 20 65 61
        63 68 20 61 6C 61
        72 6D
   0838 00                 5534 	.db 0x00
   0839                    5535 __str_64:
   0839 0D                 5536 	.db 0x0D
   083A 0A                 5537 	.db 0x0A
   083B 50 72 65 73 73 20  5538 	.ascii "Press 'D' to disable an alarm"
        27 44 27 20 74 6F
        20 64 69 73 61 62
        6C 65 20 61 6E 20
        61 6C 61 72 6D
   0858 00                 5539 	.db 0x00
   0859                    5540 __str_65:
   0859 0D                 5541 	.db 0x0D
   085A 0A                 5542 	.db 0x0A
   085B 50 72 65 73 73 20  5543 	.ascii "Press 'E' to reenable an alarm"
        27 45 27 20 74 6F
        20 72 65 65 6E 61
        62 6C 65 20 61 6E
        20 61 6C 61 72 6D
   0879 00                 5544 	.db 0x00
   087A                    5545 __str_66:
   087A 0D                 5546 	.db 0x0D
   087B 0A                 5547 	.db 0x0A
   087C 53 74 6F 70 70 69  5548 	.ascii "Stopping the clock"
        6E 67 20 74 68 65
        20 63 6C 6F 63 6B
   088E 00                 5549 	.db 0x00
   088F                    5550 __str_67:
   088F 0D                 5551 	.db 0x0D
   0890 0A                 5552 	.db 0x0A
   0891 53 74 61 72 74 69  5553 	.ascii "Starting the clock"
        6E 67 20 74 68 65
        20 63 6C 6F 63 6B
   08A3 00                 5554 	.db 0x00
   08A4                    5555 __str_68:
   08A4 0D                 5556 	.db 0x0D
   08A5 0A                 5557 	.db 0x0A
   08A6 52 65 73 65 74 74  5558 	.ascii "Resetting the clock"
        69 6E 67 20 74 68
        65 20 63 6C 6F 63
        6B
   08B9 00                 5559 	.db 0x00
   08BA                    5560 __str_69:
   08BA 0D                 5561 	.db 0x0D
   08BB 0A                 5562 	.db 0x0A
   08BC 45 6E 74 65 72 20  5563 	.ascii "Enter alarm time in seconds:"
        61 6C 61 72 6D 20
        74 69 6D 65 20 69
        6E 20 73 65 63 6F
        6E 64 73 3A
   08D8 0D                 5564 	.db 0x0D
   08D9 0A                 5565 	.db 0x0A
   08DA 00                 5566 	.db 0x00
   08DB                    5567 __str_70:
   08DB 0D                 5568 	.db 0x0D
   08DC 0A                 5569 	.db 0x0A
   08DD 41 6C 61 72 6D 20  5570 	.ascii "Alarm %d: %u <Enabled>"
        25 64 3A 20 25 75
        20 3C 45 6E 61 62
        6C 65 64 3E
   08F3 00                 5571 	.db 0x00
   08F4                    5572 __str_71:
   08F4 0D                 5573 	.db 0x0D
   08F5 0A                 5574 	.db 0x0A
   08F6 41 6C 61 72 6D 20  5575 	.ascii "Alarm %d: %u <Disabled>"
        25 64 3A 20 25 75
        20 3C 44 69 73 61
        62 6C 65 64 3E
   090D 00                 5576 	.db 0x00
   090E                    5577 __str_72:
   090E 0D                 5578 	.db 0x0D
   090F 0A                 5579 	.db 0x0A
   0910 45 6E 74 65 72 20  5580 	.ascii "Enter an alarm number from 0-2 to disable:"
        61 6E 20 61 6C 61
        72 6D 20 6E 75 6D
        62 65 72 20 66 72
        6F 6D 20 30 2D 32
        20 74 6F 20 64 69
        73 61 62 6C 65 3A
   093A 00                 5581 	.db 0x00
   093B                    5582 __str_73:
   093B 0D                 5583 	.db 0x0D
   093C 0A                 5584 	.db 0x0A
   093D 41 6C 61 72 6D 20  5585 	.ascii "Alarm %d disabled"
        25 64 20 64 69 73
        61 62 6C 65 64
   094E 0D                 5586 	.db 0x0D
   094F 0A                 5587 	.db 0x0A
   0950 00                 5588 	.db 0x00
   0951                    5589 __str_74:
   0951 0D                 5590 	.db 0x0D
   0952 0A                 5591 	.db 0x0A
   0953 45 6E 74 65 72 20  5592 	.ascii "Enter an alarm number from 0-2 to enable:"
        61 6E 20 61 6C 61
        72 6D 20 6E 75 6D
        62 65 72 20 66 72
        6F 6D 20 30 2D 32
        20 74 6F 20 65 6E
        61 62 6C 65 3A
   097C 00                 5593 	.db 0x00
   097D                    5594 __str_75:
   097D 0D                 5595 	.db 0x0D
   097E 0A                 5596 	.db 0x0A
   097F 41 6C 61 72 6D 20  5597 	.ascii "Alarm %d enabled"
        25 64 20 65 6E 61
        62 6C 65 64
   098F 0D                 5598 	.db 0x0D
   0990 0A                 5599 	.db 0x0A
   0991 00                 5600 	.db 0x00
   0992                    5601 __str_76:
   0992 0D                 5602 	.db 0x0D
   0993 0A                 5603 	.db 0x0A
   0994 2A 2A 2A 2A 2A 2A  5604 	.ascii "***************"
        2A 2A 2A 2A 2A 2A
        2A 2A 2A
   09A3 00                 5605 	.db 0x00
   09A4                    5606 __str_77:
   09A4 0D                 5607 	.db 0x0D
   09A5 0A                 5608 	.db 0x0A
   09A6 20 20 20 20 4D 65  5609 	.ascii "    Menu"
        6E 75
   09AE 0D                 5610 	.db 0x0D
   09AF 0A                 5611 	.db 0x0A
   09B0 00                 5612 	.db 0x00
   09B1                    5613 __str_78:
   09B1 0D                 5614 	.db 0x0D
   09B2 0A                 5615 	.db 0x0A
   09B3 50 72 65 73 73 20  5616 	.ascii "Press 'H' to show the help menu"
        27 48 27 20 74 6F
        20 73 68 6F 77 20
        74 68 65 20 68 65
        6C 70 20 6D 65 6E
        75
   09D2 00                 5617 	.db 0x00
   09D3                    5618 __str_79:
   09D3 0D                 5619 	.db 0x0D
   09D4 0A                 5620 	.db 0x0A
   09D5 50 72 65 73 73 20  5621 	.ascii "Press 'L' to enter LCD control mode"
        27 4C 27 20 74 6F
        20 65 6E 74 65 72
        20 4C 43 44 20 63
        6F 6E 74 72 6F 6C
        20 6D 6F 64 65
   09F8 00                 5622 	.db 0x00
   09F9                    5623 __str_80:
   09F9 0D                 5624 	.db 0x0D
   09FA 0A                 5625 	.db 0x0A
   09FB 50 72 65 73 73 20  5626 	.ascii "Press 'E' to enter EEPROM control mode"
        27 45 27 20 74 6F
        20 65 6E 74 65 72
        20 45 45 50 52 4F
        4D 20 63 6F 6E 74
        72 6F 6C 20 6D 6F
        64 65
   0A21 00                 5627 	.db 0x00
   0A22                    5628 __str_81:
   0A22 0D                 5629 	.db 0x0D
   0A23 0A                 5630 	.db 0x0A
   0A24 50 72 65 73 73 20  5631 	.ascii "Press 'C' to enter Clock control mode"
        27 43 27 20 74 6F
        20 65 6E 74 65 72
        20 43 6C 6F 63 6B
        20 63 6F 6E 74 72
        6F 6C 20 6D 6F 64
        65
   0A49 00                 5632 	.db 0x00
   0A4A                    5633 __str_82:
   0A4A 0D                 5634 	.db 0x0D
   0A4B 0A                 5635 	.db 0x0A
   0A4C 50 72 65 73 73 20  5636 	.ascii "Press 'G' to enter Custom Code control mode"
        27 47 27 20 74 6F
        20 65 6E 74 65 72
        20 43 75 73 74 6F
        6D 20 43 6F 64 65
        20 63 6F 6E 74 72
        6F 6C 20 6D 6F 64
        65
   0A77 00                 5637 	.db 0x00
   0A78                    5638 __str_83:
   0A78 0D                 5639 	.db 0x0D
   0A79 0A                 5640 	.db 0x0A
   0A7A 50 72 65 73 73 20  5641 	.ascii "Press 'I' to enter infinite loop to test watchdog"
        27 49 27 20 74 6F
        20 65 6E 74 65 72
        20 69 6E 66 69 6E
        69 74 65 20 6C 6F
        6F 70 20 74 6F 20
        74 65 73 74 20 77
        61 74 63 68 64 6F
        67
   0AAB 00                 5642 	.db 0x00
   0AAC                    5643 __str_84:
   0AAC 0D                 5644 	.db 0x0D
   0AAD 0A                 5645 	.db 0x0A
   0AAE 50 72 65 73 73 20  5646 	.ascii "Press 'P' to enter PCF I/O expander control mode"
        27 50 27 20 74 6F
        20 65 6E 74 65 72
        20 50 43 46 20 49
        2F 4F 20 65 78 70
        61 6E 64 65 72 20
        63 6F 6E 74 72 6F
        6C 20 6D 6F 64 65
   0ADE 0D                 5647 	.db 0x0D
   0ADF 0A                 5648 	.db 0x0A
   0AE0 00                 5649 	.db 0x00
   0AE1                    5650 __str_85:
   0AE1 0D                 5651 	.db 0x0D
   0AE2 0A                 5652 	.db 0x0A
   0AE3 41 6C 61 72 6D 20  5653 	.ascii "Alarm %d going off, you must press 'D' to disable it"
        25 64 20 67 6F 69
        6E 67 20 6F 66 66
        2C 20 79 6F 75 20
        6D 75 73 74 20 70
        72 65 73 73 20 27
        44 27 20 74 6F 20
        64 69 73 61 62 6C
        65 20 69 74
   0B17 0D                 5654 	.db 0x0D
   0B18 0A                 5655 	.db 0x0A
   0B19 00                 5656 	.db 0x00
   0B1A                    5657 __str_86:
   0B1A 44 69 73 61 62 6C  5658 	.ascii "Disable Alarm!"
        65 20 41 6C 61 72
        6D 21
   0B28 00                 5659 	.db 0x00
   0B29                    5660 __str_87:
   0B29 0D                 5661 	.db 0x0D
   0B2A 0A                 5662 	.db 0x0A
   0B2B 41 6C 61 72 6D 20  5663 	.ascii "Alarm %d disabled!"
        25 64 20 64 69 73
        61 62 6C 65 64 21
   0B3D 0D                 5664 	.db 0x0D
   0B3E 0A                 5665 	.db 0x0A
   0B3F 00                 5666 	.db 0x00
   0B40                    5667 __str_88:
   0B40 20 20 20 20 20 20  5668 	.ascii "              "
        20 20 20 20 20 20
        20 20
   0B4E 00                 5669 	.db 0x00
                           5670 	.area XINIT   (CODE)
   0000                    5671 __xinit__mode:
   0000 00                 5672 	.db #0x00
   0001                    5673 __xinit__ExpiredAlarms:
   0001 00                 5674 	.db #0x00
   0002 00                 5675 	.db #0x00
   0003 00                 5676 	.db #0x00
